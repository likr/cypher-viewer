!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=97)}([function(t,e,n){"use strict";var r="http://www.w3.org/1999/xhtml",o={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},i=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),o.hasOwnProperty(e)?{space:o[e],local:t}:t};var a=function(t){var e=i(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r&&e.documentElement.namespaceURI===r?e.createElement(t):e.createElementNS(n,t)}})(e)};function u(){}var s=function(t){return null==t?u:function(){return this.querySelector(t)}};function c(){return[]}var l=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},f=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var d=document.documentElement;if(!d.matches){var h=d.webkitMatchesSelector||d.msMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector;f=function(t){return function(){return h.call(this,t)}}}}var p=f,y=function(t){return new Array(t.length)};function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var v="$";function m(t,e,n,r,o,i){for(var a,u=0,s=e.length,c=i.length;u<c;++u)(a=e[u])?(a.__data__=i[u],r[u]=a):n[u]=new g(t,i[u]);for(;u<s;++u)(a=e[u])&&(o[u]=a)}function b(t,e,n,r,o,i,a){var u,s,c,l={},f=e.length,d=i.length,h=new Array(f);for(u=0;u<f;++u)(s=e[u])&&(h[u]=c=v+a.call(s,s.__data__,u,e),c in l?o[u]=s:l[c]=s);for(u=0;u<d;++u)(s=l[c=v+a.call(t,i[u],u,i)])?(r[u]=s,s.__data__=i[u],l[c]=null):n[u]=new g(t,i[u]);for(u=0;u<f;++u)(s=e[u])&&l[h[u]]===s&&(o[u]=s)}function _(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var w=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t,e){return t.style.getPropertyValue(e)||w(t).getComputedStyle(t,null).getPropertyValue(e)}function x(t){return t.trim().split(/^|\s+/)}function k(t){return t.classList||new S(t)}function S(t){this._node=t,this._names=x(t.getAttribute("class")||"")}function M(t,e){for(var n=k(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function C(t,e){for(var n=k(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}S.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function A(){this.textContent=""}function P(){this.innerHTML=""}function T(){this.nextSibling&&this.parentNode.appendChild(this)}function N(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function O(){return null}function D(){var t=this.parentNode;t&&t.removeChild(this)}function R(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function I(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var L={},F=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(L={mouseenter:"mouseover",mouseleave:"mouseout"}));function B(t,e,n){return t=U(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function U(t,e,n){return function(r){var o=F;F=r;try{t.call(this,this.__data__,e,n)}finally{F=o}}}function j(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function z(t,e,n){var r=L.hasOwnProperty(t.type)?B:U;return function(o,i,a){var u,s=this.__on,c=r(e,i,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=n),void(u.value=e);this.addEventListener(t.type,c,n),u={type:t.type,name:t.name,value:e,listener:c,capture:n},s?s.push(u):this.__on=[u]}}function V(t,e,n,r){var o=F;t.sourceEvent=F,F=t;try{return e.apply(n,r)}finally{F=o}}function W(t,e,n){var r=w(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}var Y=[null];function q(t,e){this._groups=t,this._parents=e}function H(){return new q([[document.documentElement]],Y)}q.prototype=H.prototype={constructor:q,select:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=e[o],c=u.length,l=r[o]=new Array(c),f=0;f<c;++f)(i=u[f])&&(a=t.call(i,i.__data__,f,u))&&("__data__"in i&&(a.__data__=i.__data__),l[f]=a);return new q(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var a,u=e[i],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),o.push(a));return new q(r,o)},filter:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a=e[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new q(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),c=-1,this.each(function(t){h[++c]=t}),h;var n=e?b:m,r=this._parents,o=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=o.length,a=new Array(i),u=new Array(i),s=new Array(i),c=0;c<i;++c){var l=r[c],f=o[c],d=f.length,h=t.call(l,l&&l.__data__,c,r),p=h.length,y=u[c]=new Array(p),g=a[c]=new Array(p);n(l,f,y,g,s[c]=new Array(d),h,e);for(var v,_,w=0,E=0;w<p;++w)if(v=y[w]){for(w>=E&&(E=w+1);!(_=g[E])&&++E<p;);v._next=_||null}}return(a=new q(a,r))._enter=u,a._exit=s,a},enter:function(){return new q(this._enter||this._groups.map(y),this._parents)},exit:function(){return new q(this._exit||this._groups.map(y),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=e[u],l=n[u],f=c.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(d[h]=s);for(;u<r;++u)a[u]=e[u];return new q(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=_);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],s=u.length,c=o[i]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(e)}return new q(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],a=0,u=i.length;a<u;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):E(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=x(t+"");if(arguments.length<2){for(var r=k(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?M:C)(this,t)}}:e?function(t){return function(){M(this,t)}}:function(t){return function(){C(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?A:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?P:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(T)},lower:function(){return this.each(N)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?O:"function"==typeof e?e:s(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(D)},clone:function(t){return this.select(t?I:R)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),a=i.length;if(!(arguments.length<2)){for(u=e?z:j,null==n&&(n=!1),r=0;r<a;++r)this.each(u(i[r],e,n));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((o=i[r]).type===s.type&&o.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return W(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return W(this,t,e)}})(t,e))}};var G=H,X=function(t){return"string"==typeof t?new q([[document.querySelector(t)]],[document.documentElement]):new q([[t]],Y)},K=function(t){return X(a(t).call(document.documentElement))},$=0;function Q(){return new Z}function Z(){this._="@"+(++$).toString(36)}Z.prototype=Q.prototype={constructor:Z,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var J=function(){for(var t,e=F;t=e.sourceEvent;)e=t;return e},tt=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]},et=function(t){var e=J();return e.changedTouches&&(e=e.changedTouches[0]),tt(t,e)},nt=function(t){return"string"==typeof t?new q([document.querySelectorAll(t)],[document.documentElement]):new q([null==t?[]:t],Y)},rt=function(t,e,n){arguments.length<3&&(n=e,e=J().changedTouches);for(var r,o=0,i=e?e.length:0;o<i;++o)if((r=e[o]).identifier===n)return tt(t,r);return null},ot=function(t,e){null==e&&(e=J().touches);for(var n=0,r=e?e.length:0,o=new Array(r);n<r;++n)o[n]=tt(t,e[n]);return o};n.d(e,"b",function(){return K}),n.d(e,"c",function(){return a}),n.d(e,"f",function(){return Q}),n.d(e,"g",function(){return p}),n.d(e,"h",function(){return et}),n.d(e,"i",function(){return i}),n.d(e,"j",function(){return o}),n.d(e,"a",function(){return tt}),n.d(e,"k",function(){return X}),n.d(e,"l",function(){return nt}),n.d(e,"m",function(){return G}),n.d(e,"n",function(){return s}),n.d(e,"o",function(){return l}),n.d(e,"p",function(){return E}),n.d(e,"q",function(){return rt}),n.d(e,"r",function(){return ot}),n.d(e,"s",function(){return w}),n.d(e,"e",function(){return F}),n.d(e,"d",function(){return V})},function(t,e,n){"use strict";var r=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function o(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function i(){}var a="\\s*([+-]?\\d+)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",s="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",c=/^#([0-9a-f]{3})$/,l=/^#([0-9a-f]{6})$/,f=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),d=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),h=new RegExp("^rgba\\("+[a,a,a,u]+"\\)$"),p=new RegExp("^rgba\\("+[s,s,s,u]+"\\)$"),y=new RegExp("^hsl\\("+[u,s,s]+"\\)$"),g=new RegExp("^hsla\\("+[u,s,s,u]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function m(t){var e;return t=(t+"").trim().toLowerCase(),(e=c.exec(t))?new x((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=l.exec(t))?b(parseInt(e[1],16)):(e=f.exec(t))?new x(e[1],e[2],e[3],1):(e=d.exec(t))?new x(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=h.exec(t))?_(e[1],e[2],e[3],e[4]):(e=p.exec(t))?_(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=y.exec(t))?S(e[1],e[2]/100,e[3]/100,1):(e=g.exec(t))?S(e[1],e[2]/100,e[3]/100,e[4]):v.hasOwnProperty(t)?b(v[t]):"transparent"===t?new x(NaN,NaN,NaN,0):null}function b(t){return new x(t>>16&255,t>>8&255,255&t,1)}function _(t,e,n,r){return r<=0&&(t=e=n=NaN),new x(t,e,n,r)}function w(t){return t instanceof i||(t=m(t)),t?new x((t=t.rgb()).r,t.g,t.b,t.opacity):new x}function E(t,e,n,r){return 1===arguments.length?w(t):new x(t,e,n,null==r?1:r)}function x(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function k(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function S(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new C(t,e,n,r)}function M(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof C)return new C(t.h,t.s,t.l,t.opacity);if(t instanceof i||(t=m(t)),!t)return new C;if(t instanceof C)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),a=Math.max(e,n,r),u=NaN,s=a-o,c=(a+o)/2;return s?(u=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=c<.5?a+o:2-a-o,u*=60):s=c>0&&c<1?0:u,new C(u,s,c,t.opacity)}(t):new C(t,e,n,null==r?1:r)}function C(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function A(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}r(i,m,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),r(x,E,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new x(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new x(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+k(this.r)+k(this.g)+k(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),r(C,M,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new C(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new C(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new x(A(t>=240?t-240:t+120,o,r),A(t,o,r),A(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var P=Math.PI/180,T=180/Math.PI,N=.96422,O=1,D=.82521,R=4/29,I=6/29,L=3*I*I,F=I*I*I;function B(t){if(t instanceof z)return new z(t.l,t.a,t.b,t.opacity);if(t instanceof K){if(isNaN(t.h))return new z(t.l,0,0,t.opacity);var e=t.h*P;return new z(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof x||(t=w(t));var n,r,o=q(t.r),i=q(t.g),a=q(t.b),u=V((.2225045*o+.7168786*i+.0606169*a)/O);return o===i&&i===a?n=r=u:(n=V((.4360747*o+.3850649*i+.1430804*a)/N),r=V((.0139322*o+.0971045*i+.7141733*a)/D)),new z(116*u-16,500*(n-u),200*(u-r),t.opacity)}function U(t,e){return new z(t,0,0,null==e?1:e)}function j(t,e,n,r){return 1===arguments.length?B(t):new z(t,e,n,null==r?1:r)}function z(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function V(t){return t>F?Math.pow(t,1/3):t/L+R}function W(t){return t>I?t*t*t:L*(t-R)}function Y(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function q(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function H(t){if(t instanceof K)return new K(t.h,t.c,t.l,t.opacity);if(t instanceof z||(t=B(t)),0===t.a&&0===t.b)return new K(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*T;return new K(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function G(t,e,n,r){return 1===arguments.length?H(t):new K(n,e,t,null==r?1:r)}function X(t,e,n,r){return 1===arguments.length?H(t):new K(t,e,n,null==r?1:r)}function K(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}r(z,j,o(i,{brighter:function(t){return new z(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new z(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new x(Y(3.1338561*(e=N*W(e))-1.6168667*(t=O*W(t))-.4906146*(n=D*W(n))),Y(-.9787684*e+1.9161415*t+.033454*n),Y(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),r(K,X,o(i,{brighter:function(t){return new K(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new K(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return B(this).rgb()}}));var $=-.14861,Q=1.78277,Z=-.29227,J=-.90649,tt=1.97294,et=tt*J,nt=tt*Q,rt=Q*Z-J*$;function ot(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof it)return new it(t.h,t.s,t.l,t.opacity);t instanceof x||(t=w(t));var e=t.r/255,n=t.g/255,r=t.b/255,o=(rt*r+et*e-nt*n)/(rt+et-nt),i=r-o,a=(tt*(n-o)-Z*i)/J,u=Math.sqrt(a*a+i*i)/(tt*o*(1-o)),s=u?Math.atan2(a,i)*T-120:NaN;return new it(s<0?s+360:s,u,o,t.opacity)}(t):new it(t,e,n,null==r?1:r)}function it(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}r(it,ot,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new it(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new it(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*P,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),o=Math.sin(t);return new x(255*(e+n*($*r+Q*o)),255*(e+n*(Z*r+J*o)),255*(e+n*(tt*r)),this.opacity)}})),n.d(e,"a",function(){return m}),n.d(e,"h",function(){return E}),n.d(e,"e",function(){return M}),n.d(e,"f",function(){return j}),n.d(e,"d",function(){return X}),n.d(e,"g",function(){return G}),n.d(e,"c",function(){return U}),n.d(e,"b",function(){return ot})},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(1);function o(t,e,n,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*e+(4-6*i+3*a)*n+(1+3*t+3*i-3*a)*r+a*o)/6}var i=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],u=r>0?t[r-1]:2*i-a,s=r<e-1?t[r+2]:2*a-i;return o((n-r/e)*e,u,i,a,s)}},a=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],u=t[(r+1)%e],s=t[(r+2)%e];return o((n-r/e)*e,i,a,u,s)}},u=function(t){return function(){return t}};function s(t,e){return function(n){return t+n*e}}function c(t,e){var n=e-t;return n?s(t,n>180||n<-180?n-360*Math.round(n/360):n):u(isNaN(t)?e:t)}function l(t){return 1==(t=+t)?f:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):u(isNaN(e)?n:e)}}function f(t,e){var n=e-t;return n?s(t,n):u(isNaN(t)?e:t)}var d=function t(e){var n=l(e);function o(t,e){var o=n((t=Object(r.h)(t)).r,(e=Object(r.h)(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),u=f(t.opacity,e.opacity);return function(e){return t.r=o(e),t.g=i(e),t.b=a(e),t.opacity=u(e),t+""}}return o.gamma=t,o}(1);function h(t){return function(e){var n,o,i=e.length,a=new Array(i),u=new Array(i),s=new Array(i);for(n=0;n<i;++n)o=Object(r.h)(e[n]),a[n]=o.r||0,u[n]=o.g||0,s[n]=o.b||0;return a=t(a),u=t(u),s=t(s),o.opacity=1,function(t){return o.r=a(t),o.g=u(t),o.b=s(t),o+""}}}var p=h(i),y=h(a),g=function(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),a=new Array(r);for(n=0;n<o;++n)i[n]=C(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<o;++n)a[n]=i[n](t);return a}},v=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},m=function(t,e){return e-=t=+t,function(n){return t+e*n}},b=function(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=C(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}},_=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,w=new RegExp(_.source,"g");var E,x,k,S,M=function(t,e){var n,r,o,i=_.lastIndex=w.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=_.exec(t))&&(r=w.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:m(n,r)})),i=w.lastIndex;return i<e.length&&(o=e.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},C=function(t,e){var n,o=typeof e;return null==e||"boolean"===o?u(e):("number"===o?m:"string"===o?(n=Object(r.a)(e))?(e=n,d):M:e instanceof r.a?d:e instanceof Date?v:Array.isArray(e)?g:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?b:m)(t,e)},A=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},P=function(t,e){var n=c(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},T=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},N=180/Math.PI,O={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},D=function(t,e,n,r,o,i){var a,u,s;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,s/=u),t*r<e*n&&(t=-t,e=-e,s=-s,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*N,skewX:Math.atan(s)*N,scaleX:a,scaleY:u}};function R(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var u=[],s=[];return i=t(i),a=t(a),function(t,r,o,i,a,u){if(t!==o||r!==i){var s=a.push("translate(",null,e,null,n);u.push({i:s-4,x:m(t,o)},{i:s-2,x:m(r,i)})}else(o||i)&&a.push("translate("+o+e+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,u,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:m(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,a.rotate,u,s),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:m(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,a.skewX,u,s),function(t,e,n,r,i,a){if(t!==n||e!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:m(t,n)},{i:u-2,x:m(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,s),i=a=null,function(t){for(var e,n=-1,r=s.length;++n<r;)u[(e=s[n]).i]=e.x(t);return u.join("")}}}var I=R(function(t){return"none"===t?O:(E||(E=document.createElement("DIV"),x=document.documentElement,k=document.defaultView),E.style.transform=t,t=k.getComputedStyle(x.appendChild(E),null).getPropertyValue("transform"),x.removeChild(E),t=t.slice(7,-1).split(","),D(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),L=R(function(t){return null==t?O:(S||(S=document.createElementNS("http://www.w3.org/2000/svg","g")),S.setAttribute("transform",t),(t=S.transform.baseVal.consolidate())?(t=t.matrix,D(t.a,t.b,t.c,t.d,t.e,t.f)):O)},", ",")",")"),F=Math.SQRT2;function B(t){return((t=Math.exp(t))+1/t)/2}var U=function(t,e){var n,r,o=t[0],i=t[1],a=t[2],u=e[0],s=e[1],c=e[2],l=u-o,f=s-i,d=l*l+f*f;if(d<1e-12)r=Math.log(c/a)/F,n=function(t){return[o+t*l,i+t*f,a*Math.exp(F*t*r)]};else{var h=Math.sqrt(d),p=(c*c-a*a+4*d)/(2*a*2*h),y=(c*c-a*a-4*d)/(2*c*2*h),g=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(y*y+1)-y);r=(v-g)/F,n=function(t){var e=t*r,n=B(g),u=a/(2*h)*(n*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(F*e+g)-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[o+u*l,i+u*f,a*n/B(F*e+g)]}}return n.duration=1e3*r,n};function j(t){return function(e,n){var o=t((e=Object(r.e)(e)).h,(n=Object(r.e)(n)).h),i=f(e.s,n.s),a=f(e.l,n.l),u=f(e.opacity,n.opacity);return function(t){return e.h=o(t),e.s=i(t),e.l=a(t),e.opacity=u(t),e+""}}}var z=j(c),V=j(f);function W(t,e){var n=f((t=Object(r.f)(t)).l,(e=Object(r.f)(e)).l),o=f(t.a,e.a),i=f(t.b,e.b),a=f(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=o(e),t.b=i(e),t.opacity=a(e),t+""}}function Y(t){return function(e,n){var o=t((e=Object(r.d)(e)).h,(n=Object(r.d)(n)).h),i=f(e.c,n.c),a=f(e.l,n.l),u=f(e.opacity,n.opacity);return function(t){return e.h=o(t),e.c=i(t),e.l=a(t),e.opacity=u(t),e+""}}}var q=Y(c),H=Y(f);function G(t){return function e(n){function o(e,o){var i=t((e=Object(r.b)(e)).h,(o=Object(r.b)(o)).h),a=f(e.s,o.s),u=f(e.l,o.l),s=f(e.opacity,o.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=u(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,o.gamma=e,o}(1)}var X=G(c),K=G(f);function $(t,e){for(var n=0,r=e.length-1,o=e[0],i=new Array(r<0?0:r);n<r;)i[n]=t(o,o=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return i[e](t-e)}}var Q=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n};n.d(e,"a",function(){return C}),n.d(e,"b",function(){return g}),n.d(e,"c",function(){return i}),n.d(e,"d",function(){return a}),n.d(e,"g",function(){return v}),n.d(e,"h",function(){return A}),n.d(e,"m",function(){return P}),n.d(e,"o",function(){return m}),n.d(e,"p",function(){return b}),n.d(e,"t",function(){return T}),n.d(e,"u",function(){return M}),n.d(e,"v",function(){return I}),n.d(e,"w",function(){return L}),n.d(e,"x",function(){return U}),n.d(e,"q",function(){return d}),n.d(e,"r",function(){return p}),n.d(e,"s",function(){return y}),n.d(e,"k",function(){return z}),n.d(e,"l",function(){return V}),n.d(e,"n",function(){return W}),n.d(e,"i",function(){return q}),n.d(e,"j",function(){return H}),n.d(e,"e",function(){return X}),n.d(e,"f",function(){return K}),n.d(e,"y",function(){return $}),n.d(e,"z",function(){return Q})},function(t,e,n){"use strict";t.exports=function(t){for(var e=arguments.length-1,n="Minified React error #"+t+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(t,e,n){"use strict";var r=n(14);t.exports=r},function(t,e,n){"use strict";var r=n(4),o=n(22),i=n(66),a=(n(2),o.ID_ATTRIBUTE_NAME),u=i,s="__reactInternalInstance$"+Math.random().toString(36).slice(2);function c(t,e){return 1===t.nodeType&&t.getAttribute(a)===String(e)||8===t.nodeType&&t.nodeValue===" react-text: "+e+" "||8===t.nodeType&&t.nodeValue===" react-empty: "+e+" "}function l(t){for(var e;e=t._renderedComponent;)t=e;return t}function f(t,e){var n=l(t);n._hostNode=e,e[s]=n}function d(t,e){if(!(t._flags&u.hasCachedChildNodes)){var n=t._renderedChildren,o=e.firstChild;t:for(var i in n)if(n.hasOwnProperty(i)){var a=n[i],s=l(a)._domID;if(0!==s){for(;null!==o;o=o.nextSibling)if(c(o,s)){f(a,o);continue t}r("32",s)}}t._flags|=u.hasCachedChildNodes}}function h(t){if(t[s])return t[s];for(var e,n,r=[];!t[s];){if(r.push(t),!t.parentNode)return null;t=t.parentNode}for(;t&&(n=t[s]);t=r.pop())e=n,r.length&&d(n,t);return e}var p={getClosestInstanceFromNode:h,getInstanceFromNode:function(t){var e=h(t);return null!=e&&e._hostNode===t?e:null},getNodeFromInstance:function(t){if(void 0===t._hostNode&&r("33"),t._hostNode)return t._hostNode;for(var e=[];!t._hostNode;)e.push(t),t._hostParent||r("34"),t=t._hostParent;for(;e.length;t=e.pop())d(t,t._hostNode);return t._hostNode},precacheChildNodes:d,precacheNode:f,uncacheNode:function(t){var e=t._hostNode;e&&(delete e[s],t._hostNode=null)}};t.exports=p},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},function(t,e,n){"use strict";var r={value:function(){}};function o(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new i(r)}function i(t){this._=t}function a(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function u(t,e,n){for(var o=0,i=t.length;o<i;++o)if(t[o].name===e){t[o]=r,t=t.slice(0,o).concat(t.slice(o+1));break}return null!=n&&t.push({name:e,value:n}),t}i.prototype=o.prototype={constructor:i,on:function(t,e){var n,r=this._,o=function(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=u(r[n],t.name,e);else if(null==e)for(n in r)r[n]=u(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=a(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new i(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var s=o;n.d(e,"a",function(){return s})},function(t,e,n){"use strict";t.exports={debugTool:null}},function(t,e,n){"use strict";var r,o,i=0,a=0,u=0,s=1e3,c=0,l=0,f=0,d="object"==typeof performance&&performance.now?performance:Date,h="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function p(){return l||(h(y),l=d.now()+f)}function y(){l=0}function g(){this._call=this._time=this._next=null}function v(t,e,n){var r=new g;return r.restart(t,e,n),r}function m(){p(),++i;for(var t,e=r;e;)(t=l-e._time)>=0&&e._call.call(null,t),e=e._next;--i}function b(){l=(c=d.now())+f,i=a=0;try{m()}finally{i=0,function(){var t,e,n=r,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:r=e);o=t,w(i)}(),l=0}}function _(){var t=d.now(),e=t-c;e>s&&(f-=e,c=t)}function w(t){i||(a&&(a=clearTimeout(a)),t-l>24?(t<1/0&&(a=setTimeout(b,t-d.now()-f)),u&&(u=clearInterval(u))):(u||(c=d.now(),u=setInterval(_,s)),i=1,h(b)))}g.prototype=v.prototype={constructor:g,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?p():+n)+(null==e?0:+e),this._next||o===this||(o?o._next=this:r=this,o=this),this._call=t,this._time=n,w()},stop:function(){this._call&&(this._call=null,this._time=1/0,w())}};var E=function(t,e,n){var r=new g;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},x=function(t,e,n){var r=new g,o=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?p():+n,r.restart(function i(a){a+=o,r.restart(i,o+=e,n),t(a)},e,n),r)};n.d(e,"b",function(){return p}),n.d(e,"d",function(){return v}),n.d(e,"e",function(){return m}),n.d(e,"c",function(){return E}),n.d(e,"a",function(){return x})},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(70),a=n(18),u=n(71),s=n(23),c=n(34),l=(n(2),[]),f=0,d=i.getPooled(),h=!1,p=null;function y(){w.ReactReconcileTransaction&&p||r("123")}var g=[{initialize:function(){this.dirtyComponentsLength=l.length},close:function(){this.dirtyComponentsLength!==l.length?(l.splice(0,this.dirtyComponentsLength),_()):l.length=0}},{initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}}];function v(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=i.getPooled(),this.reconcileTransaction=w.ReactReconcileTransaction.getPooled(!0)}function m(t,e){return t._mountOrder-e._mountOrder}function b(t){var e=t.dirtyComponentsLength;e!==l.length&&r("124",e,l.length),l.sort(m),f++;for(var n=0;n<e;n++){var o,i=l[n],a=i._pendingCallbacks;if(i._pendingCallbacks=null,u.logTopLevelRenders){var c=i;i._currentElement.type.isReactTopLevelWrapper&&(c=i._renderedComponent),o="React update: "+c.getName(),console.time(o)}if(s.performUpdateIfNecessary(i,t.reconcileTransaction,f),o&&console.timeEnd(o),a)for(var d=0;d<a.length;d++)t.callbackQueue.enqueue(a[d],i.getPublicInstance())}}o(v.prototype,c,{getTransactionWrappers:function(){return g},destructor:function(){this.dirtyComponentsLength=null,i.release(this.callbackQueue),this.callbackQueue=null,w.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(t,e,n){return c.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,t,e,n)}}),a.addPoolingTo(v);var _=function(){for(;l.length||h;){if(l.length){var t=v.getPooled();t.perform(b,null,t),v.release(t)}if(h){h=!1;var e=d;d=i.getPooled(),e.notifyAll(),i.release(e)}}};var w={ReactReconcileTransaction:null,batchedUpdates:function(t,e,n,r,o,i){return y(),p.batchedUpdates(t,e,n,r,o,i)},enqueueUpdate:function t(e){y(),p.isBatchingUpdates?(l.push(e),null==e._updateBatchNumber&&(e._updateBatchNumber=f+1)):p.batchedUpdates(t,e)},flushBatchedUpdates:_,injection:{injectReconcileTransaction:function(t){t||r("126"),w.ReactReconcileTransaction=t},injectBatchingStrategy:function(t){t||r("127"),"function"!=typeof t.batchedUpdates&&r("128"),"boolean"!=typeof t.isBatchingUpdates&&r("129"),p=t}},asap:function(t,e){p.isBatchingUpdates||r("125"),d.enqueue(t,e),h=!0}};t.exports=w},function(t,e,n){"use strict";t.exports={current:null}},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(14),a=(n(5),["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"]),u={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function s(t,e,n,r){this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n;var o=this.constructor.Interface;for(var a in o)if(o.hasOwnProperty(a)){0;var u=o[a];u?this[a]=u(n):"target"===a?this.target=r:this[a]=n[a]}var s=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=s?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}r(s.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;for(var n=0;n<a.length;n++)this[a[n]]=null}}),s.Interface=u,s.augmentClass=function(t,e){var n=function(){};n.prototype=this.prototype;var i=new n;r(i,t.prototype),t.prototype=i,t.prototype.constructor=t,t.Interface=r({},this.Interface,e),t.augmentClass=this.augmentClass,o.addPoolingTo(t,o.fourArgumentPooler)},o.addPoolingTo(s,o.fourArgumentPooler),t.exports=s},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(11),a=Object(o.a)("start","end","interrupt"),u=[],s=0,c=1,l=2,f=3,d=4,h=5,p=6,y=function(t,e,n,r,o,y){var g=t.__transition;if(g){if(n in g)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function a(h){var y,g,v,m;if(n.state!==c)return s();for(y in o)if((m=o[y]).name===n.name){if(m.state===f)return Object(i.c)(a);m.state===d?(m.state=p,m.timer.stop(),m.on.call("interrupt",t,t.__data__,m.index,m.group),delete o[y]):+y<e&&(m.state=p,m.timer.stop(),delete o[y])}if(Object(i.c)(function(){n.state===f&&(n.state=d,n.timer.restart(u,n.delay,n.time),u(h))}),n.state=l,n.on.call("start",t,t.__data__,n.index,n.group),n.state===l){for(n.state=f,r=new Array(v=n.tween.length),y=0,g=-1;y<v;++y)(m=n.tween[y].value.call(t,t.__data__,n.index,n.group))&&(r[++g]=m);r.length=g+1}}function u(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=h,1),i=-1,a=r.length;++i<a;)r[i].call(null,o);n.state===h&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=p,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=Object(i.d)(function(t){n.state=c,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:o,on:a,tween:u,time:y.time,delay:y.delay,duration:y.duration,ease:y.ease,timer:null,state:s})};function g(t,e){var n=m(t,e);if(n.state>s)throw new Error("too late; already scheduled");return n}function v(t,e){var n=m(t,e);if(n.state>l)throw new Error("too late; already started");return n}function m(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var b=function(t,e){var n,r,o,i=t.__transition,a=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>l&&n.state<h,n.state=p,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete t.__transition}},_=n(3);function w(t,e,n){var r=t._id;return t.each(function(){var t=v(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return m(t,r).value[e]}}var E=n(1),x=function(t,e){var n;return("number"==typeof e?_.o:e instanceof E.a?_.q:(n=Object(E.a)(e))?(e=n,_.q):_.u)(t,e)};var k=r.m.prototype.constructor;var S=0;function M(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function C(t){return Object(r.m)().transition(t)}function A(){return++S}var P=r.m.prototype;M.prototype=C.prototype={constructor:M,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(r.n)(t));for(var o=this._groups,i=o.length,a=new Array(i),u=0;u<i;++u)for(var s,c,l=o[u],f=l.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=l[h])&&(c=t.call(s,s.__data__,h,l))&&("__data__"in s&&(c.__data__=s.__data__),d[h]=c,y(d[h],e,n,h,d,m(s,n)));return new M(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(r.o)(t));for(var o=this._groups,i=o.length,a=[],u=[],s=0;s<i;++s)for(var c,l=o[s],f=l.length,d=0;d<f;++d)if(c=l[d]){for(var h,p=t.call(c,c.__data__,d,l),g=m(c,n),v=0,b=p.length;v<b;++v)(h=p[v])&&y(h,e,n,v,p,g);a.push(p),u.push(c)}return new M(a,u,e,n)},filter:function(t){"function"!=typeof t&&(t=Object(r.g)(t));for(var e=this._groups,n=e.length,o=new Array(n),i=0;i<n;++i)for(var a,u=e[i],s=u.length,c=o[i]=[],l=0;l<s;++l)(a=u[l])&&t.call(a,a.__data__,l,u)&&c.push(a);return new M(o,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=e[u],l=n[u],f=c.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(d[h]=s);for(;u<r;++u)a[u]=e[u];return new M(a,this._parents,this._name,this._id)},selection:function(){return new k(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=A(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=m(a,e);y(a,t,n,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new M(r,this._parents,t,n)},call:P.call,nodes:P.nodes,node:P.node,size:P.size,empty:P.empty,each:P.each,on:function(t,e){var n=this._id;return arguments.length<2?m(this.node(),n).on.on(t):this.each(function(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?g:v;return function(){var a=i(this,t),u=a.on;u!==r&&(o=(r=u).copy()).on(e,n),a.on=o}}(n,t,e))},attr:function(t,e){var n=Object(r.i)(t),o="transform"===n?_.w:x;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,o,i;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===o?i:i=e(r=a,o=u);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,o,i;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===o?i:i=e(r=a,o=u);this.removeAttribute(t)}})(n,o,w(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,o;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?o:o=e(r=i,n)}}:function(t,e,n){var r,o;return function(){var i=this.getAttribute(t);return i===n?null:i===r?o:o=e(r=i,n)}})(n,o,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var o=Object(r.i)(t);return this.tween(n,(o.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(o,e))},style:function(t,e,n){var o="transform"==(t+="")?_.v:x;return null==e?this.styleTween(t,function(t,e){var n,o,i;return function(){var a=Object(r.p)(this,t),u=(this.style.removeProperty(t),Object(r.p)(this,t));return a===u?null:a===n&&u===o?i:i=e(n=a,o=u)}}(t,o)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var o,i,a;return function(){var u=Object(r.p)(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=Object(r.p)(this,t)),u===s?null:u===o&&s===i?a:a=e(o=u,i=s)}}(t,o,w(this,"style."+t,e)):function(t,e,n){var o,i;return function(){var a=Object(r.p)(this,t);return a===n?null:a===o?i:i=e(o=a,n)}}(t,o,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,o=e.apply(r,arguments);return o&&function(e){r.style.setProperty(t,o(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(w(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=m(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var o=v(this,t),i=o.tween;if(i!==n)for(var a=0,u=(r=n=i).length;a<u;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}o.tween=r}}:function(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=v(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:e,value:n},s=0,c=o.length;s<c;++s)if(o[s].name===e){o[s]=u;break}s===c&&o.push(u)}i.tween=o}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){g(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){g(this,t).delay=e}})(e,t)):m(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){v(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){v(this,t).duration=e}})(e,t)):m(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){v(this,t).ease=e}}(e,t)):m(this.node(),e).ease}};var T={time:null,delay:0,duration:250,ease:n(25).o};function N(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return T.time=Object(i.b)(),T;return n}r.m.prototype.interrupt=function(t){return this.each(function(){b(this,t)})},r.m.prototype.transition=function(t){var e,n;t instanceof M?(e=t._id,t=t._name):(e=A(),(n=T).time=Object(i.b)(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,a=0;a<o;++a)for(var u,s=r[a],c=s.length,l=0;l<c;++l)(u=s[l])&&y(u,t,e,l,s,n||N(u,e));return new M(r,this._parents,t,e)};var O=[null],D=function(t,e){var n,r,o=t.__transition;if(o)for(r in e=null==e?null:e+"",o)if((n=o[r]).state>c&&n.name===e)return new M([[t]],O,e,+r);return null};n.d(e,"c",function(){return C}),n.d(e,"a",function(){return D}),n.d(e,"b",function(){return b})},function(t,e,n){"use strict";var r=n(9),o=n(0);function i(){o.e.stopImmediatePropagation()}var a=function(){o.e.preventDefault(),o.e.stopImmediatePropagation()},u=function(t){var e=t.document.documentElement,n=Object(o.k)(t).on("dragstart.drag",a,!0);"onselectstart"in e?n.on("selectstart.drag",a,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function s(t,e){var n=t.document.documentElement,r=Object(o.k)(t).on("dragstart.drag",null);e&&(r.on("click.drag",a,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var c=function(t){return function(){return t}};function l(t,e,n,r,o,i,a,u,s,c){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=o,this.x=i,this.y=a,this.dx=u,this.dy=s,this._=c}function f(){return!o.e.button}function d(){return this.parentNode}function h(t){return null==t?{x:o.e.x,y:o.e.y}:t}function p(){return"ontouchstart"in this}l.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var y=function(){var t,e,n,y,g=f,v=d,m=h,b=p,_={},w=Object(r.a)("start","drag","end"),E=0,x=0;function k(t){t.on("mousedown.drag",S).filter(b).on("touchstart.drag",A).on("touchmove.drag",P).on("touchend.drag touchcancel.drag",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function S(){if(!y&&g.apply(this,arguments)){var r=N("mouse",v.apply(this,arguments),o.h,this,arguments);r&&(Object(o.k)(o.e.view).on("mousemove.drag",M,!0).on("mouseup.drag",C,!0),u(o.e.view),i(),n=!1,t=o.e.clientX,e=o.e.clientY,r("start"))}}function M(){if(a(),!n){var r=o.e.clientX-t,i=o.e.clientY-e;n=r*r+i*i>x}_.mouse("drag")}function C(){Object(o.k)(o.e.view).on("mousemove.drag mouseup.drag",null),s(o.e.view,n),a(),_.mouse("end")}function A(){if(g.apply(this,arguments)){var t,e,n=o.e.changedTouches,r=v.apply(this,arguments),a=n.length;for(t=0;t<a;++t)(e=N(n[t].identifier,r,o.q,this,arguments))&&(i(),e("start"))}}function P(){var t,e,n=o.e.changedTouches,r=n.length;for(t=0;t<r;++t)(e=_[n[t].identifier])&&(a(),e("drag"))}function T(){var t,e,n=o.e.changedTouches,r=n.length;for(y&&clearTimeout(y),y=setTimeout(function(){y=null},500),t=0;t<r;++t)(e=_[n[t].identifier])&&(i(),e("end"))}function N(t,e,n,r,i){var a,u,s,c=n(e,t),f=w.copy();if(Object(o.d)(new l(k,"beforestart",a,t,E,c[0],c[1],0,0,f),function(){return null!=(o.e.subject=a=m.apply(r,i))&&(u=a.x-c[0]||0,s=a.y-c[1]||0,!0)}))return function d(h){var p,y=c;switch(h){case"start":_[t]=d,p=E++;break;case"end":delete _[t],--E;case"drag":c=n(e,t),p=E}Object(o.d)(new l(k,h,a,t,p,c[0]+u,c[1]+s,c[0]-y[0],c[1]-y[1],f),f.apply,f,[h,r,i])}}return k.filter=function(t){return arguments.length?(g="function"==typeof t?t:c(!!t),k):g},k.container=function(t){return arguments.length?(v="function"==typeof t?t:c(t),k):v},k.subject=function(t){return arguments.length?(m="function"==typeof t?t:c(t),k):m},k.touchable=function(t){return arguments.length?(b="function"==typeof t?t:c(!!t),k):b},k.on=function(){var t=w.on.apply(w,arguments);return t===w?k:t},k.clickDistance=function(t){return arguments.length?(x=(t=+t)*t,k):Math.sqrt(x)},k};n.d(e,"a",function(){return y}),n.d(e,"b",function(){return u}),n.d(e,"c",function(){return s})},function(t,e,n){"use strict";var r=n(4),o=(n(2),function(t){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,t),e}return new this(t)}),i=function(t){t instanceof this||r("25"),t.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(t)},a=o,u={addPoolingTo:function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||a,n.poolSize||(n.poolSize=10),n.release=i,n},oneArgumentPooler:o,twoArgumentPooler:function(t,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,t,e),n}return new this(t,e)},threeArgumentPooler:function(t,e,n){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,t,e,n),r}return new this(t,e,n)},fourArgumentPooler:function(t,e,n,r){if(this.instancePool.length){var o=this.instancePool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}};t.exports=u},function(t,e,n){"use strict";var r=n(9),o=n(17),i=n(3),a=n(0),u=n(16),s=function(t){return function(){return t}};function c(t,e,n){this.k=t,this.x=e,this.y=n}c.prototype={constructor:c,scale:function(t){return 1===t?this:new c(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new c(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var l=new c(1,0,0);function f(t){return t.__zoom||l}function d(){a.e.stopImmediatePropagation()}f.prototype=c.prototype;var h=function(){a.e.preventDefault(),a.e.stopImmediatePropagation()};function p(){return!a.e.button}function y(){var t,e,n=this;return n instanceof SVGElement?(t=(n=n.ownerSVGElement||n).width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function g(){return this.__zoom||l}function v(){return-a.e.deltaY*(a.e.deltaMode?120:1)/500}function m(){return"ontouchstart"in this}function b(t,e,n){var r=t.invertX(e[0][0])-n[0][0],o=t.invertX(e[1][0])-n[1][0],i=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),a>i?(i+a)/2:Math.min(0,i)||Math.max(0,a))}var _=function(){var t,e,n=p,f=y,_=b,w=v,E=m,x=[0,1/0],k=[[-1/0,-1/0],[1/0,1/0]],S=250,M=i.x,C=[],A=Object(r.a)("start","zoom","end"),P=500,T=150,N=0;function O(t){t.property("__zoom",g).on("wheel.zoom",U).on("mousedown.zoom",j).on("dblclick.zoom",z).filter(E).on("touchstart.zoom",V).on("touchmove.zoom",W).on("touchend.zoom touchcancel.zoom",Y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function D(t,e){return(e=Math.max(x[0],Math.min(x[1],e)))===t.k?t:new c(e,t.x,t.y)}function R(t,e,n){var r=e[0]-n[0]*t.k,o=e[1]-n[1]*t.k;return r===t.x&&o===t.y?t:new c(t.k,r,o)}function I(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function L(t,e,n){t.on("start.zoom",function(){F(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){F(this,arguments).end()}).tween("zoom",function(){var t=arguments,r=F(this,t),o=f.apply(this,t),i=n||I(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),u=this.__zoom,s="function"==typeof e?e.apply(this,t):e,l=M(u.invert(i).concat(a/u.k),s.invert(i).concat(a/s.k));return function(t){if(1===t)t=s;else{var e=l(t),n=a/e[2];t=new c(n,i[0]-e[0]*n,i[1]-e[1]*n)}r.zoom(null,t)}})}function F(t,e){for(var n,r=0,o=C.length;r<o;++r)if((n=C[r]).that===t)return n;return new B(t,e)}function B(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=f.apply(t,e)}function U(){if(n.apply(this,arguments)){var t=F(this,arguments),e=this.__zoom,r=Math.max(x[0],Math.min(x[1],e.k*Math.pow(2,w.apply(this,arguments)))),o=Object(a.h)(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=e.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(e.k===r)return;t.mouse=[o,e.invert(o)],Object(u.b)(this),t.start()}h(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},T),t.zoom("mouse",_(R(D(e,r),t.mouse[0],t.mouse[1]),t.extent,k))}}function j(){if(!e&&n.apply(this,arguments)){var t=F(this,arguments),r=Object(a.k)(a.e.view).on("mousemove.zoom",function(){if(h(),!t.moved){var e=a.e.clientX-s,n=a.e.clientY-c;t.moved=e*e+n*n>N}t.zoom("mouse",_(R(t.that.__zoom,t.mouse[0]=Object(a.h)(t.that),t.mouse[1]),t.extent,k))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),Object(o.c)(a.e.view,t.moved),h(),t.end()},!0),i=Object(a.h)(this),s=a.e.clientX,c=a.e.clientY;Object(o.b)(a.e.view),d(),t.mouse=[i,this.__zoom.invert(i)],Object(u.b)(this),t.start()}}function z(){if(n.apply(this,arguments)){var t=this.__zoom,e=Object(a.h)(this),r=t.invert(e),o=t.k*(a.e.shiftKey?.5:2),i=_(R(D(t,o),e,r),f.apply(this,arguments),k);h(),S>0?Object(a.k)(this).transition().duration(S).call(L,i,e):Object(a.k)(this).call(O.transform,i)}}function V(){if(n.apply(this,arguments)){var e,r,o,i,s=F(this,arguments),c=a.e.changedTouches,l=c.length;for(d(),r=0;r<l;++r)o=c[r],i=[i=Object(a.q)(this,c,o.identifier),this.__zoom.invert(i),o.identifier],s.touch0?s.touch1||(s.touch1=i):(s.touch0=i,e=!0);if(t&&(t=clearTimeout(t),!s.touch1))return s.end(),void((i=Object(a.k)(this).on("dblclick.zoom"))&&i.apply(this,arguments));e&&(t=setTimeout(function(){t=null},P),Object(u.b)(this),s.start())}}function W(){var e,n,r,o,i=F(this,arguments),u=a.e.changedTouches,s=u.length;for(h(),t&&(t=clearTimeout(t)),e=0;e<s;++e)n=u[e],r=Object(a.q)(this,u,n.identifier),i.touch0&&i.touch0[2]===n.identifier?i.touch0[0]=r:i.touch1&&i.touch1[2]===n.identifier&&(i.touch1[0]=r);if(n=i.that.__zoom,i.touch1){var c=i.touch0[0],l=i.touch0[1],f=i.touch1[0],d=i.touch1[1],p=(p=f[0]-c[0])*p+(p=f[1]-c[1])*p,y=(y=d[0]-l[0])*y+(y=d[1]-l[1])*y;n=D(n,Math.sqrt(p/y)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!i.touch0)return;r=i.touch0[0],o=i.touch0[1]}i.zoom("touch",_(R(n,r,o),i.extent,k))}function Y(){var t,n,r=F(this,arguments),o=a.e.changedTouches,i=o.length;for(d(),e&&clearTimeout(e),e=setTimeout(function(){e=null},P),t=0;t<i;++t)n=o[t],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return O.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",g),t!==n?L(t,e):n.interrupt().each(function(){F(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()})},O.scaleBy=function(t,e){O.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},O.scaleTo=function(t,e){O.transform(t,function(){var t=f.apply(this,arguments),n=this.__zoom,r=I(t),o=n.invert(r),i="function"==typeof e?e.apply(this,arguments):e;return _(R(D(n,i),r,o),t,k)})},O.translateBy=function(t,e,n){O.transform(t,function(){return _(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),f.apply(this,arguments),k)})},O.translateTo=function(t,e,n){O.transform(t,function(){var t=f.apply(this,arguments),r=this.__zoom,o=I(t);return _(l.translate(o[0],o[1]).scale(r.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,k)})},B.prototype={start:function(){return 1==++this.active&&(this.index=C.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(C.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Object(a.d)(new function(t,e,n){this.target=t,this.type=e,this.transform=n}(O,t,this.that.__zoom),A.apply,A,[t,this.that,this.args])}},O.wheelDelta=function(t){return arguments.length?(w="function"==typeof t?t:s(+t),O):w},O.filter=function(t){return arguments.length?(n="function"==typeof t?t:s(!!t),O):n},O.touchable=function(t){return arguments.length?(E="function"==typeof t?t:s(!!t),O):E},O.extent=function(t){return arguments.length?(f="function"==typeof t?t:s([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),O):f},O.scaleExtent=function(t){return arguments.length?(x[0]=+t[0],x[1]=+t[1],O):[x[0],x[1]]},O.translateExtent=function(t){return arguments.length?(k[0][0]=+t[0][0],k[1][0]=+t[1][0],k[0][1]=+t[0][1],k[1][1]=+t[1][1],O):[[k[0][0],k[0][1]],[k[1][0],k[1][1]]]},O.constrain=function(t){return arguments.length?(_=t,O):_},O.duration=function(t){return arguments.length?(S=+t,O):S},O.interpolate=function(t){return arguments.length?(M=t,O):M},O.on=function(){var t=A.on.apply(A,arguments);return t===A?O:t},O.clickDistance=function(t){return arguments.length?(N=(t=+t)*t,O):Math.sqrt(N)},O};n.d(e,"a",function(){return _}),n.d(e,"c",function(){return f}),n.d(e,"b",function(){return l})},function(t,e,n){"use strict";var r=n(40),o=n(59),i=n(101),a=n(106),u=n(21),s=n(107),c=n(113),l=n(114),f=n(119),d=u.createElement,h=u.createFactory,p=u.cloneElement,y=r,g={Children:{map:i.map,forEach:i.forEach,count:i.count,toArray:i.toArray,only:f},Component:o.Component,PureComponent:o.PureComponent,createElement:d,cloneElement:p,isValidElement:u.isValidElement,PropTypes:s,createClass:l,createFactory:h,createMixin:function(t){return t},DOM:a,version:c,__spread:y};t.exports=g},function(t,e,n){"use strict";var r=n(40),o=n(13),i=(n(33),n(62),Object.prototype.hasOwnProperty),a=n(63),u={key:!0,ref:!0,__self:!0,__source:!0};function s(t){return void 0!==t.ref}function c(t){return void 0!==t.key}var l=function(t,e,n,r,o,i,u){return{$$typeof:a,type:t,key:e,ref:n,props:u,_owner:i}};l.createElement=function(t,e,n){var r,a={},f=null,d=null;if(null!=e)for(r in s(e)&&(d=e.ref),c(e)&&(f=""+e.key),void 0===e.__self?null:e.__self,void 0===e.__source?null:e.__source,e)i.call(e,r)&&!u.hasOwnProperty(r)&&(a[r]=e[r]);var h=arguments.length-2;if(1===h)a.children=n;else if(h>1){for(var p=Array(h),y=0;y<h;y++)p[y]=arguments[y+2];0,a.children=p}if(t&&t.defaultProps){var g=t.defaultProps;for(r in g)void 0===a[r]&&(a[r]=g[r])}return l(t,f,d,0,0,o.current,a)},l.createFactory=function(t){var e=l.createElement.bind(null,t);return e.type=t,e},l.cloneAndReplaceKey=function(t,e){return l(t.type,e,t.ref,t._self,t._source,t._owner,t.props)},l.cloneElement=function(t,e,n){var a,f,d=r({},t.props),h=t.key,p=t.ref,y=(t._self,t._source,t._owner);if(null!=e)for(a in s(e)&&(p=e.ref,y=o.current),c(e)&&(h=""+e.key),t.type&&t.type.defaultProps&&(f=t.type.defaultProps),e)i.call(e,a)&&!u.hasOwnProperty(a)&&(void 0===e[a]&&void 0!==f?d[a]=f[a]:d[a]=e[a]);var g=arguments.length-2;if(1===g)d.children=n;else if(g>1){for(var v=Array(g),m=0;m<g;m++)v[m]=arguments[m+2];d.children=v}return l(t.type,h,p,0,0,y,d)},l.isValidElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===a},t.exports=l},function(t,e,n){"use strict";var r=n(4);n(2);function o(t,e){return(t&e)===e}var i={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(t){var e=i,n=t.Properties||{},a=t.DOMAttributeNamespaces||{},s=t.DOMAttributeNames||{},c=t.DOMPropertyNames||{},l=t.DOMMutationMethods||{};for(var f in t.isCustomAttribute&&u._isCustomAttributeFunctions.push(t.isCustomAttribute),n){u.properties.hasOwnProperty(f)&&r("48",f);var d=f.toLowerCase(),h=n[f],p={attributeName:d,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:o(h,e.MUST_USE_PROPERTY),hasBooleanValue:o(h,e.HAS_BOOLEAN_VALUE),hasNumericValue:o(h,e.HAS_NUMERIC_VALUE),hasPositiveNumericValue:o(h,e.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:o(h,e.HAS_OVERLOADED_BOOLEAN_VALUE)};if(p.hasBooleanValue+p.hasNumericValue+p.hasOverloadedBooleanValue<=1||r("50",f),s.hasOwnProperty(f)){var y=s[f];p.attributeName=y}a.hasOwnProperty(f)&&(p.attributeNamespace=a[f]),c.hasOwnProperty(f)&&(p.propertyName=c[f]),l.hasOwnProperty(f)&&(p.mutationMethod=l[f]),u.properties[f]=p}}},a=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",u={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:a,ATTRIBUTE_NAME_CHAR:a+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<u._isCustomAttributeFunctions.length;e++){if((0,u._isCustomAttributeFunctions[e])(t))return!0}return!1},injection:i};t.exports=u},function(t,e,n){"use strict";var r=n(129);n(10),n(5);function o(){r.attachRefs(this,this._currentElement)}var i={mountComponent:function(t,e,n,r,i,a){var u=t.mountComponent(e,n,r,i,a);return t._currentElement&&null!=t._currentElement.ref&&e.getReactMountReady().enqueue(o,t),u},getHostNode:function(t){return t.getHostNode()},unmountComponent:function(t,e){r.detachRefs(t,t._currentElement),t.unmountComponent(e)},receiveComponent:function(t,e,n,i){var a=t._currentElement;if(e!==a||i!==t._context){0;var u=r.shouldUpdateRefs(a,e);u&&r.detachRefs(t,a),t.receiveComponent(e,n,i),u&&t._currentElement&&null!=t._currentElement.ref&&n.getReactMountReady().enqueue(o,t)}},performUpdateIfNecessary:function(t,e,n){t._updateBatchNumber===n&&t.performUpdateIfNecessary(e)}};t.exports=i},function(t,e,n){"use strict";var r=n(48),o=n(36),i=n(49),a=n(75),u="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent);function s(t){if(u){var e=t.node,n=t.children;if(n.length)for(var r=0;r<n.length;r++)c(e,n[r],null);else null!=t.html?o(e,t.html):null!=t.text&&a(e,t.text)}}var c=i(function(t,e,n){11===e.node.nodeType||1===e.node.nodeType&&"object"===e.node.nodeName.toLowerCase()&&(null==e.node.namespaceURI||e.node.namespaceURI===r.html)?(s(e),t.insertBefore(e.node,n)):(t.insertBefore(e.node,n),s(e))});function l(){return this.node.nodeName}function f(t){return{node:t,children:[],html:null,text:null,toString:l}}f.insertTreeBefore=c,f.replaceChildWithTree=function(t,e){t.parentNode.replaceChild(e.node,t),s(e)},f.queueChild=function(t,e){u?t.children.push(e):t.node.appendChild(e.node)},f.queueHTML=function(t,e){u?t.html=e:o(t.node,e)},f.queueText=function(t,e){u?t.text=e:a(t.node,e)},t.exports=f},function(t,e,n){"use strict";function r(t){return+t}function o(t){return t*t}function i(t){return t*(2-t)}function a(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function u(t){return t*t*t}function s(t){return--t*t*t+1}function c(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}var l=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),f=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),d=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),h=Math.PI,p=h/2;function y(t){return 1-Math.cos(t*p)}function g(t){return Math.sin(t*p)}function v(t){return(1-Math.cos(h*t))/2}function m(t){return Math.pow(2,10*t-10)}function b(t){return 1-Math.pow(2,-10*t)}function _(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function w(t){return 1-Math.sqrt(1-t*t)}function E(t){return Math.sqrt(1- --t*t)}function x(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var k=4/11,S=6/11,M=8/11,C=.75,A=9/11,P=10/11,T=.9375,N=21/22,O=63/64,D=1/k/k;function R(t){return 1-I(1-t)}function I(t){return(t=+t)<k?D*t*t:t<M?D*(t-=S)*t+C:t<P?D*(t-=A)*t+T:D*(t-=N)*t+O}function L(t){return((t*=2)<=1?1-I(1-t):I(t-1)+1)/2}var F=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),B=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),U=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),j=2*Math.PI,z=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3),V=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3),W=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3);n.d(e,"y",function(){return r}),n.d(e,"D",function(){return a}),n.d(e,"E",function(){return o}),n.d(e,"G",function(){return i}),n.d(e,"F",function(){return a}),n.d(e,"m",function(){return c}),n.d(e,"n",function(){return u}),n.d(e,"p",function(){return s}),n.d(e,"o",function(){return c}),n.d(e,"z",function(){return d}),n.d(e,"A",function(){return l}),n.d(e,"C",function(){return f}),n.d(e,"B",function(){return d}),n.d(e,"H",function(){return v}),n.d(e,"I",function(){return y}),n.d(e,"K",function(){return g}),n.d(e,"J",function(){return v}),n.d(e,"u",function(){return _}),n.d(e,"v",function(){return m}),n.d(e,"x",function(){return b}),n.d(e,"w",function(){return _}),n.d(e,"i",function(){return x}),n.d(e,"j",function(){return w}),n.d(e,"l",function(){return E}),n.d(e,"k",function(){return x}),n.d(e,"e",function(){return I}),n.d(e,"f",function(){return R}),n.d(e,"h",function(){return I}),n.d(e,"g",function(){return L}),n.d(e,"a",function(){return U}),n.d(e,"b",function(){return F}),n.d(e,"d",function(){return B}),n.d(e,"c",function(){return U}),n.d(e,"q",function(){return V}),n.d(e,"r",function(){return z}),n.d(e,"t",function(){return V}),n.d(e,"s",function(){return W})},function(t,e,n){"use strict";t.exports=function(t){for(var e=arguments.length-1,n="Minified React error #"+t+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(29),o=n(42),i=n(67),a=n(68),u=(n(5),r.getListener);function s(t,e,n){var r=function(t,e,n){var r=e.dispatchConfig.phasedRegistrationNames[n];return u(t,r)}(t,n,e);r&&(n._dispatchListeners=i(n._dispatchListeners,r),n._dispatchInstances=i(n._dispatchInstances,t))}function c(t){t&&t.dispatchConfig.phasedRegistrationNames&&o.traverseTwoPhase(t._targetInst,s,t)}function l(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst,n=e?o.getParentInstance(e):null;o.traverseTwoPhase(n,s,t)}}function f(t,e,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=u(t,r);o&&(n._dispatchListeners=i(n._dispatchListeners,o),n._dispatchInstances=i(n._dispatchInstances,t))}}function d(t){t&&t.dispatchConfig.registrationName&&f(t._targetInst,0,t)}var h={accumulateTwoPhaseDispatches:function(t){a(t,c)},accumulateTwoPhaseDispatchesSkipTarget:function(t){a(t,l)},accumulateDirectDispatches:function(t){a(t,d)},accumulateEnterLeaveDispatches:function(t,e,n,r){o.traverseEnterLeave(n,r,f,t,e)}};t.exports=h},function(t,e,n){"use strict";var r=n(4),o=n(41),i=n(42),a=n(43),u=n(67),s=n(68),c=(n(2),{}),l=null,f=function(t,e){t&&(i.executeDispatchesInOrder(t,e),t.isPersistent()||t.constructor.release(t))},d=function(t){return f(t,!0)},h=function(t){return f(t,!1)},p=function(t){return"."+t._rootNodeID};var y={injection:{injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},putListener:function(t,e,n){"function"!=typeof n&&r("94",e,typeof n);var i=p(t);(c[e]||(c[e]={}))[i]=n;var a=o.registrationNameModules[e];a&&a.didPutListener&&a.didPutListener(t,e,n)},getListener:function(t,e){var n=c[e];if(function(t,e,n){switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!function(t){return"button"===t||"input"===t||"select"===t||"textarea"===t}(e));default:return!1}}(e,t._currentElement.type,t._currentElement.props))return null;var r=p(t);return n&&n[r]},deleteListener:function(t,e){var n=o.registrationNameModules[e];n&&n.willDeleteListener&&n.willDeleteListener(t,e);var r=c[e];r&&delete r[p(t)]},deleteAllListeners:function(t){var e=p(t);for(var n in c)if(c.hasOwnProperty(n)&&c[n][e]){var r=o.registrationNameModules[n];r&&r.willDeleteListener&&r.willDeleteListener(t,n),delete c[n][e]}},extractEvents:function(t,e,n,r){for(var i,a=o.plugins,s=0;s<a.length;s++){var c=a[s];if(c){var l=c.extractEvents(t,e,n,r);l&&(i=u(i,l))}}return i},enqueueEvents:function(t){t&&(l=u(l,t))},processEventQueue:function(t){var e=l;l=null,s(e,t?d:h),l&&r("95"),a.rethrowCaughtError()},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=y},function(t,e,n){"use strict";var r=n(15),o=n(44),i={view:function(t){if(t.view)return t.view;var e=o(t);if(e.window===e)return e;var n=e.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(t){return t.detail||0}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r={remove:function(t){t._reactInternalInstance=void 0},get:function(t){return t._reactInternalInstance},has:function(t){return void 0!==t._reactInternalInstance},set:function(t,e){t._reactInternalInstance=e}};t.exports=r},function(t,e){},function(t,e,n){"use strict";var r=n(61);t.exports=r},function(t,e,n){"use strict";var r=n(4),o=(n(2),{}),i={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(t,e,n,o,i,a,u,s){var c,l;this.isInTransaction()&&r("27");try{this._isInTransaction=!0,c=!0,this.initializeAll(0),l=t.call(e,n,o,i,a,u,s),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(t){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(t){for(var e=this.transactionWrappers,n=t;n<e.length;n++){var r=e[n];try{this.wrapperInitData[n]=o,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===o)try{this.initializeAll(n+1)}catch(t){}}}},closeAll:function(t){this.isInTransaction()||r("28");for(var e=this.transactionWrappers,n=t;n<e.length;n++){var i,a=e[n],u=this.wrapperInitData[n];try{i=!0,u!==o&&a.close&&a.close.call(this,u),i=!1}finally{if(i)try{this.closeAll(n+1)}catch(t){}}}this.wrapperInitData.length=0}};t.exports=i},function(t,e,n){"use strict";var r=n(30),o=n(74),i={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:n(46),button:function(t){var e=t.button;return"which"in t?e:2===e?2:4===e?1:0},buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},pageX:function(t){return"pageX"in t?t.pageX:t.clientX+o.currentScrollLeft},pageY:function(t){return"pageY"in t?t.pageY:t.clientY+o.currentScrollTop}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r,o=n(8),i=n(48),a=/^[ \r\n\t\f]/,u=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,s=n(49)(function(t,e){if(t.namespaceURI!==i.svg||"innerHTML"in t)t.innerHTML=e;else{(r=r||document.createElement("div")).innerHTML="<svg>"+e+"</svg>";for(var n=r.firstChild;n.firstChild;)t.appendChild(n.firstChild)}});if(o.canUseDOM){var c=document.createElement("div");c.innerHTML=" ",""===c.innerHTML&&(s=function(t,e){if(t.parentNode&&t.parentNode.replaceChild(t,t),a.test(e)||"<"===e[0]&&u.test(e)){t.innerHTML=String.fromCharCode(65279)+e;var n=t.firstChild;1===n.data.length?t.removeChild(n):n.deleteData(0,1)}else t.innerHTML=e}),c=null}t.exports=s},function(t,e,n){"use strict";var r=/["'&<>]/;t.exports=function(t){return"boolean"==typeof t||"number"==typeof t?""+t:function(t){var e,n=""+t,o=r.exec(n);if(!o)return n;var i="",a=0,u=0;for(a=o.index;a<n.length;a++){switch(n.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#x27;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}u!==a&&(i+=n.substring(u,a)),u=a+1,i+=e}return u!==a?i+n.substring(u,a):i}(t)}},function(t,e,n){"use strict";var r,o=n(7),i=n(41),a=n(150),u=n(74),s=n(151),c=n(45),l={},f=!1,d=0,h={topAbort:"abort",topAnimationEnd:s("animationend")||"animationend",topAnimationIteration:s("animationiteration")||"animationiteration",topAnimationStart:s("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:s("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},p="_reactListenersID"+String(Math.random()).slice(2);var y=o({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(t){t.setHandleTopLevel(y.handleTopLevel),y.ReactEventListener=t}},setEnabled:function(t){y.ReactEventListener&&y.ReactEventListener.setEnabled(t)},isEnabled:function(){return!(!y.ReactEventListener||!y.ReactEventListener.isEnabled())},listenTo:function(t,e){for(var n=e,r=function(t){return Object.prototype.hasOwnProperty.call(t,p)||(t[p]=d++,l[t[p]]={}),l[t[p]]}(n),o=i.registrationNameDependencies[t],a=0;a<o.length;a++){var u=o[a];r.hasOwnProperty(u)&&r[u]||("topWheel"===u?c("wheel")?y.ReactEventListener.trapBubbledEvent("topWheel","wheel",n):c("mousewheel")?y.ReactEventListener.trapBubbledEvent("topWheel","mousewheel",n):y.ReactEventListener.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===u?c("scroll",!0)?y.ReactEventListener.trapCapturedEvent("topScroll","scroll",n):y.ReactEventListener.trapBubbledEvent("topScroll","scroll",y.ReactEventListener.WINDOW_HANDLE):"topFocus"===u||"topBlur"===u?(c("focus",!0)?(y.ReactEventListener.trapCapturedEvent("topFocus","focus",n),y.ReactEventListener.trapCapturedEvent("topBlur","blur",n)):c("focusin")&&(y.ReactEventListener.trapBubbledEvent("topFocus","focusin",n),y.ReactEventListener.trapBubbledEvent("topBlur","focusout",n)),r.topBlur=!0,r.topFocus=!0):h.hasOwnProperty(u)&&y.ReactEventListener.trapBubbledEvent(u,h[u],n),r[u]=!0)}},trapBubbledEvent:function(t,e,n){return y.ReactEventListener.trapBubbledEvent(t,e,n)},trapCapturedEvent:function(t,e,n){return y.ReactEventListener.trapCapturedEvent(t,e,n)},supportsEventPageXY:function(){if(!document.createEvent)return!1;var t=document.createEvent("MouseEvent");return null!=t&&"pageX"in t},ensureScrollValueMonitoring:function(){if(void 0===r&&(r=y.supportsEventPageXY()),!r&&!f){var t=u.refreshScrollValues;y.ReactEventListener.monitorScrollValue(t),f=!0}}});t.exports=y},function(t,e,n){"use strict";n.r(e),n.d(e,"Allocator",function(){return r});class r{constructor(t){this.module={alloc:t.cwrap("rust_alloc","number",["number"]),free:t.cwrap("rust_free","void",["number"])}}alloc(t){return this.module.alloc(t)}free(t){this.module.free(t)}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";var r=n(4),o=(n(2),null),i={};function a(){if(o)for(var t in i){var e=i[t],n=o.indexOf(t);if(n>-1||r("96",t),!c.plugins[n]){e.extractEvents||r("97",t),c.plugins[n]=e;var a=e.eventTypes;for(var s in a)u(a[s],e,s)||r("98",s,t)}}}function u(t,e,n){c.eventNameDispatchConfigs.hasOwnProperty(n)&&r("99",n),c.eventNameDispatchConfigs[n]=t;var o=t.phasedRegistrationNames;if(o){for(var i in o){if(o.hasOwnProperty(i))s(o[i],e,n)}return!0}return!!t.registrationName&&(s(t.registrationName,e,n),!0)}function s(t,e,n){c.registrationNameModules[t]&&r("100",t),c.registrationNameModules[t]=e,c.registrationNameDependencies[t]=e.eventTypes[n].dependencies}var c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(t){o&&r("101"),o=Array.prototype.slice.call(t),a()},injectEventPluginsByName:function(t){var e=!1;for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];i.hasOwnProperty(n)&&i[n]===o||(i[n]&&r("102",n),i[n]=o,e=!0)}e&&a()},getPluginModuleForEvent:function(t){var e=t.dispatchConfig;if(e.registrationName)return c.registrationNameModules[e.registrationName]||null;if(void 0!==e.phasedRegistrationNames){var n=e.phasedRegistrationNames;for(var r in n)if(n.hasOwnProperty(r)){var o=c.registrationNameModules[n[r]];if(o)return o}}return null},_resetEventPlugins:function(){for(var t in o=null,i)i.hasOwnProperty(t)&&delete i[t];c.plugins.length=0;var e=c.eventNameDispatchConfigs;for(var n in e)e.hasOwnProperty(n)&&delete e[n];var r=c.registrationNameModules;for(var a in r)r.hasOwnProperty(a)&&delete r[a]}};t.exports=c},function(t,e,n){"use strict";var r,o,i=n(4),a=n(43);n(2),n(5);function u(t,e,n,r){var o=t.type||"unknown-event";t.currentTarget=s.getNodeFromInstance(r),e?a.invokeGuardedCallbackWithCatch(o,n,t):a.invokeGuardedCallback(o,n,t),t.currentTarget=null}var s={isEndish:function(t){return"topMouseUp"===t||"topTouchEnd"===t||"topTouchCancel"===t},isMoveish:function(t){return"topMouseMove"===t||"topTouchMove"===t},isStartish:function(t){return"topMouseDown"===t||"topTouchStart"===t},executeDirectDispatch:function(t){var e=t._dispatchListeners,n=t._dispatchInstances;Array.isArray(e)&&i("103"),t.currentTarget=e?s.getNodeFromInstance(n):null;var r=e?e(t):null;return t.currentTarget=null,t._dispatchListeners=null,t._dispatchInstances=null,r},executeDispatchesInOrder:function(t,e){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)u(t,e,n[o],r[o]);else n&&u(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(t){var e=function(t){var e=t._dispatchListeners,n=t._dispatchInstances;if(Array.isArray(e)){for(var r=0;r<e.length&&!t.isPropagationStopped();r++)if(e[r](t,n[r]))return n[r]}else if(e&&e(t,n))return n;return null}(t);return t._dispatchInstances=null,t._dispatchListeners=null,e},hasDispatches:function(t){return!!t._dispatchListeners},getInstanceFromNode:function(t){return r.getInstanceFromNode(t)},getNodeFromInstance:function(t){return r.getNodeFromInstance(t)},isAncestor:function(t,e){return o.isAncestor(t,e)},getLowestCommonAncestor:function(t,e){return o.getLowestCommonAncestor(t,e)},getParentInstance:function(t){return o.getParentInstance(t)},traverseTwoPhase:function(t,e,n){return o.traverseTwoPhase(t,e,n)},traverseEnterLeave:function(t,e,n,r,i){return o.traverseEnterLeave(t,e,n,r,i)},injection:{injectComponentTree:function(t){r=t},injectTreeTraversal:function(t){o=t}}};t.exports=s},function(t,e,n){"use strict";var r=null;function o(t,e,n){try{e(n)}catch(t){null===r&&(r=t)}}var i={invokeGuardedCallback:o,invokeGuardedCallbackWithCatch:o,rethrowCaughtError:function(){if(r){var t=r;throw r=null,t}}};t.exports=i},function(t,e,n){"use strict";t.exports=function(t){var e=t.target||t.srcElement||window;return e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}},function(t,e,n){"use strict";var r,o=n(8);o.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""))
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */,t.exports=function(t,e){if(!o.canUseDOM||e&&!("addEventListener"in document))return!1;var n="on"+t,i=n in document;if(!i){var a=document.createElement("div");a.setAttribute(n,"return;"),i="function"==typeof a[n]}return!i&&r&&"wheel"===t&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},function(t,e,n){"use strict";var r={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function o(t){var e=this.nativeEvent;if(e.getModifierState)return e.getModifierState(t);var n=r[t];return!!n&&!!e[n]}t.exports=function(t){return o}},function(t,e,n){"use strict";var r=n(24),o=n(135),i=(n(6),n(10),n(49)),a=n(36),u=n(75);function s(t,e){return Array.isArray(e)&&(e=e[1]),e?e.nextSibling:t.firstChild}var c=i(function(t,e,n){t.insertBefore(e,n)});function l(t,e,n){r.insertTreeBefore(t,e,n)}function f(t,e,n){Array.isArray(e)?function(t,e,n,r){var o=e;for(;;){var i=o.nextSibling;if(c(t,o,r),o===n)break;o=i}}(t,e[0],e[1],n):c(t,e,n)}function d(t,e){if(Array.isArray(e)){var n=e[1];h(t,e=e[0],n),t.removeChild(n)}t.removeChild(e)}function h(t,e,n){for(;;){var r=e.nextSibling;if(r===n)break;t.removeChild(r)}}var p={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,replaceDelimitedText:function(t,e,n){var r=t.parentNode,o=t.nextSibling;o===e?n&&c(r,document.createTextNode(n),o):n?(u(o,n),h(r,o,e)):h(r,t,e)},processUpdates:function(t,e){for(var n=0;n<e.length;n++){var r=e[n];switch(r.type){case"INSERT_MARKUP":l(t,r.content,s(t,r.afterNode));break;case"MOVE_EXISTING":f(t,r.fromNode,s(t,r.afterNode));break;case"SET_MARKUP":a(t,r.content);break;case"TEXT_CONTENT":u(t,r.content);break;case"REMOVE_NODE":d(t,r.fromNode)}}}};t.exports=p},function(t,e,n){"use strict";t.exports={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"}},function(t,e,n){"use strict";t.exports=function(t){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,r,o){MSApp.execUnsafeLocalFunction(function(){return t(e,n,r,o)})}:t}},function(t,e,n){"use strict";var r=n(4),o=n(153),i=n(64)(n(20).isValidElement),a=(n(2),n(5),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0});function u(t){null!=t.checkedLink&&null!=t.valueLink&&r("87")}function s(t){u(t),(null!=t.value||null!=t.onChange)&&r("88")}function c(t){u(t),(null!=t.checked||null!=t.onChange)&&r("89")}var l={value:function(t,e,n){return!t[e]||a[t.type]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(t,e,n){return!t[e]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:i.func},f={};function d(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}var h={checkPropTypes:function(t,e,n){for(var r in l){if(l.hasOwnProperty(r))var i=l[r](e,r,t,"prop",null,o);if(i instanceof Error&&!(i.message in f)){f[i.message]=!0;d(n)}}},getValue:function(t){return t.valueLink?(s(t),t.valueLink.value):t.value},getChecked:function(t){return t.checkedLink?(c(t),t.checkedLink.value):t.checked},executeOnChange:function(t,e){return t.valueLink?(s(t),t.valueLink.requestChange(e.target.value)):t.checkedLink?(c(t),t.checkedLink.requestChange(e.target.checked)):t.onChange?t.onChange.call(void 0,e):void 0}};t.exports=h},function(t,e,n){"use strict";var r=n(4),o=(n(2),!1),i={replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(t){o&&r("104"),i.replaceNodeWithMarkup=t.replaceNodeWithMarkup,i.processChildrenUpdates=t.processChildrenUpdates,o=!0}}};t.exports=i},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=u(d);l=!0;for(var e=c.length;e;){for(s=c,c=[];++f<e;)s&&s[f].run();f=-1,e=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||u(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}t.exports=function(t,e){if(o(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(e,n[a])||!o(t[n[a]],e[n[a]]))return!1;return!0}},function(t,e,n){"use strict";t.exports=function(t,e){var n=null===t||!1===t,r=null===e||!1===e;if(n||r)return n===r;var o=typeof t,i=typeof e;return"string"===o||"number"===o?"string"===i||"number"===i:"object"===i&&t.type===e.type&&t.key===e.key}},function(t,e,n){"use strict";var r={escape:function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})},unescape:function(t){var e={"=0":"=","=2":":"};return(""+("."===t[0]&&"$"===t[1]?t.substring(2):t.substring(1))).replace(/(=0|=2)/g,function(t){return e[t]})}};t.exports=r},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(31)),i=(n(10),n(12));n(2),n(5);function a(t){i.enqueueUpdate(t)}function u(t,e){var n=o.get(t);return n||null}var s={isMounted:function(t){var e=o.get(t);return!!e&&!!e._renderedComponent},enqueueCallback:function(t,e,n){s.validateCallback(e,n);var r=u(t);if(!r)return null;r._pendingCallbacks?r._pendingCallbacks.push(e):r._pendingCallbacks=[e],a(r)},enqueueCallbackInternal:function(t,e){t._pendingCallbacks?t._pendingCallbacks.push(e):t._pendingCallbacks=[e],a(t)},enqueueForceUpdate:function(t){var e=u(t);e&&(e._pendingForceUpdate=!0,a(e))},enqueueReplaceState:function(t,e,n){var r=u(t);r&&(r._pendingStateQueue=[e],r._pendingReplaceState=!0,void 0!==n&&null!==n&&(s.validateCallback(n,"replaceState"),r._pendingCallbacks?r._pendingCallbacks.push(n):r._pendingCallbacks=[n]),a(r))},enqueueSetState:function(t,e){var n=u(t);n&&((n._pendingStateQueue||(n._pendingStateQueue=[])).push(e),a(n))},enqueueElementInternal:function(t,e,n){t._pendingElement=e,t._context=n,a(t)},validateCallback:function(t,e){t&&"function"!=typeof t&&r("122",e,function(t){var e=typeof t;if("object"!==e)return e;var n=t.constructor&&t.constructor.name||e,r=Object.keys(t);return r.length>0&&r.length<20?n+" (keys: "+r.join(", ")+")":n}(t))}};t.exports=s},function(t,e,n){"use strict";n(7);var r=n(14),o=(n(5),r);t.exports=o},function(t,e,n){"use strict";t.exports=function(t){var e,n=t.keyCode;return"charCode"in t?0===(e=t.charCode)&&13===n&&(e=13):e=n,e>=32||13===e?e:0}},function(t,e,n){"use strict";var r=n(26),o=n(40),i=n(60),a=(n(62),n(99));n(27),n(100);function u(t,e,n){this.props=t,this.context=e,this.refs=a,this.updater=n||i}function s(t,e,n){this.props=t,this.context=e,this.refs=a,this.updater=n||i}function c(){}u.prototype.isReactComponent={},u.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&r("85"),this.updater.enqueueSetState(this,t),e&&this.updater.enqueueCallback(this,e,"setState")},u.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this),t&&this.updater.enqueueCallback(this,t,"forceUpdate")},c.prototype=u.prototype,s.prototype=new c,s.prototype.constructor=s,o(s.prototype,u.prototype),s.prototype.isPureReactComponent=!0,t.exports={Component:u,PureComponent:s}},function(t,e,n){"use strict";n(33);var r={isMounted:function(t){return!1},enqueueCallback:function(t,e){},enqueueForceUpdate:function(t){},enqueueReplaceState:function(t,e){},enqueueSetState:function(t,e){}};t.exports=r},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";t.exports=!1},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;t.exports=r},function(t,e,n){"use strict";var r=n(108);t.exports=function(t){return r(t,!1)}},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";t.exports={hasCachedChildNodes:1}},function(t,e,n){"use strict";var r=n(4);n(2);t.exports=function(t,e){return null==e&&r("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}},function(t,e,n){"use strict";t.exports=function(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}},function(t,e,n){"use strict";var r=n(8),o=null;t.exports=function(){return!o&&r.canUseDOM&&(o="textContent"in document.documentElement?"textContent":"innerText"),o}},function(t,e,n){"use strict";var r=n(4);var o=n(18),i=(n(2),function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._callbacks=null,this._contexts=null,this._arg=e}return t.prototype.enqueue=function(t,e){this._callbacks=this._callbacks||[],this._callbacks.push(t),this._contexts=this._contexts||[],this._contexts.push(e)},t.prototype.notifyAll=function(){var t=this._callbacks,e=this._contexts,n=this._arg;if(t&&e){t.length!==e.length&&r("24"),this._callbacks=null,this._contexts=null;for(var o=0;o<t.length;o++)t[o].call(e[o],n);t.length=0,e.length=0}},t.prototype.checkpoint=function(){return this._callbacks?this._callbacks.length:0},t.prototype.rollback=function(t){this._callbacks&&this._contexts&&(this._callbacks.length=t,this._contexts.length=t)},t.prototype.reset=function(){this._callbacks=null,this._contexts=null},t.prototype.destructor=function(){this.reset()},t}());t.exports=o.addPoolingTo(i)},function(t,e,n){"use strict";t.exports={logTopLevelRenders:!1}},function(t,e,n){"use strict";var r=n(6);function o(t){var e=t.type,n=t.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===e||"radio"===e)}function i(t){return t._wrapperState.valueTracker}var a={_getTrackerFromNode:function(t){return i(r.getInstanceFromNode(t))},track:function(t){if(!i(t)){var e=r.getNodeFromInstance(t),n=o(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),u=""+e[n];e.hasOwnProperty(n)||"function"!=typeof a.get||"function"!=typeof a.set||(Object.defineProperty(e,n,{enumerable:a.enumerable,configurable:!0,get:function(){return a.get.call(this)},set:function(t){u=""+t,a.set.call(this,t)}}),function(t,e){t._wrapperState.valueTracker=e}(t,{getValue:function(){return u},setValue:function(t){u=""+t},stopTracking:function(){!function(t){delete t._wrapperState.valueTracker}(t),delete e[n]}}))}},updateValueIfChanged:function(t){if(!t)return!1;var e=i(t);if(!e)return a.track(t),!0;var n=e.getValue(),u=function(t){var e;return t&&(e=o(t)?""+t.checked:t.value),e}(r.getNodeFromInstance(t));return u!==n&&(e.setValue(u),!0)},stopTracking:function(t){var e=i(t);e&&e.stopTracking()}};t.exports=a},function(t,e,n){"use strict";var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=function(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!r[t.type]:"textarea"===e}},function(t,e,n){"use strict";var r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(t){r.currentScrollLeft=t.x,r.currentScrollTop=t.y}};t.exports=r},function(t,e,n){"use strict";var r=n(8),o=n(37),i=n(36),a=function(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e};r.canUseDOM&&("textContent"in document.documentElement||(a=function(t,e){3!==t.nodeType?i(t,o(e)):t.nodeValue=e})),t.exports=a},function(t,e,n){"use strict";t.exports=function(t){try{t.focus()}catch(t){}}},function(t,e,n){"use strict";var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(t){o.forEach(function(e){r[function(t,e){return t+e.charAt(0).toUpperCase()+e.substring(1)}(e,t)]=r[t]})});var i={isUnitlessNumber:r,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}};t.exports=i},function(t,e,n){"use strict";var r=n(22),o=(n(6),n(10),n(149)),i=(n(5),new RegExp("^["+r.ATTRIBUTE_NAME_START_CHAR+"]["+r.ATTRIBUTE_NAME_CHAR+"]*$")),a={},u={};function s(t){return!!u.hasOwnProperty(t)||!a.hasOwnProperty(t)&&(i.test(t)?(u[t]=!0,!0):(a[t]=!0,!1))}function c(t,e){return null==e||t.hasBooleanValue&&!e||t.hasNumericValue&&isNaN(e)||t.hasPositiveNumericValue&&e<1||t.hasOverloadedBooleanValue&&!1===e}var l={createMarkupForID:function(t){return r.ID_ATTRIBUTE_NAME+"="+o(t)},setAttributeForID:function(t,e){t.setAttribute(r.ID_ATTRIBUTE_NAME,e)},createMarkupForRoot:function(){return r.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(t){t.setAttribute(r.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(t,e){var n=r.properties.hasOwnProperty(t)?r.properties[t]:null;if(n){if(c(n,e))return"";var i=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&!0===e?i+'=""':i+"="+o(e)}return r.isCustomAttribute(t)?null==e?"":t+"="+o(e):null},createMarkupForCustomAttribute:function(t,e){return s(t)&&null!=e?t+"="+o(e):""},setValueForProperty:function(t,e,n){var o=r.properties.hasOwnProperty(e)?r.properties[e]:null;if(o){var i=o.mutationMethod;if(i)i(t,n);else{if(c(o,n))return void this.deleteValueForProperty(t,e);if(o.mustUseProperty)t[o.propertyName]=n;else{var a=o.attributeName,u=o.attributeNamespace;u?t.setAttributeNS(u,a,""+n):o.hasBooleanValue||o.hasOverloadedBooleanValue&&!0===n?t.setAttribute(a,""):t.setAttribute(a,""+n)}}}else if(r.isCustomAttribute(e))return void l.setValueForAttribute(t,e,n)},setValueForAttribute:function(t,e,n){s(e)&&(null==n?t.removeAttribute(e):t.setAttribute(e,""+n))},deleteValueForAttribute:function(t,e){t.removeAttribute(e)},deleteValueForProperty:function(t,e){var n=r.properties.hasOwnProperty(e)?r.properties[e]:null;if(n){var o=n.mutationMethod;if(o)o(t,void 0);else if(n.mustUseProperty){var i=n.propertyName;n.hasBooleanValue?t[i]=!1:t[i]=""}else t.removeAttribute(n.attributeName)}else r.isCustomAttribute(e)&&t.removeAttribute(e)}};t.exports=l},function(t,e,n){"use strict";var r=n(7),o=n(50),i=n(6),a=n(12),u=(n(5),!1);function s(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var t=this._currentElement.props,e=o.getValue(t);null!=e&&c(this,Boolean(t.multiple),e)}}function c(t,e,n){var r,o,a=i.getNodeFromInstance(t).options;if(e){for(r={},o=0;o<n.length;o++)r[""+n[o]]=!0;for(o=0;o<a.length;o++){var u=r.hasOwnProperty(a[o].value);a[o].selected!==u&&(a[o].selected=u)}}else{for(r=""+n,o=0;o<a.length;o++)if(a[o].value===r)return void(a[o].selected=!0);a.length&&(a[0].selected=!0)}}var l={getHostProps:function(t,e){return r({},e,{onChange:t._wrapperState.onChange,value:void 0})},mountWrapper:function(t,e){var n=o.getValue(e);t._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:e.defaultValue,listeners:null,onChange:function(t){var e=this._currentElement.props,n=o.executeOnChange(e,t);this._rootNodeID&&(this._wrapperState.pendingUpdate=!0);return a.asap(s,this),n}.bind(t),wasMultiple:Boolean(e.multiple)},void 0===e.value||void 0===e.defaultValue||u||(u=!0)},getSelectValueContext:function(t){return t._wrapperState.initialValue},postUpdateWrapper:function(t){var e=t._currentElement.props;t._wrapperState.initialValue=void 0;var n=t._wrapperState.wasMultiple;t._wrapperState.wasMultiple=Boolean(e.multiple);var r=o.getValue(e);null!=r?(t._wrapperState.pendingUpdate=!1,c(t,Boolean(e.multiple),r)):n!==Boolean(e.multiple)&&(null!=e.defaultValue?c(t,Boolean(e.multiple),e.defaultValue):c(t,Boolean(e.multiple),e.multiple?[]:""))}};t.exports=l},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(158),a=n(83),u=n(84),s=(n(159),n(2),n(5),function(t){this.construct(t)});function c(t,e){var n;if(null===t||!1===t)n=a.create(c);else if("object"==typeof t){var o=t,i=o.type;if("function"!=typeof i&&"string"!=typeof i){var l="";0,l+=function(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}(o._owner),r("130",null==i?i:typeof i,l)}"string"==typeof o.type?n=u.createInternalComponent(o):!function(t){return"function"==typeof t&&void 0!==t.prototype&&"function"==typeof t.prototype.mountComponent&&"function"==typeof t.prototype.receiveComponent}(o.type)?n=new s(o):(n=new o.type(o)).getHostNode||(n.getHostNode=n.getNativeNode)}else"string"==typeof t||"number"==typeof t?n=u.createInstanceForText(t):r("131",typeof t);return n._mountIndex=0,n._mountImage=null,n}o(s.prototype,i,{_instantiateReactComponent:c}),t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(20),i=(n(2),{HOST:0,COMPOSITE:1,EMPTY:2,getType:function(t){return null===t||!1===t?i.EMPTY:o.isValidElement(t)?"function"==typeof t.type?i.COMPOSITE:i.HOST:void r("26",t)}});t.exports=i},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r,o={injectEmptyComponentFactory:function(t){r=t}},i={create:function(t){return r(t)}};i.injection=o,t.exports=i},function(t,e,n){"use strict";var r=n(4),o=(n(2),null),i=null;var a={createInternalComponent:function(t){return o||r("111",t.type),new o(t)},createInstanceForText:function(t){return new i(t)},isTextComponent:function(t){return t instanceof i},injection:{injectGenericComponentClass:function(t){o=t},injectTextComponentClass:function(t){i=t}}};t.exports=a},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(160)),i=n(161),a=(n(2),n(55)),u=(n(5),"."),s=":";function c(t,e){return t&&"object"==typeof t&&null!=t.key?a.escape(t.key):e.toString(36)}t.exports=function(t,e,n){return null==t?0:function t(e,n,l,f){var d,h=typeof e;if("undefined"!==h&&"boolean"!==h||(e=null),null===e||"string"===h||"number"===h||"object"===h&&e.$$typeof===o)return l(f,e,""===n?u+c(e,0):n),1;var p=0,y=""===n?u:n+s;if(Array.isArray(e))for(var g=0;g<e.length;g++)p+=t(d=e[g],y+c(d,g),l,f);else{var v=i(e);if(v){var m,b=v.call(e);if(v!==e.entries)for(var _=0;!(m=b.next()).done;)p+=t(d=m.value,y+c(d,_++),l,f);else for(;!(m=b.next()).done;){var w=m.value;w&&(p+=t(d=w[1],y+a.escape(w[0])+s+c(d,0),l,f))}}else if("object"===h){var E=String(e);r("31","[object Object]"===E?"object with keys {"+Object.keys(e).join(", ")+"}":E,"")}}return p}(t,"",e,n)}},function(t,e,n){"use strict";var r,o,i,a,u,s,c,l=n(26),f=n(13);n(27),n(33);function d(t){var e=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+e.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=e.call(t);return r.test(o)}catch(t){return!1}}if("function"==typeof Array.from&&"function"==typeof Map&&d(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&d(Map.prototype.keys)&&"function"==typeof Set&&d(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&d(Set.prototype.keys)){var h=new Map,p=new Set;r=function(t,e){h.set(t,e)},o=function(t){return h.get(t)},i=function(t){h.delete(t)},a=function(){return Array.from(h.keys())},u=function(t){p.add(t)},s=function(t){p.delete(t)},c=function(){return Array.from(p.keys())}}else{var y={},g={},v=function(t){return"."+t},m=function(t){return parseInt(t.substr(1),10)};r=function(t,e){var n=v(t);y[n]=e},o=function(t){var e=v(t);return y[e]},i=function(t){var e=v(t);delete y[e]},a=function(){return Object.keys(y).map(m)},u=function(t){var e=v(t);g[e]=!0},s=function(t){var e=v(t);delete g[e]},c=function(){return Object.keys(g).map(m)}}var b=[];function _(t){var e=o(t);if(e){var n=e.childIDs;i(t),n.forEach(_)}}function w(t,e,n){return"\n    in "+(t||"Unknown")+(e?" (at "+e.fileName.replace(/^.*[\\\/]/,"")+":"+e.lineNumber+")":n?" (created by "+n+")":"")}function E(t){return null==t?"#empty":"string"==typeof t||"number"==typeof t?"#text":"string"==typeof t.type?t.type:t.type.displayName||t.type.name||"Unknown"}function x(t){var e,n=k.getDisplayName(t),r=k.getElement(t),o=k.getOwnerID(t);return o&&(e=k.getDisplayName(o)),w(n,r&&r._source,e)}var k={onSetChildren:function(t,e){var n=o(t);n||l("144"),n.childIDs=e;for(var r=0;r<e.length;r++){var i=e[r],a=o(i);a||l("140"),null==a.childIDs&&"object"==typeof a.element&&null!=a.element&&l("141"),a.isMounted||l("71"),null==a.parentID&&(a.parentID=t),a.parentID!==t&&l("142",i,a.parentID,t)}},onBeforeMountComponent:function(t,e,n){r(t,{element:e,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(t,e){var n=o(t);n&&n.isMounted&&(n.element=e)},onMountComponent:function(t){var e=o(t);e||l("144"),e.isMounted=!0,0===e.parentID&&u(t)},onUpdateComponent:function(t){var e=o(t);e&&e.isMounted&&e.updateCount++},onUnmountComponent:function(t){var e=o(t);e&&(e.isMounted=!1,0===e.parentID&&s(t));b.push(t)},purgeUnmountedComponents:function(){if(!k._preventPurging){for(var t=0;t<b.length;t++){_(b[t])}b.length=0}},isMounted:function(t){var e=o(t);return!!e&&e.isMounted},getCurrentStackAddendum:function(t){var e="";if(t){var n=E(t),r=t._owner;e+=w(n,t._source,r&&r.getName())}var o=f.current,i=o&&o._debugID;return e+=k.getStackAddendumByID(i)},getStackAddendumByID:function(t){for(var e="";t;)e+=x(t),t=k.getParentID(t);return e},getChildIDs:function(t){var e=o(t);return e?e.childIDs:[]},getDisplayName:function(t){var e=k.getElement(t);return e?E(e):null},getElement:function(t){var e=o(t);return e?e.element:null},getOwnerID:function(t){var e=k.getElement(t);return e&&e._owner?e._owner._debugID:null},getParentID:function(t){var e=o(t);return e?e.parentID:null},getSource:function(t){var e=o(t),n=e?e.element:null;return null!=n?n._source:null},getText:function(t){var e=k.getElement(t);return"string"==typeof e?e:"number"==typeof e?""+e:null},getUpdateCount:function(t){var e=o(t);return e?e.updateCount:0},getRootIDs:c,getRegisteredIDs:a,pushNonStandardWarningStack:function(t,e){if("function"==typeof console.reactStack){var n=[],r=f.current,o=r&&r._debugID;try{for(t&&n.push({name:o?k.getDisplayName(o):null,fileName:e?e.fileName:null,lineNumber:e?e.lineNumber:null});o;){var i=k.getElement(o),a=k.getParentID(o),u=k.getOwnerID(o),s=u?k.getDisplayName(u):null,c=i&&i._source;n.push({name:s,fileName:c?c.fileName:null,lineNumber:c?c.lineNumber:null}),o=a}}catch(t){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};t.exports=k},function(t,e,n){"use strict";var r=n(14),o={listen:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!1),{remove:function(){t.removeEventListener(e,n,!1)}}):t.attachEvent?(t.attachEvent("on"+e,n),{remove:function(){t.detachEvent("on"+e,n)}}):void 0},capture:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!0),{remove:function(){t.removeEventListener(e,n,!0)}}):{remove:r}},registerDefault:function(){}};t.exports=o},function(t,e,n){"use strict";var r=n(173),o=n(175),i=n(76),a=n(89);var u={hasSelectionCapabilities:function(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)},getSelectionInformation:function(){var t=a();return{focusedElem:t,selectionRange:u.hasSelectionCapabilities(t)?u.getSelection(t):null}},restoreSelection:function(t){var e=a(),n=t.focusedElem,r=t.selectionRange;e!==n&&function(t){return o(document.documentElement,t)}(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,r),i(n))},getSelection:function(t){var e;if("selectionStart"in t)e={start:t.selectionStart,end:t.selectionEnd};else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===t&&(e={start:-n.moveStart("character",-t.value.length),end:-n.moveEnd("character",-t.value.length)})}else e=r.getOffsets(t);return e||{start:0,end:0}},setSelection:function(t,e){var n=e.start,o=e.end;if(void 0===o&&(o=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(o,t.value.length);else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var i=t.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",o-n),i.select()}else r.setOffsets(t,e)}};t.exports=u},function(t,e,n){"use strict";t.exports=function(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}},function(t,e,n){"use strict";var r=n(4),o=n(24),i=n(22),a=n(20),u=n(38),s=(n(13),n(6)),c=n(190),l=n(191),f=n(71),d=n(31),h=(n(10),n(192)),p=n(23),y=n(56),g=n(12),v=n(82),m=n(80),b=(n(2),n(36)),_=n(54),w=(n(5),i.ID_ATTRIBUTE_NAME),E=i.ROOT_ATTRIBUTE_NAME,x=1,k=9,S=11,M={};function C(t){return t?t.nodeType===k?t.documentElement:t.firstChild:null}function A(t,e,n,r,o){var i;if(f.logTopLevelRenders){var a=t._currentElement.props.child.type;i="React mount: "+("string"==typeof a?a:a.displayName||a.name),console.time(i)}var u=p.mountComponent(t,n,null,c(t,e),o,0);i&&console.timeEnd(i),t._renderedComponent._topLevelWrapper=t,L._mountImageIntoNode(u,e,t,r,n)}function P(t,e,n,r){var o=g.ReactReconcileTransaction.getPooled(!n&&l.useCreateElement);o.perform(A,null,t,e,o,n,r),g.ReactReconcileTransaction.release(o)}function T(t,e,n){for(0,p.unmountComponent(t,n),e.nodeType===k&&(e=e.documentElement);e.lastChild;)e.removeChild(e.lastChild)}function N(t){var e=C(t);if(e){var n=s.getInstanceFromNode(e);return!(!n||!n._hostParent)}}function O(t){return!(!t||t.nodeType!==x&&t.nodeType!==k&&t.nodeType!==S)}function D(t){var e=function(t){var e=C(t),n=e&&s.getInstanceFromNode(e);return n&&!n._hostParent?n:null}(t);return e?e._hostContainerInfo._topLevelWrapper:null}var R=1,I=function(){this.rootID=R++};I.prototype.isReactComponent={},I.prototype.render=function(){return this.props.child},I.isReactTopLevelWrapper=!0;var L={TopLevelWrapper:I,_instancesByReactRootID:M,scrollMonitor:function(t,e){e()},_updateRootComponent:function(t,e,n,r,o){return L.scrollMonitor(r,function(){y.enqueueElementInternal(t,e,n),o&&y.enqueueCallbackInternal(t,o)}),t},_renderNewRootComponent:function(t,e,n,o){O(e)||r("37"),u.ensureScrollValueMonitoring();var i=m(t,!1);g.batchedUpdates(P,i,e,n,o);var a=i._instance.rootID;return M[a]=i,i},renderSubtreeIntoContainer:function(t,e,n,o){return null!=t&&d.has(t)||r("38"),L._renderSubtreeIntoContainer(t,e,n,o)},_renderSubtreeIntoContainer:function(t,e,n,o){y.validateCallback(o,"ReactDOM.render"),a.isValidElement(e)||r("39","string"==typeof e?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof e?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=e&&void 0!==e.props?" This may be caused by unintentionally loading two independent copies of React.":"");var i,u=a.createElement(I,{child:e});if(t){var s=d.get(t);i=s._processChildContext(s._context)}else i=v;var c=D(n);if(c){var l=c._currentElement.props.child;if(_(l,e)){var f=c._renderedComponent.getPublicInstance(),h=o&&function(){o.call(f)};return L._updateRootComponent(c,u,i,n,h),f}L.unmountComponentAtNode(n)}var p=C(n),g=p&&!!function(t){return t.getAttribute&&t.getAttribute(w)||""}(p),m=N(n),b=g&&!c&&!m,E=L._renderNewRootComponent(u,n,b,i)._renderedComponent.getPublicInstance();return o&&o.call(E),E},render:function(t,e,n){return L._renderSubtreeIntoContainer(null,t,e,n)},unmountComponentAtNode:function(t){O(t)||r("40");var e=D(t);if(!e){N(t),1===t.nodeType&&t.hasAttribute(E);return!1}return delete M[e._instance.rootID],g.batchedUpdates(T,e,t,!1),!0},_mountImageIntoNode:function(t,e,n,i,a){if(O(e)||r("41"),i){var u=C(e);if(h.canReuseMarkup(t,u))return void s.precacheNode(n,u);var c=u.getAttribute(h.CHECKSUM_ATTR_NAME);u.removeAttribute(h.CHECKSUM_ATTR_NAME);var l=u.outerHTML;u.setAttribute(h.CHECKSUM_ATTR_NAME,c);var f=t,d=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++)if(t.charAt(r)!==e.charAt(r))return r;return t.length===e.length?-1:n}(f,l),p=" (client) "+f.substring(d-20,d+20)+"\n (server) "+l.substring(d-20,d+20);e.nodeType===k&&r("42",p)}if(e.nodeType===k&&r("43"),a.useCreateElement){for(;e.lastChild;)e.removeChild(e.lastChild);o.insertTreeBefore(e,t,null)}else b(e,t),s.precacheNode(n,e.firstChild)}};t.exports=L},function(t,e,n){"use strict";var r=n(81);t.exports=function(t){for(var e;(e=t._renderedNodeType)===r.COMPOSITE;)t=t._renderedComponent;return e===r.HOST?t._renderedComponent:e===r.EMPTY?null:void 0}},function(t,e,n){"use strict";t.exports=n(209)},function(t,e,n){"use strict";t.exports=function(t,e,n,r){return 0===r.length?e.get(t)[n]:(e.get(t)[n]=r[0],t)}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"call",value:function(t){return function(t){var e={},n={},r=function r(o){if(e[o])return n[o];e[o]=!0;var i=1/0,a=!0,u=!1,s=void 0;try{for(var c,l=t.outVertices(o)[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value;i=Math.min(i,r(f)-1)}}catch(t){u=!0,s=t}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return i===1/0&&(i=0),n[o]=i,i},o=!0,i=!1,a=void 0;try{for(var u,s=t.vertices()[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value;0===t.inDegree(c)&&r(c)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}var l=1/0,f=!0,d=!1,h=void 0;try{for(var p,y=t.vertices()[Symbol.iterator]();!(f=(p=y.next()).done);f=!0){var g=p.value;l=Math.min(l,n[g])}}catch(t){d=!0,h=t}finally{try{!f&&y.return&&y.return()}finally{if(d)throw h}}var v=!0,m=!1,b=void 0;try{for(var _,w=t.vertices()[Symbol.iterator]();!(v=(_=w.next()).done);v=!0){var E=_.value;n[E]-=l}}catch(t){m=!0,b=t}finally{try{!v&&w.return&&w.return()}finally{if(m)throw b}}return n}(t)}}]),t}();t.exports=o},function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},o=function(t){return 1===t.length&&(t=function(t){return function(e,n){return r(t(e),n)}}(t)),{left:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)<0?r=i+1:o=i}return r},right:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)>0?o=i:r=i+1}return r}}};var i=o(r),a=i.right,u=i.left,s=a,c=function(t,e){null==e&&(e=l);for(var n=0,r=t.length-1,o=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(o,o=t[++n]);return i};function l(t,e){return[t,e]}var f=function(t,e,n){var r,o,i,a,u=t.length,s=e.length,c=new Array(u*s);for(null==n&&(n=l),r=i=0;r<u;++r)for(a=t[r],o=0;o<s;++o,++i)c[i]=n(a,e[o]);return c},d=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},h=function(t){return null===t?NaN:+t},p=function(t,e){var n,r,o=t.length,i=0,a=-1,u=0,s=0;if(null==e)for(;++a<o;)isNaN(n=h(t[a]))||(s+=(r=n-u)*(n-(u+=r/++i)));else for(;++a<o;)isNaN(n=h(e(t[a],a,t)))||(s+=(r=n-u)*(n-(u+=r/++i)));if(i>1)return s/(i-1)},y=function(t,e){var n=p(t,e);return n?Math.sqrt(n):n},g=function(t,e){var n,r,o,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=o=n;++a<i;)null!=(n=t[a])&&(r>n&&(r=n),o<n&&(o=n))}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=o=n;++a<i;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),o<n&&(o=n));return[r,o]},v=Array.prototype,m=v.slice,b=v.map,_=function(t){return function(){return t}},w=function(t){return t},E=function(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(o);++r<o;)i[r]=t+r*n;return i},x=Math.sqrt(50),k=Math.sqrt(10),S=Math.sqrt(2),M=function(t,e,n){var r,o,i,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(o=t,t=e,e=o),0===(a=C(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),i=new Array(o=Math.ceil(e-t+1));++u<o;)i[u]=(t+u)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),i=new Array(o=Math.ceil(t-e+1));++u<o;)i[u]=(t-u)/a;return r&&i.reverse(),i};function C(t,e,n){var r=(e-t)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=x?10:i>=k?5:i>=S?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=x?10:i>=k?5:i>=S?2:1)}function A(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=x?o*=10:i>=k?o*=5:i>=S&&(o*=2),e<t?-o:o}var P=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},T=function(){var t=w,e=g,n=P;function r(r){var o,i,a=r.length,u=new Array(a);for(o=0;o<a;++o)u[o]=t(r[o],o,r);var c=e(u),l=c[0],f=c[1],d=n(u,l,f);Array.isArray(d)||(d=A(l,f,d),d=E(Math.ceil(l/d)*d,f,d));for(var h=d.length;d[0]<=l;)d.shift(),--h;for(;d[h-1]>f;)d.pop(),--h;var p,y=new Array(h+1);for(o=0;o<=h;++o)(p=y[o]=[]).x0=o>0?d[o-1]:l,p.x1=o<h?d[o]:f;for(o=0;o<a;++o)l<=(i=u[o])&&i<=f&&y[s(d,i,0,h)].push(r[o]);return y}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:_(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:_([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?_(m.call(t)):_(t),r):n},r},N=function(t,e,n){if(null==n&&(n=h),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,o=(r-1)*e,i=Math.floor(o),a=+n(t[i],i,t);return a+(+n(t[i+1],i+1,t)-a)*(o-i)}},O=function(t,e,n){return t=b.call(t,h).sort(r),Math.ceil((n-e)/(2*(N(t,.75)-N(t,.25))*Math.pow(t.length,-1/3)))},D=function(t,e,n){return Math.ceil((n-e)/(3.5*y(t)*Math.pow(t.length,-1/3)))},R=function(t,e){var n,r,o=t.length,i=-1;if(null==e){for(;++i<o;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<o;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<o;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<o;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},I=function(t,e){var n,r=t.length,o=r,i=-1,a=0;if(null==e)for(;++i<r;)isNaN(n=h(t[i]))?--o:a+=n;else for(;++i<r;)isNaN(n=h(e(t[i],i,t)))?--o:a+=n;if(o)return a/o},L=function(t,e){var n,o=t.length,i=-1,a=[];if(null==e)for(;++i<o;)isNaN(n=h(t[i]))||a.push(n);else for(;++i<o;)isNaN(n=h(e(t[i],i,t)))||a.push(n);return N(a.sort(r),.5)},F=function(t){for(var e,n,r,o=t.length,i=-1,a=0;++i<o;)a+=t[i].length;for(n=new Array(a);--o>=0;)for(e=(r=t[o]).length;--e>=0;)n[--a]=r[e];return n},B=function(t,e){var n,r,o=t.length,i=-1;if(null==e){for(;++i<o;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<o;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<o;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<o;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},U=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},j=function(t,e){if(n=t.length){var n,o,i=0,a=0,u=t[a];for(null==e&&(e=r);++i<n;)(e(o=t[i],u)<0||0!==e(u,u))&&(u=o,a=i);return 0===e(u,u)?a:void 0}},z=function(t,e,n){for(var r,o,i=(null==n?t.length:n)-(e=null==e?0:+e);i;)o=Math.random()*i--|0,r=t[i+e],t[i+e]=t[o+e],t[o+e]=r;return t},V=function(t,e){var n,r=t.length,o=-1,i=0;if(null==e)for(;++o<r;)(n=+t[o])&&(i+=n);else for(;++o<r;)(n=+e(t[o],o,t))&&(i+=n);return i},W=function(t){if(!(o=t.length))return[];for(var e=-1,n=B(t,Y),r=new Array(n);++e<n;)for(var o,i=-1,a=r[e]=new Array(o);++i<o;)a[i]=t[i][e];return r};function Y(t){return t.length}var q=function(){return W(arguments)},H=Array.prototype.slice,G=function(t){return t},X=1,K=2,$=3,Q=4,Z=1e-6;function J(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function et(){return!this.__axis}function nt(t,e){var n=[],r=null,o=null,i=6,a=6,u=3,s=t===X||t===Q?-1:1,c=t===Q||t===K?"x":"y",l=t===X||t===$?J:tt;function f(f){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==o?e.tickFormat?e.tickFormat.apply(e,n):G:o,p=Math.max(i,0)+u,y=e.range(),g=+y[0]+.5,v=+y[y.length-1]+.5,m=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),b=f.selection?f.selection():f,_=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(d,e).order(),E=w.exit(),x=w.enter().append("g").attr("class","tick"),k=w.select("line"),S=w.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(x),k=k.merge(x.append("line").attr("stroke","currentColor").attr(c+"2",s*i)),S=S.merge(x.append("text").attr("fill","currentColor").attr(c,s*p).attr("dy",t===X?"0em":t===$?"0.71em":"0.32em")),f!==b&&(_=_.transition(f),w=w.transition(f),k=k.transition(f),S=S.transition(f),E=E.transition(f).attr("opacity",Z).attr("transform",function(t){return isFinite(t=m(t))?l(t):this.getAttribute("transform")}),x.attr("opacity",Z).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:m(t))})),E.remove(),_.attr("d",t===Q||t==K?a?"M"+s*a+","+g+"H0.5V"+v+"H"+s*a:"M0.5,"+g+"V"+v:a?"M"+g+","+s*a+"V0.5H"+v+"V"+s*a:"M"+g+",0.5H"+v),w.attr("opacity",1).attr("transform",function(t){return l(m(t))}),k.attr(c+"2",s*i),S.attr(c,s*p).text(h),b.filter(et).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===K?"start":t===Q?"end":"middle"),b.each(function(){this.__axis=m})}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=H.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:H.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:H.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(o=t,f):o},f.tickSize=function(t){return arguments.length?(i=a=+t,f):i},f.tickSizeInner=function(t){return arguments.length?(i=+t,f):i},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}function rt(t){return nt(X,t)}function ot(t){return nt(K,t)}function it(t){return nt($,t)}function at(t){return nt(Q,t)}var ut=n(9),st=n(17),ct=n(3),lt=n(0),ft=n(16),dt=function(t){return function(){return t}},ht=function(t,e,n){this.target=t,this.type=e,this.selection=n};function pt(){lt.e.stopImmediatePropagation()}var yt=function(){lt.e.preventDefault(),lt.e.stopImmediatePropagation()},gt={name:"drag"},vt={name:"space"},mt={name:"handle"},bt={name:"center"},_t={name:"x",handles:["e","w"].map(At),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},wt={name:"y",handles:["n","s"].map(At),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Et={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(At),input:function(t){return t},output:function(t){return t}},xt={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kt={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},St={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Mt={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ct={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function At(t){return{type:t}}function Pt(){return!lt.e.button}function Tt(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Nt(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ot(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Dt(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Rt(){return Ft(_t)}function It(){return Ft(wt)}var Lt=function(){return Ft(Et)};function Ft(t){var e,n=Tt,r=Pt,o=Object(ut.a)(a,"start","brush","end"),i=6;function a(e){var n=e.property("__brush",f).selectAll(".overlay").data([At("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",xt.overlay).merge(n).each(function(){var t=Nt(this).extent;Object(lt.k)(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([At("selection")]).enter().append("rect").attr("class","selection").attr("cursor",xt.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return xt[t.type]}),e.each(u).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function u(){var t=Object(lt.k)(this),e=Nt(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new c(t,e)}function c(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function l(){if(lt.e.touches){if(lt.e.changedTouches.length<lt.e.touches.length)return yt()}else if(e)return;if(r.apply(this,arguments)){var n,o,i,a,c,l,f,d,h,p,y,g,v,m=this,b=lt.e.target.__data__.type,_="selection"===(lt.e.metaKey?b="overlay":b)?gt:lt.e.altKey?bt:mt,w=t===wt?null:Mt[b],E=t===_t?null:Ct[b],x=Nt(m),k=x.extent,S=x.selection,M=k[0][0],C=k[0][1],A=k[1][0],P=k[1][1],T=w&&E&&lt.e.shiftKey,N=Object(lt.h)(m),O=N,D=s(m,arguments).beforestart();"overlay"===b?x.selection=S=[[n=t===wt?M:N[0],i=t===_t?C:N[1]],[c=t===wt?A:n,f=t===_t?P:i]]:(n=S[0][0],i=S[0][1],c=S[1][0],f=S[1][1]),o=n,a=i,l=c,d=f;var R=Object(lt.k)(m).attr("pointer-events","none"),I=R.selectAll(".overlay").attr("cursor",xt[b]);if(lt.e.touches)R.on("touchmove.brush",F,!0).on("touchend.brush touchcancel.brush",U,!0);else{var L=Object(lt.k)(lt.e.view).on("keydown.brush",function(){switch(lt.e.keyCode){case 16:T=w&&E;break;case 18:_===mt&&(w&&(c=l-h*w,n=o+h*w),E&&(f=d-p*E,i=a+p*E),_=bt,B());break;case 32:_!==mt&&_!==bt||(w<0?c=l-h:w>0&&(n=o-h),E<0?f=d-p:E>0&&(i=a-p),_=vt,I.attr("cursor",xt.selection),B());break;default:return}yt()},!0).on("keyup.brush",function(){switch(lt.e.keyCode){case 16:T&&(g=v=T=!1,B());break;case 18:_===bt&&(w<0?c=l:w>0&&(n=o),E<0?f=d:E>0&&(i=a),_=mt,B());break;case 32:_===vt&&(lt.e.altKey?(w&&(c=l-h*w,n=o+h*w),E&&(f=d-p*E,i=a+p*E),_=bt):(w<0?c=l:w>0&&(n=o),E<0?f=d:E>0&&(i=a),_=mt),I.attr("cursor",xt[b]),B());break;default:return}yt()},!0).on("mousemove.brush",F,!0).on("mouseup.brush",U,!0);Object(st.b)(lt.e.view)}pt(),Object(ft.b)(m),u.call(m),D.start()}function F(){var t=Object(lt.h)(m);!T||g||v||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?v=!0:g=!0),O=t,y=!0,yt(),B()}function B(){var t;switch(h=O[0]-N[0],p=O[1]-N[1],_){case vt:case gt:w&&(h=Math.max(M-n,Math.min(A-c,h)),o=n+h,l=c+h),E&&(p=Math.max(C-i,Math.min(P-f,p)),a=i+p,d=f+p);break;case mt:w<0?(h=Math.max(M-n,Math.min(A-n,h)),o=n+h,l=c):w>0&&(h=Math.max(M-c,Math.min(A-c,h)),o=n,l=c+h),E<0?(p=Math.max(C-i,Math.min(P-i,p)),a=i+p,d=f):E>0&&(p=Math.max(C-f,Math.min(P-f,p)),a=i,d=f+p);break;case bt:w&&(o=Math.max(M,Math.min(A,n-h*w)),l=Math.max(M,Math.min(A,c+h*w))),E&&(a=Math.max(C,Math.min(P,i-p*E)),d=Math.max(C,Math.min(P,f+p*E)))}l<o&&(w*=-1,t=n,n=c,c=t,t=o,o=l,l=t,b in kt&&I.attr("cursor",xt[b=kt[b]])),d<a&&(E*=-1,t=i,i=f,f=t,t=a,a=d,d=t,b in St&&I.attr("cursor",xt[b=St[b]])),x.selection&&(S=x.selection),g&&(o=S[0][0],l=S[1][0]),v&&(a=S[0][1],d=S[1][1]),S[0][0]===o&&S[0][1]===a&&S[1][0]===l&&S[1][1]===d||(x.selection=[[o,a],[l,d]],u.call(m),D.brush())}function U(){if(pt(),lt.e.touches){if(lt.e.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),R.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Object(st.c)(lt.e.view,y),L.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),I.attr("cursor",xt.overlay),x.selection&&(S=x.selection),Ot(S)&&(x.selection=null,u.call(m)),D.end()}}function f(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return a.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,o=s(e,arguments),i=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=Object(ct.a)(i,a);function l(t){r.selection=1===t&&Ot(a)?null:c(t),u.call(e),o.brush()}return i&&a?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,o=t.input("function"==typeof n?n.apply(this,e):n,r.extent),i=s(this,e).beforestart();Object(ft.b)(this),r.selection=null==o||Ot(o)?null:o,u.call(this),i.start().brush().end()})},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Object(lt.d)(new ht(a,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},a.extent=function(t){return arguments.length?(n="function"==typeof t?t:dt([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):n},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:dt(!!t),a):r},a.handleSize=function(t){return arguments.length?(i=+t,a):i},a.on=function(){var t=o.on.apply(o,arguments);return t===o?a:t},a}var Bt=Math.cos,Ut=Math.sin,jt=Math.PI,zt=jt/2,Vt=2*jt,Wt=Math.max;var Yt=function(){var t=0,e=null,n=null,r=null;function o(o){var i,a,u,s,c,l,f=o.length,d=[],h=E(f),p=[],y=[],g=y.groups=new Array(f),v=new Array(f*f);for(i=0,c=-1;++c<f;){for(a=0,l=-1;++l<f;)a+=o[c][l];d.push(a),p.push(E(f)),i+=a}for(e&&h.sort(function(t,n){return e(d[t],d[n])}),n&&p.forEach(function(t,e){t.sort(function(t,r){return n(o[e][t],o[e][r])})}),s=(i=Wt(0,Vt-t*f)/i)?t:Vt/f,a=0,c=-1;++c<f;){for(u=a,l=-1;++l<f;){var m=h[c],b=p[m][l],_=o[m][b],w=a,x=a+=_*i;v[b*f+m]={index:m,subindex:b,startAngle:w,endAngle:x,value:_}}g[m]={index:m,startAngle:u,endAngle:a,value:d[m]},a+=s}for(c=-1;++c<f;)for(l=c-1;++l<f;){var k=v[l*f+c],S=v[c*f+l];(k.value||S.value)&&y.push(k.value<S.value?{source:S,target:k}:{source:k,target:S})}return r?y.sort(r):y}return o.padAngle=function(e){return arguments.length?(t=Wt(0,e),o):t},o.sortGroups=function(t){return arguments.length?(e=t,o):e},o.sortSubgroups=function(t){return arguments.length?(n=t,o):n},o.sortChords=function(t){return arguments.length?(null==t?r=null:(r=function(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}(t))._=t,o):r&&r._},o},qt=Array.prototype.slice,Ht=function(t){return function(){return t}},Gt=Math.PI,Xt=2*Gt,Kt=Xt-1e-6;function $t(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Qt(){return new $t}$t.prototype=Qt.prototype={constructor:$t,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,o,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(t,e,n,r,o){t=+t,e=+e,n=+n,r=+r,o=+o;var i=this._x1,a=this._y1,u=n-t,s=r-e,c=i-t,l=a-e,f=c*c+l*l;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(l*u-s*c)>1e-6&&o){var d=n-i,h=r-a,p=u*u+s*s,y=d*d+h*h,g=Math.sqrt(p),v=Math.sqrt(f),m=o*Math.tan((Gt-Math.acos((p+f-y)/(2*g*v)))/2),b=m/v,_=m/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(e+b*l)),this._+="A"+o+","+o+",0,0,"+ +(l*d>c*h)+","+(this._x1=t+_*u)+","+(this._y1=e+_*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,o,i){t=+t,e=+e;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),s=t+a,c=e+u,l=1^i,f=i?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),n&&(f<0&&(f=f%Xt+Xt),f>Kt?this._+="A"+n+","+n+",0,1,"+l+","+(t-a)+","+(e-u)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Gt)+","+l+","+(this._x1=t+n*Math.cos(o))+","+(this._y1=e+n*Math.sin(o))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Zt=Qt;function Jt(t){return t.source}function te(t){return t.target}function ee(t){return t.radius}function ne(t){return t.startAngle}function re(t){return t.endAngle}var oe=function(){var t=Jt,e=te,n=ee,r=ne,o=re,i=null;function a(){var a,u=qt.call(arguments),s=t.apply(this,u),c=e.apply(this,u),l=+n.apply(this,(u[0]=s,u)),f=r.apply(this,u)-zt,d=o.apply(this,u)-zt,h=l*Bt(f),p=l*Ut(f),y=+n.apply(this,(u[0]=c,u)),g=r.apply(this,u)-zt,v=o.apply(this,u)-zt;if(i||(i=a=Zt()),i.moveTo(h,p),i.arc(0,0,l,f,d),f===g&&d===v||(i.quadraticCurveTo(0,0,y*Bt(g),y*Ut(g)),i.arc(0,0,y,g,v)),i.quadraticCurveTo(0,0,h,p),i.closePath(),a)return i=null,a+""||null}return a.radius=function(t){return arguments.length?(n="function"==typeof t?t:Ht(+t),a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ht(+t),a):r},a.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Ht(+t),a):o},a.source=function(e){return arguments.length?(t=e,a):t},a.target=function(t){return arguments.length?(e=t,a):e},a.context=function(t){return arguments.length?(i=null==t?null:t,a):i},a};function ie(){}function ae(t,e){var n=new ie;if(t instanceof ie)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,o=-1,i=t.length;if(null==e)for(;++o<i;)n.set(o,t[o]);else for(;++o<i;)n.set(e(r=t[o],o,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}ie.prototype=ae.prototype={constructor:ie,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ue=ae,se=function(){var t,e,n,r=[],o=[];function i(n,o,a,u){if(o>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,c,l,f=-1,d=n.length,h=r[o++],p=ue(),y=a();++f<d;)(l=p.get(s=h(c=n[f])+""))?l.push(c):p.set(s,[c]);return p.each(function(t,e){u(y,e,i(t,o,a,u))}),y}return n={object:function(t){return i(t,0,ce,le)},map:function(t){return i(t,0,fe,de)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var a,u=o[i-1];return null!=e&&i>=r.length?a=n.entries():(a=[],n.each(function(e,n){a.push({key:n,values:t(e,i)})})),null!=u?a.sort(function(t,e){return u(t.key,e.key)}):a}(i(t,0,fe,de),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return o[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function ce(){return{}}function le(t,e,n){t[e]=n}function fe(){return ue()}function de(t,e,n){t.set(e,n)}function he(){}var pe=ue.prototype;function ye(t,e){var n=new he;if(t instanceof he)t.each(function(t){n.add(t)});else if(t){var r=-1,o=t.length;if(null==e)for(;++r<o;)n.add(t[r]);else for(;++r<o;)n.add(e(t[r],r,t))}return n}he.prototype=ye.prototype={constructor:he,has:pe.has,add:function(t){return this["$"+(t+="")]=t,this},remove:pe.remove,clear:pe.clear,values:pe.keys,size:pe.size,empty:pe.empty,each:pe.each};var ge=ye,ve=function(t){var e=[];for(var n in t)e.push(n);return e},me=function(t){var e=[];for(var n in t)e.push(t[n]);return e},be=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},_e=n(1),we=Array.prototype.slice,Ee=function(t,e){return t-e},xe=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},ke=function(t){return function(){return t}},Se=function(t,e){for(var n,r=-1,o=e.length;++r<o;)if(n=Me(t,e[r]))return n;return 0};function Me(t,e){for(var n=e[0],r=e[1],o=-1,i=0,a=t.length,u=a-1;i<a;u=i++){var s=t[i],c=s[0],l=s[1],f=t[u],d=f[0],h=f[1];if(Ce(s,f,e))return 0;l>r!=h>r&&n<(d-c)*(r-l)/(h-l)+c&&(o=-o)}return o}function Ce(t,e,n){var r;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&function(t,e,n){return t<=e&&e<=n||n<=e&&e<=t}(t[r=+(t[0]===e[0])],n[r],e[r])}var Ae=function(){},Pe=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Te=function(){var t=1,e=1,n=P,r=u;function o(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(Ee);else{var r=g(t),o=r[0],a=r[1];e=A(o,a,e),e=E(Math.floor(o/e)*e,Math.floor(a/e)*e,e)}return e.map(function(e){return i(t,e)})}function i(n,o){var i=[],u=[];return function(n,r,o){var i,u,s,c,l,f,d=new Array,h=new Array;i=u=-1,c=n[0]>=r,Pe[c<<1].forEach(p);for(;++i<t-1;)s=c,c=n[i+1]>=r,Pe[s|c<<1].forEach(p);Pe[c<<0].forEach(p);for(;++u<e-1;){for(i=-1,c=n[u*t+t]>=r,l=n[u*t]>=r,Pe[c<<1|l<<2].forEach(p);++i<t-1;)s=c,c=n[u*t+t+i+1]>=r,f=l,l=n[u*t+i+1]>=r,Pe[s|c<<1|l<<2|f<<3].forEach(p);Pe[c|l<<3].forEach(p)}i=-1,l=n[u*t]>=r,Pe[l<<2].forEach(p);for(;++i<t-1;)f=l,l=n[u*t+i+1]>=r,Pe[l<<2|f<<3].forEach(p);function p(t){var e,n,r=[t[0][0]+i,t[0][1]+u],s=[t[1][0]+i,t[1][1]+u],c=a(r),l=a(s);(e=h[c])?(n=d[l])?(delete h[e.end],delete d[n.start],e===n?(e.ring.push(s),o(e.ring)):d[e.start]=h[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[e.end],e.ring.push(s),h[e.end=l]=e):(e=d[l])?(n=h[c])?(delete d[e.start],delete h[n.end],e===n?(e.ring.push(s),o(e.ring)):d[n.start]=h[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[e.start],e.ring.unshift(r),d[e.start=c]=e):d[c]=h[l]={start:c,end:l,ring:[r,s]}}Pe[l<<3].forEach(p)}(n,o,function(t){r(t,n,o),xe(t)>0?i.push([t]):u.push(t)}),u.forEach(function(t){for(var e,n=0,r=i.length;n<r;++n)if(-1!==Se((e=i[n])[0],t))return void e.push(t)}),{type:"MultiPolygon",value:o,coordinates:i}}function a(e){return 2*e[0]+e[1]*(t+1)*4}function u(n,r,o){n.forEach(function(n){var i,a=n[0],u=n[1],s=0|a,c=0|u,l=r[c*t+s];a>0&&a<t&&s===a&&(i=r[c*t+s-1],n[0]=a+(o-i)/(l-i)-.5),u>0&&u<e&&c===u&&(i=r[(c-1)*t+s],n[1]=u+(o-i)/(l-i)-.5)})}return o.contour=i,o.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),i=Math.ceil(n[1]);if(!(r>0&&i>0))throw new Error("invalid size");return t=r,e=i,o},o.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?ke(we.call(t)):ke(t),o):n},o.smooth=function(t){return arguments.length?(r=t?u:Ae,o):r===u},o};function Ne(t,e,n){for(var r=t.width,o=t.height,i=1+(n<<1),a=0;a<o;++a)for(var u=0,s=0;u<r+n;++u)u<r&&(s+=t.data[u+a*r]),u>=n&&(u>=i&&(s-=t.data[u-i+a*r]),e.data[u-n+a*r]=s/Math.min(u+1,r-1+i-u,i))}function Oe(t,e,n){for(var r=t.width,o=t.height,i=1+(n<<1),a=0;a<r;++a)for(var u=0,s=0;u<o+n;++u)u<o&&(s+=t.data[a+u*r]),u>=n&&(u>=i&&(s-=t.data[a+(u-i)*r]),e.data[a+(u-n)*r]=s/Math.min(u+1,o-1+i-u,i))}function De(t){return t[0]}function Re(t){return t[1]}function Ie(){return 1}var Le=function(){var t=De,e=Re,n=Ie,r=960,o=500,i=20,a=2,u=3*i,s=r+2*u>>a,c=o+2*u>>a,l=ke(20);function f(r){var o=new Float32Array(s*c),f=new Float32Array(s*c);r.forEach(function(r,i,l){var f=+t(r,i,l)+u>>a,d=+e(r,i,l)+u>>a,h=+n(r,i,l);f>=0&&f<s&&d>=0&&d<c&&(o[f+d*s]+=h)}),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a);var h=l(o);if(!Array.isArray(h)){var p=R(o);h=A(0,p,h),(h=E(0,Math.floor(p/h)*h,h)).shift()}return Te().thresholds(h).size([s,c])(o).map(d)}function d(t){return t.value*=Math.pow(2,-2*a),t.coordinates.forEach(h),t}function h(t){t.forEach(p)}function p(t){t.forEach(y)}function y(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function g(){return s=r+2*(u=3*i)>>a,c=o+2*u>>a,f}return f.x=function(e){return arguments.length?(t="function"==typeof e?e:ke(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:ke(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:ke(+t),f):n},f.size=function(t){if(!arguments.length)return[r,o];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,o=n,g()},f.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),g()},f.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?ke(we.call(t)):ke(t),f):l},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return i=Math.round((Math.sqrt(4*t*t+1)-1)/2),g()},f},Fe={},Be={},Ue=34,je=10,ze=13;function Ve(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var We=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,o=[],i=t.length,a=0,u=0,s=i<=0,c=!1;function l(){if(s)return Be;if(c)return c=!1,Fe;var e,r,o=a;if(t.charCodeAt(o)===Ue){for(;a++<i&&t.charCodeAt(a)!==Ue||t.charCodeAt(++a)===Ue;);return(e=a)>=i?s=!0:(r=t.charCodeAt(a++))===je?c=!0:r===ze&&(c=!0,t.charCodeAt(a)===je&&++a),t.slice(o+1,e-1).replace(/""/g,'"')}for(;a<i;){if((r=t.charCodeAt(e=a++))===je)c=!0;else if(r===ze)c=!0,t.charCodeAt(a)===je&&++a;else if(r!==n)continue;return t.slice(o,e)}return s=!0,t.slice(o,i)}for(t.charCodeAt(i-1)===je&&--i,t.charCodeAt(i-1)===ze&&--i;(r=l())!==Be;){for(var f=[];r!==Fe&&r!==Be;)f.push(r),r=l();e&&null==(f=e(f,u++))||o.push(f)}return o}function o(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,o,i=r(t,function(t,r){if(n)return n(t,r-1);o=t,n=e?function(t,e){var n=Ve(t);return function(r,o){return e(n(r),o,t)}}(t,e):Ve(t)});return i.columns=o||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Ye=We(","),qe=Ye.parse,He=Ye.parseRows,Ge=Ye.format,Xe=Ye.formatRows,Ke=We("\t"),$e=Ke.parse,Qe=Ke.parseRows,Ze=Ke.format,Je=Ke.formatRows,tn=n(25);function en(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var nn=function(t,e){return fetch(t,e).then(en)};function rn(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var on=function(t,e){return fetch(t,e).then(rn)};function an(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var un=function(t,e){return fetch(t,e).then(an)};function sn(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),un(e,n).then(function(e){return t(e,r)})}}function cn(t,e,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var o=We(t);return un(e,n).then(function(t){return o.parse(t,r)})}var ln=sn(qe),fn=sn($e),dn=function(t,e){return new Promise(function(n,r){var o=new Image;for(var i in e)o[i]=e[i];o.onerror=r,o.onload=function(){n(o)},o.src=t})};function hn(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var pn=function(t,e){return fetch(t,e).then(hn)};function yn(t){return function(e,n){return un(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}var gn=yn("application/xml"),vn=yn("text/html"),mn=yn("image/svg+xml"),bn=function(t,e){var n;function r(){var r,o,i=n.length,a=0,u=0;for(r=0;r<i;++r)a+=(o=n[r]).x,u+=o.y;for(a=a/i-t,u=u/i-e,r=0;r<i;++r)(o=n[r]).x-=a,o.y-=u}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},_n=function(t){return function(){return t}},wn=function(){return 1e-6*(Math.random()-.5)};function En(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var o,i,a,u,s,c,l,f,d,h=t._root,p={data:r},y=t._x0,g=t._y0,v=t._x1,m=t._y1;if(!h)return t._root=p,t;for(;h.length;)if((c=e>=(i=(y+v)/2))?y=i:v=i,(l=n>=(a=(g+m)/2))?g=a:m=a,o=h,!(h=h[f=l<<1|c]))return o[f]=p,t;if(u=+t._x.call(null,h.data),s=+t._y.call(null,h.data),e===u&&n===s)return p.next=h,o?o[f]=p:t._root=p,t;do{o=o?o[f]=new Array(4):t._root=new Array(4),(c=e>=(i=(y+v)/2))?y=i:v=i,(l=n>=(a=(g+m)/2))?g=a:m=a}while((f=l<<1|c)==(d=(s>=a)<<1|u>=i));return o[d]=h,o[f]=p,t}var xn=function(t,e,n,r,o){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=o};function kn(t){return t[0]}function Sn(t){return t[1]}function Mn(t,e,n){var r=new Cn(null==e?kn:e,null==n?Sn:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Cn(t,e,n,r,o,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function An(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Pn=Mn.prototype=Cn.prototype;function Tn(t){return t.x+t.vx}function Nn(t){return t.y+t.vy}Pn.copy=function(){var t,e,n=new Cn(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=An(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var o=0;o<4;++o)(e=r.source[o])&&(e.length?t.push({source:e,target:r.target[o]=new Array(4)}):r.target[o]=An(e));return n},Pn.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return En(this.cover(e,n),e,n,t)},Pn.addAll=function(t){var e,n,r,o,i=t.length,a=new Array(i),u=new Array(i),s=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(o=+this._y.call(null,e))||(a[n]=r,u[n]=o,r<s&&(s=r),r>l&&(l=r),o<c&&(c=o),o>f&&(f=o));for(l<s&&(s=this._x0,l=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(s,c).cover(l,f),n=0;n<i;++n)En(this,a[n],u[n],t[n]);return this},Pn.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{if(!(n>t||t>o||r>e||e>i))return this;var a,u,s=o-n,c=this._root;switch(u=(e<(r+i)/2)<<1|t<(n+o)/2){case 0:do{(a=new Array(4))[u]=c,c=a}while(i=r+(s*=2),t>(o=n+s)||e>i);break;case 1:do{(a=new Array(4))[u]=c,c=a}while(i=r+(s*=2),(n=o-s)>t||e>i);break;case 2:do{(a=new Array(4))[u]=c,c=a}while(r=i-(s*=2),t>(o=n+s)||r>e);break;case 3:do{(a=new Array(4))[u]=c,c=a}while(r=i-(s*=2),(n=o-s)>t||r>e)}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=o,this._y1=i,this},Pn.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},Pn.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Pn.find=function(t,e,n){var r,o,i,a,u,s,c,l=this._x0,f=this._y0,d=this._x1,h=this._y1,p=[],y=this._root;for(y&&p.push(new xn(y,l,f,d,h)),null==n?n=1/0:(l=t-n,f=e-n,d=t+n,h=e+n,n*=n);s=p.pop();)if(!(!(y=s.node)||(o=s.x0)>d||(i=s.y0)>h||(a=s.x1)<l||(u=s.y1)<f))if(y.length){var g=(o+a)/2,v=(i+u)/2;p.push(new xn(y[3],g,v,a,u),new xn(y[2],o,v,g,u),new xn(y[1],g,i,a,v),new xn(y[0],o,i,g,v)),(c=(e>=v)<<1|t>=g)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=s)}else{var m=t-+this._x.call(null,y.data),b=e-+this._y.call(null,y.data),_=m*m+b*b;if(_<n){var w=Math.sqrt(n=_);l=t-w,f=e-w,d=t+w,h=e+w,r=y.data}}return r},Pn.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,o,i,a,u,s,c,l,f,d,h=this._root,p=this._x0,y=this._y0,g=this._x1,v=this._y1;if(!h)return this;if(h.length)for(;;){if((c=i>=(u=(p+g)/2))?p=u:g=u,(l=a>=(s=(y+v)/2))?y=s:v=s,e=h,!(h=h[f=l<<1|c]))return this;if(!h.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,d=f)}for(;h.data!==t;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):e?(o?e[f]=o:delete e[f],(h=e[0]||e[1]||e[2]||e[3])&&h===(e[3]||e[2]||e[1]||e[0])&&!h.length&&(n?n[d]=h:this._root=h),this):(this._root=o,this)},Pn.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Pn.root=function(){return this._root},Pn.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Pn.visit=function(t){var e,n,r,o,i,a,u=[],s=this._root;for(s&&u.push(new xn(s,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(s=e.node,r=e.x0,o=e.y0,i=e.x1,a=e.y1)&&s.length){var c=(r+i)/2,l=(o+a)/2;(n=s[3])&&u.push(new xn(n,c,l,i,a)),(n=s[2])&&u.push(new xn(n,r,l,c,a)),(n=s[1])&&u.push(new xn(n,c,o,i,l)),(n=s[0])&&u.push(new xn(n,r,o,c,l))}return this},Pn.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new xn(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var o=e.node;if(o.length){var i,a=e.x0,u=e.y0,s=e.x1,c=e.y1,l=(a+s)/2,f=(u+c)/2;(i=o[0])&&n.push(new xn(i,a,u,l,f)),(i=o[1])&&n.push(new xn(i,l,u,s,f)),(i=o[2])&&n.push(new xn(i,a,f,l,c)),(i=o[3])&&n.push(new xn(i,l,f,s,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Pn.x=function(t){return arguments.length?(this._x=t,this):this._x},Pn.y=function(t){return arguments.length?(this._y=t,this):this._y};var On=function(t){var e,n,r=1,o=1;function i(){for(var t,i,u,s,c,l,f,d=e.length,h=0;h<o;++h)for(i=Mn(e,Tn,Nn).visitAfter(a),t=0;t<d;++t)u=e[t],l=n[u.index],f=l*l,s=u.x+u.vx,c=u.y+u.vy,i.visit(p);function p(t,e,n,o,i){var a=t.data,d=t.r,h=l+d;if(!a)return e>s+h||o<s-h||n>c+h||i<c-h;if(a.index>u.index){var p=s-a.x-a.vx,y=c-a.y-a.vy,g=p*p+y*y;g<h*h&&(0===p&&(g+=(p=wn())*p),0===y&&(g+=(y=wn())*y),g=(h-(g=Math.sqrt(g)))/g*r,u.vx+=(p*=g)*(h=(d*=d)/(f+d)),u.vy+=(y*=g)*h,a.vx-=p*(h=1-h),a.vy-=y*h)}}}function a(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function u(){if(e){var r,o,i=e.length;for(n=new Array(i),r=0;r<i;++r)o=e[r],n[o.index]=+t(o,r,e)}}return"function"!=typeof t&&(t=_n(null==t?1:+t)),i.initialize=function(t){e=t,u()},i.iterations=function(t){return arguments.length?(o=+t,i):o},i.strength=function(t){return arguments.length?(r=+t,i):r},i.radius=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),u(),i):t},i};function Dn(t){return t.index}function Rn(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var In=function(t){var e,n,r,o,i,a=Dn,u=function(t){return 1/Math.min(o[t.source.index],o[t.target.index])},s=_n(30),c=1;function l(r){for(var o=0,a=t.length;o<c;++o)for(var u,s,l,f,d,h,p,y=0;y<a;++y)s=(u=t[y]).source,f=(l=u.target).x+l.vx-s.x-s.vx||wn(),d=l.y+l.vy-s.y-s.vy||wn(),f*=h=((h=Math.sqrt(f*f+d*d))-n[y])/h*r*e[y],d*=h,l.vx-=f*(p=i[y]),l.vy-=d*p,s.vx+=f*(p=1-p),s.vy+=d*p}function f(){if(r){var u,s,c=r.length,l=t.length,f=ue(r,a);for(u=0,o=new Array(c);u<l;++u)(s=t[u]).index=u,"object"!=typeof s.source&&(s.source=Rn(f,s.source)),"object"!=typeof s.target&&(s.target=Rn(f,s.target)),o[s.source.index]=(o[s.source.index]||0)+1,o[s.target.index]=(o[s.target.index]||0)+1;for(u=0,i=new Array(l);u<l;++u)s=t[u],i[u]=o[s.source.index]/(o[s.source.index]+o[s.target.index]);e=new Array(l),d(),n=new Array(l),h()}}function d(){if(r)for(var n=0,o=t.length;n<o;++n)e[n]=+u(t[n],n,t)}function h(){if(r)for(var e=0,o=t.length;e<o;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(e){return arguments.length?(t=e,f(),l):t},l.id=function(t){return arguments.length?(a=t,l):a},l.iterations=function(t){return arguments.length?(c=+t,l):c},l.strength=function(t){return arguments.length?(u="function"==typeof t?t:_n(+t),d(),l):u},l.distance=function(t){return arguments.length?(s="function"==typeof t?t:_n(+t),h(),l):s},l},Ln=n(11);function Fn(t){return t.x}function Bn(t){return t.y}var Un=10,jn=Math.PI*(3-Math.sqrt(5)),zn=function(t){var e,n=1,r=.001,o=1-Math.pow(r,1/300),i=0,a=.6,u=ue(),s=Object(Ln.d)(l),c=Object(ut.a)("tick","end");function l(){f(),c.call("tick",e),n<r&&(s.stop(),c.call("end",e))}function f(){var e,r,s=t.length;for(n+=(i-n)*o,u.each(function(t){t(n)}),e=0;e<s;++e)null==(r=t[e]).fx?r.x+=r.vx*=a:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=a:(r.y=r.fy,r.vy=0)}function d(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,isNaN(e.x)||isNaN(e.y)){var o=Un*Math.sqrt(n),i=n*jn;e.x=o*Math.cos(i),e.y=o*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function h(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),d(),e={tick:f,restart:function(){return s.restart(l),e},stop:function(){return s.stop(),e},nodes:function(n){return arguments.length?(t=n,d(),u.each(h),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(o=+t,e):+o},alphaTarget:function(t){return arguments.length?(i=+t,e):i},velocityDecay:function(t){return arguments.length?(a=1-t,e):1-a},force:function(t,n){return arguments.length>1?(null==n?u.remove(t):u.set(t,h(n)),e):u.get(t)},find:function(e,n,r){var o,i,a,u,s,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(a=(o=e-(u=t[c]).x)*o+(i=n-u.y)*i)<r&&(s=u,r=a);return s},on:function(t,n){return arguments.length>1?(c.on(t,n),e):c.on(t)}}},Vn=function(){var t,e,n,r,o=_n(-30),i=1,a=1/0,u=.81;function s(r){var o,i=t.length,a=Mn(t,Fn,Bn).visitAfter(l);for(n=r,o=0;o<i;++o)e=t[o],a.visit(f)}function c(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+o(n,e,t)}}function l(t){var e,n,o,i,a,u=0,s=0;if(t.length){for(o=i=a=0;a<4;++a)(e=t[a])&&(n=Math.abs(e.value))&&(u+=e.value,s+=n,o+=n*e.x,i+=n*e.y);t.x=o/s,t.y=i/s}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=r[e.data.index]}while(e=e.next)}t.value=u}function f(t,o,s,c){if(!t.value)return!0;var l=t.x-e.x,f=t.y-e.y,d=c-o,h=l*l+f*f;if(d*d/u<h)return h<a&&(0===l&&(h+=(l=wn())*l),0===f&&(h+=(f=wn())*f),h<i&&(h=Math.sqrt(i*h)),e.vx+=l*t.value*n/h,e.vy+=f*t.value*n/h),!0;if(!(t.length||h>=a)){(t.data!==e||t.next)&&(0===l&&(h+=(l=wn())*l),0===f&&(h+=(f=wn())*f),h<i&&(h=Math.sqrt(i*h)));do{t.data!==e&&(d=r[t.data.index]*n/h,e.vx+=l*d,e.vy+=f*d)}while(t=t.next)}}return s.initialize=function(e){t=e,c()},s.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),c(),s):o},s.distanceMin=function(t){return arguments.length?(i=t*t,s):Math.sqrt(i)},s.distanceMax=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.theta=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s},Wn=function(t,e,n){var r,o,i,a=_n(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var s=r[a],c=s.x-e||1e-6,l=s.y-n||1e-6,f=Math.sqrt(c*c+l*l),d=(i[a]-f)*o[a]*t/f;s.vx+=c*d,s.vy+=l*d}}function s(){if(r){var e,n=r.length;for(o=new Array(n),i=new Array(n),e=0;e<n;++e)i[e]=+t(r[e],e,r),o[e]=isNaN(i[e])?0:+a(r[e],e,r)}}return"function"!=typeof t&&(t=_n(+t)),null==e&&(e=0),null==n&&(n=0),u.initialize=function(t){r=t,s()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:_n(+t),s(),u):a},u.radius=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),s(),u):t},u.x=function(t){return arguments.length?(e=+t,u):e},u.y=function(t){return arguments.length?(n=+t,u):n},u},Yn=function(t){var e,n,r,o=_n(.1);function i(t){for(var o,i=0,a=e.length;i<a;++i)(o=e[i]).vx+=(r[i]-o.x)*n[i]*t}function a(){if(e){var i,a=e.length;for(n=new Array(a),r=new Array(a),i=0;i<a;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+o(e[i],i,e)}}return"function"!=typeof t&&(t=_n(null==t?0:+t)),i.initialize=function(t){e=t,a()},i.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),a(),i):o},i.x=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),a(),i):t},i},qn=function(t){var e,n,r,o=_n(.1);function i(t){for(var o,i=0,a=e.length;i<a;++i)(o=e[i]).vy+=(r[i]-o.y)*n[i]*t}function a(){if(e){var i,a=e.length;for(n=new Array(a),r=new Array(a),i=0;i<a;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+o(e[i],i,e)}}return"function"!=typeof t&&(t=_n(null==t?0:+t)),i.initialize=function(t){e=t,a()},i.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),a(),i):o},i.y=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),a(),i):t},i},Hn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Gn=function(t){return(t=Hn(Math.abs(t)))?t[1]:NaN},Xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Kn(t){return new $n(t)}function $n(t){if(!(e=Xn.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Kn.prototype=$n.prototype,$n.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Qn,Zn,Jn,tr,er=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(o>0){if(!+t[r])break t;o=0}}return o>0?t.slice(0,o)+t.slice(e+1):t},nr=function(t,e){var n=Hn(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},rr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return nr(100*t,e)},r:nr,s:function(t,e){var n=Hn(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(Qn=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Hn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},or=function(t){return t},ir=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],ar=function(t){var e=t.grouping&&t.thousands?function(t,e){return function(n,r){for(var o=n.length,i=[],a=0,u=t[0],s=0;o>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),i.push(n.substring(o-=u,o+u)),!((s+=u+1)>r));)u=t[a=(a+1)%t.length];return i.reverse().join(e)}}(t.grouping,t.thousands):or,n=t.currency,r=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):or,i=t.percent||"%";function a(t){var a=(t=Kn(t)).fill,u=t.align,s=t.sign,c=t.symbol,l=t.zero,f=t.width,d=t.comma,h=t.precision,p=t.trim,y=t.type;"n"===y?(d=!0,y="g"):rr[y]||(null==h&&(h=12),p=!0,y="g"),(l||"0"===a&&"="===u)&&(l=!0,a="0",u="=");var g="$"===c?n[0]:"#"===c&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",v="$"===c?n[1]:/[%p]/.test(y)?i:"",m=rr[y],b=/[defgprs%]/.test(y);function _(t){var n,i,c,_=g,w=v;if("c"===y)w=m(t)+w,t="";else{var E=(t=+t)<0;if(t=m(Math.abs(t),h),p&&(t=er(t)),E&&0==+t&&(E=!1),_=(E?"("===s?s:"-":"-"===s||"("===s?"":s)+_,w=("s"===y?ir[8+Qn/3]:"")+w+(E&&"("===s?")":""),b)for(n=-1,i=t.length;++n<i;)if(48>(c=t.charCodeAt(n))||c>57){w=(46===c?r+t.slice(n+1):t.slice(n))+w,t=t.slice(0,n);break}}d&&!l&&(t=e(t,1/0));var x=_.length+t.length+w.length,k=x<f?new Array(f-x+1).join(a):"";switch(d&&l&&(t=e(k+t,k.length?f-w.length:1/0),k=""),u){case"<":t=_+t+w+k;break;case"=":t=_+k+t+w;break;case"^":t=k.slice(0,x=k.length>>1)+_+t+w+k.slice(x);break;default:t=k+_+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),_.toString=function(){return t+""},_}return{format:a,formatPrefix:function(t,e){var n=a(((t=Kn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Gn(e)/3))),o=Math.pow(10,-r),i=ir[8+r/3];return function(t){return n(o*t)+i}}}};function ur(t){return Zn=ar(t),Jn=Zn.format,tr=Zn.formatPrefix,Zn}ur({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var sr=function(t){return Math.max(0,-Gn(Math.abs(t)))},cr=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Gn(e)/3)))-Gn(Math.abs(t)))},lr=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Gn(e)-Gn(t))+1},fr=function(){return new dr};function dr(){this.reset()}dr.prototype={constructor:dr,reset:function(){this.s=this.t=0},add:function(t){pr(hr,t,this.t),pr(this,hr.s,this.s),this.s?this.t+=hr.t:this.s=hr.t},valueOf:function(){return this.s}};var hr=new dr;function pr(t,e,n){var r=t.s=e+n,o=r-e,i=r-o;t.t=e-i+(n-o)}var yr=1e-6,gr=Math.PI,vr=gr/2,mr=gr/4,br=2*gr,_r=180/gr,wr=gr/180,Er=Math.abs,xr=Math.atan,kr=Math.atan2,Sr=Math.cos,Mr=Math.ceil,Cr=Math.exp,Ar=(Math.floor,Math.log),Pr=Math.pow,Tr=Math.sin,Nr=Math.sign||function(t){return t>0?1:t<0?-1:0},Or=Math.sqrt,Dr=Math.tan;function Rr(t){return t>1?0:t<-1?gr:Math.acos(t)}function Ir(t){return t>1?vr:t<-1?-vr:Math.asin(t)}function Lr(t){return(t=Tr(t/2))*t}function Fr(){}function Br(t,e){t&&jr.hasOwnProperty(t.type)&&jr[t.type](t,e)}var Ur={Feature:function(t,e){Br(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,o=n.length;++r<o;)Br(n[r].geometry,e)}},jr={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){zr(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)zr(n[r],e,0)},Polygon:function(t,e){Vr(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)Vr(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,o=n.length;++r<o;)Br(n[r],e)}};function zr(t,e,n){var r,o=-1,i=t.length-n;for(e.lineStart();++o<i;)r=t[o],e.point(r[0],r[1],r[2]);e.lineEnd()}function Vr(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)zr(t[n],e,1);e.polygonEnd()}var Wr,Yr,qr,Hr,Gr,Xr=function(t,e){t&&Ur.hasOwnProperty(t.type)?Ur[t.type](t,e):Br(t,e)},Kr=fr(),$r=fr(),Qr={point:Fr,lineStart:Fr,lineEnd:Fr,polygonStart:function(){Kr.reset(),Qr.lineStart=Zr,Qr.lineEnd=Jr},polygonEnd:function(){var t=+Kr;$r.add(t<0?br+t:t),this.lineStart=this.lineEnd=this.point=Fr},sphere:function(){$r.add(br)}};function Zr(){Qr.point=to}function Jr(){eo(Wr,Yr)}function to(t,e){Qr.point=eo,Wr=t,Yr=e,qr=t*=wr,Hr=Sr(e=(e*=wr)/2+mr),Gr=Tr(e)}function eo(t,e){e=(e*=wr)/2+mr;var n=(t*=wr)-qr,r=n>=0?1:-1,o=r*n,i=Sr(e),a=Tr(e),u=Gr*a,s=Hr*i+u*Sr(o),c=u*r*Tr(o);Kr.add(kr(c,s)),qr=t,Hr=i,Gr=a}var no=function(t){return $r.reset(),Xr(t,Qr),2*$r};function ro(t){return[kr(t[1],t[0]),Ir(t[2])]}function oo(t){var e=t[0],n=t[1],r=Sr(n);return[r*Sr(e),r*Tr(e),Tr(n)]}function io(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function ao(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function uo(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function so(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function co(t){var e=Or(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var lo,fo,ho,po,yo,go,vo,mo,bo,_o,wo=fr(),Eo={point:xo,lineStart:So,lineEnd:Mo,polygonStart:function(){Eo.point=Co,Eo.lineStart=Ao,Eo.lineEnd=Po,wo.reset(),Qr.polygonStart()},polygonEnd:function(){Qr.polygonEnd(),Eo.point=xo,Eo.lineStart=So,Eo.lineEnd=Mo,Kr<0?(lo=-(ho=180),fo=-(po=90)):wo>yr?po=90:wo<-yr&&(fo=-90),_o[0]=lo,_o[1]=ho}};function xo(t,e){bo.push(_o=[lo=t,ho=t]),e<fo&&(fo=e),e>po&&(po=e)}function ko(t,e){var n=oo([t*wr,e*wr]);if(mo){var r=ao(mo,n),o=ao([r[1],-r[0],0],r);co(o),o=ro(o);var i,a=t-yo,u=a>0?1:-1,s=o[0]*_r*u,c=Er(a)>180;c^(u*yo<s&&s<u*t)?(i=o[1]*_r)>po&&(po=i):c^(u*yo<(s=(s+360)%360-180)&&s<u*t)?(i=-o[1]*_r)<fo&&(fo=i):(e<fo&&(fo=e),e>po&&(po=e)),c?t<yo?To(lo,t)>To(lo,ho)&&(ho=t):To(t,ho)>To(lo,ho)&&(lo=t):ho>=lo?(t<lo&&(lo=t),t>ho&&(ho=t)):t>yo?To(lo,t)>To(lo,ho)&&(ho=t):To(t,ho)>To(lo,ho)&&(lo=t)}else bo.push(_o=[lo=t,ho=t]);e<fo&&(fo=e),e>po&&(po=e),mo=n,yo=t}function So(){Eo.point=ko}function Mo(){_o[0]=lo,_o[1]=ho,Eo.point=xo,mo=null}function Co(t,e){if(mo){var n=t-yo;wo.add(Er(n)>180?n+(n>0?360:-360):n)}else go=t,vo=e;Qr.point(t,e),ko(t,e)}function Ao(){Qr.lineStart()}function Po(){Co(go,vo),Qr.lineEnd(),Er(wo)>yr&&(lo=-(ho=180)),_o[0]=lo,_o[1]=ho,mo=null}function To(t,e){return(e-=t)<0?e+360:e}function No(t,e){return t[0]-e[0]}function Oo(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var Do,Ro,Io,Lo,Fo,Bo,Uo,jo,zo,Vo,Wo,Yo,qo,Ho,Go,Xo,Ko=function(t){var e,n,r,o,i,a,u;if(po=ho=-(lo=fo=1/0),bo=[],Xr(t,Eo),n=bo.length){for(bo.sort(No),e=1,i=[r=bo[0]];e<n;++e)Oo(r,(o=bo[e])[0])||Oo(r,o[1])?(To(r[0],o[1])>To(r[0],r[1])&&(r[1]=o[1]),To(o[0],r[1])>To(r[0],r[1])&&(r[0]=o[0])):i.push(r=o);for(a=-1/0,e=0,r=i[n=i.length-1];e<=n;r=o,++e)o=i[e],(u=To(r[1],o[0]))>a&&(a=u,lo=o[0],ho=r[1])}return bo=_o=null,lo===1/0||fo===1/0?[[NaN,NaN],[NaN,NaN]]:[[lo,fo],[ho,po]]},$o={sphere:Fr,point:Qo,lineStart:Jo,lineEnd:ni,polygonStart:function(){$o.lineStart=ri,$o.lineEnd=oi},polygonEnd:function(){$o.lineStart=Jo,$o.lineEnd=ni}};function Qo(t,e){t*=wr;var n=Sr(e*=wr);Zo(n*Sr(t),n*Tr(t),Tr(e))}function Zo(t,e,n){Io+=(t-Io)/++Do,Lo+=(e-Lo)/Do,Fo+=(n-Fo)/Do}function Jo(){$o.point=ti}function ti(t,e){t*=wr;var n=Sr(e*=wr);Ho=n*Sr(t),Go=n*Tr(t),Xo=Tr(e),$o.point=ei,Zo(Ho,Go,Xo)}function ei(t,e){t*=wr;var n=Sr(e*=wr),r=n*Sr(t),o=n*Tr(t),i=Tr(e),a=kr(Or((a=Go*i-Xo*o)*a+(a=Xo*r-Ho*i)*a+(a=Ho*o-Go*r)*a),Ho*r+Go*o+Xo*i);Ro+=a,Bo+=a*(Ho+(Ho=r)),Uo+=a*(Go+(Go=o)),jo+=a*(Xo+(Xo=i)),Zo(Ho,Go,Xo)}function ni(){$o.point=Qo}function ri(){$o.point=ii}function oi(){ai(Yo,qo),$o.point=Qo}function ii(t,e){Yo=t,qo=e,t*=wr,e*=wr,$o.point=ai;var n=Sr(e);Ho=n*Sr(t),Go=n*Tr(t),Xo=Tr(e),Zo(Ho,Go,Xo)}function ai(t,e){t*=wr;var n=Sr(e*=wr),r=n*Sr(t),o=n*Tr(t),i=Tr(e),a=Go*i-Xo*o,u=Xo*r-Ho*i,s=Ho*o-Go*r,c=Or(a*a+u*u+s*s),l=Ir(c),f=c&&-l/c;zo+=f*a,Vo+=f*u,Wo+=f*s,Ro+=l,Bo+=l*(Ho+(Ho=r)),Uo+=l*(Go+(Go=o)),jo+=l*(Xo+(Xo=i)),Zo(Ho,Go,Xo)}var ui=function(t){Do=Ro=Io=Lo=Fo=Bo=Uo=jo=zo=Vo=Wo=0,Xr(t,$o);var e=zo,n=Vo,r=Wo,o=e*e+n*n+r*r;return o<1e-12&&(e=Bo,n=Uo,r=jo,Ro<yr&&(e=Io,n=Lo,r=Fo),(o=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[kr(n,e)*_r,Ir(r/Or(o))*_r]},si=function(t){return function(){return t}},ci=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function li(t,e){return[t>gr?t-br:t<-gr?t+br:t,e]}function fi(t,e,n){return(t%=br)?e||n?ci(hi(t),pi(e,n)):hi(t):e||n?pi(e,n):li}function di(t){return function(e,n){return[(e+=t)>gr?e-br:e<-gr?e+br:e,n]}}function hi(t){var e=di(t);return e.invert=di(-t),e}function pi(t,e){var n=Sr(t),r=Tr(t),o=Sr(e),i=Tr(e);function a(t,e){var a=Sr(e),u=Sr(t)*a,s=Tr(t)*a,c=Tr(e),l=c*n+u*r;return[kr(s*o-l*i,u*n-c*r),Ir(l*o+s*i)]}return a.invert=function(t,e){var a=Sr(e),u=Sr(t)*a,s=Tr(t)*a,c=Tr(e),l=c*o-s*i;return[kr(s*o+c*i,u*n+l*r),Ir(l*n-u*r)]},a}li.invert=li;var yi=function(t){function e(e){return(e=t(e[0]*wr,e[1]*wr))[0]*=_r,e[1]*=_r,e}return t=fi(t[0]*wr,t[1]*wr,t.length>2?t[2]*wr:0),e.invert=function(e){return(e=t.invert(e[0]*wr,e[1]*wr))[0]*=_r,e[1]*=_r,e},e};function gi(t,e,n,r,o,i){if(n){var a=Sr(e),u=Tr(e),s=r*n;null==o?(o=e+r*br,i=e-s/2):(o=vi(a,o),i=vi(a,i),(r>0?o<i:o>i)&&(o+=r*br));for(var c,l=o;r>0?l>i:l<i;l-=s)c=ro([a,-u*Sr(l),-u*Tr(l)]),t.point(c[0],c[1])}}function vi(t,e){(e=oo(e))[0]-=t,co(e);var n=Rr(-e[1]);return((-e[2]<0?-n:n)+br-yr)%br}var mi=function(){var t,e,n=si([0,0]),r=si(90),o=si(6),i={point:function(n,r){t.push(n=e(n,r)),n[0]*=_r,n[1]*=_r}};function a(){var a=n.apply(this,arguments),u=r.apply(this,arguments)*wr,s=o.apply(this,arguments)*wr;return t=[],e=fi(-a[0]*wr,-a[1]*wr,0).invert,gi(i,u,s,1),a={type:"Polygon",coordinates:[t]},t=e=null,a}return a.center=function(t){return arguments.length?(n="function"==typeof t?t:si([+t[0],+t[1]]),a):n},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:si(+t),a):r},a.precision=function(t){return arguments.length?(o="function"==typeof t?t:si(+t),a):o},a},bi=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Fr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},_i=function(t,e){return Er(t[0]-e[0])<yr&&Er(t[1]-e[1])<yr};function wi(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var Ei=function(t,e,n,r,o){var i,a,u=[],s=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],a=t[e];if(_i(r,a)){for(o.lineStart(),i=0;i<e;++i)o.point((r=t[i])[0],r[1]);o.lineEnd()}else u.push(n=new wi(r,t,null,!0)),s.push(n.o=new wi(r,null,n,!1)),u.push(n=new wi(a,t,null,!1)),s.push(n.o=new wi(a,null,n,!0))}}),u.length){for(s.sort(e),xi(u),xi(s),i=0,a=s.length;i<a;++i)s[i].e=n=!n;for(var c,l,f=u[0];;){for(var d=f,h=!0;d.v;)if((d=d.n)===f)return;c=d.z,o.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(i=0,a=c.length;i<a;++i)o.point((l=c[i])[0],l[1]);else r(d.x,d.n.x,1,o);d=d.n}else{if(h)for(c=d.p.z,i=c.length-1;i>=0;--i)o.point((l=c[i])[0],l[1]);else r(d.x,d.p.x,-1,o);d=d.p}c=(d=d.o).z,h=!h}while(!d.v);o.lineEnd()}}};function xi(t){if(e=t.length){for(var e,n,r=0,o=t[0];++r<e;)o.n=n=t[r],n.p=o,o=n;o.n=n=t[0],n.p=o}}var ki=fr(),Si=function(t,e){var n=e[0],r=e[1],o=Tr(r),i=[Tr(n),-Sr(n),0],a=0,u=0;ki.reset(),1===o?r=vr+yr:-1===o&&(r=-vr-yr);for(var s=0,c=t.length;s<c;++s)if(f=(l=t[s]).length)for(var l,f,d=l[f-1],h=d[0],p=d[1]/2+mr,y=Tr(p),g=Sr(p),v=0;v<f;++v,h=b,y=w,g=E,d=m){var m=l[v],b=m[0],_=m[1]/2+mr,w=Tr(_),E=Sr(_),x=b-h,k=x>=0?1:-1,S=k*x,M=S>gr,C=y*w;if(ki.add(kr(C*k*Tr(S),g*E+C*Sr(S))),a+=M?x+k*br:x,M^h>=n^b>=n){var A=ao(oo(d),oo(m));co(A);var P=ao(i,A);co(P);var T=(M^x>=0?-1:1)*Ir(P[2]);(r>T||r===T&&(A[0]||A[1]))&&(u+=M^x>=0?1:-1)}}return(a<-yr||a<yr&&ki<-yr)^1&u},Mi=function(t,e,n,r){return function(o){var i,a,u,s=e(o),c=bi(),l=e(c),f=!1,d={point:h,lineStart:y,lineEnd:g,polygonStart:function(){d.point=v,d.lineStart=m,d.lineEnd=b,a=[],i=[]},polygonEnd:function(){d.point=h,d.lineStart=y,d.lineEnd=g,a=F(a);var t=Si(i,r);a.length?(f||(o.polygonStart(),f=!0),Ei(a,Ai,t,n,o)):t&&(f||(o.polygonStart(),f=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),f&&(o.polygonEnd(),f=!1),a=i=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function h(e,n){t(e,n)&&o.point(e,n)}function p(t,e){s.point(t,e)}function y(){d.point=p,s.lineStart()}function g(){d.point=h,s.lineEnd()}function v(t,e){u.push([t,e]),l.point(t,e)}function m(){l.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),l.lineEnd();var t,e,n,r,s=l.clean(),d=c.result(),h=d.length;if(u.pop(),i.push(u),u=null,h)if(1&s){if((e=(n=d[0]).length-1)>0){for(f||(o.polygonStart(),f=!0),o.lineStart(),t=0;t<e;++t)o.point((r=n[t])[0],r[1]);o.lineEnd()}}else h>1&&2&s&&d.push(d.pop().concat(d.shift())),a.push(d.filter(Ci))}return d}};function Ci(t){return t.length>1}function Ai(t,e){return((t=t.x)[0]<0?t[1]-vr-yr:vr-t[1])-((e=e.x)[0]<0?e[1]-vr-yr:vr-e[1])}var Pi=Mi(function(){return!0},function(t){var e,n=NaN,r=NaN,o=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(i,a){var u=i>0?gr:-gr,s=Er(i-n);Er(s-gr)<yr?(t.point(n,r=(r+a)/2>0?vr:-vr),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(i,r),e=0):o!==u&&s>=gr&&(Er(n-o)<yr&&(n-=o*yr),Er(i-u)<yr&&(i-=u*yr),r=function(t,e,n,r){var o,i,a=Tr(t-n);return Er(a)>yr?xr((Tr(e)*(i=Sr(r))*Tr(n)-Tr(r)*(o=Sr(e))*Tr(t))/(o*i*a)):(e+r)/2}(n,r,i,a),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=i,r=a),o=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var o;if(null==t)o=n*vr,r.point(-gr,o),r.point(0,o),r.point(gr,o),r.point(gr,0),r.point(gr,-o),r.point(0,-o),r.point(-gr,-o),r.point(-gr,0),r.point(-gr,o);else if(Er(t[0]-e[0])>yr){var i=t[0]<e[0]?gr:-gr;o=n*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(e[0],e[1])},[-gr,-vr]);var Ti=function(t){var e=Sr(t),n=6*wr,r=e>0,o=Er(e)>yr;function i(t,n){return Sr(t)*Sr(n)>e}function a(t,n,r){var o=[1,0,0],i=ao(oo(t),oo(n)),a=io(i,i),u=i[0],s=a-u*u;if(!s)return!r&&t;var c=e*a/s,l=-e*u/s,f=ao(o,i),d=so(o,c);uo(d,so(i,l));var h=f,p=io(d,h),y=io(h,h),g=p*p-y*(io(d,d)-1);if(!(g<0)){var v=Or(g),m=so(h,(-p-v)/y);if(uo(m,d),m=ro(m),!r)return m;var b,_=t[0],w=n[0],E=t[1],x=n[1];w<_&&(b=_,_=w,w=b);var k=w-_,S=Er(k-gr)<yr;if(!S&&x<E&&(b=E,E=x,x=b),S||k<yr?S?E+x>0^m[1]<(Er(m[0]-_)<yr?E:x):E<=m[1]&&m[1]<=x:k>gr^(_<=m[0]&&m[0]<=w)){var M=so(h,(-p+v)/y);return uo(M,d),[m,ro(M)]}}}function u(e,n){var o=r?t:gr-t,i=0;return e<-o?i|=1:e>o&&(i|=2),n<-o?i|=4:n>o&&(i|=8),i}return Mi(i,function(t){var e,n,s,c,l;return{lineStart:function(){c=s=!1,l=1},point:function(f,d){var h,p=[f,d],y=i(f,d),g=r?y?0:u(f,d):y?u(f+(f<0?gr:-gr),d):0;if(!e&&(c=s=y)&&t.lineStart(),y!==s&&(!(h=a(e,p))||_i(e,h)||_i(p,h))&&(p[0]+=yr,p[1]+=yr,y=i(p[0],p[1])),y!==s)l=0,y?(t.lineStart(),h=a(p,e),t.point(h[0],h[1])):(h=a(e,p),t.point(h[0],h[1]),t.lineEnd()),e=h;else if(o&&e&&r^y){var v;g&n||!(v=a(p,e,!0))||(l=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!y||e&&_i(e,p)||t.point(p[0],p[1]),e=p,s=y,n=g},lineEnd:function(){s&&t.lineEnd(),e=null},clean:function(){return l|(c&&s)<<1}}},function(e,r,o,i){gi(i,t,n,o,e,r)},r?[0,-t]:[-gr,t-gr])},Ni=function(t,e,n,r,o,i){var a,u=t[0],s=t[1],c=0,l=1,f=e[0]-u,d=e[1]-s;if(a=n-u,f||!(a>0)){if(a/=f,f<0){if(a<c)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>c&&(c=a)}if(a=o-u,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>c&&(c=a)}else if(f>0){if(a<c)return;a<l&&(l=a)}if(a=r-s,d||!(a>0)){if(a/=d,d<0){if(a<c)return;a<l&&(l=a)}else if(d>0){if(a>l)return;a>c&&(c=a)}if(a=i-s,d||!(a<0)){if(a/=d,d<0){if(a>l)return;a>c&&(c=a)}else if(d>0){if(a<c)return;a<l&&(l=a)}return c>0&&(t[0]=u+c*f,t[1]=s+c*d),l<1&&(e[0]=u+l*f,e[1]=s+l*d),!0}}}}},Oi=1e9,Di=-Oi;function Ri(t,e,n,r){function o(o,i){return t<=o&&o<=n&&e<=i&&i<=r}function i(o,i,u,c){var l=0,f=0;if(null==o||(l=a(o,u))!==(f=a(i,u))||s(o,i)<0^u>0)do{c.point(0===l||3===l?t:n,l>1?r:e)}while((l=(l+u+4)%4)!==f);else c.point(i[0],i[1])}function a(r,o){return Er(r[0]-t)<yr?o>0?0:3:Er(r[0]-n)<yr?o>0?2:1:Er(r[1]-e)<yr?o>0?1:0:o>0?3:2}function u(t,e){return s(t.x,e.x)}function s(t,e){var n=a(t,1),r=a(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(a){var s,c,l,f,d,h,p,y,g,v,m,b=a,_=bi(),w={point:E,lineStart:function(){w.point=x,c&&c.push(l=[]);v=!0,g=!1,p=y=NaN},lineEnd:function(){s&&(x(f,d),h&&g&&_.rejoin(),s.push(_.result()));w.point=E,g&&b.lineEnd()},polygonStart:function(){b=_,s=[],c=[],m=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,o=c.length;n<o;++n)for(var i,a,u=c[n],s=1,l=u.length,f=u[0],d=f[0],h=f[1];s<l;++s)i=d,a=h,f=u[s],d=f[0],h=f[1],a<=r?h>r&&(d-i)*(r-a)>(h-a)*(t-i)&&++e:h<=r&&(d-i)*(r-a)<(h-a)*(t-i)&&--e;return e}(),n=m&&e,o=(s=F(s)).length;(n||o)&&(a.polygonStart(),n&&(a.lineStart(),i(null,null,1,a),a.lineEnd()),o&&Ei(s,u,e,i,a),a.polygonEnd());b=a,s=c=l=null}};function E(t,e){o(t,e)&&b.point(t,e)}function x(i,a){var u=o(i,a);if(c&&l.push([i,a]),v)f=i,d=a,h=u,v=!1,u&&(b.lineStart(),b.point(i,a));else if(u&&g)b.point(i,a);else{var s=[p=Math.max(Di,Math.min(Oi,p)),y=Math.max(Di,Math.min(Oi,y))],_=[i=Math.max(Di,Math.min(Oi,i)),a=Math.max(Di,Math.min(Oi,a))];Ni(s,_,t,e,n,r)?(g||(b.lineStart(),b.point(s[0],s[1])),b.point(_[0],_[1]),u||b.lineEnd(),m=!1):u&&(b.lineStart(),b.point(i,a),m=!1)}p=i,y=a,g=u}return w}}var Ii,Li,Fi,Bi=function(){var t,e,n,r=0,o=0,i=960,a=500;return n={stream:function(n){return t&&e===n?t:t=Ri(r,o,i,a)(e=n)},extent:function(u){return arguments.length?(r=+u[0][0],o=+u[0][1],i=+u[1][0],a=+u[1][1],t=e=null,n):[[r,o],[i,a]]}}},Ui=fr(),ji={sphere:Fr,point:Fr,lineStart:function(){ji.point=Vi,ji.lineEnd=zi},lineEnd:Fr,polygonStart:Fr,polygonEnd:Fr};function zi(){ji.point=ji.lineEnd=Fr}function Vi(t,e){Ii=t*=wr,Li=Tr(e*=wr),Fi=Sr(e),ji.point=Wi}function Wi(t,e){t*=wr;var n=Tr(e*=wr),r=Sr(e),o=Er(t-Ii),i=Sr(o),a=r*Tr(o),u=Fi*n-Li*r*i,s=Li*n+Fi*r*i;Ui.add(kr(Or(a*a+u*u),s)),Ii=t,Li=n,Fi=r}var Yi=function(t){return Ui.reset(),Xr(t,ji),+Ui},qi=[null,null],Hi={type:"LineString",coordinates:qi},Gi=function(t,e){return qi[0]=t,qi[1]=e,Yi(Hi)},Xi={Feature:function(t,e){return $i(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,o=n.length;++r<o;)if($i(n[r].geometry,e))return!0;return!1}},Ki={Sphere:function(){return!0},Point:function(t,e){return Qi(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Qi(n[r],e))return!0;return!1},LineString:function(t,e){return Zi(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Zi(n[r],e))return!0;return!1},Polygon:function(t,e){return Ji(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Ji(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,o=n.length;++r<o;)if($i(n[r],e))return!0;return!1}};function $i(t,e){return!(!t||!Ki.hasOwnProperty(t.type))&&Ki[t.type](t,e)}function Qi(t,e){return 0===Gi(t,e)}function Zi(t,e){var n=Gi(t[0],t[1]);return Gi(t[0],e)+Gi(e,t[1])<=n+yr}function Ji(t,e){return!!Si(t.map(ta),ea(e))}function ta(t){return(t=t.map(ea)).pop(),t}function ea(t){return[t[0]*wr,t[1]*wr]}var na=function(t,e){return(t&&Xi.hasOwnProperty(t.type)?Xi[t.type]:$i)(t,e)};function ra(t,e,n){var r=E(t,e-yr,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function oa(t,e,n){var r=E(t,e-yr,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function ia(){var t,e,n,r,o,i,a,u,s,c,l,f,d=10,h=d,p=90,y=360,g=2.5;function v(){return{type:"MultiLineString",coordinates:m()}}function m(){return E(Mr(r/p)*p,n,p).map(l).concat(E(Mr(u/y)*y,a,y).map(f)).concat(E(Mr(e/d)*d,t,d).filter(function(t){return Er(t%p)>yr}).map(s)).concat(E(Mr(i/h)*h,o,h).filter(function(t){return Er(t%y)>yr}).map(c))}return v.lines=function(){return m().map(function(t){return{type:"LineString",coordinates:t}})},v.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(a).slice(1),l(n).reverse().slice(1),f(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],u=+t[0][1],a=+t[1][1],r>n&&(t=r,r=n,n=t),u>a&&(t=u,u=a,a=t),v.precision(g)):[[r,u],[n,a]]},v.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],i=+n[0][1],o=+n[1][1],e>t&&(n=e,e=t,t=n),i>o&&(n=i,i=o,o=n),v.precision(g)):[[e,i],[t,o]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],y=+t[1],v):[p,y]},v.stepMinor=function(t){return arguments.length?(d=+t[0],h=+t[1],v):[d,h]},v.precision=function(d){return arguments.length?(g=+d,s=ra(i,o,90),c=oa(e,t,g),l=ra(u,a,90),f=oa(r,n,g),v):g},v.extentMajor([[-180,-90+yr],[180,90-yr]]).extentMinor([[-180,-80-yr],[180,80+yr]])}function aa(){return ia()()}var ua,sa,ca,la,fa=function(t,e){var n=t[0]*wr,r=t[1]*wr,o=e[0]*wr,i=e[1]*wr,a=Sr(r),u=Tr(r),s=Sr(i),c=Tr(i),l=a*Sr(n),f=a*Tr(n),d=s*Sr(o),h=s*Tr(o),p=2*Ir(Or(Lr(i-r)+a*s*Lr(o-n))),y=Tr(p),g=p?function(t){var e=Tr(t*=p)/y,n=Tr(p-t)/y,r=n*l+e*d,o=n*f+e*h,i=n*u+e*c;return[kr(o,r)*_r,kr(i,Or(r*r+o*o))*_r]}:function(){return[n*_r,r*_r]};return g.distance=p,g},da=function(t){return t},ha=fr(),pa=fr(),ya={point:Fr,lineStart:Fr,lineEnd:Fr,polygonStart:function(){ya.lineStart=ga,ya.lineEnd=ba},polygonEnd:function(){ya.lineStart=ya.lineEnd=ya.point=Fr,ha.add(Er(pa)),pa.reset()},result:function(){var t=ha/2;return ha.reset(),t}};function ga(){ya.point=va}function va(t,e){ya.point=ma,ua=ca=t,sa=la=e}function ma(t,e){pa.add(la*t-ca*e),ca=t,la=e}function ba(){ma(ua,sa)}var _a=ya,wa=1/0,Ea=wa,xa=-wa,ka=xa;var Sa,Ma,Ca,Aa,Pa={point:function(t,e){t<wa&&(wa=t);t>xa&&(xa=t);e<Ea&&(Ea=e);e>ka&&(ka=e)},lineStart:Fr,lineEnd:Fr,polygonStart:Fr,polygonEnd:Fr,result:function(){var t=[[wa,Ea],[xa,ka]];return xa=ka=-(Ea=wa=1/0),t}},Ta=0,Na=0,Oa=0,Da=0,Ra=0,Ia=0,La=0,Fa=0,Ba=0,Ua={point:ja,lineStart:za,lineEnd:Ya,polygonStart:function(){Ua.lineStart=qa,Ua.lineEnd=Ha},polygonEnd:function(){Ua.point=ja,Ua.lineStart=za,Ua.lineEnd=Ya},result:function(){var t=Ba?[La/Ba,Fa/Ba]:Ia?[Da/Ia,Ra/Ia]:Oa?[Ta/Oa,Na/Oa]:[NaN,NaN];return Ta=Na=Oa=Da=Ra=Ia=La=Fa=Ba=0,t}};function ja(t,e){Ta+=t,Na+=e,++Oa}function za(){Ua.point=Va}function Va(t,e){Ua.point=Wa,ja(Ca=t,Aa=e)}function Wa(t,e){var n=t-Ca,r=e-Aa,o=Or(n*n+r*r);Da+=o*(Ca+t)/2,Ra+=o*(Aa+e)/2,Ia+=o,ja(Ca=t,Aa=e)}function Ya(){Ua.point=ja}function qa(){Ua.point=Ga}function Ha(){Xa(Sa,Ma)}function Ga(t,e){Ua.point=Xa,ja(Sa=Ca=t,Ma=Aa=e)}function Xa(t,e){var n=t-Ca,r=e-Aa,o=Or(n*n+r*r);Da+=o*(Ca+t)/2,Ra+=o*(Aa+e)/2,Ia+=o,La+=(o=Aa*t-Ca*e)*(Ca+t),Fa+=o*(Aa+e),Ba+=3*o,ja(Ca=t,Aa=e)}var Ka=Ua;function $a(t){this._context=t}$a.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,br)}},result:Fr};var Qa,Za,Ja,tu,eu,nu=fr(),ru={point:Fr,lineStart:function(){ru.point=ou},lineEnd:function(){Qa&&iu(Za,Ja),ru.point=Fr},polygonStart:function(){Qa=!0},polygonEnd:function(){Qa=null},result:function(){var t=+nu;return nu.reset(),t}};function ou(t,e){ru.point=iu,Za=tu=t,Ja=eu=e}function iu(t,e){tu-=t,eu-=e,nu.add(Or(tu*tu+eu*eu)),tu=t,eu=e}var au=ru;function uu(){this._string=[]}function su(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}uu.prototype={_radius:4.5,_circle:su(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=su(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var cu=function(t,e){var n,r,o=4.5;function i(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),Xr(t,n(r))),r.result()}return i.area=function(t){return Xr(t,n(_a)),_a.result()},i.measure=function(t){return Xr(t,n(au)),au.result()},i.bounds=function(t){return Xr(t,n(Pa)),Pa.result()},i.centroid=function(t){return Xr(t,n(Ka)),Ka.result()},i.projection=function(e){return arguments.length?(n=null==e?(t=null,da):(t=e).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(e=null,new uu):new $a(e=t),"function"!=typeof o&&r.pointRadius(o),i):e},i.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),i):o},i.projection(t).context(e)},lu=function(t){return{stream:fu(t)}};function fu(t){return function(e){var n=new du;for(var r in t)n[r]=t[r];return n.stream=e,n}}function du(){}function hu(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Xr(n,t.stream(Pa)),e(Pa.result()),null!=r&&t.clipExtent(r),t}function pu(t,e,n){return hu(t,function(n){var r=e[1][0]-e[0][0],o=e[1][1]-e[0][1],i=Math.min(r/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),a=+e[0][0]+(r-i*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(o-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([a,u])},n)}function yu(t,e,n){return pu(t,[[0,0],e],n)}function gu(t,e,n){return hu(t,function(n){var r=+e,o=r/(n[1][0]-n[0][0]),i=(r-o*(n[1][0]+n[0][0]))/2,a=-o*n[0][1];t.scale(150*o).translate([i,a])},n)}function vu(t,e,n){return hu(t,function(n){var r=+e,o=r/(n[1][1]-n[0][1]),i=-o*n[0][0],a=(r-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([i,a])},n)}du.prototype={constructor:du,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var mu=16,bu=Sr(30*wr),_u=function(t,e){return+e?function(t,e){function n(r,o,i,a,u,s,c,l,f,d,h,p,y,g){var v=c-r,m=l-o,b=v*v+m*m;if(b>4*e&&y--){var _=a+d,w=u+h,E=s+p,x=Or(_*_+w*w+E*E),k=Ir(E/=x),S=Er(Er(E)-1)<yr||Er(i-f)<yr?(i+f)/2:kr(w,_),M=t(S,k),C=M[0],A=M[1],P=C-r,T=A-o,N=m*P-v*T;(N*N/b>e||Er((v*P+m*T)/b-.5)>.3||a*d+u*h+s*p<bu)&&(n(r,o,i,a,u,s,C,A,S,_/=x,w/=x,E,y,g),g.point(C,A),n(C,A,S,_,w,E,c,l,f,d,h,p,y,g))}}return function(e){var r,o,i,a,u,s,c,l,f,d,h,p,y={point:g,lineStart:v,lineEnd:b,polygonStart:function(){e.polygonStart(),y.lineStart=_},polygonEnd:function(){e.polygonEnd(),y.lineStart=v}};function g(n,r){n=t(n,r),e.point(n[0],n[1])}function v(){l=NaN,y.point=m,e.lineStart()}function m(r,o){var i=oo([r,o]),a=t(r,o);n(l,f,c,d,h,p,l=a[0],f=a[1],c=r,d=i[0],h=i[1],p=i[2],mu,e),e.point(l,f)}function b(){y.point=g,e.lineEnd()}function _(){v(),y.point=w,y.lineEnd=E}function w(t,e){m(r=t,e),o=l,i=f,a=d,u=h,s=p,y.point=m}function E(){n(l,f,c,d,h,p,o,i,r,a,u,s,mu,e),y.lineEnd=b,b()}return y}}(t,e):function(t){return fu({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var wu=fu({point:function(t,e){this.stream.point(t*wr,e*wr)}});function Eu(t,e,n,r){var o=Sr(r),i=Tr(r),a=o*t,u=i*t,s=o/t,c=i/t,l=(i*n-o*e)/t,f=(i*e+o*n)/t;function d(t,r){return[a*t-u*r+e,n-u*t-a*r]}return d.invert=function(t,e){return[s*t-c*e+l,f-c*t-s*e]},d}function xu(t){return ku(function(){return t})()}function ku(t){var e,n,r,o,i,a,u,s,c,l,f=150,d=480,h=250,p=0,y=0,g=0,v=0,m=0,b=0,_=null,w=Pi,E=null,x=da,k=.5;function S(t){return s(t[0]*wr,t[1]*wr)}function M(t){return(t=s.invert(t[0],t[1]))&&[t[0]*_r,t[1]*_r]}function C(){var t=Eu(f,0,0,b).apply(null,e(p,y)),r=(b?Eu:function(t,e,n){function r(r,o){return[e+t*r,n-t*o]}return r.invert=function(r,o){return[(r-e)/t,(n-o)/t]},r})(f,d-t[0],h-t[1],b);return n=fi(g,v,m),u=ci(e,r),s=ci(n,u),a=_u(u,k),A()}function A(){return c=l=null,S}return S.stream=function(t){return c&&l===t?c:c=wu(function(t){return fu({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(w(a(x(l=t)))))},S.preclip=function(t){return arguments.length?(w=t,_=void 0,A()):w},S.postclip=function(t){return arguments.length?(x=t,E=r=o=i=null,A()):x},S.clipAngle=function(t){return arguments.length?(w=+t?Ti(_=t*wr):(_=null,Pi),A()):_*_r},S.clipExtent=function(t){return arguments.length?(x=null==t?(E=r=o=i=null,da):Ri(E=+t[0][0],r=+t[0][1],o=+t[1][0],i=+t[1][1]),A()):null==E?null:[[E,r],[o,i]]},S.scale=function(t){return arguments.length?(f=+t,C()):f},S.translate=function(t){return arguments.length?(d=+t[0],h=+t[1],C()):[d,h]},S.center=function(t){return arguments.length?(p=t[0]%360*wr,y=t[1]%360*wr,C()):[p*_r,y*_r]},S.rotate=function(t){return arguments.length?(g=t[0]%360*wr,v=t[1]%360*wr,m=t.length>2?t[2]%360*wr:0,C()):[g*_r,v*_r,m*_r]},S.angle=function(t){return arguments.length?(b=t%360*wr,C()):b*_r},S.precision=function(t){return arguments.length?(a=_u(u,k=t*t),A()):Or(k)},S.fitExtent=function(t,e){return pu(S,t,e)},S.fitSize=function(t,e){return yu(S,t,e)},S.fitWidth=function(t,e){return gu(S,t,e)},S.fitHeight=function(t,e){return vu(S,t,e)},function(){return e=t.apply(this,arguments),S.invert=e.invert&&M,C()}}function Su(t){var e=0,n=gr/3,r=ku(t),o=r(e,n);return o.parallels=function(t){return arguments.length?r(e=t[0]*wr,n=t[1]*wr):[e*_r,n*_r]},o}function Mu(t,e){var n=Tr(t),r=(n+Tr(e))/2;if(Er(r)<yr)return function(t){var e=Sr(t);function n(t,n){return[t*e,Tr(n)/e]}return n.invert=function(t,n){return[t/e,Ir(n*e)]},n}(t);var o=1+n*(2*r-n),i=Or(o)/r;function a(t,e){var n=Or(o-2*r*Tr(e))/r;return[n*Tr(t*=r),i-n*Sr(t)]}return a.invert=function(t,e){var n=i-e;return[kr(t,Er(n))/r*Nr(n),Ir((o-(t*t+n*n)*r*r)/(2*r))]},a}var Cu=function(){return Su(Mu).scale(155.424).center([0,33.6442])},Au=function(){return Cu().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Pu=function(){var t,e,n,r,o,i,a=Au(),u=Cu().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=Cu().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(t,e){i=[t,e]}};function l(t){var e=t[0],a=t[1];return i=null,n.point(e,a),i||(r.point(e,a),i)||(o.point(e,a),i)}function f(){return t=e=null,l}return l.invert=function(t){var e=a.scale(),n=a.translate(),r=(t[0]-n[0])/e,o=(t[1]-n[1])/e;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?u:o>=.166&&o<.234&&r>=-.214&&r<-.115?s:a).invert(t)},l.stream=function(n){return t&&e===n?t:t=function(t){var e=t.length;return{point:function(n,r){for(var o=-1;++o<e;)t[o].point(n,r)},sphere:function(){for(var n=-1;++n<e;)t[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)t[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)t[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)t[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)t[n].polygonEnd()}}}([a.stream(e=n),u.stream(n),s.stream(n)])},l.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),s.precision(t),f()):a.precision()},l.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),s.scale(t),l.translate(a.translate())):a.scale()},l.translate=function(t){if(!arguments.length)return a.translate();var e=a.scale(),i=+t[0],l=+t[1];return n=a.translate(t).clipExtent([[i-.455*e,l-.238*e],[i+.455*e,l+.238*e]]).stream(c),r=u.translate([i-.307*e,l+.201*e]).clipExtent([[i-.425*e+yr,l+.12*e+yr],[i-.214*e-yr,l+.234*e-yr]]).stream(c),o=s.translate([i-.205*e,l+.212*e]).clipExtent([[i-.214*e+yr,l+.166*e+yr],[i-.115*e-yr,l+.234*e-yr]]).stream(c),f()},l.fitExtent=function(t,e){return pu(l,t,e)},l.fitSize=function(t,e){return yu(l,t,e)},l.fitWidth=function(t,e){return gu(l,t,e)},l.fitHeight=function(t,e){return vu(l,t,e)},l.scale(1070)};function Tu(t){return function(e,n){var r=Sr(e),o=Sr(n),i=t(r*o);return[i*o*Tr(e),i*Tr(n)]}}function Nu(t){return function(e,n){var r=Or(e*e+n*n),o=t(r),i=Tr(o),a=Sr(o);return[kr(e*i,r*a),Ir(r&&n*i/r)]}}var Ou=Tu(function(t){return Or(2/(1+t))});Ou.invert=Nu(function(t){return 2*Ir(t/2)});var Du=function(){return xu(Ou).scale(124.75).clipAngle(179.999)},Ru=Tu(function(t){return(t=Rr(t))&&t/Tr(t)});Ru.invert=Nu(function(t){return t});var Iu=function(){return xu(Ru).scale(79.4188).clipAngle(179.999)};function Lu(t,e){return[t,Ar(Dr((vr+e)/2))]}Lu.invert=function(t,e){return[t,2*xr(Cr(e))-vr]};var Fu=function(){return Bu(Lu).scale(961/br)};function Bu(t){var e,n,r,o=xu(t),i=o.center,a=o.scale,u=o.translate,s=o.clipExtent,c=null;function l(){var i=gr*a(),u=o(yi(o.rotate()).invert([0,0]));return s(null==c?[[u[0]-i,u[1]-i],[u[0]+i,u[1]+i]]:t===Lu?[[Math.max(u[0]-i,c),e],[Math.min(u[0]+i,n),r]]:[[c,Math.max(u[1]-i,e)],[n,Math.min(u[1]+i,r)]])}return o.scale=function(t){return arguments.length?(a(t),l()):a()},o.translate=function(t){return arguments.length?(u(t),l()):u()},o.center=function(t){return arguments.length?(i(t),l()):i()},o.clipExtent=function(t){return arguments.length?(null==t?c=e=n=r=null:(c=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),l()):null==c?null:[[c,e],[n,r]]},l()}function Uu(t){return Dr((vr+t)/2)}function ju(t,e){var n=Sr(t),r=t===e?Tr(t):Ar(n/Sr(e))/Ar(Uu(e)/Uu(t)),o=n*Pr(Uu(t),r)/r;if(!r)return Lu;function i(t,e){o>0?e<-vr+yr&&(e=-vr+yr):e>vr-yr&&(e=vr-yr);var n=o/Pr(Uu(e),r);return[n*Tr(r*t),o-n*Sr(r*t)]}return i.invert=function(t,e){var n=o-e,i=Nr(r)*Or(t*t+n*n);return[kr(t,Er(n))/r*Nr(n),2*xr(Pr(o/i,1/r))-vr]},i}var zu=function(){return Su(ju).scale(109.5).parallels([30,30])};function Vu(t,e){return[t,e]}Vu.invert=Vu;var Wu=function(){return xu(Vu).scale(152.63)};function Yu(t,e){var n=Sr(t),r=t===e?Tr(t):(n-Sr(e))/(e-t),o=n/r+t;if(Er(r)<yr)return Vu;function i(t,e){var n=o-e,i=r*t;return[n*Tr(i),o-n*Sr(i)]}return i.invert=function(t,e){var n=o-e;return[kr(t,Er(n))/r*Nr(n),o-Nr(r)*Or(t*t+n*n)]},i}var qu=function(){return Su(Yu).scale(131.154).center([0,13.9389])},Hu=1.340264,Gu=-.081106,Xu=893e-6,Ku=.003796,$u=Or(3)/2;function Qu(t,e){var n=Ir($u*Tr(e)),r=n*n,o=r*r*r;return[t*Sr(n)/($u*(Hu+3*Gu*r+o*(7*Xu+9*Ku*r))),n*(Hu+Gu*r+o*(Xu+Ku*r))]}Qu.invert=function(t,e){for(var n,r=e,o=r*r,i=o*o*o,a=0;a<12&&(i=(o=(r-=n=(r*(Hu+Gu*o+i*(Xu+Ku*o))-e)/(Hu+3*Gu*o+i*(7*Xu+9*Ku*o)))*r)*o*o,!(Er(n)<1e-12));++a);return[$u*t*(Hu+3*Gu*o+i*(7*Xu+9*Ku*o))/Sr(r),Ir(Tr(r)/$u)]};var Zu=function(){return xu(Qu).scale(177.158)};function Ju(t,e){var n=Sr(e),r=Sr(t)*n;return[n*Tr(t)/r,Tr(e)/r]}Ju.invert=Nu(xr);var ts=function(){return xu(Ju).scale(144.049).clipAngle(60)};function es(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?da:fu({point:function(o,i){this.stream.point(o*t+n,i*e+r)}})}var ns=function(){var t,e,n,r,o,i,a=1,u=0,s=0,c=1,l=1,f=da,d=null,h=da;function p(){return r=o=null,i}return i={stream:function(t){return r&&o===t?r:r=f(h(o=t))},postclip:function(r){return arguments.length?(h=r,d=t=e=n=null,p()):h},clipExtent:function(r){return arguments.length?(h=null==r?(d=t=e=n=null,da):Ri(d=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),p()):null==d?null:[[d,t],[e,n]]},scale:function(t){return arguments.length?(f=es((a=+t)*c,a*l,u,s),p()):a},translate:function(t){return arguments.length?(f=es(a*c,a*l,u=+t[0],s=+t[1]),p()):[u,s]},reflectX:function(t){return arguments.length?(f=es(a*(c=t?-1:1),a*l,u,s),p()):c<0},reflectY:function(t){return arguments.length?(f=es(a*c,a*(l=t?-1:1),u,s),p()):l<0},fitExtent:function(t,e){return pu(i,t,e)},fitSize:function(t,e){return yu(i,t,e)},fitWidth:function(t,e){return gu(i,t,e)},fitHeight:function(t,e){return vu(i,t,e)}}};function rs(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}rs.invert=function(t,e){var n,r=e,o=25;do{var i=r*r,a=i*i;r-=n=(r*(1.007226+i*(.015085+a*(.028874*i-.044475-.005916*a)))-e)/(1.007226+i*(.045255+a*(.259866*i-.311325-.005916*11*a)))}while(Er(n)>yr&&--o>0);return[t/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};var os=function(){return xu(rs).scale(175.295)};function is(t,e){return[Sr(e)*Tr(t),Tr(e)]}is.invert=Nu(Ir);var as=function(){return xu(is).scale(249.5).clipAngle(90+yr)};function us(t,e){var n=Sr(e),r=1+Sr(t)*n;return[n*Tr(t)/r,Tr(e)/r]}us.invert=Nu(function(t){return 2*xr(t)});var ss=function(){return xu(us).scale(250).clipAngle(142)};function cs(t,e){return[Ar(Dr((vr+e)/2)),-t]}cs.invert=function(t,e){return[-e,2*xr(Cr(t))-vr]};var ls=function(){var t=Bu(cs),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)};function fs(t,e){return t.parent===e.parent?1:2}function ds(t,e){return t+e.x}function hs(t,e){return Math.max(t,e.y)}var ps=function(){var t=fs,e=1,n=1,r=!1;function o(o){var i,a=0;o.eachAfter(function(e){var n=e.children;n?(e.x=function(t){return t.reduce(ds,0)/t.length}(n),e.y=function(t){return 1+t.reduce(hs,0)}(n)):(e.x=i?a+=t(e,i):0,e.y=0,i=e)});var u=function(t){for(var e;e=t.children;)t=e[0];return t}(o),s=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(o),c=u.x-t(u,s)/2,l=s.x+t(s,u)/2;return o.eachAfter(r?function(t){t.x=(t.x-o.x)*e,t.y=(o.y-t.y)*n}:function(t){t.x=(t.x-c)/(l-c)*e,t.y=(1-(o.y?t.y/o.y:1))*n})}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],o):r?null:[e,n]},o.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],o):r?[e,n]:null},o};function ys(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function gs(t,e){var n,r,o,i,a,u=new _s(t),s=+t.value&&(u.value=t.value),c=[u];for(null==e&&(e=vs);n=c.pop();)if(s&&(n.value=+n.data.value),(o=e(n.data))&&(a=o.length))for(n.children=new Array(a),i=a-1;i>=0;--i)c.push(r=n.children[i]=new _s(o[i])),r.parent=n,r.depth=n.depth+1;return u.eachBefore(bs)}function vs(t){return t.children}function ms(t){t.data=t.data.data}function bs(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function _s(t){this.data=t,this.depth=this.height=0,this.parent=null}_s.prototype=gs.prototype={constructor:_s,count:function(){return this.eachAfter(ys)},each:function(t){var e,n,r,o,i=this,a=[i];do{for(e=a.reverse(),a=[];i=e.pop();)if(t(i),n=i.children)for(r=0,o=n.length;r<o;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,o=this,i=[o],a=[];o=i.pop();)if(a.push(o),e=o.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;o=a.pop();)t(o);return this},eachBefore:function(t){for(var e,n,r=this,o=[r];r=o.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)o.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,o=r&&r.length;--o>=0;)n+=r[o].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),o=null;for(t=n.pop(),e=r.pop();t===e;)o=t,t=n.pop(),e=r.pop();return o}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var o=r.length;t!==n;)r.splice(o,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return gs(this).eachBefore(ms)}};var ws=Array.prototype.slice;var Es=function(t){for(var e,n,r=0,o=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(ws.call(t))).length,i=[];r<o;)e=t[r],n&&Ss(n,e)?++r:(n=Cs(i=xs(i,e)),r=0);return n};function xs(t,e){var n,r;if(Ms(e,t))return[e];for(n=0;n<t.length;++n)if(ks(e,t[n])&&Ms(As(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(ks(As(t[n],t[r]),e)&&ks(As(t[n],e),t[r])&&ks(As(t[r],e),t[n])&&Ms(Ps(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function ks(t,e){var n=t.r-e.r,r=e.x-t.x,o=e.y-t.y;return n<0||n*n<r*r+o*o}function Ss(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,o=e.y-t.y;return n>0&&n*n>r*r+o*o}function Ms(t,e){for(var n=0;n<e.length;++n)if(!Ss(t,e[n]))return!1;return!0}function Cs(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return As(t[0],t[1]);case 3:return Ps(t[0],t[1],t[2])}}function As(t,e){var n=t.x,r=t.y,o=t.r,i=e.x,a=e.y,u=e.r,s=i-n,c=a-r,l=u-o,f=Math.sqrt(s*s+c*c);return{x:(n+i+s/f*l)/2,y:(r+a+c/f*l)/2,r:(f+o+u)/2}}function Ps(t,e,n){var r=t.x,o=t.y,i=t.r,a=e.x,u=e.y,s=e.r,c=n.x,l=n.y,f=n.r,d=r-a,h=r-c,p=o-u,y=o-l,g=s-i,v=f-i,m=r*r+o*o-i*i,b=m-a*a-u*u+s*s,_=m-c*c-l*l+f*f,w=h*p-d*y,E=(p*_-y*b)/(2*w)-r,x=(y*g-p*v)/w,k=(h*b-d*_)/(2*w)-o,S=(d*v-h*g)/w,M=x*x+S*S-1,C=2*(i+E*x+k*S),A=E*E+k*k-i*i,P=-(M?(C+Math.sqrt(C*C-4*M*A))/(2*M):A/C);return{x:r+E+x*P,y:o+k+S*P,r:P}}function Ts(t,e,n){var r,o,i,a,u=t.x-e.x,s=t.y-e.y,c=u*u+s*s;c?(o=e.r+n.r,o*=o,a=t.r+n.r,o>(a*=a)?(r=(c+a-o)/(2*c),i=Math.sqrt(Math.max(0,a/c-r*r)),n.x=t.x-r*u-i*s,n.y=t.y-r*s+i*u):(r=(c+o-a)/(2*c),i=Math.sqrt(Math.max(0,o/c-r*r)),n.x=e.x+r*u-i*s,n.y=e.y+r*s+i*u)):(n.x=e.x+n.r,n.y=e.y)}function Ns(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,o=e.y-t.y;return n>0&&n*n>r*r+o*o}function Os(t){var e=t._,n=t.next._,r=e.r+n.r,o=(e.x*n.r+n.x*e.r)/r,i=(e.y*n.r+n.y*e.r)/r;return o*o+i*i}function Ds(t){this._=t,this.next=null,this.previous=null}function Rs(t){if(!(o=t.length))return 0;var e,n,r,o,i,a,u,s,c,l,f;if((e=t[0]).x=0,e.y=0,!(o>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(o>2))return e.r+n.r;Ts(n,e,r=t[2]),e=new Ds(e),n=new Ds(n),r=new Ds(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(u=3;u<o;++u){Ts(e._,n._,r=t[u]),r=new Ds(r),s=n.next,c=e.previous,l=n._.r,f=e._.r;do{if(l<=f){if(Ns(s._,r._)){n=s,e.next=n,n.previous=e,--u;continue t}l+=s._.r,s=s.next}else{if(Ns(c._,r._)){(e=c).next=n,n.previous=e,--u;continue t}f+=c._.r,c=c.previous}}while(s!==c.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,i=Os(e);(r=r.next)!==n;)(a=Os(r))<i&&(e=r,i=a);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=Es(e),u=0;u<o;++u)(e=t[u]).x-=r.x,e.y-=r.y;return r.r}var Is=function(t){return Rs(t),t};function Ls(t){if("function"!=typeof t)throw new Error;return t}function Fs(){return 0}var Bs=function(t){return function(){return t}};function Us(t){return Math.sqrt(t.value)}var js=function(){var t=null,e=1,n=1,r=Fs;function o(o){return o.x=e/2,o.y=n/2,t?o.eachBefore(zs(t)).eachAfter(Vs(r,.5)).eachBefore(Ws(1)):o.eachBefore(zs(Us)).eachAfter(Vs(Fs,1)).eachAfter(Vs(r,o.r/Math.min(e,n))).eachBefore(Ws(Math.min(e,n)/(2*o.r))),o}return o.radius=function(e){return arguments.length?(t=function(t){return null==t?null:Ls(t)}(e),o):t},o.size=function(t){return arguments.length?(e=+t[0],n=+t[1],o):[e,n]},o.padding=function(t){return arguments.length?(r="function"==typeof t?t:Bs(+t),o):r},o};function zs(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Vs(t,e){return function(n){if(r=n.children){var r,o,i,a=r.length,u=t(n)*e||0;if(u)for(o=0;o<a;++o)r[o].r+=u;if(i=Rs(r),u)for(o=0;o<a;++o)r[o].r-=u;n.r=i+u}}}function Ws(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Ys=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},qs=function(t,e,n,r,o){for(var i,a=t.children,u=-1,s=a.length,c=t.value&&(r-e)/t.value;++u<s;)(i=a[u]).y0=n,i.y1=o,i.x0=e,i.x1=e+=i.value*c},Hs=function(){var t=1,e=1,n=0,r=!1;function o(o){var i=o.height+1;return o.x0=o.y0=n,o.x1=t,o.y1=e/i,o.eachBefore(function(t,e){return function(r){r.children&&qs(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var o=r.x0,i=r.y0,a=r.x1-n,u=r.y1-n;a<o&&(o=a=(o+a)/2),u<i&&(i=u=(i+u)/2),r.x0=o,r.y0=i,r.x1=a,r.y1=u}}(e,i)),r&&o.eachBefore(Ys),o}return o.round=function(t){return arguments.length?(r=!!t,o):r},o.size=function(n){return arguments.length?(t=+n[0],e=+n[1],o):[t,e]},o.padding=function(t){return arguments.length?(n=+t,o):n},o},Gs="$",Xs={depth:-1},Ks={};function $s(t){return t.id}function Qs(t){return t.parentId}var Zs=function(){var t=$s,e=Qs;function n(n){var r,o,i,a,u,s,c,l=n.length,f=new Array(l),d={};for(o=0;o<l;++o)r=n[o],u=f[o]=new _s(r),null!=(s=t(r,o,n))&&(s+="")&&(d[c=Gs+(u.id=s)]=c in d?Ks:u);for(o=0;o<l;++o)if(u=f[o],null!=(s=e(n[o],o,n))&&(s+="")){if(!(a=d[Gs+s]))throw new Error("missing: "+s);if(a===Ks)throw new Error("ambiguous: "+s);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(i)throw new Error("multiple roots");i=u}if(!i)throw new Error("no root");if(i.parent=Xs,i.eachBefore(function(t){t.depth=t.parent.depth+1,--l}).eachBefore(bs),i.parent=null,l>0)throw new Error("cycle");return i}return n.id=function(e){return arguments.length?(t=Ls(e),n):t},n.parentId=function(t){return arguments.length?(e=Ls(t),n):e},n};function Js(t,e){return t.parent===e.parent?1:2}function tc(t){var e=t.children;return e?e[0]:t.t}function ec(t){var e=t.children;return e?e[e.length-1]:t.t}function nc(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function rc(t,e,n){return t.a.parent===e.parent?t.a:n}function oc(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}oc.prototype=Object.create(_s.prototype);var ic=function(){var t=Js,e=1,n=1,r=null;function o(o){var s=function(t){for(var e,n,r,o,i,a=new oc(t,0),u=[a];e=u.pop();)if(r=e._.children)for(e.children=new Array(i=r.length),o=i-1;o>=0;--o)u.push(n=e.children[o]=new oc(r[o],o)),n.parent=e;return(a.parent=new oc(null,0)).children=[a],a}(o);if(s.eachAfter(i),s.parent.m=-s.z,s.eachBefore(a),r)o.eachBefore(u);else{var c=o,l=o,f=o;o.eachBefore(function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)});var d=c===l?1:t(c,l)/2,h=d-c.x,p=e/(l.x+d+h),y=n/(f.depth||1);o.eachBefore(function(t){t.x=(t.x+h)*p,t.y=t.depth*y})}return o}function i(e){var n=e.children,r=e.parent.children,o=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,o=t.children,i=o.length;--i>=0;)(e=o[i]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var i=(n[0].z+n[n.length-1].z)/2;o?(e.z=o.z+t(e._,o._),e.m=e.z-i):e.z=i}else o&&(e.z=o.z+t(e._,o._));e.parent.A=function(e,n,r){if(n){for(var o,i=e,a=e,u=n,s=i.parent.children[0],c=i.m,l=a.m,f=u.m,d=s.m;u=ec(u),i=tc(i),u&&i;)s=tc(s),(a=ec(a)).a=e,(o=u.z+f-i.z-c+t(u._,i._))>0&&(nc(rc(u,e,r),e,o),c+=o,l+=o),f+=u.m,c+=i.m,d+=s.m,l+=a.m;u&&!ec(a)&&(a.t=u,a.m+=f-l),i&&!tc(s)&&(s.t=i,s.m+=c-d,r=e)}return r}(e,o,e.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=e,t.y=t.depth*n}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],o):r?null:[e,n]},o.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],o):r?[e,n]:null},o},ac=function(t,e,n,r,o){for(var i,a=t.children,u=-1,s=a.length,c=t.value&&(o-n)/t.value;++u<s;)(i=a[u]).x0=e,i.x1=r,i.y0=n,i.y1=n+=i.value*c},uc=(1+Math.sqrt(5))/2;function sc(t,e,n,r,o,i){for(var a,u,s,c,l,f,d,h,p,y,g,v=[],m=e.children,b=0,_=0,w=m.length,E=e.value;b<w;){s=o-n,c=i-r;do{l=m[_++].value}while(!l&&_<w);for(f=d=l,g=l*l*(y=Math.max(c/s,s/c)/(E*t)),p=Math.max(d/g,g/f);_<w;++_){if(l+=u=m[_].value,u<f&&(f=u),u>d&&(d=u),g=l*l*y,(h=Math.max(d/g,g/f))>p){l-=u;break}p=h}v.push(a={value:l,dice:s<c,children:m.slice(b,_)}),a.dice?qs(a,n,r,o,E?r+=c*l/E:i):ac(a,n,r,E?n+=s*l/E:o,i),E-=l,b=_}return v}var cc=function t(e){function n(t,n,r,o,i){sc(e,t,n,r,o,i)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(uc),lc=function(){var t=cc,e=!1,n=1,r=1,o=[0],i=Fs,a=Fs,u=Fs,s=Fs,c=Fs;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),o=[0],e&&t.eachBefore(Ys),t}function f(e){var n=o[e.depth],r=e.x0+n,l=e.y0+n,f=e.x1-n,d=e.y1-n;f<r&&(r=f=(r+f)/2),d<l&&(l=d=(l+d)/2),e.x0=r,e.y0=l,e.x1=f,e.y1=d,e.children&&(n=o[e.depth+1]=i(e)/2,r+=c(e)-n,l+=a(e)-n,f-=u(e)-n,d-=s(e)-n,f<r&&(r=f=(r+f)/2),d<l&&(l=d=(l+d)/2),t(e,r,l,f,d))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],r=+t[1],l):[n,r]},l.tile=function(e){return arguments.length?(t=Ls(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(i="function"==typeof t?t:Bs(+t),l):i},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Bs(+t),l):a},l.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Bs(+t),l):u},l.paddingBottom=function(t){return arguments.length?(s="function"==typeof t?t:Bs(+t),l):s},l.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:Bs(+t),l):c},l},fc=function(t,e,n,r,o){var i,a,u=t.children,s=u.length,c=new Array(s+1);for(c[0]=a=i=0;i<s;++i)c[i+1]=a+=u[i].value;!function t(e,n,r,o,i,a,s){if(e>=n-1){var l=u[e];return l.x0=o,l.y0=i,l.x1=a,void(l.y1=s)}var f=c[e],d=r/2+f,h=e+1,p=n-1;for(;h<p;){var y=h+p>>>1;c[y]<d?h=y+1:p=y}d-c[h-1]<c[h]-d&&e+1<h&&--h;var g=c[h]-f,v=r-g;if(a-o>s-i){var m=(o*v+a*g)/r;t(e,h,g,o,i,m,s),t(h,n,v,m,i,a,s)}else{var b=(i*v+s*g)/r;t(e,h,g,o,i,a,b),t(h,n,v,o,b,a,s)}}(0,s,t.value,e,n,r,o)},dc=function(t,e,n,r,o){(1&t.depth?ac:qs)(t,e,n,r,o)},hc=function t(e){function n(t,n,r,o,i){if((a=t._squarify)&&a.ratio===e)for(var a,u,s,c,l,f=-1,d=a.length,h=t.value;++f<d;){for(s=(u=a[f]).children,c=u.value=0,l=s.length;c<l;++c)u.value+=s[c].value;u.dice?qs(u,n,r,o,r+=(i-r)*u.value/h):ac(u,n,r,n+=(o-n)*u.value/h,i),h-=u.value}else t._squarify=a=sc(e,t,n,r,o,i),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(uc),pc=function(t){for(var e,n=-1,r=t.length,o=t[r-1],i=0;++n<r;)e=o,o=t[n],i+=e[1]*o[0]-e[0]*o[1];return i/2},yc=function(t){for(var e,n,r=-1,o=t.length,i=0,a=0,u=t[o-1],s=0;++r<o;)e=u,u=t[r],s+=n=e[0]*u[1]-u[0]*e[1],i+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[i/(s*=3),a/s]},gc=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])};function vc(t,e){return t[0]-e[0]||t[1]-e[1]}function mc(t){for(var e=t.length,n=[0,1],r=2,o=2;o<e;++o){for(;r>1&&gc(t[n[r-2]],t[n[r-1]],t[o])<=0;)--r;n[r++]=o}return n.slice(0,r)}var bc=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),o=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(vc),e=0;e<n;++e)o[e]=[r[e][0],-r[e][1]];var i=mc(r),a=mc(o),u=a[0]===i[0],s=a[a.length-1]===i[i.length-1],c=[];for(e=i.length-1;e>=0;--e)c.push(t[r[i[e]][2]]);for(e=+u;e<a.length-s;++e)c.push(t[r[a[e]][2]]);return c},_c=function(t,e){for(var n,r,o=t.length,i=t[o-1],a=e[0],u=e[1],s=i[0],c=i[1],l=!1,f=0;f<o;++f)n=(i=t[f])[0],(r=i[1])>u!=c>u&&a<(s-n)*(u-r)/(c-r)+n&&(l=!l),s=n,c=r;return l},wc=function(t){for(var e,n,r=-1,o=t.length,i=t[o-1],a=i[0],u=i[1],s=0;++r<o;)e=a,n=u,e-=a=(i=t[r])[0],n-=u=i[1],s+=Math.sqrt(e*e+n*n);return s},Ec=function(){return Math.random()},xc=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Ec),kc=function t(e){function n(t,n){var r,o;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,o=r*r+i*i}while(!o||o>1);return t+n*i*Math.sqrt(-2*Math.log(o)/o)}}return n.source=t,n}(Ec),Sc=function t(e){function n(){var t=kc.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Ec),Mc=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Ec),Cc=function t(e){function n(t){var n=Mc.source(e)(t);return function(){return n()/t}}return n.source=t,n}(Ec),Ac=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Ec),Pc=Array.prototype,Tc=Pc.map,Nc=Pc.slice,Oc={name:"implicit"};function Dc(t){var e=ue(),n=[],r=Oc;function o(o){var i=o+"",a=e.get(i);if(!a){if(r!==Oc)return r;e.set(i,a=n.push(o))}return t[(a-1)%t.length]}return t=null==t?[]:Nc.call(t),o.domain=function(t){if(!arguments.length)return n.slice();n=[],e=ue();for(var r,i,a=-1,u=t.length;++a<u;)e.has(i=(r=t[a])+"")||e.set(i,n.push(r));return o},o.range=function(e){return arguments.length?(t=Nc.call(e),o):t.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return Dc().domain(n).range(t).unknown(r)},o}function Rc(){var t,e,n=Dc().unknown(void 0),r=n.domain,o=n.range,i=[0,1],a=!1,u=0,s=0,c=.5;function l(){var n=r().length,l=i[1]<i[0],f=i[l-0],d=i[1-l];t=(d-f)/Math.max(1,n-u+2*s),a&&(t=Math.floor(t)),f+=(d-f-t*(n-u))*c,e=t*(1-u),a&&(f=Math.round(f),e=Math.round(e));var h=E(n).map(function(e){return f+t*e});return o(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],a=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,l()):a},n.padding=function(t){return arguments.length?(u=s=Math.max(0,Math.min(1,t)),l()):u},n.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),l()):u},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.copy=function(){return Rc().domain(r()).range(i).round(a).paddingInner(u).paddingOuter(s).align(c)},l()}function Ic(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(Rc().paddingInner(1))}var Lc=function(t){return function(){return t}},Fc=function(t){return+t},Bc=[0,1];function Uc(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Lc(e)}function jc(t,e,n,r){var o=t[0],i=t[1],a=e[0],u=e[1];return i<o?(o=n(i,o),a=r(u,a)):(o=n(o,i),a=r(a,u)),function(t){return a(o(t))}}function zc(t,e,n,r){var o=Math.min(t.length,e.length)-1,i=new Array(o),a=new Array(o),u=-1;for(t[o]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<o;)i[u]=n(t[u],t[u+1]),a[u]=r(e[u],e[u+1]);return function(e){var n=s(t,e,1,o)-1;return a[n](i[n](e))}}function Vc(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Wc(t,e){var n,r,o,i=Bc,a=Bc,u=ct.a,s=!1;function c(){return n=Math.min(i.length,a.length)>2?zc:jc,r=o=null,l}function l(e){return(r||(r=n(i,a,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,u)))(+e)}return l.invert=function(t){return(o||(o=n(a,i,Uc,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(i=Tc.call(t,Fc),c()):i.slice()},l.range=function(t){return arguments.length?(a=Nc.call(t),c()):a.slice()},l.rangeRound=function(t){return a=Nc.call(t),u=ct.t,c()},l.clamp=function(t){return arguments.length?(s=!!t,c()):s},l.interpolate=function(t){return arguments.length?(u=t,c()):u},c()}var Yc=function(t,e,n){var r,o=t[0],i=t[t.length-1],a=A(o,i,null==e?10:e);switch((n=Kn(null==n?",f":n)).type){case"s":var u=Math.max(Math.abs(o),Math.abs(i));return null!=n.precision||isNaN(r=cr(a,u))||(n.precision=r),tr(n,u);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=lr(a,Math.max(Math.abs(o),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=sr(a))||(n.precision=r-2*("%"===n.type))}return Jn(n)};function qc(t){var e=t.domain;return t.ticks=function(t){var n=e();return M(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Yc(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,o=e(),i=0,a=o.length-1,u=o[i],s=o[a];return s<u&&(r=u,u=s,s=r,r=i,i=a,a=r),(r=C(u,s,n))>0?r=C(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=C(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,n)),r>0?(o[i]=Math.floor(u/r)*r,o[a]=Math.ceil(s/r)*r,e(o)):r<0&&(o[i]=Math.ceil(u*r)/r,o[a]=Math.floor(s*r)/r,e(o)),t},t}function Hc(){var t=Wc(Uc,ct.o);return t.copy=function(){return Vc(t,Hc())},qc(t)}function Gc(){var t=[0,1];function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Tc.call(n,Fc),e):t.slice()},e.copy=function(){return Gc().domain(t)},qc(e)}var Xc=function(t,e){var n,r=0,o=(t=t.slice()).length-1,i=t[r],a=t[o];return a<i&&(n=r,r=o,o=n,n=i,i=a,a=n),t[r]=e.floor(i),t[o]=e.ceil(a),t};function Kc(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:Lc(e)}function $c(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function Qc(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Zc(t){return 10===t?Qc:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function Jc(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function tl(t){return function(e){return-t(-e)}}function el(){var t=Wc(Kc,$c).domain([1,10]),e=t.domain,n=10,r=Jc(10),o=Zc(10);function i(){return r=Jc(n),o=Zc(n),e()[0]<0&&(r=tl(r),o=tl(o)),t}return t.base=function(t){return arguments.length?(n=+t,i()):n},t.domain=function(t){return arguments.length?(e(t),i()):e()},t.ticks=function(t){var i,a=e(),u=a[0],s=a[a.length-1];(i=s<u)&&(d=u,u=s,s=d);var c,l,f,d=r(u),h=r(s),p=null==t?10:+t,y=[];if(!(n%1)&&h-d<p){if(d=Math.round(d)-1,h=Math.round(h)+1,u>0){for(;d<h;++d)for(l=1,c=o(d);l<n;++l)if(!((f=c*l)<u)){if(f>s)break;y.push(f)}}else for(;d<h;++d)for(l=n-1,c=o(d);l>=1;--l)if(!((f=c*l)<u)){if(f>s)break;y.push(f)}}else y=M(d,h,Math.min(h-d,p)).map(o);return i?y.reverse():y},t.tickFormat=function(e,i){if(null==i&&(i=10===n?".0e":","),"function"!=typeof i&&(i=Jn(i)),e===1/0)return i;null==e&&(e=10);var a=Math.max(1,n*e/t.ticks().length);return function(t){var e=t/o(Math.round(r(t)));return e*n<n-.5&&(e*=n),e<=a?i(t):""}},t.nice=function(){return e(Xc(e(),{floor:function(t){return o(Math.floor(r(t)))},ceil:function(t){return o(Math.ceil(r(t)))}}))},t.copy=function(){return Vc(t,el().base(n))},t}function nl(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function rl(){var t=1,e=Wc(function(e,n){return(n=nl(n,t)-(e=nl(e,t)))?function(r){return(nl(r,t)-e)/n}:Lc(n)},function(e,n){return n=nl(n,t)-(e=nl(e,t)),function(r){return nl(e+n*r,1/t)}}),n=e.domain;return e.exponent=function(e){return arguments.length?(t=+e,n(n())):t},e.copy=function(){return Vc(e,rl().exponent(t))},qc(e)}function ol(){return rl().exponent(.5)}function il(){var t=[],e=[],n=[];function o(){var r=0,o=Math.max(1,e.length);for(n=new Array(o-1);++r<o;)n[r-1]=N(t,r/o);return i}function i(t){if(!isNaN(t=+t))return e[s(n,t)]}return i.invertExtent=function(r){var o=e.indexOf(r);return o<0?[NaN,NaN]:[o>0?n[o-1]:t[0],o<n.length?n[o]:t[t.length-1]]},i.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,i=0,a=e.length;i<a;++i)null==(n=e[i])||isNaN(n=+n)||t.push(n);return t.sort(r),o()},i.range=function(t){return arguments.length?(e=Nc.call(t),o()):e.slice()},i.quantiles=function(){return n.slice()},i.copy=function(){return il().domain(t).range(e)},i}function al(){var t=0,e=1,n=1,r=[.5],o=[0,1];function i(t){if(t<=t)return o[s(r,t,0,n)]}function a(){var o=-1;for(r=new Array(n);++o<n;)r[o]=((o+1)*e-(o-n)*t)/(n+1);return i}return i.domain=function(n){return arguments.length?(t=+n[0],e=+n[1],a()):[t,e]},i.range=function(t){return arguments.length?(n=(o=Nc.call(t)).length-1,a()):o.slice()},i.invertExtent=function(i){var a=o.indexOf(i);return a<0?[NaN,NaN]:a<1?[t,r[0]]:a>=n?[r[n-1],e]:[r[a-1],r[a]]},i.copy=function(){return al().domain([t,e]).range(o)},qc(i)}function ul(){var t=[.5],e=[0,1],n=1;function r(r){if(r<=r)return e[s(t,r,0,n)]}return r.domain=function(o){return arguments.length?(t=Nc.call(o),n=Math.min(t.length,e.length-1),r):t.slice()},r.range=function(o){return arguments.length?(e=Nc.call(o),n=Math.min(t.length,e.length-1),r):e.slice()},r.invertExtent=function(n){var r=e.indexOf(n);return[t[r-1],t[r]]},r.copy=function(){return ul().domain(t).range(e)},r}var sl=new Date,cl=new Date;function ll(t,e,n,r){function o(e){return t(e=new Date(+e)),e}return o.floor=o,o.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},o.round=function(t){var e=o(t),n=o.ceil(t);return t-e<n-t?e:n},o.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},o.range=function(n,r,i){var a,u=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return u;do{u.push(a=new Date(+n)),e(n,i),t(n)}while(a<n&&n<r);return u},o.filter=function(n){return ll(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(o.count=function(e,r){return sl.setTime(+e),cl.setTime(+r),t(sl),t(cl),Math.floor(n(sl,cl))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(r?function(e){return r(e)%t==0}:function(e){return o.count(0,e)%t==0}):o:null}),o}var fl=ll(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});fl.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ll(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):fl:null};var dl=fl,hl=fl.range,pl=6e4,yl=6048e5,gl=ll(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),vl=gl,ml=gl.range,bl=ll(function(t){t.setTime(Math.floor(t/pl)*pl)},function(t,e){t.setTime(+t+e*pl)},function(t,e){return(e-t)/pl},function(t){return t.getMinutes()}),_l=bl,wl=bl.range,El=ll(function(t){var e=t.getTimezoneOffset()*pl%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),xl=El,kl=El.range,Sl=ll(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pl)/864e5},function(t){return t.getDate()-1}),Ml=Sl,Cl=Sl.range;function Al(t){return ll(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pl)/yl})}var Pl=Al(0),Tl=Al(1),Nl=Al(2),Ol=Al(3),Dl=Al(4),Rl=Al(5),Il=Al(6),Ll=Pl.range,Fl=Tl.range,Bl=Nl.range,Ul=Ol.range,jl=Dl.range,zl=Rl.range,Vl=Il.range,Wl=ll(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Yl=Wl,ql=Wl.range,Hl=ll(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Hl.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ll(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Gl=Hl,Xl=Hl.range,Kl=ll(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*pl)},function(t,e){return(e-t)/pl},function(t){return t.getUTCMinutes()}),$l=Kl,Ql=Kl.range,Zl=ll(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}),Jl=Zl,tf=Zl.range,ef=ll(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1}),nf=ef,rf=ef.range;function of(t){return ll(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/yl})}var af=of(0),uf=of(1),sf=of(2),cf=of(3),lf=of(4),ff=of(5),df=of(6),hf=af.range,pf=uf.range,yf=sf.range,gf=cf.range,vf=lf.range,mf=ff.range,bf=df.range,_f=ll(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),wf=_f,Ef=_f.range,xf=ll(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});xf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ll(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var kf=xf,Sf=xf.range;function Mf(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Cf(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Af(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Pf(t){var e=t.dateTime,n=t.date,r=t.time,o=t.periods,i=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,c=zf(o),l=Vf(o),f=zf(i),d=Vf(i),h=zf(a),p=Vf(a),y=zf(u),g=Vf(u),v=zf(s),m=Vf(s),b={a:function(t){return a[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:sd,e:sd,f:hd,H:cd,I:ld,j:fd,L:dd,m:pd,M:yd,p:function(t){return o[+(t.getHours()>=12)]},Q:Wd,s:Yd,S:gd,u:vd,U:md,V:bd,w:_d,W:wd,x:null,X:null,y:Ed,Y:xd,Z:kd,"%":Vd},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Sd,e:Sd,f:Td,H:Md,I:Cd,j:Ad,L:Pd,m:Nd,M:Od,p:function(t){return o[+(t.getUTCHours()>=12)]},Q:Wd,s:Yd,S:Dd,u:Rd,U:Id,V:Ld,w:Fd,W:Bd,x:null,X:null,y:Ud,Y:jd,Z:zd,"%":Vd},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:Zf,e:Zf,f:od,H:td,I:td,j:Jf,L:rd,m:Qf,M:ed,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:ad,s:ud,S:nd,u:Yf,U:qf,V:Hf,w:Wf,W:Gf,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:Kf,Y:Xf,Z:$f,"%":id};function E(t,e){return function(n){var r,o,i,a=[],u=-1,s=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(o=If[r=t.charAt(++u)])?r=t.charAt(++u):o="e"===r?" ":"0",(i=e[r])&&(r=i(n,o)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function x(t,e){return function(n){var r,o,i=Af(1900);if(k(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(o=(r=Cf(Af(i.y))).getUTCDay())>4||0===o?uf.ceil(r):uf(r),r=nf.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(o=(r=e(Af(i.y))).getDay())>4||0===o?Tl.ceil(r):Tl(r),r=Ml.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?Cf(Af(i.y)).getUTCDay():e(Af(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Cf(i)):e(i)}}function k(t,e,n,r){for(var o,i,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(o=e.charCodeAt(a++))){if(o=e.charAt(a++),!(i=w[o in If?e.charAt(a++):o])||(r=i(t,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return b.x=E(n,b),b.X=E(r,b),b.c=E(e,b),_.x=E(n,_),_.X=E(r,_),_.c=E(e,_),{format:function(t){var e=E(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=x(t+="",Mf);return e.toString=function(){return t},e},utcFormat:function(t){var e=E(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=x(t,Cf);return e.toString=function(){return t},e}}}var Tf,Nf,Of,Df,Rf,If={"-":"",_:" ",0:"0"},Lf=/^\s*\d+/,Ff=/^%/,Bf=/[\\^$*+?|[\]().{}]/g;function Uf(t,e,n){var r=t<0?"-":"",o=(r?-t:t)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(e)+o:o)}function jf(t){return t.replace(Bf,"\\$&")}function zf(t){return new RegExp("^(?:"+t.map(jf).join("|")+")","i")}function Vf(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Wf(t,e,n){var r=Lf.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Yf(t,e,n){var r=Lf.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function qf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Hf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Gf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Xf(t,e,n){var r=Lf.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Kf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function $f(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Qf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Zf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Jf(t,e,n){var r=Lf.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function td(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ed(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function nd(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function rd(t,e,n){var r=Lf.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function od(t,e,n){var r=Lf.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function id(t,e,n){var r=Ff.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ad(t,e,n){var r=Lf.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ud(t,e,n){var r=Lf.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function sd(t,e){return Uf(t.getDate(),e,2)}function cd(t,e){return Uf(t.getHours(),e,2)}function ld(t,e){return Uf(t.getHours()%12||12,e,2)}function fd(t,e){return Uf(1+Ml.count(Gl(t),t),e,3)}function dd(t,e){return Uf(t.getMilliseconds(),e,3)}function hd(t,e){return dd(t,e)+"000"}function pd(t,e){return Uf(t.getMonth()+1,e,2)}function yd(t,e){return Uf(t.getMinutes(),e,2)}function gd(t,e){return Uf(t.getSeconds(),e,2)}function vd(t){var e=t.getDay();return 0===e?7:e}function md(t,e){return Uf(Pl.count(Gl(t),t),e,2)}function bd(t,e){var n=t.getDay();return t=n>=4||0===n?Dl(t):Dl.ceil(t),Uf(Dl.count(Gl(t),t)+(4===Gl(t).getDay()),e,2)}function _d(t){return t.getDay()}function wd(t,e){return Uf(Tl.count(Gl(t),t),e,2)}function Ed(t,e){return Uf(t.getFullYear()%100,e,2)}function xd(t,e){return Uf(t.getFullYear()%1e4,e,4)}function kd(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Uf(e/60|0,"0",2)+Uf(e%60,"0",2)}function Sd(t,e){return Uf(t.getUTCDate(),e,2)}function Md(t,e){return Uf(t.getUTCHours(),e,2)}function Cd(t,e){return Uf(t.getUTCHours()%12||12,e,2)}function Ad(t,e){return Uf(1+nf.count(kf(t),t),e,3)}function Pd(t,e){return Uf(t.getUTCMilliseconds(),e,3)}function Td(t,e){return Pd(t,e)+"000"}function Nd(t,e){return Uf(t.getUTCMonth()+1,e,2)}function Od(t,e){return Uf(t.getUTCMinutes(),e,2)}function Dd(t,e){return Uf(t.getUTCSeconds(),e,2)}function Rd(t){var e=t.getUTCDay();return 0===e?7:e}function Id(t,e){return Uf(af.count(kf(t),t),e,2)}function Ld(t,e){var n=t.getUTCDay();return t=n>=4||0===n?lf(t):lf.ceil(t),Uf(lf.count(kf(t),t)+(4===kf(t).getUTCDay()),e,2)}function Fd(t){return t.getUTCDay()}function Bd(t,e){return Uf(uf.count(kf(t),t),e,2)}function Ud(t,e){return Uf(t.getUTCFullYear()%100,e,2)}function jd(t,e){return Uf(t.getUTCFullYear()%1e4,e,4)}function zd(){return"+0000"}function Vd(){return"%"}function Wd(t){return+t}function Yd(t){return Math.floor(+t/1e3)}function qd(t){return Tf=Pf(t),Nf=Tf.format,Of=Tf.parse,Df=Tf.utcFormat,Rf=Tf.utcParse,Tf}qd({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Hd=Date.prototype.toISOString?function(t){return t.toISOString()}:Df("%Y-%m-%dT%H:%M:%S.%LZ");var Gd=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Rf("%Y-%m-%dT%H:%M:%S.%LZ"),Xd=1e3,Kd=60*Xd,$d=60*Kd,Qd=24*$d,Zd=7*Qd,Jd=30*Qd,th=365*Qd;function eh(t){return new Date(t)}function nh(t){return t instanceof Date?+t:+new Date(+t)}function rh(t,e,n,r,i,a,u,s,c){var l=Wc(Uc,ct.o),f=l.invert,d=l.domain,h=c(".%L"),p=c(":%S"),y=c("%I:%M"),g=c("%I %p"),v=c("%a %d"),m=c("%b %d"),b=c("%B"),_=c("%Y"),w=[[u,1,Xd],[u,5,5*Xd],[u,15,15*Xd],[u,30,30*Xd],[a,1,Kd],[a,5,5*Kd],[a,15,15*Kd],[a,30,30*Kd],[i,1,$d],[i,3,3*$d],[i,6,6*$d],[i,12,12*$d],[r,1,Qd],[r,2,2*Qd],[n,1,Zd],[e,1,Jd],[e,3,3*Jd],[t,1,th]];function E(o){return(u(o)<o?h:a(o)<o?p:i(o)<o?y:r(o)<o?g:e(o)<o?n(o)<o?v:m:t(o)<o?b:_)(o)}function x(e,n,r,i){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(r-n)/e,u=o(function(t){return t[2]}).right(w,a);u===w.length?(i=A(n/th,r/th,e),e=t):u?(i=(u=w[a/w[u-1][2]<w[u][2]/a?u-1:u])[1],e=u[0]):(i=Math.max(A(n,r,e),1),e=s)}return null==i?e:e.every(i)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?d(Tc.call(t,nh)):d().map(eh)},l.ticks=function(t,e){var n,r=d(),o=r[0],i=r[r.length-1],a=i<o;return a&&(n=o,o=i,i=n),n=(n=x(t,o,i,e))?n.range(o,i+1):[],a?n.reverse():n},l.tickFormat=function(t,e){return null==e?E:c(e)},l.nice=function(t,e){var n=d();return(t=x(t,n[0],n[n.length-1],e))?d(Xc(n,t)):l},l.copy=function(){return Vc(l,rh(t,e,n,r,i,a,u,s,c))},l}var oh=function(){return rh(Gl,Yl,Pl,Ml,xl,_l,vl,dl,Nf).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},ih=function(){return rh(kf,wf,af,nf,Jl,$l,vl,dl,Df).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])};function ah(t){var e=0,n=1,r=1,o=!1;function i(n){var i=(n-e)*r;return t(o?Math.max(0,Math.min(1,i)):i)}return i.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=e===n?0:1/(n-e),i):[e,n]},i.clamp=function(t){return arguments.length?(o=!!t,i):o},i.interpolator=function(e){return arguments.length?(t=e,i):t},i.copy=function(){return ah(t).domain([e,n]).clamp(o)},qc(i)}function uh(t){var e=0,n=.5,r=1,o=1,i=1,a=!1;function u(e){var r=.5+((e=+e)-n)*(e<n?o:i);return t(a?Math.max(0,Math.min(1,r)):r)}return u.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=+t[2],o=e===n?0:.5/(n-e),i=n===r?0:.5/(r-n),u):[e,n,r]},u.clamp=function(t){return arguments.length?(a=!!t,u):a},u.interpolator=function(e){return arguments.length?(t=e,u):t},u.copy=function(){return uh(t).domain([e,n,r]).clamp(a)},qc(u)}var sh=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},ch=sh("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),lh=sh("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),fh=sh("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),dh=sh("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),hh=sh("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ph=sh("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),yh=sh("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),gh=sh("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),vh=sh("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),mh=function(t){return Object(ct.r)(t[t.length-1])},bh=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(sh),_h=mh(bh),wh=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(sh),Eh=mh(wh),xh=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(sh),kh=mh(xh),Sh=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(sh),Mh=mh(Sh),Ch=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(sh),Ah=mh(Ch),Ph=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(sh),Th=mh(Ph),Nh=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(sh),Oh=mh(Nh),Dh=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(sh),Rh=mh(Dh),Ih=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(sh),Lh=mh(Ih),Fh=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(sh),Bh=mh(Fh),Uh=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(sh),jh=mh(Uh),zh=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(sh),Vh=mh(zh),Wh=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(sh),Yh=mh(Wh),qh=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(sh),Hh=mh(qh),Gh=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(sh),Xh=mh(Gh),Kh=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(sh),$h=mh(Kh),Qh=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(sh),Zh=mh(Qh),Jh=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(sh),tp=mh(Jh),ep=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(sh),np=mh(ep),rp=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(sh),op=mh(rp),ip=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(sh),ap=mh(ip),up=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(sh),sp=mh(up),cp=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(sh),lp=mh(cp),fp=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(sh),dp=mh(fp),hp=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(sh),pp=mh(hp),yp=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(sh),gp=mh(yp),vp=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(sh),mp=mh(vp),bp=Object(ct.f)(Object(_e.b)(300,.5,0),Object(_e.b)(-240,.5,1)),_p=Object(ct.f)(Object(_e.b)(-100,.75,.35),Object(_e.b)(80,1.5,.8)),wp=Object(ct.f)(Object(_e.b)(260,.75,.35),Object(_e.b)(80,1.5,.8)),Ep=Object(_e.b)(),xp=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return Ep.h=360*t-100,Ep.s=1.5-1.5*e,Ep.l=.8-.9*e,Ep+""},kp=Object(_e.h)(),Sp=Math.PI/3,Mp=2*Math.PI/3,Cp=function(t){var e;return t=(.5-t)*Math.PI,kp.r=255*(e=Math.sin(t))*e,kp.g=255*(e=Math.sin(t+Sp))*e,kp.b=255*(e=Math.sin(t+Mp))*e,kp+""};function Ap(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}var Pp=Ap(sh("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Tp=Ap(sh("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Np=Ap(sh("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Op=Ap(sh("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Dp=function(t){return function(){return t}},Rp=Math.abs,Ip=Math.atan2,Lp=Math.cos,Fp=Math.max,Bp=Math.min,Up=Math.sin,jp=Math.sqrt,zp=1e-12,Vp=Math.PI,Wp=Vp/2,Yp=2*Vp;function qp(t){return t>=1?Wp:t<=-1?-Wp:Math.asin(t)}function Hp(t){return t.innerRadius}function Gp(t){return t.outerRadius}function Xp(t){return t.startAngle}function Kp(t){return t.endAngle}function $p(t){return t&&t.padAngle}function Qp(t,e,n,r,o,i,a){var u=t-n,s=e-r,c=(a?i:-i)/jp(u*u+s*s),l=c*s,f=-c*u,d=t+l,h=e+f,p=n+l,y=r+f,g=(d+p)/2,v=(h+y)/2,m=p-d,b=y-h,_=m*m+b*b,w=o-i,E=d*y-p*h,x=(b<0?-1:1)*jp(Fp(0,w*w*_-E*E)),k=(E*b-m*x)/_,S=(-E*m-b*x)/_,M=(E*b+m*x)/_,C=(-E*m+b*x)/_,A=k-g,P=S-v,T=M-g,N=C-v;return A*A+P*P>T*T+N*N&&(k=M,S=C),{cx:k,cy:S,x01:-l,y01:-f,x11:k*(o/w-1),y11:S*(o/w-1)}}var Zp=function(){var t=Hp,e=Gp,n=Dp(0),r=null,o=Xp,i=Kp,a=$p,u=null;function s(){var s,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),d=o.apply(this,arguments)-Wp,h=i.apply(this,arguments)-Wp,p=Rp(h-d),y=h>d;if(u||(u=s=Zt()),f<l&&(c=f,f=l,l=c),f>zp)if(p>Yp-zp)u.moveTo(f*Lp(d),f*Up(d)),u.arc(0,0,f,d,h,!y),l>zp&&(u.moveTo(l*Lp(h),l*Up(h)),u.arc(0,0,l,h,d,y));else{var g,v,m=d,b=h,_=d,w=h,E=p,x=p,k=a.apply(this,arguments)/2,S=k>zp&&(r?+r.apply(this,arguments):jp(l*l+f*f)),M=Bp(Rp(f-l)/2,+n.apply(this,arguments)),C=M,A=M;if(S>zp){var P=qp(S/l*Up(k)),T=qp(S/f*Up(k));(E-=2*P)>zp?(_+=P*=y?1:-1,w-=P):(E=0,_=w=(d+h)/2),(x-=2*T)>zp?(m+=T*=y?1:-1,b-=T):(x=0,m=b=(d+h)/2)}var N=f*Lp(m),O=f*Up(m),D=l*Lp(w),R=l*Up(w);if(M>zp){var I=f*Lp(b),L=f*Up(b),F=l*Lp(_),B=l*Up(_);if(p<Vp){var U=E>zp?function(t,e,n,r,o,i,a,u){var s=n-t,c=r-e,l=a-o,f=u-i,d=(l*(e-i)-f*(t-o))/(f*s-l*c);return[t+d*s,e+d*c]}(N,O,F,B,I,L,D,R):[D,R],j=N-U[0],z=O-U[1],V=I-U[0],W=L-U[1],Y=1/Up(function(t){return t>1?0:t<-1?Vp:Math.acos(t)}((j*V+z*W)/(jp(j*j+z*z)*jp(V*V+W*W)))/2),q=jp(U[0]*U[0]+U[1]*U[1]);C=Bp(M,(l-q)/(Y-1)),A=Bp(M,(f-q)/(Y+1))}}x>zp?A>zp?(g=Qp(F,B,N,O,f,A,y),v=Qp(I,L,D,R,f,A,y),u.moveTo(g.cx+g.x01,g.cy+g.y01),A<M?u.arc(g.cx,g.cy,A,Ip(g.y01,g.x01),Ip(v.y01,v.x01),!y):(u.arc(g.cx,g.cy,A,Ip(g.y01,g.x01),Ip(g.y11,g.x11),!y),u.arc(0,0,f,Ip(g.cy+g.y11,g.cx+g.x11),Ip(v.cy+v.y11,v.cx+v.x11),!y),u.arc(v.cx,v.cy,A,Ip(v.y11,v.x11),Ip(v.y01,v.x01),!y))):(u.moveTo(N,O),u.arc(0,0,f,m,b,!y)):u.moveTo(N,O),l>zp&&E>zp?C>zp?(g=Qp(D,R,I,L,l,-C,y),v=Qp(N,O,F,B,l,-C,y),u.lineTo(g.cx+g.x01,g.cy+g.y01),C<M?u.arc(g.cx,g.cy,C,Ip(g.y01,g.x01),Ip(v.y01,v.x01),!y):(u.arc(g.cx,g.cy,C,Ip(g.y01,g.x01),Ip(g.y11,g.x11),!y),u.arc(0,0,l,Ip(g.cy+g.y11,g.cx+g.x11),Ip(v.cy+v.y11,v.cx+v.x11),y),u.arc(v.cx,v.cy,C,Ip(v.y11,v.x11),Ip(v.y01,v.x01),!y))):u.arc(0,0,l,w,_,y):u.lineTo(D,R)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +i.apply(this,arguments))/2-Vp/2;return[Lp(r)*n,Up(r)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),s):n},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Dp(+t),s):r},s.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),s):o},s.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Dp(+t),s):i},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Dp(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s};function Jp(t){this._context=t}Jp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var ty=function(t){return new Jp(t)};function ey(t){return t[0]}function ny(t){return t[1]}var ry=function(){var t=ey,e=ny,n=Dp(!0),r=null,o=ty,i=null;function a(a){var u,s,c,l=a.length,f=!1;for(null==r&&(i=o(c=Zt())),u=0;u<=l;++u)!(u<l&&n(s=a[u],u,a))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(s,u,a),+e(s,u,a));if(c)return i=null,c+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Dp(!!t),a):n},a.curve=function(t){return arguments.length?(o=t,null!=r&&(i=o(r)),a):o},a.context=function(t){return arguments.length?(null==t?r=i=null:i=o(r=t),a):r},a},oy=function(){var t=ey,e=null,n=Dp(0),r=ny,o=Dp(!0),i=null,a=ty,u=null;function s(s){var c,l,f,d,h,p=s.length,y=!1,g=new Array(p),v=new Array(p);for(null==i&&(u=a(h=Zt())),c=0;c<=p;++c){if(!(c<p&&o(d=s[c],c,s))===y)if(y=!y)l=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=c-1;f>=l;--f)u.point(g[f],v[f]);u.lineEnd(),u.areaEnd()}y&&(g[c]=+t(d,c,s),v[c]=+n(d,c,s),u.point(e?+e(d,c,s):g[c],r?+r(d,c,s):v[c]))}if(h)return u=null,h+""||null}function c(){return ry().defined(o).curve(a).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Dp(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Dp(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Dp(+t),s):r},s.lineX0=s.lineY0=function(){return c().x(t).y(n)},s.lineY1=function(){return c().x(t).y(r)},s.lineX1=function(){return c().x(e).y(n)},s.defined=function(t){return arguments.length?(o="function"==typeof t?t:Dp(!!t),s):o},s.curve=function(t){return arguments.length?(a=t,null!=i&&(u=a(i)),s):a},s.context=function(t){return arguments.length?(null==t?i=u=null:u=a(i=t),s):i},s},iy=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},ay=function(t){return t},uy=function(){var t=ay,e=iy,n=null,r=Dp(0),o=Dp(Yp),i=Dp(0);function a(a){var u,s,c,l,f,d=a.length,h=0,p=new Array(d),y=new Array(d),g=+r.apply(this,arguments),v=Math.min(Yp,Math.max(-Yp,o.apply(this,arguments)-g)),m=Math.min(Math.abs(v)/d,i.apply(this,arguments)),b=m*(v<0?-1:1);for(u=0;u<d;++u)(f=y[p[u]=u]=+t(a[u],u,a))>0&&(h+=f);for(null!=e?p.sort(function(t,n){return e(y[t],y[n])}):null!=n&&p.sort(function(t,e){return n(a[t],a[e])}),u=0,c=h?(v-d*b)/h:0;u<d;++u,g=l)s=p[u],l=g+((f=y[s])>0?f*c:0)+b,y[s]={data:a[s],index:u,value:f,startAngle:g,endAngle:l,padAngle:m};return y}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),a):r},a.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),a):o},a.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:Dp(+t),a):i},a},sy=ly(ty);function cy(t){this._curve=t}function ly(t){function e(e){return new cy(t(e))}return e._curve=t,e}function fy(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(ly(t)):e()._curve},t}cy.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var dy=function(){return fy(ry().curve(sy))},hy=function(){var t=oy().curve(sy),e=t.curve,n=t.lineX0,r=t.lineX1,o=t.lineY0,i=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return fy(n())},delete t.lineX0,t.lineEndAngle=function(){return fy(r())},delete t.lineX1,t.lineInnerRadius=function(){return fy(o())},delete t.lineY0,t.lineOuterRadius=function(){return fy(i())},delete t.lineY1,t.curve=function(t){return arguments.length?e(ly(t)):e()._curve},t},py=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},yy=Array.prototype.slice;function gy(t){return t.source}function vy(t){return t.target}function my(t){var e=gy,n=vy,r=ey,o=ny,i=null;function a(){var a,u=yy.call(arguments),s=e.apply(this,u),c=n.apply(this,u);if(i||(i=a=Zt()),t(i,+r.apply(this,(u[0]=s,u)),+o.apply(this,u),+r.apply(this,(u[0]=c,u)),+o.apply(this,u)),a)return i=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),a):r},a.y=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),a):o},a.context=function(t){return arguments.length?(i=null==t?null:t,a):i},a}function by(t,e,n,r,o){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,o,r,o)}function _y(t,e,n,r,o){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+o)/2,r,n,r,o)}function wy(t,e,n,r,o){var i=py(e,n),a=py(e,n=(n+o)/2),u=py(r,n),s=py(r,o);t.moveTo(i[0],i[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function Ey(){return my(by)}function xy(){return my(_y)}function ky(){var t=my(wy);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Sy={draw:function(t,e){var n=Math.sqrt(e/Vp);t.moveTo(n,0),t.arc(0,0,n,0,Yp)}},My={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},Cy=Math.sqrt(1/3),Ay=2*Cy,Py={draw:function(t,e){var n=Math.sqrt(e/Ay),r=n*Cy;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},Ty=Math.sin(Vp/10)/Math.sin(7*Vp/10),Ny=Math.sin(Yp/10)*Ty,Oy=-Math.cos(Yp/10)*Ty,Dy={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=Ny*n,o=Oy*n;t.moveTo(0,-n),t.lineTo(r,o);for(var i=1;i<5;++i){var a=Yp*i/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*n,-u*n),t.lineTo(u*r-s*o,s*r+u*o)}t.closePath()}},Ry={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},Iy=Math.sqrt(3),Ly={draw:function(t,e){var n=-Math.sqrt(e/(3*Iy));t.moveTo(0,2*n),t.lineTo(-Iy*n,-n),t.lineTo(Iy*n,-n),t.closePath()}},Fy=Math.sqrt(3)/2,By=1/Math.sqrt(12),Uy=3*(By/2+1),jy={draw:function(t,e){var n=Math.sqrt(e/Uy),r=n/2,o=n*By,i=r,a=n*By+n,u=-i,s=a;t.moveTo(r,o),t.lineTo(i,a),t.lineTo(u,s),t.lineTo(-.5*r-Fy*o,Fy*r+-.5*o),t.lineTo(-.5*i-Fy*a,Fy*i+-.5*a),t.lineTo(-.5*u-Fy*s,Fy*u+-.5*s),t.lineTo(-.5*r+Fy*o,-.5*o-Fy*r),t.lineTo(-.5*i+Fy*a,-.5*a-Fy*i),t.lineTo(-.5*u+Fy*s,-.5*s-Fy*u),t.closePath()}},zy=[Sy,My,Py,Ry,Dy,Ly,jy],Vy=function(){var t=Dp(Sy),e=Dp(64),n=null;function r(){var r;if(n||(n=r=Zt()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:Dp(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},Wy=function(){};function Yy(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function qy(t){this._context=t}qy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Yy(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Hy=function(t){return new qy(t)};function Gy(t){this._context=t}Gy.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Xy=function(t){return new Gy(t)};function Ky(t){this._context=t}Ky.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var $y=function(t){return new Ky(t)};function Qy(t,e){this._basis=new qy(t),this._beta=e}Qy.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,o=t[0],i=e[0],a=t[n]-o,u=e[n]-i,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(o+r*a),this._beta*e[s]+(1-this._beta)*(i+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Zy=function t(e){function n(t){return 1===e?new qy(t):new Qy(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function Jy(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function tg(t,e){this._context=t,this._k=(1-e)/6}tg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Jy(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var eg=function t(e){function n(t){return new tg(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ng(t,e){this._context=t,this._k=(1-e)/6}ng.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var rg=function t(e){function n(t){return new ng(t,e)}return n.tension=function(e){return t(+e)},n}(0);function og(t,e){this._context=t,this._k=(1-e)/6}og.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var ig=function t(e){function n(t){return new og(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ag(t,e,n){var r=t._x1,o=t._y1,i=t._x2,a=t._y2;if(t._l01_a>zp){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,o=(o*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>zp){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);i=(i*c+t._x1*t._l23_2a-e*t._l12_2a)/l,a=(a*c+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(r,o,i,a,t._x2,t._y2)}function ug(t,e){this._context=t,this._alpha=e}ug.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var sg=function t(e){function n(t){return e?new ug(t,e):new tg(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function cg(t,e){this._context=t,this._alpha=e}cg.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var lg=function t(e){function n(t){return e?new cg(t,e):new ng(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function fg(t,e){this._context=t,this._alpha=e}fg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var dg=function t(e){function n(t){return e?new fg(t,e):new og(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function hg(t){this._context=t}hg.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var pg=function(t){return new hg(t)};function yg(t){return t<0?-1:1}function gg(t,e,n){var r=t._x1-t._x0,o=e-t._x1,i=(t._y1-t._y0)/(r||o<0&&-0),a=(n-t._y1)/(o||r<0&&-0),u=(i*o+a*r)/(r+o);return(yg(i)+yg(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(u))||0}function vg(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function mg(t,e,n){var r=t._x0,o=t._y0,i=t._x1,a=t._y1,u=(i-r)/3;t._context.bezierCurveTo(r+u,o+u*e,i-u,a-u*n,i,a)}function bg(t){this._context=t}function _g(t){this._context=new wg(t)}function wg(t){this._context=t}function Eg(t){return new bg(t)}function xg(t){return new _g(t)}function kg(t){this._context=t}function Sg(t){var e,n,r=t.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)o[e]=1,i[e]=4,a[e]=4*t[e]+2*t[e+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=o[e]/i[e-1],i[e]-=n,a[e]-=n*a[e-1];for(o[r-1]=a[r-1]/i[r-1],e=r-2;e>=0;--e)o[e]=(a[e]-o[e+1])/i[e];for(i[r-1]=(t[r]+o[r-1])/2,e=0;e<r-1;++e)i[e]=2*t[e+1]-o[e+1];return[o,i]}bg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:mg(this,this._t0,vg(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,mg(this,vg(this,n=gg(this,t,e)),n);break;default:mg(this,this._t0,n=gg(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(_g.prototype=Object.create(bg.prototype)).point=function(t,e){bg.prototype.point.call(this,e,t)},wg.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,o,i){this._context.bezierCurveTo(e,t,r,n,i,o)}},kg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Sg(t),o=Sg(e),i=0,a=1;a<n;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Mg=function(t){return new kg(t)};function Cg(t,e){this._context=t,this._t=e}Cg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var Ag=function(t){return new Cg(t,.5)};function Pg(t){return new Cg(t,0)}function Tg(t){return new Cg(t,1)}var Ng=function(t,e){if((o=t.length)>1)for(var n,r,o,i=1,a=t[e[0]],u=a.length;i<o;++i)for(r=a,a=t[e[i]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},Og=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function Dg(t,e){return t[e]}var Rg=function(){var t=Dp([]),e=Og,n=Ng,r=Dg;function o(o){var i,a,u=t.apply(this,arguments),s=o.length,c=u.length,l=new Array(c);for(i=0;i<c;++i){for(var f,d=u[i],h=l[i]=new Array(s),p=0;p<s;++p)h[p]=f=[0,+r(o[p],d,p,o)],f.data=o[p];h.key=d}for(i=0,a=e(l);i<c;++i)l[a[i]].index=i;return n(l,a),l}return o.keys=function(e){return arguments.length?(t="function"==typeof e?e:Dp(yy.call(e)),o):t},o.value=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),o):r},o.order=function(t){return arguments.length?(e=null==t?Og:"function"==typeof t?t:Dp(yy.call(t)),o):e},o.offset=function(t){return arguments.length?(n=null==t?Ng:t,o):n},o},Ig=function(t,e){if((r=t.length)>0){for(var n,r,o,i=0,a=t[0].length;i<a;++i){for(o=n=0;n<r;++n)o+=t[n][i][1]||0;if(o)for(n=0;n<r;++n)t[n][i][1]/=o}Ng(t,e)}},Lg=function(t,e){if((u=t.length)>1)for(var n,r,o,i,a,u,s=0,c=t[e[0]].length;s<c;++s)for(i=a=0,n=0;n<u;++n)(o=(r=t[e[n]][s])[1]-r[0])>=0?(r[0]=i,r[1]=i+=o):o<0?(r[1]=a,r[0]=a+=o):r[0]=i},Fg=function(t,e){if((n=t.length)>0){for(var n,r=0,o=t[e[0]],i=o.length;r<i;++r){for(var a=0,u=0;a<n;++a)u+=t[a][r][1]||0;o[r][1]+=o[r][0]=-u/2}Ng(t,e)}},Bg=function(t,e){if((o=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,o,i=0,a=1;a<r;++a){for(var u=0,s=0,c=0;u<o;++u){for(var l=t[e[u]],f=l[a][1]||0,d=(f-(l[a-1][1]||0))/2,h=0;h<u;++h){var p=t[e[h]];d+=(p[a][1]||0)-(p[a-1][1]||0)}s+=f,c+=d*f}n[a-1][1]+=n[a-1][0]=i,s&&(i-=c/s)}n[a-1][1]+=n[a-1][0]=i,Ng(t,e)}},Ug=function(t){var e=t.map(jg);return Og(t).sort(function(t,n){return e[t]-e[n]})};function jg(t){for(var e,n=0,r=-1,o=t.length;++r<o;)(e=+t[r][1])&&(n+=e);return n}var zg=function(t){return Ug(t).reverse()},Vg=function(t){var e,n,r=t.length,o=t.map(jg),i=Og(t).sort(function(t,e){return o[e]-o[t]}),a=0,u=0,s=[],c=[];for(e=0;e<r;++e)n=i[e],a<u?(a+=o[n],s.push(n)):(u+=o[n],c.push(n));return c.reverse().concat(s)},Wg=function(t){return Og(t).reverse()},Yg=function(t){return function(){return t}};function qg(t){return t[0]}function Hg(t){return t[1]}function Gg(){this._=null}function Xg(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Kg(t,e){var n=e,r=e.R,o=n.U;o?o.L===n?o.L=r:o.R=r:t._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function $g(t,e){var n=e,r=e.L,o=n.U;o?o.L===n?o.L=r:o.R=r:t._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Qg(t){for(;t.L;)t=t.L;return t}Gg.prototype={constructor:Gg,insert:function(t,e){var n,r,o;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Qg(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,t=r):(t===n.R&&(Kg(this,n),n=(t=n).U),n.C=!1,r.C=!0,$g(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,t=r):(t===n.L&&($g(this,n),n=(t=n).U),n.C=!1,r.C=!0,Kg(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,o=t.U,i=t.L,a=t.R;if(n=i?a?Qg(a):i:a,o?o.L===t?o.L=n:o.R=n:this._=n,i&&a?(r=n.C,n.C=t.C,n.L=i,i.U=n,n!==a?(o=n.U,n.U=t.U,t=n.R,o.L=t,n.R=a,a.U=n):(n.U=o,o=n,t=n.R)):(r=t.C,t=n),t&&(t.U=o),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===o.L){if((e=o.R).C&&(e.C=!1,o.C=!0,Kg(this,o),e=o.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,$g(this,e),e=o.R),e.C=o.C,o.C=e.R.C=!1,Kg(this,o),t=this._;break}}else if((e=o.L).C&&(e.C=!1,o.C=!0,$g(this,o),e=o.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Kg(this,e),e=o.L),e.C=o.C,o.C=e.L.C=!1,$g(this,o),t=this._;break}e.C=!0,t=o,o=o.U}while(!t.C);t&&(t.C=!1)}}};var Zg=Gg;function Jg(t,e,n,r){var o=[null,null],i=wv.push(o)-1;return o.left=t,o.right=e,n&&ev(o,t,e,n),r&&ev(o,e,t,r),bv[t.index].halfedges.push(i),bv[e.index].halfedges.push(i),o}function tv(t,e,n){var r=[e,n];return r.left=t,r}function ev(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function nv(t,e,n,r,o){var i,a=t[0],u=t[1],s=a[0],c=a[1],l=0,f=1,d=u[0]-s,h=u[1]-c;if(i=e-s,d||!(i>0)){if(i/=d,d<0){if(i<l)return;i<f&&(f=i)}else if(d>0){if(i>f)return;i>l&&(l=i)}if(i=r-s,d||!(i<0)){if(i/=d,d<0){if(i>f)return;i>l&&(l=i)}else if(d>0){if(i<l)return;i<f&&(f=i)}if(i=n-c,h||!(i>0)){if(i/=h,h<0){if(i<l)return;i<f&&(f=i)}else if(h>0){if(i>f)return;i>l&&(l=i)}if(i=o-c,h||!(i<0)){if(i/=h,h<0){if(i>f)return;i>l&&(l=i)}else if(h>0){if(i<l)return;i<f&&(f=i)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*d,c+l*h]),f<1&&(t[1]=[s+f*d,c+f*h]),!0)}}}}}function rv(t,e,n,r,o){var i=t[1];if(i)return!0;var a,u,s=t[0],c=t.left,l=t.right,f=c[0],d=c[1],h=l[0],p=l[1],y=(f+h)/2,g=(d+p)/2;if(p===d){if(y<e||y>=r)return;if(f>h){if(s){if(s[1]>=o)return}else s=[y,n];i=[y,o]}else{if(s){if(s[1]<n)return}else s=[y,o];i=[y,n]}}else if(u=g-(a=(f-h)/(p-d))*y,a<-1||a>1)if(f>h){if(s){if(s[1]>=o)return}else s=[(n-u)/a,n];i=[(o-u)/a,o]}else{if(s){if(s[1]<n)return}else s=[(o-u)/a,o];i=[(n-u)/a,n]}else if(d<p){if(s){if(s[0]>=r)return}else s=[e,a*e+u];i=[r,a*r+u]}else{if(s){if(s[0]<e)return}else s=[r,a*r+u];i=[e,a*e+u]}return t[0]=s,t[1]=i,!0}function ov(t,e){var n=t.site,r=e.left,o=e.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=e[1],o=e[0]):(r=e[0],o=e[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function iv(t,e){return e[+(e.left!==t.site)]}function av(t,e){return e[+(e.left===t.site)]}var uv,sv=[];function cv(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,o=t.site,i=n.site;if(r!==i){var a=o[0],u=o[1],s=r[0]-a,c=r[1]-u,l=i[0]-a,f=i[1]-u,d=2*(s*f-c*l);if(!(d>=-xv)){var h=s*s+c*c,p=l*l+f*f,y=(f*h-c*p)/d,g=(s*p-l*h)/d,v=sv.pop()||new function(){Xg(this),this.x=this.y=this.arc=this.site=this.cy=null};v.arc=t,v.site=o,v.x=y+a,v.y=(v.cy=g+u)+Math.sqrt(y*y+g*g),t.circle=v;for(var m=null,b=_v._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}_v.insert(m,v),m||(uv=v)}}}}function lv(t){var e=t.circle;e&&(e.P||(uv=e.N),_v.remove(e),sv.push(e),Xg(e),t.circle=null)}var fv=[];function dv(t){var e=fv.pop()||new function(){Xg(this),this.edge=this.site=this.circle=null};return e.site=t,e}function hv(t){lv(t),mv.remove(t),fv.push(t),Xg(t)}function pv(t){var e=t.circle,n=e.x,r=e.cy,o=[n,r],i=t.P,a=t.N,u=[t];hv(t);for(var s=i;s.circle&&Math.abs(n-s.circle.x)<Ev&&Math.abs(r-s.circle.cy)<Ev;)i=s.P,u.unshift(s),hv(s),s=i;u.unshift(s),lv(s);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Ev&&Math.abs(r-c.circle.cy)<Ev;)a=c.N,u.push(c),hv(c),c=a;u.push(c),lv(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],ev(c.edge,s.site,c.site,o);s=u[0],(c=u[f-1]).edge=Jg(s.site,c.site,null,o),cv(s),cv(c)}function yv(t){for(var e,n,r,o,i=t[0],a=t[1],u=mv._;u;)if((r=gv(u,a)-i)>Ev)u=u.L;else{if(!((o=i-vv(u,a))>Ev)){r>-Ev?(e=u.P,n=u):o>-Ev?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}!function(t){bv[t.index]={site:t,halfedges:[]}}(t);var s=dv(t);if(mv.insert(e,s),e||n){if(e===n)return lv(e),n=dv(e.site),mv.insert(s,n),s.edge=n.edge=Jg(e.site,s.site),cv(e),void cv(n);if(n){lv(e),lv(n);var c=e.site,l=c[0],f=c[1],d=t[0]-l,h=t[1]-f,p=n.site,y=p[0]-l,g=p[1]-f,v=2*(d*g-h*y),m=d*d+h*h,b=y*y+g*g,_=[(g*m-h*b)/v+l,(d*b-y*m)/v+f];ev(n.edge,c,p,_),s.edge=Jg(c,t,null,_),n.edge=Jg(t,p,null,_),cv(e),cv(n)}else s.edge=Jg(e.site,s.site)}}function gv(t,e){var n=t.site,r=n[0],o=n[1],i=o-e;if(!i)return r;var a=t.P;if(!a)return-1/0;var u=(n=a.site)[0],s=n[1],c=s-e;if(!c)return u;var l=u-r,f=1/i-1/c,d=l/c;return f?(-d+Math.sqrt(d*d-2*f*(l*l/(-2*c)-s+c/2+o-i/2)))/f+r:(r+u)/2}function vv(t,e){var n=t.N;if(n)return gv(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var mv,bv,_v,wv,Ev=1e-6,xv=1e-12;function kv(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function Sv(t,e){return e[1]-t[1]||e[0]-t[0]}function Mv(t,e){var n,r,o,i=t.sort(Sv).pop();for(wv=[],bv=new Array(t.length),mv=new Zg,_v=new Zg;;)if(o=uv,i&&(!o||i[1]<o.y||i[1]===o.y&&i[0]<o.x))i[0]===n&&i[1]===r||(yv(i),n=i[0],r=i[1]),i=t.pop();else{if(!o)break;pv(o.arc)}if(function(){for(var t,e,n,r,o=0,i=bv.length;o<i;++o)if((t=bv[o])&&(r=(e=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(n=0;n<r;++n)a[n]=n,u[n]=ov(t,wv[e[n]]);for(a.sort(function(t,e){return u[e]-u[t]}),n=0;n<r;++n)u[n]=e[a[n]];for(n=0;n<r;++n)e[n]=u[n]}}(),e){var a=+e[0][0],u=+e[0][1],s=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var o,i=wv.length;i--;)rv(o=wv[i],t,e,n,r)&&nv(o,t,e,n,r)&&(Math.abs(o[0][0]-o[1][0])>Ev||Math.abs(o[0][1]-o[1][1])>Ev)||delete wv[i]}(a,u,s,c),function(t,e,n,r){var o,i,a,u,s,c,l,f,d,h,p,y,g=bv.length,v=!0;for(o=0;o<g;++o)if(i=bv[o]){for(a=i.site,u=(s=i.halfedges).length;u--;)wv[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)p=(h=av(i,wv[s[u]]))[0],y=h[1],f=(l=iv(i,wv[s[++u%c]]))[0],d=l[1],(Math.abs(p-f)>Ev||Math.abs(y-d)>Ev)&&(s.splice(u,0,wv.push(tv(a,h,Math.abs(p-t)<Ev&&r-y>Ev?[t,Math.abs(f-t)<Ev?d:r]:Math.abs(y-r)<Ev&&n-p>Ev?[Math.abs(d-r)<Ev?f:n,r]:Math.abs(p-n)<Ev&&y-e>Ev?[n,Math.abs(f-n)<Ev?d:e]:Math.abs(y-e)<Ev&&p-t>Ev?[Math.abs(d-e)<Ev?f:t,e]:null))-1),++c);c&&(v=!1)}if(v){var m,b,_,w=1/0;for(o=0,v=null;o<g;++o)(i=bv[o])&&(_=(m=(a=i.site)[0]-t)*m+(b=a[1]-e)*b)<w&&(w=_,v=i);if(v){var E=[t,e],x=[t,r],k=[n,r],S=[n,e];v.halfedges.push(wv.push(tv(a=v.site,E,x))-1,wv.push(tv(a,x,k))-1,wv.push(tv(a,k,S))-1,wv.push(tv(a,S,E))-1)}}for(o=0;o<g;++o)(i=bv[o])&&(i.halfedges.length||delete bv[o])}(a,u,s,c)}this.edges=wv,this.cells=bv,mv=_v=wv=bv=null}Mv.prototype={constructor:Mv,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return iv(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(i=(o=n.halfedges).length)for(var o,i,a,u=n.site,s=-1,c=e[o[i-1]],l=c.left===u?c.right:c.left;++s<i;)a=l,l=(c=e[o[s]]).left===u?c.right:c.left,a&&l&&r<a.index&&r<l.index&&kv(u,a,l)<0&&t.push([u.data,a.data,l.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,o,i=this,a=i._found||0,u=i.cells.length;!(o=i.cells[a]);)if(++a>=u)return null;var s=t-o.site[0],c=e-o.site[1],l=s*s+c*c;do{o=i.cells[r=a],a=null,o.halfedges.forEach(function(n){var r=i.edges[n],u=r.left;if(u!==o.site&&u||(u=r.right)){var s=t-u[0],c=e-u[1],f=s*s+c*c;f<l&&(l=f,a=u.index)}})}while(null!==a);return i._found=r,null==n||l<=n*n?o.site:null}};var Cv=function(){var t=qg,e=Hg,n=null;function r(r){return new Mv(r.map(function(n,o){var i=[Math.round(t(n,o,r)/Ev)*Ev,Math.round(e(n,o,r)/Ev)*Ev];return i.index=o,i.data=n,i}),n)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(e){return arguments.length?(t="function"==typeof e?e:Yg(+e),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:Yg(+t),r):e},r.extent=function(t){return arguments.length?(n=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(t){return arguments.length?(n=null==t?null:[[0,0],[+t[0],+t[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},Av=n(19);n.d(e,"version",function(){return"5.7.0"}),n.d(e,"bisect",function(){return s}),n.d(e,"bisectRight",function(){return a}),n.d(e,"bisectLeft",function(){return u}),n.d(e,"ascending",function(){return r}),n.d(e,"bisector",function(){return o}),n.d(e,"cross",function(){return f}),n.d(e,"descending",function(){return d}),n.d(e,"deviation",function(){return y}),n.d(e,"extent",function(){return g}),n.d(e,"histogram",function(){return T}),n.d(e,"thresholdFreedmanDiaconis",function(){return O}),n.d(e,"thresholdScott",function(){return D}),n.d(e,"thresholdSturges",function(){return P}),n.d(e,"max",function(){return R}),n.d(e,"mean",function(){return I}),n.d(e,"median",function(){return L}),n.d(e,"merge",function(){return F}),n.d(e,"min",function(){return B}),n.d(e,"pairs",function(){return c}),n.d(e,"permute",function(){return U}),n.d(e,"quantile",function(){return N}),n.d(e,"range",function(){return E}),n.d(e,"scan",function(){return j}),n.d(e,"shuffle",function(){return z}),n.d(e,"sum",function(){return V}),n.d(e,"ticks",function(){return M}),n.d(e,"tickIncrement",function(){return C}),n.d(e,"tickStep",function(){return A}),n.d(e,"transpose",function(){return W}),n.d(e,"variance",function(){return p}),n.d(e,"zip",function(){return q}),n.d(e,"axisTop",function(){return rt}),n.d(e,"axisRight",function(){return ot}),n.d(e,"axisBottom",function(){return it}),n.d(e,"axisLeft",function(){return at}),n.d(e,"brush",function(){return Lt}),n.d(e,"brushX",function(){return Rt}),n.d(e,"brushY",function(){return It}),n.d(e,"brushSelection",function(){return Dt}),n.d(e,"chord",function(){return Yt}),n.d(e,"ribbon",function(){return oe}),n.d(e,"nest",function(){return se}),n.d(e,"set",function(){return ge}),n.d(e,"map",function(){return ue}),n.d(e,"keys",function(){return ve}),n.d(e,"values",function(){return me}),n.d(e,"entries",function(){return be}),n.d(e,"color",function(){return _e.a}),n.d(e,"rgb",function(){return _e.h}),n.d(e,"hsl",function(){return _e.e}),n.d(e,"lab",function(){return _e.f}),n.d(e,"hcl",function(){return _e.d}),n.d(e,"lch",function(){return _e.g}),n.d(e,"gray",function(){return _e.c}),n.d(e,"cubehelix",function(){return _e.b}),n.d(e,"contours",function(){return Te}),n.d(e,"contourDensity",function(){return Le}),n.d(e,"dispatch",function(){return ut.a}),n.d(e,"drag",function(){return st.a}),n.d(e,"dragDisable",function(){return st.b}),n.d(e,"dragEnable",function(){return st.c}),n.d(e,"dsvFormat",function(){return We}),n.d(e,"csvParse",function(){return qe}),n.d(e,"csvParseRows",function(){return He}),n.d(e,"csvFormat",function(){return Ge}),n.d(e,"csvFormatRows",function(){return Xe}),n.d(e,"tsvParse",function(){return $e}),n.d(e,"tsvParseRows",function(){return Qe}),n.d(e,"tsvFormat",function(){return Ze}),n.d(e,"tsvFormatRows",function(){return Je}),n.d(e,"easeLinear",function(){return tn.y}),n.d(e,"easeQuad",function(){return tn.D}),n.d(e,"easeQuadIn",function(){return tn.E}),n.d(e,"easeQuadOut",function(){return tn.G}),n.d(e,"easeQuadInOut",function(){return tn.F}),n.d(e,"easeCubic",function(){return tn.m}),n.d(e,"easeCubicIn",function(){return tn.n}),n.d(e,"easeCubicOut",function(){return tn.p}),n.d(e,"easeCubicInOut",function(){return tn.o}),n.d(e,"easePoly",function(){return tn.z}),n.d(e,"easePolyIn",function(){return tn.A}),n.d(e,"easePolyOut",function(){return tn.C}),n.d(e,"easePolyInOut",function(){return tn.B}),n.d(e,"easeSin",function(){return tn.H}),n.d(e,"easeSinIn",function(){return tn.I}),n.d(e,"easeSinOut",function(){return tn.K}),n.d(e,"easeSinInOut",function(){return tn.J}),n.d(e,"easeExp",function(){return tn.u}),n.d(e,"easeExpIn",function(){return tn.v}),n.d(e,"easeExpOut",function(){return tn.x}),n.d(e,"easeExpInOut",function(){return tn.w}),n.d(e,"easeCircle",function(){return tn.i}),n.d(e,"easeCircleIn",function(){return tn.j}),n.d(e,"easeCircleOut",function(){return tn.l}),n.d(e,"easeCircleInOut",function(){return tn.k}),n.d(e,"easeBounce",function(){return tn.e}),n.d(e,"easeBounceIn",function(){return tn.f}),n.d(e,"easeBounceOut",function(){return tn.h}),n.d(e,"easeBounceInOut",function(){return tn.g}),n.d(e,"easeBack",function(){return tn.a}),n.d(e,"easeBackIn",function(){return tn.b}),n.d(e,"easeBackOut",function(){return tn.d}),n.d(e,"easeBackInOut",function(){return tn.c}),n.d(e,"easeElastic",function(){return tn.q}),n.d(e,"easeElasticIn",function(){return tn.r}),n.d(e,"easeElasticOut",function(){return tn.t}),n.d(e,"easeElasticInOut",function(){return tn.s}),n.d(e,"blob",function(){return nn}),n.d(e,"buffer",function(){return on}),n.d(e,"dsv",function(){return cn}),n.d(e,"csv",function(){return ln}),n.d(e,"tsv",function(){return fn}),n.d(e,"image",function(){return dn}),n.d(e,"json",function(){return pn}),n.d(e,"text",function(){return un}),n.d(e,"xml",function(){return gn}),n.d(e,"html",function(){return vn}),n.d(e,"svg",function(){return mn}),n.d(e,"forceCenter",function(){return bn}),n.d(e,"forceCollide",function(){return On}),n.d(e,"forceLink",function(){return In}),n.d(e,"forceManyBody",function(){return Vn}),n.d(e,"forceRadial",function(){return Wn}),n.d(e,"forceSimulation",function(){return zn}),n.d(e,"forceX",function(){return Yn}),n.d(e,"forceY",function(){return qn}),n.d(e,"formatDefaultLocale",function(){return ur}),n.d(e,"format",function(){return Jn}),n.d(e,"formatPrefix",function(){return tr}),n.d(e,"formatLocale",function(){return ar}),n.d(e,"formatSpecifier",function(){return Kn}),n.d(e,"precisionFixed",function(){return sr}),n.d(e,"precisionPrefix",function(){return cr}),n.d(e,"precisionRound",function(){return lr}),n.d(e,"geoArea",function(){return no}),n.d(e,"geoBounds",function(){return Ko}),n.d(e,"geoCentroid",function(){return ui}),n.d(e,"geoCircle",function(){return mi}),n.d(e,"geoClipAntimeridian",function(){return Pi}),n.d(e,"geoClipCircle",function(){return Ti}),n.d(e,"geoClipExtent",function(){return Bi}),n.d(e,"geoClipRectangle",function(){return Ri}),n.d(e,"geoContains",function(){return na}),n.d(e,"geoDistance",function(){return Gi}),n.d(e,"geoGraticule",function(){return ia}),n.d(e,"geoGraticule10",function(){return aa}),n.d(e,"geoInterpolate",function(){return fa}),n.d(e,"geoLength",function(){return Yi}),n.d(e,"geoPath",function(){return cu}),n.d(e,"geoAlbers",function(){return Au}),n.d(e,"geoAlbersUsa",function(){return Pu}),n.d(e,"geoAzimuthalEqualArea",function(){return Du}),n.d(e,"geoAzimuthalEqualAreaRaw",function(){return Ou}),n.d(e,"geoAzimuthalEquidistant",function(){return Iu}),n.d(e,"geoAzimuthalEquidistantRaw",function(){return Ru}),n.d(e,"geoConicConformal",function(){return zu}),n.d(e,"geoConicConformalRaw",function(){return ju}),n.d(e,"geoConicEqualArea",function(){return Cu}),n.d(e,"geoConicEqualAreaRaw",function(){return Mu}),n.d(e,"geoConicEquidistant",function(){return qu}),n.d(e,"geoConicEquidistantRaw",function(){return Yu}),n.d(e,"geoEqualEarth",function(){return Zu}),n.d(e,"geoEqualEarthRaw",function(){return Qu}),n.d(e,"geoEquirectangular",function(){return Wu}),n.d(e,"geoEquirectangularRaw",function(){return Vu}),n.d(e,"geoGnomonic",function(){return ts}),n.d(e,"geoGnomonicRaw",function(){return Ju}),n.d(e,"geoIdentity",function(){return ns}),n.d(e,"geoProjection",function(){return xu}),n.d(e,"geoProjectionMutator",function(){return ku}),n.d(e,"geoMercator",function(){return Fu}),n.d(e,"geoMercatorRaw",function(){return Lu}),n.d(e,"geoNaturalEarth1",function(){return os}),n.d(e,"geoNaturalEarth1Raw",function(){return rs}),n.d(e,"geoOrthographic",function(){return as}),n.d(e,"geoOrthographicRaw",function(){return is}),n.d(e,"geoStereographic",function(){return ss}),n.d(e,"geoStereographicRaw",function(){return us}),n.d(e,"geoTransverseMercator",function(){return ls}),n.d(e,"geoTransverseMercatorRaw",function(){return cs}),n.d(e,"geoRotation",function(){return yi}),n.d(e,"geoStream",function(){return Xr}),n.d(e,"geoTransform",function(){return lu}),n.d(e,"cluster",function(){return ps}),n.d(e,"hierarchy",function(){return gs}),n.d(e,"pack",function(){return js}),n.d(e,"packSiblings",function(){return Is}),n.d(e,"packEnclose",function(){return Es}),n.d(e,"partition",function(){return Hs}),n.d(e,"stratify",function(){return Zs}),n.d(e,"tree",function(){return ic}),n.d(e,"treemap",function(){return lc}),n.d(e,"treemapBinary",function(){return fc}),n.d(e,"treemapDice",function(){return qs}),n.d(e,"treemapSlice",function(){return ac}),n.d(e,"treemapSliceDice",function(){return dc}),n.d(e,"treemapSquarify",function(){return cc}),n.d(e,"treemapResquarify",function(){return hc}),n.d(e,"interpolate",function(){return ct.a}),n.d(e,"interpolateArray",function(){return ct.b}),n.d(e,"interpolateBasis",function(){return ct.c}),n.d(e,"interpolateBasisClosed",function(){return ct.d}),n.d(e,"interpolateDate",function(){return ct.g}),n.d(e,"interpolateDiscrete",function(){return ct.h}),n.d(e,"interpolateHue",function(){return ct.m}),n.d(e,"interpolateNumber",function(){return ct.o}),n.d(e,"interpolateObject",function(){return ct.p}),n.d(e,"interpolateRound",function(){return ct.t}),n.d(e,"interpolateString",function(){return ct.u}),n.d(e,"interpolateTransformCss",function(){return ct.v}),n.d(e,"interpolateTransformSvg",function(){return ct.w}),n.d(e,"interpolateZoom",function(){return ct.x}),n.d(e,"interpolateRgb",function(){return ct.q}),n.d(e,"interpolateRgbBasis",function(){return ct.r}),n.d(e,"interpolateRgbBasisClosed",function(){return ct.s}),n.d(e,"interpolateHsl",function(){return ct.k}),n.d(e,"interpolateHslLong",function(){return ct.l}),n.d(e,"interpolateLab",function(){return ct.n}),n.d(e,"interpolateHcl",function(){return ct.i}),n.d(e,"interpolateHclLong",function(){return ct.j}),n.d(e,"interpolateCubehelix",function(){return ct.e}),n.d(e,"interpolateCubehelixLong",function(){return ct.f}),n.d(e,"piecewise",function(){return ct.y}),n.d(e,"quantize",function(){return ct.z}),n.d(e,"path",function(){return Zt}),n.d(e,"polygonArea",function(){return pc}),n.d(e,"polygonCentroid",function(){return yc}),n.d(e,"polygonHull",function(){return bc}),n.d(e,"polygonContains",function(){return _c}),n.d(e,"polygonLength",function(){return wc}),n.d(e,"quadtree",function(){return Mn}),n.d(e,"randomUniform",function(){return xc}),n.d(e,"randomNormal",function(){return kc}),n.d(e,"randomLogNormal",function(){return Sc}),n.d(e,"randomBates",function(){return Cc}),n.d(e,"randomIrwinHall",function(){return Mc}),n.d(e,"randomExponential",function(){return Ac}),n.d(e,"scaleBand",function(){return Rc}),n.d(e,"scalePoint",function(){return Ic}),n.d(e,"scaleIdentity",function(){return Gc}),n.d(e,"scaleLinear",function(){return Hc}),n.d(e,"scaleLog",function(){return el}),n.d(e,"scaleOrdinal",function(){return Dc}),n.d(e,"scaleImplicit",function(){return Oc}),n.d(e,"scalePow",function(){return rl}),n.d(e,"scaleSqrt",function(){return ol}),n.d(e,"scaleQuantile",function(){return il}),n.d(e,"scaleQuantize",function(){return al}),n.d(e,"scaleThreshold",function(){return ul}),n.d(e,"scaleTime",function(){return oh}),n.d(e,"scaleUtc",function(){return ih}),n.d(e,"scaleSequential",function(){return ah}),n.d(e,"scaleDiverging",function(){return uh}),n.d(e,"schemeCategory10",function(){return ch}),n.d(e,"schemeAccent",function(){return lh}),n.d(e,"schemeDark2",function(){return fh}),n.d(e,"schemePaired",function(){return dh}),n.d(e,"schemePastel1",function(){return hh}),n.d(e,"schemePastel2",function(){return ph}),n.d(e,"schemeSet1",function(){return yh}),n.d(e,"schemeSet2",function(){return gh}),n.d(e,"schemeSet3",function(){return vh}),n.d(e,"interpolateBrBG",function(){return _h}),n.d(e,"schemeBrBG",function(){return bh}),n.d(e,"interpolatePRGn",function(){return Eh}),n.d(e,"schemePRGn",function(){return wh}),n.d(e,"interpolatePiYG",function(){return kh}),n.d(e,"schemePiYG",function(){return xh}),n.d(e,"interpolatePuOr",function(){return Mh}),n.d(e,"schemePuOr",function(){return Sh}),n.d(e,"interpolateRdBu",function(){return Ah}),n.d(e,"schemeRdBu",function(){return Ch}),n.d(e,"interpolateRdGy",function(){return Th}),n.d(e,"schemeRdGy",function(){return Ph}),n.d(e,"interpolateRdYlBu",function(){return Oh}),n.d(e,"schemeRdYlBu",function(){return Nh}),n.d(e,"interpolateRdYlGn",function(){return Rh}),n.d(e,"schemeRdYlGn",function(){return Dh}),n.d(e,"interpolateSpectral",function(){return Lh}),n.d(e,"schemeSpectral",function(){return Ih}),n.d(e,"interpolateBuGn",function(){return Bh}),n.d(e,"schemeBuGn",function(){return Fh}),n.d(e,"interpolateBuPu",function(){return jh}),n.d(e,"schemeBuPu",function(){return Uh}),n.d(e,"interpolateGnBu",function(){return Vh}),n.d(e,"schemeGnBu",function(){return zh}),n.d(e,"interpolateOrRd",function(){return Yh}),n.d(e,"schemeOrRd",function(){return Wh}),n.d(e,"interpolatePuBuGn",function(){return Hh}),n.d(e,"schemePuBuGn",function(){return qh}),n.d(e,"interpolatePuBu",function(){return Xh}),n.d(e,"schemePuBu",function(){return Gh}),n.d(e,"interpolatePuRd",function(){return $h}),n.d(e,"schemePuRd",function(){return Kh}),n.d(e,"interpolateRdPu",function(){return Zh}),n.d(e,"schemeRdPu",function(){return Qh}),n.d(e,"interpolateYlGnBu",function(){return tp}),n.d(e,"schemeYlGnBu",function(){return Jh}),n.d(e,"interpolateYlGn",function(){return np}),n.d(e,"schemeYlGn",function(){return ep}),n.d(e,"interpolateYlOrBr",function(){return op}),n.d(e,"schemeYlOrBr",function(){return rp}),n.d(e,"interpolateYlOrRd",function(){return ap}),n.d(e,"schemeYlOrRd",function(){return ip}),n.d(e,"interpolateBlues",function(){return sp}),n.d(e,"schemeBlues",function(){return up}),n.d(e,"interpolateGreens",function(){return lp}),n.d(e,"schemeGreens",function(){return cp}),n.d(e,"interpolateGreys",function(){return dp}),n.d(e,"schemeGreys",function(){return fp}),n.d(e,"interpolatePurples",function(){return pp}),n.d(e,"schemePurples",function(){return hp}),n.d(e,"interpolateReds",function(){return gp}),n.d(e,"schemeReds",function(){return yp}),n.d(e,"interpolateOranges",function(){return mp}),n.d(e,"schemeOranges",function(){return vp}),n.d(e,"interpolateCubehelixDefault",function(){return bp}),n.d(e,"interpolateRainbow",function(){return xp}),n.d(e,"interpolateWarm",function(){return _p}),n.d(e,"interpolateCool",function(){return wp}),n.d(e,"interpolateSinebow",function(){return Cp}),n.d(e,"interpolateViridis",function(){return Pp}),n.d(e,"interpolateMagma",function(){return Tp}),n.d(e,"interpolateInferno",function(){return Np}),n.d(e,"interpolatePlasma",function(){return Op}),n.d(e,"create",function(){return lt.b}),n.d(e,"creator",function(){return lt.c}),n.d(e,"local",function(){return lt.f}),n.d(e,"matcher",function(){return lt.g}),n.d(e,"mouse",function(){return lt.h}),n.d(e,"namespace",function(){return lt.i}),n.d(e,"namespaces",function(){return lt.j}),n.d(e,"clientPoint",function(){return lt.a}),n.d(e,"select",function(){return lt.k}),n.d(e,"selectAll",function(){return lt.l}),n.d(e,"selection",function(){return lt.m}),n.d(e,"selector",function(){return lt.n}),n.d(e,"selectorAll",function(){return lt.o}),n.d(e,"style",function(){return lt.p}),n.d(e,"touch",function(){return lt.q}),n.d(e,"touches",function(){return lt.r}),n.d(e,"window",function(){return lt.s}),n.d(e,"event",function(){return lt.e}),n.d(e,"customEvent",function(){return lt.d}),n.d(e,"arc",function(){return Zp}),n.d(e,"area",function(){return oy}),n.d(e,"line",function(){return ry}),n.d(e,"pie",function(){return uy}),n.d(e,"areaRadial",function(){return hy}),n.d(e,"radialArea",function(){return hy}),n.d(e,"lineRadial",function(){return dy}),n.d(e,"radialLine",function(){return dy}),n.d(e,"pointRadial",function(){return py}),n.d(e,"linkHorizontal",function(){return Ey}),n.d(e,"linkVertical",function(){return xy}),n.d(e,"linkRadial",function(){return ky}),n.d(e,"symbol",function(){return Vy}),n.d(e,"symbols",function(){return zy}),n.d(e,"symbolCircle",function(){return Sy}),n.d(e,"symbolCross",function(){return My}),n.d(e,"symbolDiamond",function(){return Py}),n.d(e,"symbolSquare",function(){return Ry}),n.d(e,"symbolStar",function(){return Dy}),n.d(e,"symbolTriangle",function(){return Ly}),n.d(e,"symbolWye",function(){return jy}),n.d(e,"curveBasisClosed",function(){return Xy}),n.d(e,"curveBasisOpen",function(){return $y}),n.d(e,"curveBasis",function(){return Hy}),n.d(e,"curveBundle",function(){return Zy}),n.d(e,"curveCardinalClosed",function(){return rg}),n.d(e,"curveCardinalOpen",function(){return ig}),n.d(e,"curveCardinal",function(){return eg}),n.d(e,"curveCatmullRomClosed",function(){return lg}),n.d(e,"curveCatmullRomOpen",function(){return dg}),n.d(e,"curveCatmullRom",function(){return sg}),n.d(e,"curveLinearClosed",function(){return pg}),n.d(e,"curveLinear",function(){return ty}),n.d(e,"curveMonotoneX",function(){return Eg}),n.d(e,"curveMonotoneY",function(){return xg}),n.d(e,"curveNatural",function(){return Mg}),n.d(e,"curveStep",function(){return Ag}),n.d(e,"curveStepAfter",function(){return Tg}),n.d(e,"curveStepBefore",function(){return Pg}),n.d(e,"stack",function(){return Rg}),n.d(e,"stackOffsetExpand",function(){return Ig}),n.d(e,"stackOffsetDiverging",function(){return Lg}),n.d(e,"stackOffsetNone",function(){return Ng}),n.d(e,"stackOffsetSilhouette",function(){return Fg}),n.d(e,"stackOffsetWiggle",function(){return Bg}),n.d(e,"stackOrderAscending",function(){return Ug}),n.d(e,"stackOrderDescending",function(){return zg}),n.d(e,"stackOrderInsideOut",function(){return Vg}),n.d(e,"stackOrderNone",function(){return Og}),n.d(e,"stackOrderReverse",function(){return Wg}),n.d(e,"timeInterval",function(){return ll}),n.d(e,"timeMillisecond",function(){return dl}),n.d(e,"timeMilliseconds",function(){return hl}),n.d(e,"utcMillisecond",function(){return dl}),n.d(e,"utcMilliseconds",function(){return hl}),n.d(e,"timeSecond",function(){return vl}),n.d(e,"timeSeconds",function(){return ml}),n.d(e,"utcSecond",function(){return vl}),n.d(e,"utcSeconds",function(){return ml}),n.d(e,"timeMinute",function(){return _l}),n.d(e,"timeMinutes",function(){return wl}),n.d(e,"timeHour",function(){return xl}),n.d(e,"timeHours",function(){return kl}),n.d(e,"timeDay",function(){return Ml}),n.d(e,"timeDays",function(){return Cl}),n.d(e,"timeWeek",function(){return Pl}),n.d(e,"timeWeeks",function(){return Ll}),n.d(e,"timeSunday",function(){return Pl}),n.d(e,"timeSundays",function(){return Ll}),n.d(e,"timeMonday",function(){return Tl}),n.d(e,"timeMondays",function(){return Fl}),n.d(e,"timeTuesday",function(){return Nl}),n.d(e,"timeTuesdays",function(){return Bl}),n.d(e,"timeWednesday",function(){return Ol}),n.d(e,"timeWednesdays",function(){return Ul}),n.d(e,"timeThursday",function(){return Dl}),n.d(e,"timeThursdays",function(){return jl}),n.d(e,"timeFriday",function(){return Rl}),n.d(e,"timeFridays",function(){return zl}),n.d(e,"timeSaturday",function(){return Il}),n.d(e,"timeSaturdays",function(){return Vl}),n.d(e,"timeMonth",function(){return Yl}),n.d(e,"timeMonths",function(){return ql}),n.d(e,"timeYear",function(){return Gl}),n.d(e,"timeYears",function(){return Xl}),n.d(e,"utcMinute",function(){return $l}),n.d(e,"utcMinutes",function(){return Ql}),n.d(e,"utcHour",function(){return Jl}),n.d(e,"utcHours",function(){return tf}),n.d(e,"utcDay",function(){return nf}),n.d(e,"utcDays",function(){return rf}),n.d(e,"utcWeek",function(){return af}),n.d(e,"utcWeeks",function(){return hf}),n.d(e,"utcSunday",function(){return af}),n.d(e,"utcSundays",function(){return hf}),n.d(e,"utcMonday",function(){return uf}),n.d(e,"utcMondays",function(){return pf}),n.d(e,"utcTuesday",function(){return sf}),n.d(e,"utcTuesdays",function(){return yf}),n.d(e,"utcWednesday",function(){return cf}),n.d(e,"utcWednesdays",function(){return gf}),n.d(e,"utcThursday",function(){return lf}),n.d(e,"utcThursdays",function(){return vf}),n.d(e,"utcFriday",function(){return ff}),n.d(e,"utcFridays",function(){return mf}),n.d(e,"utcSaturday",function(){return df}),n.d(e,"utcSaturdays",function(){return bf}),n.d(e,"utcMonth",function(){return wf}),n.d(e,"utcMonths",function(){return Ef}),n.d(e,"utcYear",function(){return kf}),n.d(e,"utcYears",function(){return Sf}),n.d(e,"timeFormatDefaultLocale",function(){return qd}),n.d(e,"timeFormat",function(){return Nf}),n.d(e,"timeParse",function(){return Of}),n.d(e,"utcFormat",function(){return Df}),n.d(e,"utcParse",function(){return Rf}),n.d(e,"timeFormatLocale",function(){return Pf}),n.d(e,"isoFormat",function(){return Hd}),n.d(e,"isoParse",function(){return Gd}),n.d(e,"now",function(){return Ln.b}),n.d(e,"timer",function(){return Ln.d}),n.d(e,"timerFlush",function(){return Ln.e}),n.d(e,"timeout",function(){return Ln.c}),n.d(e,"interval",function(){return Ln.a}),n.d(e,"transition",function(){return ft.c}),n.d(e,"active",function(){return ft.a}),n.d(e,"interrupt",function(){return ft.b}),n.d(e,"voronoi",function(){return Cv}),n.d(e,"zoom",function(){return Av.a}),n.d(e,"zoomTransform",function(){return Av.c}),n.d(e,"zoomIdentity",function(){return Av.b})},function(t,e,n){(function(e,r,o){var i=function(){var t="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return function(i){i=void 0!==(i=i||{})?i:{};var a,u={};for(a in i)i.hasOwnProperty(a)&&(u[a]=i[a]);i.arguments=[],i.thisProgram="./this.program",i.quit=function(t,e){throw e},i.preRun=[],i.postRun=[];var s,c,l=!1,f=!1;l="object"==typeof window,f="function"==typeof importScripts,s="object"==typeof e&&!l&&!f,c=!l&&!s&&!f;var d,h,p="";function y(t){return i.locateFile?i.locateFile(t,p):p+t}s?(p=r+"/",i.read=function(t,e){var r;return d||(d=n(32)),h||(h=n(32)),t=h.normalize(t),r=d.readFileSync(t),e?r:r.toString()},i.readBinary=function(t){var e=i.read(t,!0);return e.buffer||(e=new Uint8Array(e)),S(e.buffer),e},e.argv.length>1&&(i.thisProgram=e.argv[1].replace(/\\/g,"/")),i.arguments=e.argv.slice(2),e.on("uncaughtException",function(t){if(!(t instanceof pe))throw t}),e.on("unhandledRejection",function(t,n){e.exit(1)}),i.quit=function(t){e.exit(t)},i.inspect=function(){return"[Emscripten Module object]"}):c?("undefined"!=typeof read&&(i.read=function(t){return read(t)}),i.readBinary=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(S("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs?i.arguments=scriptArgs:void 0!==arguments&&(i.arguments=arguments),"function"==typeof quit&&(i.quit=function(t){quit(t)})):(l||f)&&(l?document.currentScript&&(p=document.currentScript.src):p=self.location.href,t&&(p=t),p=0!==p.indexOf("blob:")?p.split("/").slice(0,-1).join("/")+"/":"",i.read=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},f&&(i.readBinary=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),i.readAsync=function(t,e,n){var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=function(){200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)},i.setWindowTitle=function(t){document.title=t});var g=i.print||("undefined"!=typeof console?console.log.bind(console):"undefined"!=typeof print?print:null),v=i.printErr||("undefined"!=typeof printErr?printErr:"undefined"!=typeof console&&console.warn.bind(console)||g);for(a in u)u.hasOwnProperty(a)&&(i[a]=u[a]);u=void 0;var m=16;function b(t){var e=Q;return Q=Q+t+15&-16,e}function _(t){var e=X[et>>2],n=e+t+15&-16;if((X[et>>2]=n,n>=st)&&!at())return X[et>>2]=e,0;return e}function w(t,e){return e||(e=m),t=Math.ceil(t/e)*e}function E(t){switch(t){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:if("*"===t[t.length-1])return 4;if("i"===t[0]){var e=parseInt(t.substr(1));return S(e%8==0),e/8}return 0}}var x={"f64-rem":function(t,e){return t%e},debugger:function(){}},k=(new Array(0),0);function S(t,e){t||ge("Assertion failed: "+e)}function M(t){var e=i["_"+t];return S(e,"Cannot call unknown function "+t+", make sure it is exported"),e}var C={stackSave:function(){he()},stackRestore:function(){de()},arrayToC:function(t){var e=fe(t.length);return mt(t,e),e},stringToC:function(t){var e=0;if(null!==t&&void 0!==t&&0!==t){var n=1+(t.length<<2);U(t,e=fe(n),n)}return e}},A={string:C.stringToC,array:C.arrayToC};function P(t,e,n,r,o){var i=M(t),a=[],u=0;if(r)for(var s=0;s<r.length;s++){var c=A[n[s]];c?(0===u&&(u=he()),a[s]=c(r[s])):a[s]=r[s]}var l=i.apply(null,a);return l=function(t){return"string"===e?I(t):"boolean"===e?Boolean(t):t}(l),0!==u&&de(u),l}function T(t,e,n,r){switch("*"===(n=n||"i8").charAt(n.length-1)&&(n="i32"),n){case"i1":case"i8":q[t>>0]=e;break;case"i16":G[t>>1]=e;break;case"i32":X[t>>2]=e;break;case"i64":tempI64=[e>>>0,(tempDouble=e,+_t(tempDouble)>=1?tempDouble>0?(0|St(+kt(tempDouble/4294967296),4294967295))>>>0:~~+xt((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],X[t>>2]=tempI64[0],X[t+4>>2]=tempI64[1];break;case"float":K[t>>2]=e;break;case"double":$[t>>3]=e;break;default:ge("invalid type for setValue: "+n)}}var N=0,O=2,D=4;function R(t){return Z?yt?le(t):_(t):b(t)}function I(t,e){if(0===e||!t)return"";for(var n,r=0,o=0;r|=n=H[t+o>>0],(0!=n||e)&&(o++,!e||o!=e););e||(e=o);var i="";if(r<128){for(var a;e>0;)a=String.fromCharCode.apply(String,H.subarray(t,t+Math.min(e,1024))),i=i?i+a:a,t+=1024,e-=1024;return i}return function(t){return F(H,t)}(t)}var L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function F(t,e){for(var n=e;t[n];)++n;if(n-e>16&&t.subarray&&L)return L.decode(t.subarray(e,n));for(var r,o,i,a,u,s="";;){if(!(r=t[e++]))return s;if(128&r)if(o=63&t[e++],192!=(224&r))if(i=63&t[e++],224==(240&r)?r=(15&r)<<12|o<<6|i:(a=63&t[e++],240==(248&r)?r=(7&r)<<18|o<<12|i<<6|a:(u=63&t[e++],r=248==(252&r)?(3&r)<<24|o<<18|i<<12|a<<6|u:(1&r)<<30|o<<24|i<<18|a<<12|u<<6|63&t[e++])),r<65536)s+=String.fromCharCode(r);else{var c=r-65536;s+=String.fromCharCode(55296|c>>10,56320|1023&c)}else s+=String.fromCharCode((31&r)<<6|o);else s+=String.fromCharCode(r)}}function B(t,e,n,r){if(!(r>0))return 0;for(var o=n,i=n+r-1,a=0;a<t.length;++a){var u=t.charCodeAt(a);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&t.charCodeAt(++a);if(u<=127){if(n>=i)break;e[n++]=u}else if(u<=2047){if(n+1>=i)break;e[n++]=192|u>>6,e[n++]=128|63&u}else if(u<=65535){if(n+2>=i)break;e[n++]=224|u>>12,e[n++]=128|u>>6&63,e[n++]=128|63&u}else if(u<=2097151){if(n+3>=i)break;e[n++]=240|u>>18,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}else if(u<=67108863){if(n+4>=i)break;e[n++]=248|u>>24,e[n++]=128|u>>18&63,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}else{if(n+5>=i)break;e[n++]=252|u>>30,e[n++]=128|u>>24&63,e[n++]=128|u>>18&63,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}}return e[n]=0,n-o}function U(t,e,n){return B(t,H,e,n)}function j(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);r>=55296&&r<=57343&&(r=65536+((1023&r)<<10)|1023&t.charCodeAt(++n)),r<=127?++e:e+=r<=2047?2:r<=65535?3:r<=2097151?4:r<=67108863?5:6}return e}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");function z(t){return t}function V(){var t=new Error;if(!t.stack){try{throw new Error(0)}catch(e){t=e}if(!t.stack)return"(no stack trace available)"}return t.stack.toString()}function W(){var t=V();return i.extraStackTrace&&(t+="\n"+i.extraStackTrace()),function(t){return t.replace(/__Z[\w\d_]+/g,function(t){var e=z(t);return t===e?t:t+" ["+e+"]"})}(t)}var Y,q,H,G,X,K,$,Q,Z,J,tt,et,nt=65536,rt=16777216;function ot(){i.HEAP8=q=new Int8Array(Y),i.HEAP16=G=new Int16Array(Y),i.HEAP32=X=new Int32Array(Y),i.HEAPU8=H=new Uint8Array(Y),i.HEAPU16=new Uint16Array(Y),i.HEAPU32=new Uint32Array(Y),i.HEAPF32=K=new Float32Array(Y),i.HEAPF64=$=new Float64Array(Y)}function it(){ge("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+st+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function at(){it()}Q=et=0,Z=!1;var ut=i.TOTAL_STACK||5242880,st=i.TOTAL_MEMORY||268435456;function ct(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?i.dynCall_v(n):i.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e()}}st<ut&&v("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+st+"! (TOTAL_STACK="+ut+")"),i.buffer?Y=i.buffer:("object"==typeof WebAssembly&&"function"==typeof WebAssembly.Memory?(i.wasmMemory=new WebAssembly.Memory({initial:st/nt,maximum:st/nt}),Y=i.wasmMemory.buffer):Y=new ArrayBuffer(st),i.buffer=Y),ot();var lt=[],ft=[],dt=[],ht=[],pt=[],yt=!1;function gt(t){lt.unshift(t)}function vt(t){pt.unshift(t)}function mt(t,e){q.set(t,e)}function bt(t,e,n){for(var r=0;r<t.length;++r)q[e++>>0]=t.charCodeAt(r);n||(q[e>>0]=0)}var _t=Math.abs,wt=Math.cos,Et=Math.sin,xt=Math.ceil,kt=Math.floor,St=Math.min,Mt=0,Ct=null,At=null;function Pt(t){Mt++,i.monitorRunDependencies&&i.monitorRunDependencies(Mt)}function Tt(t){if(Mt--,i.monitorRunDependencies&&i.monitorRunDependencies(Mt),0==Mt&&(null!==Ct&&(clearInterval(Ct),Ct=null),At)){var e=At;At=null,e()}}i.preloadedImages={},i.preloadedAudios={};var Nt="data:application/octet-stream;base64,";function Ot(t){return String.prototype.startsWith?t.startsWith(Nt):0===t.indexOf(Nt)}!function(){var t="egraph.wast",e="egraph.wasm",n="egraph.temp.asm.js";Ot(t)||(t=y(t)),Ot(e)||(e=y(e)),Ot(n)||(n=y(n));var r={global:null,env:null,asm2wasm:x,parent:i},o=null;function a(t){var e=i.buffer;t.byteLength<e.byteLength&&v("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");var n=new Int8Array(e);new Int8Array(t).set(n),function(t){i.buffer=Y=t}(t),ot()}function u(){try{if(i.wasmBinary)return new Uint8Array(i.wasmBinary);if(i.readBinary)return i.readBinary(e);throw"both async and sync fetching of the wasm failed"}catch(t){ge(t)}}function s(t,n,s){if("object"!=typeof WebAssembly)return v("no native wasm support detected"),!1;if(!(i.wasmMemory instanceof WebAssembly.Memory))return v("no native wasm Memory in use"),!1;function c(t,e){(o=t.exports).memory&&a(o.memory),i.asm=o,i.usingWasm=!0,Tt()}if(n.memory=i.wasmMemory,r.global={NaN:NaN,Infinity:1/0},r["global.Math"]=Math,r.env=n,Pt(),i.instantiateWasm)try{return i.instantiateWasm(r,c)}catch(t){return v("Module.instantiateWasm callback failed with error: "+t),!1}function d(t){c(t.instance,t.module)}function h(t){(i.wasmBinary||!l&&!f||"function"!=typeof fetch?new Promise(function(t,e){t(u())}):fetch(e,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()}).catch(function(){return u()})).then(function(t){return WebAssembly.instantiate(t,r)}).then(t).catch(function(t){v("failed to asynchronously prepare wasm: "+t),ge(t)})}return i.wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||Ot(e)||"function"!=typeof fetch?h(d):WebAssembly.instantiateStreaming(fetch(e,{credentials:"same-origin"}),r).then(d).catch(function(t){v("wasm streaming compile failed: "+t),v("falling back to ArrayBuffer instantiation"),h(d)}),{}}i.asmPreload=i.asm;var c=i.reallocBuffer;i.reallocBuffer=function(t){return"asmjs"===d?c(t):function(t){t=function(t,e){return t%e>0&&(t+=e-t%e),t}(t,i.usingWasm?nt:rt);var e=i.buffer.byteLength;if(i.usingWasm)try{return-1!==i.wasmMemory.grow((t-e)/65536)?i.buffer=i.wasmMemory.buffer:null}catch(t){return null}}(t)};var d="";i.asm=function(t,e,n){if(!(e=function(t){return t}(e)).table){var r=i.wasmTableSize;void 0===r&&(r=1024);var o=i.wasmMaxTableSize;"object"==typeof WebAssembly&&"function"==typeof WebAssembly.Table?e.table=void 0!==o?new WebAssembly.Table({initial:r,maximum:o,element:"anyfunc"}):new WebAssembly.Table({initial:r,element:"anyfunc"}):e.table=new Array(r),i.wasmTable=e.table}var a;return e.memoryBase||(e.memoryBase=i.STATIC_BASE),e.tableBase||(e.tableBase=0),S(a=s(0,e),"no binaryen method succeeded."),a}}(),Q=39168,ft.push({func:function(){se()}},{func:function(){ue()}});function Dt(t){if(!t||!t.callee||!t.callee.name)return[null,"",""];t.callee.toString();var e=t.callee.name,n="(",r=!0;for(var o in t){var i=t[o];r||(n+=", "),r=!1,n+="number"==typeof i||"string"==typeof i?i:"("+typeof i+")"}n+=")";var a=t.callee.caller;return t=a?a.arguments:[],r&&(n=""),[t,e,n]}function Rt(t){var e=V(),n=e.lastIndexOf("_emscripten_log"),r=e.lastIndexOf("_emscripten_get_callstack"),o=e.indexOf("\n",Math.max(n,r))+1;e=e.slice(o),8&t&&"undefined"==typeof emscripten_source_map&&(!function t(e){t.shown||(t.shown={}),t.shown[e]||(t.shown[e]=1,v(e))}('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.'),t^=8,t|=16);var i=null;if(128&t)for(i=Dt(arguments);i[1].indexOf("_emscripten_")>=0;)i=Dt(i[0]);var a=e.split("\n");e="";var u=new RegExp("\\s*(.*?)@(.*?):([0-9]+):([0-9]+)"),s=new RegExp("\\s*(.*?)@(.*):(.*)(:(.*))?"),c=new RegExp("\\s*at (.*?) \\((.*):(.*):(.*)\\)");for(var l in a){var f=a[l],d="",h="",p=0,y=0,g=c.exec(f);if(g&&5==g.length)d=g[1],h=g[2],p=g[3],y=g[4];else{if((g=u.exec(f))||(g=s.exec(f)),!(g&&g.length>=4)){e+=f+"\n";continue}d=g[1],h=g[2],p=g[3],y=0|g[4]}var m=32&t?z(d):d;m||(m=d);var b=!1;if(8&t){var _=emscripten_source_map.originalPositionFor({line:p,column:y});(b=_&&_.source)&&(64&t&&(_.source=_.source.substring(_.source.replace(/\\/g,"/").lastIndexOf("/")+1)),e+="    at "+m+" ("+_.source+":"+_.line+":"+_.column+")\n")}(16&t||!b)&&(64&t&&(h=h.substring(h.replace(/\\/g,"/").lastIndexOf("/")+1)),e+=(b?"     = "+d:"    at "+m)+" ("+h+":"+p+":"+y+")\n"),128&t&&i[0]&&(i[1]==d&&i[2].length>0&&(e=e.replace(/\s+$/,""),e+=" with values: "+i[1]+i[2]+"\n"),i=Dt(i[0]))}return e=e.replace(/\s+$/,"")}i.STATIC_BASE=1024,i.STATIC_BUMP=38144,Q+=16;var It={};function Lt(){return!!Lt.uncaught_exception}var Ft={last:0,caught:[],infos:{},deAdjust:function(t){if(!t||Ft.infos[t])return t;for(var e in Ft.infos){var n=+e;if(Ft.infos[n].adjusted===t)return n}return t},addRef:function(t){t&&Ft.infos[t].refcount++},decRef:function(t){if(t){var e=Ft.infos[t];S(e.refcount>0),e.refcount--,0!==e.refcount||e.rethrown||(e.destructor&&i.dynCall_vi(e.destructor,t),delete Ft.infos[t],___cxa_free_exception(t))}},clearRef:function(t){t&&(Ft.infos[t].refcount=0)}};var Bt={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function Ut(t){return i.___errno_location&&(X[i.___errno_location()>>2]=t),t}var jt={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"},zt={splitPath:function(t){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1)},normalizeArray:function(t,e){for(var n=0,r=t.length-1;r>=0;r--){var o=t[r];"."===o?t.splice(r,1):".."===o?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n;n--)t.unshift("..");return t},normalize:function(t){var e="/"===t.charAt(0),n="/"===t.substr(-1);return(t=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!e).join("/"))||e||(t="."),t&&n&&(t+="/"),(e?"/":"")+t},dirname:function(t){var e=zt.splitPath(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},basename:function(t){if("/"===t)return"/";var e=t.lastIndexOf("/");return-1===e?t:t.substr(e+1)},extname:function(t){return zt.splitPath(t)[3]},join:function(){var t=Array.prototype.slice.call(arguments,0);return zt.normalize(t.join("/"))},join2:function(t,e){return zt.normalize(t+"/"+e)},resolve:function(){for(var t="",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var r=n>=0?arguments[n]:Gt.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");if(!r)return"";t=r+"/"+t,e="/"===r.charAt(0)}return t=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!e).join("/"),(e?"/":"")+t||"."},relative:function(t,e){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=zt.resolve(t).substr(1),e=zt.resolve(e).substr(1);for(var r=n(t.split("/")),o=n(e.split("/")),i=Math.min(r.length,o.length),a=i,u=0;u<i;u++)if(r[u]!==o[u]){a=u;break}var s=[];for(u=a;u<r.length;u++)s.push("..");return(s=s.concat(o.slice(a))).join("/")}},Vt={ttys:[],init:function(){},shutdown:function(){},register:function(t,e){Vt.ttys[t]={input:[],output:[],ops:e},Gt.registerDevice(t,Vt.stream_ops)},stream_ops:{open:function(t){var e=Vt.ttys[t.node.rdev];if(!e)throw new Gt.ErrnoError(Bt.ENODEV);t.tty=e,t.seekable=!1},close:function(t){t.tty.ops.flush(t.tty)},flush:function(t){t.tty.ops.flush(t.tty)},read:function(t,e,n,r,o){if(!t.tty||!t.tty.ops.get_char)throw new Gt.ErrnoError(Bt.ENXIO);for(var i=0,a=0;a<r;a++){var u;try{u=t.tty.ops.get_char(t.tty)}catch(t){throw new Gt.ErrnoError(Bt.EIO)}if(void 0===u&&0===i)throw new Gt.ErrnoError(Bt.EAGAIN);if(null===u||void 0===u)break;i++,e[n+a]=u}return i&&(t.node.timestamp=Date.now()),i},write:function(t,e,n,r,o){if(!t.tty||!t.tty.ops.put_char)throw new Gt.ErrnoError(Bt.ENXIO);for(var i=0;i<r;i++)try{t.tty.ops.put_char(t.tty,e[n+i])}catch(t){throw new Gt.ErrnoError(Bt.EIO)}return r&&(t.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(t){if(!t.input.length){var n=null;if(s){var r=new o(256),i=0,a="win32"!=e.platform,u=e.stdin.fd;if(a){var c=!1;try{u=re.openSync("/dev/stdin","r"),c=!0}catch(t){}}try{i=re.readSync(u,r,0,256,null)}catch(t){if(-1==t.toString().indexOf("EOF"))throw t;i=0}c&&re.closeSync(u),n=i>0?r.slice(0,i).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(n=window.prompt("Input: "))&&(n+="\n"):"function"==typeof readline&&null!==(n=readline())&&(n+="\n");if(!n)return null;t.input=ie(n,!0)}return t.input.shift()},put_char:function(t,e){null===e||10===e?(g(F(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},flush:function(t){t.output&&t.output.length>0&&(g(F(t.output,0)),t.output=[])}},default_tty1_ops:{put_char:function(t,e){null===e||10===e?(v(F(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},flush:function(t){t.output&&t.output.length>0&&(v(F(t.output,0)),t.output=[])}}},Wt={ops_table:null,mount:function(t){return Wt.createNode(null,"/",16895,0)},createNode:function(t,e,n,r){if(Gt.isBlkdev(n)||Gt.isFIFO(n))throw new Gt.ErrnoError(Bt.EPERM);Wt.ops_table||(Wt.ops_table={dir:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr,lookup:Wt.node_ops.lookup,mknod:Wt.node_ops.mknod,rename:Wt.node_ops.rename,unlink:Wt.node_ops.unlink,rmdir:Wt.node_ops.rmdir,readdir:Wt.node_ops.readdir,symlink:Wt.node_ops.symlink},stream:{llseek:Wt.stream_ops.llseek}},file:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr},stream:{llseek:Wt.stream_ops.llseek,read:Wt.stream_ops.read,write:Wt.stream_ops.write,allocate:Wt.stream_ops.allocate,mmap:Wt.stream_ops.mmap,msync:Wt.stream_ops.msync}},link:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr,readlink:Wt.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr},stream:Gt.chrdev_stream_ops}});var o=Gt.createNode(t,e,n,r);return Gt.isDir(o.mode)?(o.node_ops=Wt.ops_table.dir.node,o.stream_ops=Wt.ops_table.dir.stream,o.contents={}):Gt.isFile(o.mode)?(o.node_ops=Wt.ops_table.file.node,o.stream_ops=Wt.ops_table.file.stream,o.usedBytes=0,o.contents=null):Gt.isLink(o.mode)?(o.node_ops=Wt.ops_table.link.node,o.stream_ops=Wt.ops_table.link.stream):Gt.isChrdev(o.mode)&&(o.node_ops=Wt.ops_table.chrdev.node,o.stream_ops=Wt.ops_table.chrdev.stream),o.timestamp=Date.now(),t&&(t.contents[e]=o),o},getFileDataAsRegularArray:function(t){if(t.contents&&t.contents.subarray){for(var e=[],n=0;n<t.usedBytes;++n)e.push(t.contents[n]);return e}return t.contents},getFileDataAsTypedArray:function(t){return t.contents?t.contents.subarray?t.contents.subarray(0,t.usedBytes):new Uint8Array(t.contents):new Uint8Array},expandFileStorage:function(t,e){if(t.contents&&t.contents.subarray&&e>t.contents.length&&(t.contents=Wt.getFileDataAsRegularArray(t),t.usedBytes=t.contents.length),!t.contents||t.contents.subarray){var n=t.contents?t.contents.length:0;if(n>=e)return;e=Math.max(e,n*(n<1048576?2:1.125)|0),0!=n&&(e=Math.max(e,256));var r=t.contents;return t.contents=new Uint8Array(e),void(t.usedBytes>0&&t.contents.set(r.subarray(0,t.usedBytes),0))}for(!t.contents&&e>0&&(t.contents=[]);t.contents.length<e;)t.contents.push(0)},resizeFileStorage:function(t,e){if(t.usedBytes!=e){if(0==e)return t.contents=null,void(t.usedBytes=0);if(!t.contents||t.contents.subarray){var n=t.contents;return t.contents=new Uint8Array(new ArrayBuffer(e)),n&&t.contents.set(n.subarray(0,Math.min(e,t.usedBytes))),void(t.usedBytes=e)}if(t.contents||(t.contents=[]),t.contents.length>e)t.contents.length=e;else for(;t.contents.length<e;)t.contents.push(0);t.usedBytes=e}},node_ops:{getattr:function(t){var e={};return e.dev=Gt.isChrdev(t.mode)?t.id:1,e.ino=t.id,e.mode=t.mode,e.nlink=1,e.uid=0,e.gid=0,e.rdev=t.rdev,Gt.isDir(t.mode)?e.size=4096:Gt.isFile(t.mode)?e.size=t.usedBytes:Gt.isLink(t.mode)?e.size=t.link.length:e.size=0,e.atime=new Date(t.timestamp),e.mtime=new Date(t.timestamp),e.ctime=new Date(t.timestamp),e.blksize=4096,e.blocks=Math.ceil(e.size/e.blksize),e},setattr:function(t,e){void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&Wt.resizeFileStorage(t,e.size)},lookup:function(t,e){throw Gt.genericErrors[Bt.ENOENT]},mknod:function(t,e,n,r){return Wt.createNode(t,e,n,r)},rename:function(t,e,n){if(Gt.isDir(t.mode)){var r;try{r=Gt.lookupNode(e,n)}catch(t){}if(r)for(var o in r.contents)throw new Gt.ErrnoError(Bt.ENOTEMPTY)}delete t.parent.contents[t.name],t.name=n,e.contents[n]=t,t.parent=e},unlink:function(t,e){delete t.contents[e]},rmdir:function(t,e){var n=Gt.lookupNode(t,e);for(var r in n.contents)throw new Gt.ErrnoError(Bt.ENOTEMPTY);delete t.contents[e]},readdir:function(t){var e=[".",".."];for(var n in t.contents)t.contents.hasOwnProperty(n)&&e.push(n);return e},symlink:function(t,e,n){var r=Wt.createNode(t,e,41471,0);return r.link=n,r},readlink:function(t){if(!Gt.isLink(t.mode))throw new Gt.ErrnoError(Bt.EINVAL);return t.link}},stream_ops:{read:function(t,e,n,r,o){var i=t.node.contents;if(o>=t.node.usedBytes)return 0;var a=Math.min(t.node.usedBytes-o,r);if(S(a>=0),a>8&&i.subarray)e.set(i.subarray(o,o+a),n);else for(var u=0;u<a;u++)e[n+u]=i[o+u];return a},write:function(t,e,n,r,o,i){if(!r)return 0;var a=t.node;if(a.timestamp=Date.now(),e.subarray&&(!a.contents||a.contents.subarray)){if(i)return a.contents=e.subarray(n,n+r),a.usedBytes=r,r;if(0===a.usedBytes&&0===o)return a.contents=new Uint8Array(e.subarray(n,n+r)),a.usedBytes=r,r;if(o+r<=a.usedBytes)return a.contents.set(e.subarray(n,n+r),o),r}if(Wt.expandFileStorage(a,o+r),a.contents.subarray&&e.subarray)a.contents.set(e.subarray(n,n+r),o);else for(var u=0;u<r;u++)a.contents[o+u]=e[n+u];return a.usedBytes=Math.max(a.usedBytes,o+r),r},llseek:function(t,e,n){var r=e;if(1===n?r+=t.position:2===n&&Gt.isFile(t.node.mode)&&(r+=t.node.usedBytes),r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r},allocate:function(t,e,n){Wt.expandFileStorage(t.node,e+n),t.node.usedBytes=Math.max(t.node.usedBytes,e+n)},mmap:function(t,e,n,r,o,i,a){if(!Gt.isFile(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);var u,s,c=t.node.contents;if(2&a||c.buffer!==e&&c.buffer!==e.buffer){if((o>0||o+r<t.node.usedBytes)&&(c=c.subarray?c.subarray(o,o+r):Array.prototype.slice.call(c,o,o+r)),s=!0,!(u=le(r)))throw new Gt.ErrnoError(Bt.ENOMEM);e.set(c,u)}else s=!1,u=c.byteOffset;return{ptr:u,allocated:s}},msync:function(t,e,n,r,o){if(!Gt.isFile(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);if(2&o)return 0;Wt.stream_ops.write(t,e,0,r,n,!1);return 0}}},Yt={dbs:{},indexedDB:function(){if("undefined"!=typeof indexedDB)return indexedDB;var t=null;return"object"==typeof window&&(t=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB),S(t,"IDBFS used, but indexedDB not supported"),t},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(t){return Wt.mount.apply(null,arguments)},syncfs:function(t,e,n){Yt.getLocalSet(t,function(r,o){if(r)return n(r);Yt.getRemoteSet(t,function(t,r){if(t)return n(t);var i=e?r:o,a=e?o:r;Yt.reconcile(i,a,n)})})},getDB:function(t,e){var n,r=Yt.dbs[t];if(r)return e(null,r);try{n=Yt.indexedDB().open(t,Yt.DB_VERSION)}catch(t){return e(t)}if(!n)return e("Unable to connect to IndexedDB");n.onupgradeneeded=function(t){var e,n=t.target.result,r=t.target.transaction;(e=n.objectStoreNames.contains(Yt.DB_STORE_NAME)?r.objectStore(Yt.DB_STORE_NAME):n.createObjectStore(Yt.DB_STORE_NAME)).indexNames.contains("timestamp")||e.createIndex("timestamp","timestamp",{unique:!1})},n.onsuccess=function(){r=n.result,Yt.dbs[t]=r,e(null,r)},n.onerror=function(t){e(this.error),t.preventDefault()}},getLocalSet:function(t,e){var n={};function r(t){return"."!==t&&".."!==t}function o(t){return function(e){return zt.join2(t,e)}}for(var i=Gt.readdir(t.mountpoint).filter(r).map(o(t.mountpoint));i.length;){var a,u=i.pop();try{a=Gt.stat(u)}catch(t){return e(t)}Gt.isDir(a.mode)&&i.push.apply(i,Gt.readdir(u).filter(r).map(o(u))),n[u]={timestamp:a.mtime}}return e(null,{type:"local",entries:n})},getRemoteSet:function(t,e){var n={};Yt.getDB(t.mountpoint,function(t,r){if(t)return e(t);try{var o=r.transaction([Yt.DB_STORE_NAME],"readonly");o.onerror=function(t){e(this.error),t.preventDefault()},o.objectStore(Yt.DB_STORE_NAME).index("timestamp").openKeyCursor().onsuccess=function(t){var o=t.target.result;if(!o)return e(null,{type:"remote",db:r,entries:n});n[o.primaryKey]={timestamp:o.key},o.continue()}}catch(t){return e(t)}})},loadLocalEntry:function(t,e){var n,r;try{r=Gt.lookupPath(t).node,n=Gt.stat(t)}catch(t){return e(t)}return Gt.isDir(n.mode)?e(null,{timestamp:n.mtime,mode:n.mode}):Gt.isFile(n.mode)?(r.contents=Wt.getFileDataAsTypedArray(r),e(null,{timestamp:n.mtime,mode:n.mode,contents:r.contents})):e(new Error("node type not supported"))},storeLocalEntry:function(t,e,n){try{if(Gt.isDir(e.mode))Gt.mkdir(t,e.mode);else{if(!Gt.isFile(e.mode))return n(new Error("node type not supported"));Gt.writeFile(t,e.contents,{canOwn:!0})}Gt.chmod(t,e.mode),Gt.utime(t,e.timestamp,e.timestamp)}catch(t){return n(t)}n(null)},removeLocalEntry:function(t,e){try{Gt.lookupPath(t);var n=Gt.stat(t);Gt.isDir(n.mode)?Gt.rmdir(t):Gt.isFile(n.mode)&&Gt.unlink(t)}catch(t){return e(t)}e(null)},loadRemoteEntry:function(t,e,n){var r=t.get(e);r.onsuccess=function(t){n(null,t.target.result)},r.onerror=function(t){n(this.error),t.preventDefault()}},storeRemoteEntry:function(t,e,n,r){var o=t.put(n,e);o.onsuccess=function(){r(null)},o.onerror=function(t){r(this.error),t.preventDefault()}},removeRemoteEntry:function(t,e,n){var r=t.delete(e);r.onsuccess=function(){n(null)},r.onerror=function(t){n(this.error),t.preventDefault()}},reconcile:function(t,e,n){var r=0,o=[];Object.keys(t.entries).forEach(function(n){var i=t.entries[n],a=e.entries[n];(!a||i.timestamp>a.timestamp)&&(o.push(n),r++)});var i=[];if(Object.keys(e.entries).forEach(function(n){e.entries[n];t.entries[n]||(i.push(n),r++)}),!r)return n(null);var a=0,u=("remote"===t.type?t.db:e.db).transaction([Yt.DB_STORE_NAME],"readwrite"),s=u.objectStore(Yt.DB_STORE_NAME);function c(t){return t?c.errored?void 0:(c.errored=!0,n(t)):++a>=r?n(null):void 0}u.onerror=function(t){c(this.error),t.preventDefault()},o.sort().forEach(function(t){"local"===e.type?Yt.loadRemoteEntry(s,t,function(e,n){if(e)return c(e);Yt.storeLocalEntry(t,n,c)}):Yt.loadLocalEntry(t,function(e,n){if(e)return c(e);Yt.storeRemoteEntry(s,t,n,c)})}),i.sort().reverse().forEach(function(t){"local"===e.type?Yt.removeLocalEntry(t,c):Yt.removeRemoteEntry(s,t,c)})}},qt={isWindows:!1,staticInit:function(){qt.isWindows=!!e.platform.match(/^win/);var t=e.binding("constants");t.fs&&(t=t.fs),qt.flagsForNodeMap={1024:t.O_APPEND,64:t.O_CREAT,128:t.O_EXCL,0:t.O_RDONLY,2:t.O_RDWR,4096:t.O_SYNC,512:t.O_TRUNC,1:t.O_WRONLY}},bufferFrom:function(t){return o.alloc?o.from(t):new o(t)},mount:function(t){return S(s),qt.createNode(null,"/",qt.getMode(t.opts.root),0)},createNode:function(t,e,n,r){if(!Gt.isDir(n)&&!Gt.isFile(n)&&!Gt.isLink(n))throw new Gt.ErrnoError(Bt.EINVAL);var o=Gt.createNode(t,e,n);return o.node_ops=qt.node_ops,o.stream_ops=qt.stream_ops,o},getMode:function(t){var e;try{e=re.lstatSync(t),qt.isWindows&&(e.mode=e.mode|(292&e.mode)>>2)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return e.mode},realPath:function(t){for(var e=[];t.parent!==t;)e.push(t.name),t=t.parent;return e.push(t.mount.opts.root),e.reverse(),zt.join.apply(null,e)},flagsForNode:function(t){t&=-2097153,t&=-2049,t&=-32769,t&=-524289;var e=0;for(var n in qt.flagsForNodeMap)t&n&&(e|=qt.flagsForNodeMap[n],t^=n);if(t)throw new Gt.ErrnoError(Bt.EINVAL);return e},node_ops:{getattr:function(t){var e,n=qt.realPath(t);try{e=re.lstatSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return qt.isWindows&&!e.blksize&&(e.blksize=4096),qt.isWindows&&!e.blocks&&(e.blocks=(e.size+e.blksize-1)/e.blksize|0),{dev:e.dev,ino:e.ino,mode:e.mode,nlink:e.nlink,uid:e.uid,gid:e.gid,rdev:e.rdev,size:e.size,atime:e.atime,mtime:e.mtime,ctime:e.ctime,blksize:e.blksize,blocks:e.blocks}},setattr:function(t,e){var n=qt.realPath(t);try{if(void 0!==e.mode&&(re.chmodSync(n,e.mode),t.mode=e.mode),void 0!==e.timestamp){var r=new Date(e.timestamp);re.utimesSync(n,r,r)}void 0!==e.size&&re.truncateSync(n,e.size)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},lookup:function(t,e){var n=zt.join2(qt.realPath(t),e),r=qt.getMode(n);return qt.createNode(t,e,r)},mknod:function(t,e,n,r){var o=qt.createNode(t,e,n,r),i=qt.realPath(o);try{Gt.isDir(o.mode)?re.mkdirSync(i,o.mode):re.writeFileSync(i,"",{mode:o.mode})}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return o},rename:function(t,e,n){var r=qt.realPath(t),o=zt.join2(qt.realPath(e),n);try{re.renameSync(r,o)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},unlink:function(t,e){var n=zt.join2(qt.realPath(t),e);try{re.unlinkSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},rmdir:function(t,e){var n=zt.join2(qt.realPath(t),e);try{re.rmdirSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},readdir:function(t){var e=qt.realPath(t);try{return re.readdirSync(e)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},symlink:function(t,e,n){var r=zt.join2(qt.realPath(t),e);try{re.symlinkSync(n,r)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},readlink:function(t){var e=qt.realPath(t);try{return e=re.readlinkSync(e),e=oe.relative(oe.resolve(t.mount.opts.root),e)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}}},stream_ops:{open:function(t){var e=qt.realPath(t.node);try{Gt.isFile(t.node.mode)&&(t.nfd=re.openSync(e,qt.flagsForNode(t.flags)))}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},close:function(t){try{Gt.isFile(t.node.mode)&&t.nfd&&re.closeSync(t.nfd)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},read:function(t,e,n,r,o){if(0===r)return 0;try{return re.readSync(t.nfd,qt.bufferFrom(e.buffer),n,r,o)}catch(t){throw new Gt.ErrnoError(Bt[t.code])}},write:function(t,e,n,r,o){try{return re.writeSync(t.nfd,qt.bufferFrom(e.buffer),n,r,o)}catch(t){throw new Gt.ErrnoError(Bt[t.code])}},llseek:function(t,e,n){var r=e;if(1===n)r+=t.position;else if(2===n&&Gt.isFile(t.node.mode))try{r+=re.fstatSync(t.nfd).size}catch(t){throw new Gt.ErrnoError(Bt[t.code])}if(r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r}}},Ht={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function(t){S(f),Ht.reader||(Ht.reader=new FileReaderSync);var e=Ht.createNode(null,"/",Ht.DIR_MODE,0),n={};function r(t){for(var r=t.split("/"),o=e,i=0;i<r.length-1;i++){var a=r.slice(0,i+1).join("/");n[a]||(n[a]=Ht.createNode(o,r[i],Ht.DIR_MODE,0)),o=n[a]}return o}function o(t){var e=t.split("/");return e[e.length-1]}return Array.prototype.forEach.call(t.opts.files||[],function(t){Ht.createNode(r(t.name),o(t.name),Ht.FILE_MODE,0,t,t.lastModifiedDate)}),(t.opts.blobs||[]).forEach(function(t){Ht.createNode(r(t.name),o(t.name),Ht.FILE_MODE,0,t.data)}),(t.opts.packages||[]).forEach(function(t){t.metadata.files.forEach(function(e){var n=e.filename.substr(1);Ht.createNode(r(n),o(n),Ht.FILE_MODE,0,t.blob.slice(e.start,e.end))})}),e},createNode:function(t,e,n,r,o,i){var a=Gt.createNode(t,e,n);return a.mode=n,a.node_ops=Ht.node_ops,a.stream_ops=Ht.stream_ops,a.timestamp=(i||new Date).getTime(),S(Ht.FILE_MODE!==Ht.DIR_MODE),n===Ht.FILE_MODE?(a.size=o.size,a.contents=o):(a.size=4096,a.contents={}),t&&(t.contents[e]=a),a},node_ops:{getattr:function(t){return{dev:1,ino:void 0,mode:t.mode,nlink:1,uid:0,gid:0,rdev:void 0,size:t.size,atime:new Date(t.timestamp),mtime:new Date(t.timestamp),ctime:new Date(t.timestamp),blksize:4096,blocks:Math.ceil(t.size/4096)}},setattr:function(t,e){void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp)},lookup:function(t,e){throw new Gt.ErrnoError(Bt.ENOENT)},mknod:function(t,e,n,r){throw new Gt.ErrnoError(Bt.EPERM)},rename:function(t,e,n){throw new Gt.ErrnoError(Bt.EPERM)},unlink:function(t,e){throw new Gt.ErrnoError(Bt.EPERM)},rmdir:function(t,e){throw new Gt.ErrnoError(Bt.EPERM)},readdir:function(t){var e=[".",".."];for(var n in t.contents)t.contents.hasOwnProperty(n)&&e.push(n);return e},symlink:function(t,e,n){throw new Gt.ErrnoError(Bt.EPERM)},readlink:function(t){throw new Gt.ErrnoError(Bt.EPERM)}},stream_ops:{read:function(t,e,n,r,o){if(o>=t.node.size)return 0;var i=t.node.contents.slice(o,o+r),a=Ht.reader.readAsArrayBuffer(i);return e.set(new Uint8Array(a),n),i.size},write:function(t,e,n,r,o){throw new Gt.ErrnoError(Bt.EIO)},llseek:function(t,e,n){var r=e;if(1===n?r+=t.position:2===n&&Gt.isFile(t.node.mode)&&(r+=t.node.size),r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r}}};Q+=16,Q+=16,Q+=16;var Gt={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(t){if(!(t instanceof Gt.ErrnoError))throw t+" : "+W();return Ut(t.errno)},lookupPath:function(t,e){if(t=zt.resolve(Gt.cwd(),t),e=e||{},!t)return{path:"",node:null};var n={follow_mount:!0,recurse_count:0};for(var r in n)void 0===e[r]&&(e[r]=n[r]);if(e.recurse_count>8)throw new Gt.ErrnoError(Bt.ELOOP);for(var o=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!1),i=Gt.root,a="/",u=0;u<o.length;u++){var s=u===o.length-1;if(s&&e.parent)break;if(i=Gt.lookupNode(i,o[u]),a=zt.join2(a,o[u]),Gt.isMountpoint(i)&&(!s||s&&e.follow_mount)&&(i=i.mounted.root),!s||e.follow)for(var c=0;Gt.isLink(i.mode);){var l=Gt.readlink(a);if(a=zt.resolve(zt.dirname(a),l),i=Gt.lookupPath(a,{recurse_count:e.recurse_count}).node,c++>40)throw new Gt.ErrnoError(Bt.ELOOP)}}return{path:a,node:i}},getPath:function(t){for(var e;;){if(Gt.isRoot(t)){var n=t.mount.mountpoint;return e?"/"!==n[n.length-1]?n+"/"+e:n+e:n}e=e?t.name+"/"+e:t.name,t=t.parent}},hashName:function(t,e){for(var n=0,r=0;r<e.length;r++)n=(n<<5)-n+e.charCodeAt(r)|0;return(t+n>>>0)%Gt.nameTable.length},hashAddNode:function(t){var e=Gt.hashName(t.parent.id,t.name);t.name_next=Gt.nameTable[e],Gt.nameTable[e]=t},hashRemoveNode:function(t){var e=Gt.hashName(t.parent.id,t.name);if(Gt.nameTable[e]===t)Gt.nameTable[e]=t.name_next;else for(var n=Gt.nameTable[e];n;){if(n.name_next===t){n.name_next=t.name_next;break}n=n.name_next}},lookupNode:function(t,e){var n=Gt.mayLookup(t);if(n)throw new Gt.ErrnoError(n,t);for(var r=Gt.hashName(t.id,e),o=Gt.nameTable[r];o;o=o.name_next){var i=o.name;if(o.parent.id===t.id&&i===e)return o}return Gt.lookup(t,e)},createNode:function(t,e,n,r){if(!Gt.FSNode){Gt.FSNode=function(t,e,n,r){t||(t=this),this.parent=t,this.mount=t.mount,this.mounted=null,this.id=Gt.nextInode++,this.name=e,this.mode=n,this.node_ops={},this.stream_ops={},this.rdev=r},Gt.FSNode.prototype={};Object.defineProperties(Gt.FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return Gt.isDir(this.mode)}},isDevice:{get:function(){return Gt.isChrdev(this.mode)}}})}var o=new Gt.FSNode(t,e,n,r);return Gt.hashAddNode(o),o},destroyNode:function(t){Gt.hashRemoveNode(t)},isRoot:function(t){return t===t.parent},isMountpoint:function(t){return!!t.mounted},isFile:function(t){return 32768==(61440&t)},isDir:function(t){return 16384==(61440&t)},isLink:function(t){return 40960==(61440&t)},isChrdev:function(t){return 8192==(61440&t)},isBlkdev:function(t){return 24576==(61440&t)},isFIFO:function(t){return 4096==(61440&t)},isSocket:function(t){return 49152==(49152&t)},flagModes:{r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(t){var e=Gt.flagModes[t];if(void 0===e)throw new Error("Unknown file open mode: "+t);return e},flagsToPermissionString:function(t){var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},nodePermissions:function(t,e){return Gt.ignorePermissions?0:(-1===e.indexOf("r")||292&t.mode)&&(-1===e.indexOf("w")||146&t.mode)&&(-1===e.indexOf("x")||73&t.mode)?0:Bt.EACCES},mayLookup:function(t){var e=Gt.nodePermissions(t,"x");return e||(t.node_ops.lookup?0:Bt.EACCES)},mayCreate:function(t,e){try{Gt.lookupNode(t,e);return Bt.EEXIST}catch(t){}return Gt.nodePermissions(t,"wx")},mayDelete:function(t,e,n){var r;try{r=Gt.lookupNode(t,e)}catch(t){return t.errno}var o=Gt.nodePermissions(t,"wx");if(o)return o;if(n){if(!Gt.isDir(r.mode))return Bt.ENOTDIR;if(Gt.isRoot(r)||Gt.getPath(r)===Gt.cwd())return Bt.EBUSY}else if(Gt.isDir(r.mode))return Bt.EISDIR;return 0},mayOpen:function(t,e){return t?Gt.isLink(t.mode)?Bt.ELOOP:Gt.isDir(t.mode)&&("r"!==Gt.flagsToPermissionString(e)||512&e)?Bt.EISDIR:Gt.nodePermissions(t,Gt.flagsToPermissionString(e)):Bt.ENOENT},MAX_OPEN_FDS:4096,nextfd:function(t,e){t=t||0,e=e||Gt.MAX_OPEN_FDS;for(var n=t;n<=e;n++)if(!Gt.streams[n])return n;throw new Gt.ErrnoError(Bt.EMFILE)},getStream:function(t){return Gt.streams[t]},createStream:function(t,e,n){Gt.FSStream||(Gt.FSStream=function(){},Gt.FSStream.prototype={},Object.defineProperties(Gt.FSStream.prototype,{object:{get:function(){return this.node},set:function(t){this.node=t}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}}));var r=new Gt.FSStream;for(var o in t)r[o]=t[o];t=r;var i=Gt.nextfd(e,n);return t.fd=i,Gt.streams[i]=t,t},closeStream:function(t){Gt.streams[t]=null},chrdev_stream_ops:{open:function(t){var e=Gt.getDevice(t.node.rdev);t.stream_ops=e.stream_ops,t.stream_ops.open&&t.stream_ops.open(t)},llseek:function(){throw new Gt.ErrnoError(Bt.ESPIPE)}},major:function(t){return t>>8},minor:function(t){return 255&t},makedev:function(t,e){return t<<8|e},registerDevice:function(t,e){Gt.devices[t]={stream_ops:e}},getDevice:function(t){return Gt.devices[t]},getMounts:function(t){for(var e=[],n=[t];n.length;){var r=n.pop();e.push(r),n.push.apply(n,r.mounts)}return e},syncfs:function(t,e){"function"==typeof t&&(e=t,t=!1),Gt.syncFSRequests++,Gt.syncFSRequests>1&&console.log("warning: "+Gt.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var n=Gt.getMounts(Gt.root.mount),r=0;function o(t){return S(Gt.syncFSRequests>0),Gt.syncFSRequests--,e(t)}function i(t){if(t)return i.errored?void 0:(i.errored=!0,o(t));++r>=n.length&&o(null)}n.forEach(function(e){if(!e.type.syncfs)return i(null);e.type.syncfs(e,t,i)})},mount:function(t,e,n){var r,o="/"===n,i=!n;if(o&&Gt.root)throw new Gt.ErrnoError(Bt.EBUSY);if(!o&&!i){var a=Gt.lookupPath(n,{follow_mount:!1});if(n=a.path,r=a.node,Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);if(!Gt.isDir(r.mode))throw new Gt.ErrnoError(Bt.ENOTDIR)}var u={type:t,opts:e,mountpoint:n,mounts:[]},s=t.mount(u);return s.mount=u,u.root=s,o?Gt.root=s:r&&(r.mounted=u,r.mount&&r.mount.mounts.push(u)),s},unmount:function(t){var e=Gt.lookupPath(t,{follow_mount:!1});if(!Gt.isMountpoint(e.node))throw new Gt.ErrnoError(Bt.EINVAL);var n=e.node,r=n.mounted,o=Gt.getMounts(r);Object.keys(Gt.nameTable).forEach(function(t){for(var e=Gt.nameTable[t];e;){var n=e.name_next;-1!==o.indexOf(e.mount)&&Gt.destroyNode(e),e=n}}),n.mounted=null;var i=n.mount.mounts.indexOf(r);S(-1!==i),n.mount.mounts.splice(i,1)},lookup:function(t,e){return t.node_ops.lookup(t,e)},mknod:function(t,e,n){var r=Gt.lookupPath(t,{parent:!0}).node,o=zt.basename(t);if(!o||"."===o||".."===o)throw new Gt.ErrnoError(Bt.EINVAL);var i=Gt.mayCreate(r,o);if(i)throw new Gt.ErrnoError(i);if(!r.node_ops.mknod)throw new Gt.ErrnoError(Bt.EPERM);return r.node_ops.mknod(r,o,e,n)},create:function(t,e){return e=void 0!==e?e:438,e&=4095,e|=32768,Gt.mknod(t,e,0)},mkdir:function(t,e){return e=void 0!==e?e:511,e&=1023,e|=16384,Gt.mknod(t,e,0)},mkdirTree:function(t,e){for(var n=t.split("/"),r="",o=0;o<n.length;++o)if(n[o]){r+="/"+n[o];try{Gt.mkdir(r,e)}catch(t){if(t.errno!=Bt.EEXIST)throw t}}},mkdev:function(t,e,n){return void 0===n&&(n=e,e=438),e|=8192,Gt.mknod(t,e,n)},symlink:function(t,e){if(!zt.resolve(t))throw new Gt.ErrnoError(Bt.ENOENT);var n=Gt.lookupPath(e,{parent:!0}).node;if(!n)throw new Gt.ErrnoError(Bt.ENOENT);var r=zt.basename(e),o=Gt.mayCreate(n,r);if(o)throw new Gt.ErrnoError(o);if(!n.node_ops.symlink)throw new Gt.ErrnoError(Bt.EPERM);return n.node_ops.symlink(n,r,t)},rename:function(t,e){var n,r,o=zt.dirname(t),i=zt.dirname(e),a=zt.basename(t),u=zt.basename(e);try{n=Gt.lookupPath(t,{parent:!0}).node,r=Gt.lookupPath(e,{parent:!0}).node}catch(t){throw new Gt.ErrnoError(Bt.EBUSY)}if(!n||!r)throw new Gt.ErrnoError(Bt.ENOENT);if(n.mount!==r.mount)throw new Gt.ErrnoError(Bt.EXDEV);var s,c=Gt.lookupNode(n,a),l=zt.relative(t,i);if("."!==l.charAt(0))throw new Gt.ErrnoError(Bt.EINVAL);if("."!==(l=zt.relative(e,o)).charAt(0))throw new Gt.ErrnoError(Bt.ENOTEMPTY);try{s=Gt.lookupNode(r,u)}catch(t){}if(c!==s){var f=Gt.isDir(c.mode),d=Gt.mayDelete(n,a,f);if(d)throw new Gt.ErrnoError(d);if(d=s?Gt.mayDelete(r,u,f):Gt.mayCreate(r,u))throw new Gt.ErrnoError(d);if(!n.node_ops.rename)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(c)||s&&Gt.isMountpoint(s))throw new Gt.ErrnoError(Bt.EBUSY);if(r!==n&&(d=Gt.nodePermissions(n,"w")))throw new Gt.ErrnoError(d);try{Gt.trackingDelegate.willMovePath&&Gt.trackingDelegate.willMovePath(t,e)}catch(n){console.log("FS.trackingDelegate['willMovePath']('"+t+"', '"+e+"') threw an exception: "+n.message)}Gt.hashRemoveNode(c);try{n.node_ops.rename(c,r,u)}catch(t){throw t}finally{Gt.hashAddNode(c)}try{Gt.trackingDelegate.onMovePath&&Gt.trackingDelegate.onMovePath(t,e)}catch(n){console.log("FS.trackingDelegate['onMovePath']('"+t+"', '"+e+"') threw an exception: "+n.message)}}},rmdir:function(t){var e=Gt.lookupPath(t,{parent:!0}).node,n=zt.basename(t),r=Gt.lookupNode(e,n),o=Gt.mayDelete(e,n,!0);if(o)throw new Gt.ErrnoError(o);if(!e.node_ops.rmdir)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);try{Gt.trackingDelegate.willDeletePath&&Gt.trackingDelegate.willDeletePath(t)}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.rmdir(e,n),Gt.destroyNode(r);try{Gt.trackingDelegate.onDeletePath&&Gt.trackingDelegate.onDeletePath(t)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readdir:function(t){var e=Gt.lookupPath(t,{follow:!0}).node;if(!e.node_ops.readdir)throw new Gt.ErrnoError(Bt.ENOTDIR);return e.node_ops.readdir(e)},unlink:function(t){var e=Gt.lookupPath(t,{parent:!0}).node,n=zt.basename(t),r=Gt.lookupNode(e,n),o=Gt.mayDelete(e,n,!1);if(o)throw new Gt.ErrnoError(o);if(!e.node_ops.unlink)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);try{Gt.trackingDelegate.willDeletePath&&Gt.trackingDelegate.willDeletePath(t)}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.unlink(e,n),Gt.destroyNode(r);try{Gt.trackingDelegate.onDeletePath&&Gt.trackingDelegate.onDeletePath(t)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readlink:function(t){var e=Gt.lookupPath(t).node;if(!e)throw new Gt.ErrnoError(Bt.ENOENT);if(!e.node_ops.readlink)throw new Gt.ErrnoError(Bt.EINVAL);return zt.resolve(Gt.getPath(e.parent),e.node_ops.readlink(e))},stat:function(t,e){var n=Gt.lookupPath(t,{follow:!e}).node;if(!n)throw new Gt.ErrnoError(Bt.ENOENT);if(!n.node_ops.getattr)throw new Gt.ErrnoError(Bt.EPERM);return n.node_ops.getattr(n)},lstat:function(t){return Gt.stat(t,!0)},chmod:function(t,e,n){var r;"string"==typeof t?r=Gt.lookupPath(t,{follow:!n}).node:r=t;if(!r.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);r.node_ops.setattr(r,{mode:4095&e|-4096&r.mode,timestamp:Date.now()})},lchmod:function(t,e){Gt.chmod(t,e,!0)},fchmod:function(t,e){var n=Gt.getStream(t);if(!n)throw new Gt.ErrnoError(Bt.EBADF);Gt.chmod(n.node,e)},chown:function(t,e,n,r){var o;"string"==typeof t?o=Gt.lookupPath(t,{follow:!r}).node:o=t;if(!o.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(t,e,n){Gt.chown(t,e,n,!0)},fchown:function(t,e,n){var r=Gt.getStream(t);if(!r)throw new Gt.ErrnoError(Bt.EBADF);Gt.chown(r.node,e,n)},truncate:function(t,e){if(e<0)throw new Gt.ErrnoError(Bt.EINVAL);var n;"string"==typeof t?n=Gt.lookupPath(t,{follow:!0}).node:n=t;if(!n.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isDir(n.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!Gt.isFile(n.mode))throw new Gt.ErrnoError(Bt.EINVAL);var r=Gt.nodePermissions(n,"w");if(r)throw new Gt.ErrnoError(r);n.node_ops.setattr(n,{size:e,timestamp:Date.now()})},ftruncate:function(t,e){var n=Gt.getStream(t);if(!n)throw new Gt.ErrnoError(Bt.EBADF);if(0==(2097155&n.flags))throw new Gt.ErrnoError(Bt.EINVAL);Gt.truncate(n.node,e)},utime:function(t,e,n){var r=Gt.lookupPath(t,{follow:!0}).node;r.node_ops.setattr(r,{timestamp:Math.max(e,n)})},open:function(t,e,n,r,o){if(""===t)throw new Gt.ErrnoError(Bt.ENOENT);var a;if(e="string"==typeof e?Gt.modeStringToFlags(e):e,n=void 0===n?438:n,n=64&e?4095&n|32768:0,"object"==typeof t)a=t;else{t=zt.normalize(t);try{a=Gt.lookupPath(t,{follow:!(131072&e)}).node}catch(t){}}var u=!1;if(64&e)if(a){if(128&e)throw new Gt.ErrnoError(Bt.EEXIST)}else a=Gt.mknod(t,n,0),u=!0;if(!a)throw new Gt.ErrnoError(Bt.ENOENT);if(Gt.isChrdev(a.mode)&&(e&=-513),65536&e&&!Gt.isDir(a.mode))throw new Gt.ErrnoError(Bt.ENOTDIR);if(!u){var s=Gt.mayOpen(a,e);if(s)throw new Gt.ErrnoError(s)}512&e&&Gt.truncate(a,0),e&=-641;var c=Gt.createStream({node:a,path:Gt.getPath(a),flags:e,seekable:!0,position:0,stream_ops:a.stream_ops,ungotten:[],error:!1},r,o);c.stream_ops.open&&c.stream_ops.open(c),!i.logReadFiles||1&e||(Gt.readFiles||(Gt.readFiles={}),t in Gt.readFiles||(Gt.readFiles[t]=1,s("read file: "+t)));try{if(Gt.trackingDelegate.onOpenFile){var l=0;1!=(2097155&e)&&(l|=Gt.tracking.openFlags.READ),0!=(2097155&e)&&(l|=Gt.tracking.openFlags.WRITE),Gt.trackingDelegate.onOpenFile(t,l)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+t+"', flags) threw an exception: "+e.message)}return c},close:function(t){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);t.getdents&&(t.getdents=null);try{t.stream_ops.close&&t.stream_ops.close(t)}catch(t){throw t}finally{Gt.closeStream(t.fd)}t.fd=null},isClosed:function(t){return null===t.fd},llseek:function(t,e,n){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(!t.seekable||!t.stream_ops.llseek)throw new Gt.ErrnoError(Bt.ESPIPE);return t.position=t.stream_ops.llseek(t,e,n),t.ungotten=[],t.position},read:function(t,e,n,r,o){if(r<0||o<0)throw new Gt.ErrnoError(Bt.EINVAL);if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(1==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!t.stream_ops.read)throw new Gt.ErrnoError(Bt.EINVAL);var i=void 0!==o;if(i){if(!t.seekable)throw new Gt.ErrnoError(Bt.ESPIPE)}else o=t.position;var a=t.stream_ops.read(t,e,n,r,o);return i||(t.position+=a),a},write:function(t,e,n,r,o,i){if(r<0||o<0)throw new Gt.ErrnoError(Bt.EINVAL);if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(0==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!t.stream_ops.write)throw new Gt.ErrnoError(Bt.EINVAL);1024&t.flags&&Gt.llseek(t,0,2);var a=void 0!==o;if(a){if(!t.seekable)throw new Gt.ErrnoError(Bt.ESPIPE)}else o=t.position;var u=t.stream_ops.write(t,e,n,r,o,i);a||(t.position+=u);try{t.path&&Gt.trackingDelegate.onWriteToFile&&Gt.trackingDelegate.onWriteToFile(t.path)}catch(t){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+t.message)}return u},allocate:function(t,e,n){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(e<0||n<=0)throw new Gt.ErrnoError(Bt.EINVAL);if(0==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(!Gt.isFile(t.node.mode)&&!Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);if(!t.stream_ops.allocate)throw new Gt.ErrnoError(Bt.EOPNOTSUPP);t.stream_ops.allocate(t,e,n)},mmap:function(t,e,n,r,o,i,a){if(1==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EACCES);if(!t.stream_ops.mmap)throw new Gt.ErrnoError(Bt.ENODEV);return t.stream_ops.mmap(t,e,n,r,o,i,a)},msync:function(t,e,n,r,o){return t&&t.stream_ops.msync?t.stream_ops.msync(t,e,n,r,o):0},munmap:function(t){return 0},ioctl:function(t,e,n){if(!t.stream_ops.ioctl)throw new Gt.ErrnoError(Bt.ENOTTY);return t.stream_ops.ioctl(t,e,n)},readFile:function(t,e){if((e=e||{}).flags=e.flags||"r",e.encoding=e.encoding||"binary","utf8"!==e.encoding&&"binary"!==e.encoding)throw new Error('Invalid encoding type "'+e.encoding+'"');var n,r=Gt.open(t,e.flags),o=Gt.stat(t).size,i=new Uint8Array(o);return Gt.read(r,i,0,o,0),"utf8"===e.encoding?n=F(i,0):"binary"===e.encoding&&(n=i),Gt.close(r),n},writeFile:function(t,e,n){(n=n||{}).flags=n.flags||"w";var r=Gt.open(t,n.flags,n.mode);if("string"==typeof e){var o=new Uint8Array(j(e)+1),i=B(e,o,0,o.length);Gt.write(r,o,0,i,void 0,n.canOwn)}else{if(!ArrayBuffer.isView(e))throw new Error("Unsupported data type");Gt.write(r,e,0,e.byteLength,void 0,n.canOwn)}Gt.close(r)},cwd:function(){return Gt.currentPath},chdir:function(t){var e=Gt.lookupPath(t,{follow:!0});if(null===e.node)throw new Gt.ErrnoError(Bt.ENOENT);if(!Gt.isDir(e.node.mode))throw new Gt.ErrnoError(Bt.ENOTDIR);var n=Gt.nodePermissions(e.node,"x");if(n)throw new Gt.ErrnoError(n);Gt.currentPath=e.path},createDefaultDirectories:function(){Gt.mkdir("/tmp"),Gt.mkdir("/home"),Gt.mkdir("/home/web_user")},createDefaultDevices:function(){var t;if(Gt.mkdir("/dev"),Gt.registerDevice(Gt.makedev(1,3),{read:function(){return 0},write:function(t,e,n,r,o){return r}}),Gt.mkdev("/dev/null",Gt.makedev(1,3)),Vt.register(Gt.makedev(5,0),Vt.default_tty_ops),Vt.register(Gt.makedev(6,0),Vt.default_tty1_ops),Gt.mkdev("/dev/tty",Gt.makedev(5,0)),Gt.mkdev("/dev/tty1",Gt.makedev(6,0)),"undefined"!=typeof crypto){var e=new Uint8Array(1);t=function(){return crypto.getRandomValues(e),e[0]}}else t=s?function(){return n(32).randomBytes(1)[0]}:function(){return 256*Math.random()|0};Gt.createDevice("/dev","random",t),Gt.createDevice("/dev","urandom",t),Gt.mkdir("/dev/shm"),Gt.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){Gt.mkdir("/proc"),Gt.mkdir("/proc/self"),Gt.mkdir("/proc/self/fd"),Gt.mount({mount:function(){var t=Gt.createNode("/proc/self","fd",16895,73);return t.node_ops={lookup:function(t,e){var n=+e,r=Gt.getStream(n);if(!r)throw new Gt.ErrnoError(Bt.EBADF);var o={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return r.path}}};return o.parent=o,o}},t}},{},"/proc/self/fd")},createStandardStreams:function(){i.stdin?Gt.createDevice("/dev","stdin",i.stdin):Gt.symlink("/dev/tty","/dev/stdin"),i.stdout?Gt.createDevice("/dev","stdout",null,i.stdout):Gt.symlink("/dev/tty","/dev/stdout"),i.stderr?Gt.createDevice("/dev","stderr",null,i.stderr):Gt.symlink("/dev/tty1","/dev/stderr");var t=Gt.open("/dev/stdin","r");S(0===t.fd,"invalid handle for stdin ("+t.fd+")");var e=Gt.open("/dev/stdout","w");S(1===e.fd,"invalid handle for stdout ("+e.fd+")");var n=Gt.open("/dev/stderr","w");S(2===n.fd,"invalid handle for stderr ("+n.fd+")")},ensureErrnoError:function(){Gt.ErrnoError||(Gt.ErrnoError=function(t,e){this.node=e,this.setErrno=function(t){for(var e in this.errno=t,Bt)if(Bt[e]===t){this.code=e;break}},this.setErrno(t),this.message=jt[t],this.stack&&Object.defineProperty(this,"stack",{value:(new Error).stack,writable:!0})},Gt.ErrnoError.prototype=new Error,Gt.ErrnoError.prototype.constructor=Gt.ErrnoError,[Bt.ENOENT].forEach(function(t){Gt.genericErrors[t]=new Gt.ErrnoError(t),Gt.genericErrors[t].stack="<generic error, no stack>"}))},staticInit:function(){Gt.ensureErrnoError(),Gt.nameTable=new Array(4096),Gt.mount(Wt,{},"/"),Gt.createDefaultDirectories(),Gt.createDefaultDevices(),Gt.createSpecialDirectories(),Gt.filesystems={MEMFS:Wt,IDBFS:Yt,NODEFS:qt,WORKERFS:Ht}},init:function(t,e,n){S(!Gt.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),Gt.init.initialized=!0,Gt.ensureErrnoError(),i.stdin=t||i.stdin,i.stdout=e||i.stdout,i.stderr=n||i.stderr,Gt.createStandardStreams()},quit:function(){Gt.init.initialized=!1;var t=i._fflush;t&&t(0);for(var e=0;e<Gt.streams.length;e++){var n=Gt.streams[e];n&&Gt.close(n)}},getMode:function(t,e){var n=0;return t&&(n|=365),e&&(n|=146),n},joinPath:function(t,e){var n=zt.join.apply(null,t);return e&&"/"==n[0]&&(n=n.substr(1)),n},absolutePath:function(t,e){return zt.resolve(e,t)},standardizePath:function(t){return zt.normalize(t)},findObject:function(t,e){var n=Gt.analyzePath(t,e);return n.exists?n.object:(Ut(n.error),null)},analyzePath:function(t,e){try{t=(r=Gt.lookupPath(t,{follow:!e})).path}catch(t){}var n={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var r=Gt.lookupPath(t,{parent:!0});n.parentExists=!0,n.parentPath=r.path,n.parentObject=r.node,n.name=zt.basename(t),r=Gt.lookupPath(t,{follow:!e}),n.exists=!0,n.path=r.path,n.object=r.node,n.name=r.node.name,n.isRoot="/"===r.path}catch(t){n.error=t.errno}return n},createFolder:function(t,e,n,r){var o=zt.join2("string"==typeof t?t:Gt.getPath(t),e),i=Gt.getMode(n,r);return Gt.mkdir(o,i)},createPath:function(t,e,n,r){t="string"==typeof t?t:Gt.getPath(t);for(var o=e.split("/").reverse();o.length;){var i=o.pop();if(i){var a=zt.join2(t,i);try{Gt.mkdir(a)}catch(t){}t=a}}return a},createFile:function(t,e,n,r,o){var i=zt.join2("string"==typeof t?t:Gt.getPath(t),e),a=Gt.getMode(r,o);return Gt.create(i,a)},createDataFile:function(t,e,n,r,o,i){var a=e?zt.join2("string"==typeof t?t:Gt.getPath(t),e):t,u=Gt.getMode(r,o),s=Gt.create(a,u);if(n){if("string"==typeof n){for(var c=new Array(n.length),l=0,f=n.length;l<f;++l)c[l]=n.charCodeAt(l);n=c}Gt.chmod(s,146|u);var d=Gt.open(s,"w");Gt.write(d,n,0,n.length,0,i),Gt.close(d),Gt.chmod(s,u)}return s},createDevice:function(t,e,n,r){var o=zt.join2("string"==typeof t?t:Gt.getPath(t),e),i=Gt.getMode(!!n,!!r);Gt.createDevice.major||(Gt.createDevice.major=64);var a=Gt.makedev(Gt.createDevice.major++,0);return Gt.registerDevice(a,{open:function(t){t.seekable=!1},close:function(t){r&&r.buffer&&r.buffer.length&&r(10)},read:function(t,e,r,o,i){for(var a=0,u=0;u<o;u++){var s;try{s=n()}catch(t){throw new Gt.ErrnoError(Bt.EIO)}if(void 0===s&&0===a)throw new Gt.ErrnoError(Bt.EAGAIN);if(null===s||void 0===s)break;a++,e[r+u]=s}return a&&(t.node.timestamp=Date.now()),a},write:function(t,e,n,o,i){for(var a=0;a<o;a++)try{r(e[n+a])}catch(t){throw new Gt.ErrnoError(Bt.EIO)}return o&&(t.node.timestamp=Date.now()),a}}),Gt.mkdev(o,i,a)},createLink:function(t,e,n,r,o){var i=zt.join2("string"==typeof t?t:Gt.getPath(t),e);return Gt.symlink(n,i)},forceLoadFile:function(t){if(t.isDevice||t.isFolder||t.link||t.contents)return!0;var e=!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!i.read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{t.contents=ie(i.read(t.url),!0),t.usedBytes=t.contents.length}catch(t){e=!1}return e||Ut(Bt.EIO),e},createLazyFile:function(t,e,n,r,o){function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(t){if(!(t>this.length-1||t<0)){var e=t%this.chunkSize,n=t/this.chunkSize|0;return this.getter(n)[e]}},i.prototype.setDataGetter=function(t){this.getter=t},i.prototype.cacheLength=function(){var t=new XMLHttpRequest;if(t.open("HEAD",n,!1),t.send(null),!(t.status>=200&&t.status<300||304===t.status))throw new Error("Couldn't load "+n+". Status: "+t.status);var e,r=Number(t.getResponseHeader("Content-length")),o=(e=t.getResponseHeader("Accept-Ranges"))&&"bytes"===e,i=(e=t.getResponseHeader("Content-Encoding"))&&"gzip"===e,a=1048576;o||(a=r);var u=this;u.setDataGetter(function(t){var e=t*a,o=(t+1)*a-1;if(o=Math.min(o,r-1),void 0===u.chunks[t]&&(u.chunks[t]=function(t,e){if(t>e)throw new Error("invalid range ("+t+", "+e+") or no bytes requested!");if(e>r-1)throw new Error("only "+r+" bytes available! programmer error!");var o=new XMLHttpRequest;if(o.open("GET",n,!1),r!==a&&o.setRequestHeader("Range","bytes="+t+"-"+e),"undefined"!=typeof Uint8Array&&(o.responseType="arraybuffer"),o.overrideMimeType&&o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(null),!(o.status>=200&&o.status<300||304===o.status))throw new Error("Couldn't load "+n+". Status: "+o.status);return void 0!==o.response?new Uint8Array(o.response||[]):ie(o.responseText||"",!0)}(e,o)),void 0===u.chunks[t])throw new Error("doXHR failed!");return u.chunks[t]}),!i&&r||(a=r=1,r=this.getter(0).length,a=r,console.log("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=r,this._chunkSize=a,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!f)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a=new i;Object.defineProperties(a,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:a}}else u={isDevice:!1,url:n};var s=Gt.createFile(t,e,u,r,o);u.contents?s.contents=u.contents:u.url&&(s.contents=null,s.url=u.url),Object.defineProperties(s,{usedBytes:{get:function(){return this.contents.length}}});var c={};return Object.keys(s.stream_ops).forEach(function(t){var e=s.stream_ops[t];c[t]=function(){if(!Gt.forceLoadFile(s))throw new Gt.ErrnoError(Bt.EIO);return e.apply(null,arguments)}}),c.read=function(t,e,n,r,o){if(!Gt.forceLoadFile(s))throw new Gt.ErrnoError(Bt.EIO);var i=t.node.contents;if(o>=i.length)return 0;var a=Math.min(i.length-o,r);if(S(a>=0),i.slice)for(var u=0;u<a;u++)e[n+u]=i[o+u];else for(u=0;u<a;u++)e[n+u]=i.get(o+u);return a},s.stream_ops=c,s},createPreloadedFile:function(t,e,n,r,o,a,u,s,c,l){Browser.init();var f=e?zt.resolve(zt.join2(t,e)):t;function d(n){function d(n){l&&l(),s||Gt.createDataFile(t,e,n,r,o,c),a&&a(),Tt()}var h=!1;i.preloadPlugins.forEach(function(t){h||t.canHandle(f)&&(t.handle(n,f,d,function(){u&&u(),Tt()}),h=!0)}),h||d(n)}Pt(),"string"==typeof n?Browser.asyncLoad(n,function(t){d(t)},u):d(n)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(t,e,n){e=e||function(){},n=n||function(){};var r=Gt.indexedDB();try{var o=r.open(Gt.DB_NAME(),Gt.DB_VERSION)}catch(t){return n(t)}o.onupgradeneeded=function(){console.log("creating db"),o.result.createObjectStore(Gt.DB_STORE_NAME)},o.onsuccess=function(){var r=o.result.transaction([Gt.DB_STORE_NAME],"readwrite"),i=r.objectStore(Gt.DB_STORE_NAME),a=0,u=0,s=t.length;function c(){0==u?e():n()}t.forEach(function(t){var e=i.put(Gt.analyzePath(t).object.contents,t);e.onsuccess=function(){++a+u==s&&c()},e.onerror=function(){a+ ++u==s&&c()}}),r.onerror=n},o.onerror=n},loadFilesFromDB:function(t,e,n){e=e||function(){},n=n||function(){};var r=Gt.indexedDB();try{var o=r.open(Gt.DB_NAME(),Gt.DB_VERSION)}catch(t){return n(t)}o.onupgradeneeded=n,o.onsuccess=function(){var r=o.result;try{var i=r.transaction([Gt.DB_STORE_NAME],"readonly")}catch(t){return void n(t)}var a=i.objectStore(Gt.DB_STORE_NAME),u=0,s=0,c=t.length;function l(){0==s?e():n()}t.forEach(function(t){var e=a.get(t);e.onsuccess=function(){Gt.analyzePath(t).exists&&Gt.unlink(t),Gt.createDataFile(zt.dirname(t),zt.basename(t),e.result,!0,!0,!0),++u+s==c&&l()},e.onerror=function(){u+ ++s==c&&l()}}),i.onerror=n},o.onerror=n}},Xt={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(t,e){if("/"!==e[0]){var n;if(-100===t)n=Gt.cwd();else{var r=Gt.getStream(t);if(!r)throw new Gt.ErrnoError(Bt.EBADF);n=r.path}e=zt.join2(n,e)}return e},doStat:function(t,e,n){try{var r=t(e)}catch(t){if(t&&t.node&&zt.normalize(e)!==zt.normalize(Gt.getPath(t.node)))return-Bt.ENOTDIR;throw t}return X[n>>2]=r.dev,X[n+4>>2]=0,X[n+8>>2]=r.ino,X[n+12>>2]=r.mode,X[n+16>>2]=r.nlink,X[n+20>>2]=r.uid,X[n+24>>2]=r.gid,X[n+28>>2]=r.rdev,X[n+32>>2]=0,X[n+36>>2]=r.size,X[n+40>>2]=4096,X[n+44>>2]=r.blocks,X[n+48>>2]=r.atime.getTime()/1e3|0,X[n+52>>2]=0,X[n+56>>2]=r.mtime.getTime()/1e3|0,X[n+60>>2]=0,X[n+64>>2]=r.ctime.getTime()/1e3|0,X[n+68>>2]=0,X[n+72>>2]=r.ino,0},doMsync:function(t,e,n,r){var o=new Uint8Array(H.subarray(t,t+n));Gt.msync(e,o,0,n,r)},doMkdir:function(t,e){return"/"===(t=zt.normalize(t))[t.length-1]&&(t=t.substr(0,t.length-1)),Gt.mkdir(t,e,0),0},doMknod:function(t,e,n){switch(61440&e){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-Bt.EINVAL}return Gt.mknod(t,e,n),0},doReadlink:function(t,e,n){if(n<=0)return-Bt.EINVAL;var r=Gt.readlink(t),o=Math.min(n,j(r)),i=q[e+o];return U(r,e,n+1),q[e+o]=i,o},doAccess:function(t,e){if(-8&e)return-Bt.EINVAL;var n;n=Gt.lookupPath(t,{follow:!0}).node;var r="";return 4&e&&(r+="r"),2&e&&(r+="w"),1&e&&(r+="x"),r&&Gt.nodePermissions(n,r)?-Bt.EACCES:0},doDup:function(t,e,n){var r=Gt.getStream(n);return r&&Gt.close(r),Gt.open(t,e,0,n,n).fd},doReadv:function(t,e,n,r){for(var o=0,i=0;i<n;i++){var a=X[e+8*i>>2],u=X[e+(8*i+4)>>2],s=Gt.read(t,q,a,u,r);if(s<0)return-1;if(o+=s,s<u)break}return o},doWritev:function(t,e,n,r){for(var o=0,i=0;i<n;i++){var a=X[e+8*i>>2],u=X[e+(8*i+4)>>2],s=Gt.write(t,q,a,u,r);if(s<0)return-1;o+=s}return o},varargs:0,get:function(t){return Xt.varargs+=4,X[Xt.varargs-4>>2]},getStr:function(){return I(Xt.get())},getStreamFromFD:function(){var t=Gt.getStream(Xt.get());if(!t)throw new Gt.ErrnoError(Bt.EBADF);return t},getSocketFromFD:function(){var t=SOCKFS.getSocket(Xt.get());if(!t)throw new Gt.ErrnoError(Bt.EBADF);return t},getSocketAddress:function(t){var e=Xt.get(),n=Xt.get();if(t&&0===e)return null;var r=__read_sockaddr(e,n);if(r.errno)throw new Gt.ErrnoError(r.errno);return r.addr=DNS.lookup_addr(r.addr)||r.addr,r},get64:function(){var t=Xt.get(),e=Xt.get();return S(t>=0?0===e:-1===e),t},getZero:function(){S(0===Xt.get())}};var Kt=wt,$t=Et;function Qt(){var t=Qt;return t.LLVM_SAVEDSTACKS||(t.LLVM_SAVEDSTACKS=[]),t.LLVM_SAVEDSTACKS.push(he()),t.LLVM_SAVEDSTACKS.length-1}function Zt(t){return t%4==0&&(t%100!=0||t%400==0)}function Jt(t,e){for(var n=0,r=0;r<=e;n+=t[r++]);return n}var te=[31,29,31,30,31,30,31,31,30,31,30,31],ee=[31,28,31,30,31,30,31,31,30,31,30,31];function ne(t,e){for(var n=new Date(t.getTime());e>0;){var r=Zt(n.getFullYear()),o=n.getMonth(),i=(r?te:ee)[o];if(!(e>i-n.getDate()))return n.setDate(n.getDate()+e),n;e-=i-n.getDate()+1,n.setDate(1),o<11?n.setMonth(o+1):(n.setMonth(0),n.setFullYear(n.getFullYear()+1))}return n}if(Gt.staticInit(),ft.unshift(function(){i.noFSInit||Gt.init.initialized||Gt.init()}),dt.push(function(){Gt.ignorePermissions=!1}),ht.push(function(){Gt.quit()}),ft.unshift(function(){Vt.init()}),ht.push(function(){Vt.shutdown()}),s){var re=n(32),oe=n(32);qt.staticInit()}function ie(t,e,n){var r=n>0?n:j(t)+1,o=new Array(r),i=B(t,o,0,o.length);return e&&(o.length=i),o}et=b(4),tt=w((J=w(Q))+ut),X[et>>2]=tt,Z=!0,i.wasmTableSize=769,i.wasmMaxTableSize=769,i.asmGlobalArg={},i.asmLibraryArg={abort:ge,enlargeMemory:at,getTotalMemory:function(){return st},abortOnCannotGrowMemory:it,__Unwind_Backtrace:function(t,e){for(var n=Rt().split("\n"),r=0;r<n.length;r++)if(0!==i.dynCall_iii(t,0,e))return},__Unwind_FindEnclosingFunction:function(){return 0},__Unwind_GetIPInfo:function(){ge("Unwind_GetIPInfo")},___buildEnvironment:function t(e){var n,r;t.called?(r=X[e>>2],n=X[r>>2]):(t.called=!0,It.USER=It.LOGNAME="web_user",It.PATH="/",It.PWD="/",It.HOME="/home/web_user",It.LANG="C.UTF-8",It._=i.thisProgram,n=R(1024),r=R(256),X[r>>2]=n,X[e>>2]=r);var o=[],a=0;for(var u in It)if("string"==typeof It[u]){var s=u+"="+It[u];o.push(s),a+=s.length}if(a>1024)throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");for(var c=0;c<o.length;c++)bt(s=o[c],n),X[r+4*c>>2]=n,n+=s.length+1;X[r+4*o.length>>2]=0},___cxa_allocate_exception:function(t){return le(t)},___cxa_throw:function(t,e,n){throw Ft.infos[t]={ptr:t,adjusted:t,type:e,destructor:n,refcount:0,caught:!1,rethrown:!1},Ft.last=t,"uncaught_exception"in Lt?Lt.uncaught_exception++:Lt.uncaught_exception=1,t+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."},___lock:function(){},___map_file:function(t,e){return Ut(Bt.EPERM),-1},___setErrNo:Ut,___syscall140:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=(Xt.get(),Xt.get()),o=Xt.get(),i=Xt.get(),a=r;return Gt.llseek(n,a,i),X[o>>2]=n.position,n.getdents&&0===a&&0===i&&(n.getdents=null),0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall145:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Xt.doReadv(n,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall146:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Xt.doWritev(n,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall221:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD();switch(Xt.get()){case 0:return(r=Xt.get())<0?-Bt.EINVAL:Gt.open(n.path,n.flags,0,r).fd;case 1:case 2:return 0;case 3:return n.flags;case 4:var r=Xt.get();return n.flags|=r,0;case 12:case 12:return r=Xt.get(),G[r+0>>1]=2,0;case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-Bt.EINVAL;case 9:return Ut(Bt.EINVAL),-1;default:return-Bt.EINVAL}}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall3:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Gt.read(n,q,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall4:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Gt.write(n,q,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall5:function(t,e){Xt.varargs=e;try{var n=Xt.getStr(),r=Xt.get(),o=Xt.get();return Gt.open(n,r,o).fd}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall54:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get();switch(r){case 21509:case 21505:return n.tty?0:-Bt.ENOTTY;case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:return n.tty?0:-Bt.ENOTTY;case 21519:if(!n.tty)return-Bt.ENOTTY;var o=Xt.get();return X[o>>2]=0,0;case 21520:return n.tty?-Bt.EINVAL:-Bt.ENOTTY;case 21531:return o=Xt.get(),Gt.ioctl(n,r,o);case 21523:case 21524:return n.tty?0:-Bt.ENOTTY;default:ge("bad ioctl syscall "+r)}}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall6:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD();return Gt.close(n),0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall91:function(t,e){Xt.varargs=e;try{var n=Xt.get(),r=Xt.get(),o=Xt.mappings[n];if(!o)return 0;if(r===o.len){var i=Gt.getStream(o.fd);Xt.doMsync(n,i,r,o.flags),Gt.munmap(i),Xt.mappings[n]=null,o.allocated&&ce(o.malloc)}return 0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___unlock:function(){},_abort:function(){i.abort()},_dladdr:function(t,e){var n=function(t,e,n,r){var o,i;"number"==typeof t?(o=!0,i=t):(o=!1,i=t.length);var a,u="string"==typeof e?e:null;if(a=n==D?r:["function"==typeof le?le:b,fe,b,_][void 0===n?O:n](Math.max(i,u?1:e.length)),o){var s;for(r=a,S(0==(3&a)),s=a+(-4&i);r<s;r+=4)X[r>>2]=0;for(s=a+i;r<s;)q[r++>>0]=0;return a}if("i8"===u)return t.subarray||t.slice?H.set(t,a):H.set(new Uint8Array(t),a),a;for(var c,l,f,d=0;d<i;){var h=t[d];0!==(c=u||e[d])?("i64"==c&&(c="i32"),T(a+d,h,c),f!==c&&(l=E(c),f=c),d+=l):d++}return a}(ie(i.thisProgram||"./this.program"),"i8",N);return X[e>>2]=n,X[e+4>>2]=0,X[e+8>>2]=0,X[e+12>>2]=0,1},_emscripten_memcpy_big:function(t,e,n){return H.set(H.subarray(e,e+n),t),t},_getenv:function t(e){return 0===e?0:(e=I(e),It.hasOwnProperty(e)?(t.ret&&ce(t.ret),t.ret=function(t){var e=j(t)+1,n=le(e);return n&&B(t,q,n,e),n}(It[e]),t.ret):0)},_llvm_cos_f32:Kt,_llvm_sin_f32:$t,_llvm_stackrestore:function(t){var e=Qt,n=e.LLVM_SAVEDSTACKS[t];e.LLVM_SAVEDSTACKS.splice(t,1),de(n)},_llvm_stacksave:Qt,_llvm_trap:function(){ge("trap!")},_pthread_cond_destroy:function(){return 0},_pthread_cond_init:function(){return 0},_pthread_cond_wait:function(){return 0},_pthread_condattr_destroy:function(){return 0},_pthread_condattr_init:function(){return 0},_pthread_condattr_setclock:function(){return 0},_pthread_mutex_destroy:function(){},_pthread_mutex_init:function(){},_pthread_mutexattr_destroy:function(){},_pthread_mutexattr_init:function(){},_pthread_mutexattr_settype:function(){},_pthread_rwlock_rdlock:function(){return 0},_pthread_rwlock_unlock:function(){return 0},_strftime_l:function(t,e,n,r){return function(t,e,n,r){var o=X[r+40>>2],i={tm_sec:X[r>>2],tm_min:X[r+4>>2],tm_hour:X[r+8>>2],tm_mday:X[r+12>>2],tm_mon:X[r+16>>2],tm_year:X[r+20>>2],tm_wday:X[r+24>>2],tm_yday:X[r+28>>2],tm_isdst:X[r+32>>2],tm_gmtoff:X[r+36>>2],tm_zone:o?I(o):""},a=I(n),u={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var s in u)a=a.replace(new RegExp(s,"g"),u[s]);var c=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],l=["January","February","March","April","May","June","July","August","September","October","November","December"];function f(t,e,n){for(var r="number"==typeof t?t.toString():t||"";r.length<e;)r=n[0]+r;return r}function d(t,e){return f(t,e,"0")}function h(t,e){function n(t){return t<0?-1:t>0?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function p(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function y(t){var e=ne(new Date(t.tm_year+1900,0,1),t.tm_yday),n=new Date(e.getFullYear(),0,4),r=new Date(e.getFullYear()+1,0,4),o=p(n),i=p(r);return h(o,e)<=0?h(i,e)<=0?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var g={"%a":function(t){return c[t.tm_wday].substring(0,3)},"%A":function(t){return c[t.tm_wday]},"%b":function(t){return l[t.tm_mon].substring(0,3)},"%B":function(t){return l[t.tm_mon]},"%C":function(t){return d((t.tm_year+1900)/100|0,2)},"%d":function(t){return d(t.tm_mday,2)},"%e":function(t){return f(t.tm_mday,2," ")},"%g":function(t){return y(t).toString().substring(2)},"%G":function(t){return y(t)},"%H":function(t){return d(t.tm_hour,2)},"%I":function(t){var e=t.tm_hour;return 0==e?e=12:e>12&&(e-=12),d(e,2)},"%j":function(t){return d(t.tm_mday+Jt(Zt(t.tm_year+1900)?te:ee,t.tm_mon-1),3)},"%m":function(t){return d(t.tm_mon+1,2)},"%M":function(t){return d(t.tm_min,2)},"%n":function(){return"\n"},"%p":function(t){return t.tm_hour>=0&&t.tm_hour<12?"AM":"PM"},"%S":function(t){return d(t.tm_sec,2)},"%t":function(){return"\t"},"%u":function(t){return new Date(t.tm_year+1900,t.tm_mon+1,t.tm_mday,0,0,0,0).getDay()||7},"%U":function(t){var e=new Date(t.tm_year+1900,0,1),n=0===e.getDay()?e:ne(e,7-e.getDay()),r=new Date(t.tm_year+1900,t.tm_mon,t.tm_mday);if(h(n,r)<0){var o=Jt(Zt(r.getFullYear())?te:ee,r.getMonth()-1)-31,i=31-n.getDate()+o+r.getDate();return d(Math.ceil(i/7),2)}return 0===h(n,e)?"01":"00"},"%V":function(t){var e,n=new Date(t.tm_year+1900,0,4),r=new Date(t.tm_year+1901,0,4),o=p(n),i=p(r),a=ne(new Date(t.tm_year+1900,0,1),t.tm_yday);return h(a,o)<0?"53":h(i,a)<=0?"01":(e=o.getFullYear()<t.tm_year+1900?t.tm_yday+32-o.getDate():t.tm_yday+1-o.getDate(),d(Math.ceil(e/7),2))},"%w":function(t){return new Date(t.tm_year+1900,t.tm_mon+1,t.tm_mday,0,0,0,0).getDay()},"%W":function(t){var e=new Date(t.tm_year,0,1),n=1===e.getDay()?e:ne(e,0===e.getDay()?1:7-e.getDay()+1),r=new Date(t.tm_year+1900,t.tm_mon,t.tm_mday);if(h(n,r)<0){var o=Jt(Zt(r.getFullYear())?te:ee,r.getMonth()-1)-31,i=31-n.getDate()+o+r.getDate();return d(Math.ceil(i/7),2)}return 0===h(n,e)?"01":"00"},"%y":function(t){return(t.tm_year+1900).toString().substring(2)},"%Y":function(t){return t.tm_year+1900},"%z":function(t){var e=t.tm_gmtoff,n=e>=0;return e=(e=Math.abs(e)/60)/60*100+e%60,(n?"+":"-")+String("0000"+e).slice(-4)},"%Z":function(t){return t.tm_zone},"%%":function(){return"%"}};for(var s in g)a.indexOf(s)>=0&&(a=a.replace(new RegExp(s,"g"),g[s](i)));var v=ie(a,!1);return v.length>e?0:(mt(v,t),v.length-1)}(t,e,n,r)},DYNAMICTOP_PTR:et,STACKTOP:J};var ae=i.asm(i.asmGlobalArg,i.asmLibraryArg,Y);i.asm=ae;var ue=i.__GLOBAL__sub_I_iostream_cpp=function(){return i.asm.__GLOBAL__sub_I_iostream_cpp.apply(null,arguments)},se=i.___emscripten_environ_constructor=function(){return i.asm.___emscripten_environ_constructor.apply(null,arguments)},ce=(i.___errno_location=function(){return i.asm.___errno_location.apply(null,arguments)},i._connected_components=function(){return i.asm._connected_components.apply(null,arguments)},i._edge_bundling_call=function(){return i.asm._edge_bundling_call.apply(null,arguments)},i._edge_bundling_get_cycles=function(){return i.asm._edge_bundling_get_cycles.apply(null,arguments)},i._edge_bundling_get_i0=function(){return i.asm._edge_bundling_get_i0.apply(null,arguments)},i._edge_bundling_get_i_step=function(){return i.asm._edge_bundling_get_i_step.apply(null,arguments)},i._edge_bundling_get_s0=function(){return i.asm._edge_bundling_get_s0.apply(null,arguments)},i._edge_bundling_get_s_step=function(){return i.asm._edge_bundling_get_s_step.apply(null,arguments)},i._edge_bundling_new=function(){return i.asm._edge_bundling_new.apply(null,arguments)},i._edge_bundling_set_cycles=function(){return i.asm._edge_bundling_set_cycles.apply(null,arguments)},i._edge_bundling_set_i0=function(){return i.asm._edge_bundling_set_i0.apply(null,arguments)},i._edge_bundling_set_i_step=function(){return i.asm._edge_bundling_set_i_step.apply(null,arguments)},i._edge_bundling_set_s0=function(){return i.asm._edge_bundling_set_s0.apply(null,arguments)},i._edge_bundling_set_s_step=function(){return i.asm._edge_bundling_set_s_step.apply(null,arguments)},i._free=function(){return i.asm._free.apply(null,arguments)}),le=(i._graph_add_edge=function(){return i.asm._graph_add_edge.apply(null,arguments)},i._graph_add_node=function(){return i.asm._graph_add_node.apply(null,arguments)},i._graph_edge_count=function(){return i.asm._graph_edge_count.apply(null,arguments)},i._graph_get_x=function(){return i.asm._graph_get_x.apply(null,arguments)},i._graph_get_y=function(){return i.asm._graph_get_y.apply(null,arguments)},i._graph_new=function(){return i.asm._graph_new.apply(null,arguments)},i._graph_node_count=function(){return i.asm._graph_node_count.apply(null,arguments)},i._line_points=function(){return i.asm._line_points.apply(null,arguments)},i._line_points_at=function(){return i.asm._line_points_at.apply(null,arguments)},i._line_points_length=function(){return i.asm._line_points_length.apply(null,arguments)},i._lines_at=function(){return i.asm._lines_at.apply(null,arguments)},i._malloc=function(){return i.asm._malloc.apply(null,arguments)}),fe=(i._point_x=function(){return i.asm._point_x.apply(null,arguments)},i._point_y=function(){return i.asm._point_y.apply(null,arguments)},i._rust_alloc=function(){return i.asm._rust_alloc.apply(null,arguments)},i._rust_free=function(){return i.asm._rust_free.apply(null,arguments)},i._simulation_add_center_force=function(){return i.asm._simulation_add_center_force.apply(null,arguments)},i._simulation_add_group_center_force=function(){return i.asm._simulation_add_group_center_force.apply(null,arguments)},i._simulation_add_group_link_force=function(){return i.asm._simulation_add_group_link_force.apply(null,arguments)},i._simulation_add_group_many_body_force=function(){return i.asm._simulation_add_group_many_body_force.apply(null,arguments)},i._simulation_add_link_force=function(){return i.asm._simulation_add_link_force.apply(null,arguments)},i._simulation_add_many_body_force=function(){return i.asm._simulation_add_many_body_force.apply(null,arguments)},i._simulation_get_strength=function(){return i.asm._simulation_get_strength.apply(null,arguments)},i._simulation_new=function(){return i.asm._simulation_new.apply(null,arguments)},i._simulation_set_strength=function(){return i.asm._simulation_set_strength.apply(null,arguments)},i._simulation_start=function(){return i.asm._simulation_start.apply(null,arguments)},i._squarified_treemap=function(){return i.asm._squarified_treemap.apply(null,arguments)},i.stackAlloc=function(){return i.asm.stackAlloc.apply(null,arguments)}),de=i.stackRestore=function(){return i.asm.stackRestore.apply(null,arguments)},he=i.stackSave=function(){return i.asm.stackSave.apply(null,arguments)};i.dynCall_iii=function(){return i.asm.dynCall_iii.apply(null,arguments)},i.dynCall_v=function(){return i.asm.dynCall_v.apply(null,arguments)},i.dynCall_vi=function(){return i.asm.dynCall_vi.apply(null,arguments)};function pe(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function ye(t){function e(){i.calledRun||(i.calledRun=!0,k||(yt||(yt=!0,ct(ft)),ct(dt),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)vt(i.postRun.shift());ct(pt)}()))}t=t||i.arguments,Mt>0||(!function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)gt(i.preRun.shift());ct(lt)}(),Mt>0||i.calledRun||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),e()},1)):e()))}function ge(t){throw i.onAbort&&i.onAbort(t),void 0!==t?(g(t),v(t),t=JSON.stringify(t)):t="",k=!0,1,"abort("+t+"). Build with -s ASSERTIONS=1 for more info."}if(i.asm=ae,i.ccall=P,i.cwrap=function(t,e,n,r){var o=(n=n||[]).every(function(t){return"number"===t});return"string"!==e&&o&&!r?M(t):function(){return P(t,e,n,arguments)}},i.then=function(t){if(i.calledRun)t(i);else{var e=i.onRuntimeInitialized;i.onRuntimeInitialized=function(){e&&e(),t(i)}}return i},pe.prototype=new Error,pe.prototype.constructor=pe,At=function t(){i.calledRun||ye(),i.calledRun||(At=t)},i.run=ye,i.abort=ge,i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return i.noExitRuntime=!0,ye(),i}}();t.exports=i}).call(this,n(52),"/",n(204).Buffer)},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(217);var o=function(t){return t&&t.__esModule?t:{default:t}}(n(98)),i=n(120),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(95)),u=n(197);var s=a.scaleOrdinal(a.schemeCategory10),c=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.state={width:300,height:150},t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"componentDidMount",value:function(){var t=this,e=this.refs.wrapper;this.setState({width:e.clientWidth,height:e.clientHeight}),window.addEventListener("resize",function(){document.webkitIsFullScreen?t.setState({width:window.innerWidth,height:window.innerHeight}):t.setState({width:e.clientWidth,height:e.clientHeight})})}},{key:"render",value:function(){var t=this.state,e=t.width,n=t.height;return o.default.createElement("div",{className:"ui container"},o.default.createElement("h1",null,"Cypher Viewer"),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("form",{className:"ui form",onSubmit:this.handleSubmitQueryForm.bind(this)},o.default.createElement("h4",{className:"ui dividing header"},"Query"),o.default.createElement("div",{className:"field"},o.default.createElement("div",{className:"two fields"},o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"User ID"),o.default.createElement("input",{ref:"userId",defaultValue:"neo4j"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Password"),o.default.createElement("input",{ref:"password",type:"password"})))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Query"),o.default.createElement("textarea",{ref:"query",defaultValue:"MATCH p = (v1)-[r:Correlation]->(v2)\nWHERE abs(r.value) > 0.6\n  AND v1.timeOrder < v2.timeOrder\nRETURN collect(nodes(p)), collect(relationships(p))"})),o.default.createElement("button",{className:"ui button",type:"submit"},"load"))),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("div",{ref:"wrapper",style:{height:"600px"}},o.default.createElement("eg-renderer",{ref:"renderer",style:{border:"solid 1px #ccc",display:"block"},width:e,height:n,"transition-duration":"1000","graph-nodes-property":"nodes","graph-links-property":"relationships","node-id-property":"id","node-label-property":"properties.name","link-source-property":"startNode","link-target-property":"endNode","default-node-width":"10","default-node-height":"10","default-node-stroke-width":"0","default-link-stroke-width":"1","no-auto-centering":!0})),o.default.createElement("div",{className:"ui menu"},o.default.createElement("div",{className:"item"},o.default.createElement("button",{className:"ui button",onClick:this.handleClickCenterButton.bind(this)},"Center")),o.default.createElement("div",{className:"item"},o.default.createElement("button",{className:"ui button",onClick:this.handleClickFullscreenButton.bind(this)},"Fullscreen")))),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("form",{className:"ui form",onSubmit:this.handleSubmitOptionsForm.bind(this)},o.default.createElement("h4",{className:"ui dividing header"},"Renderer Options"),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Layout"),o.default.createElement("select",{ref:"group",className:"ui selection dropdown",defaultValue:"circle-pack"},o.default.createElement("option",{value:"treemap"},"Treemap"),o.default.createElement("option",{value:"circle-pack"},"Circle Packing"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Node Color"),o.default.createElement("select",{ref:"nodeColor",className:"ui selection dropdown",defaultValue:"type"},o.default.createElement("option",{value:"type"},"Type"),o.default.createElement("option",{value:"timeGroup"},"Time Group"),o.default.createElement("option",{value:"timeGroupDetail"},"Time Group Detail"),o.default.createElement("option",{value:"unit"},"Unit"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Node Group"),o.default.createElement("select",{ref:"nodeGroup",className:"ui selection dropdown",defaultValue:"timeGroup"},o.default.createElement("option",{value:"type"},"Type"),o.default.createElement("option",{value:"timeGroup"},"Time Group"),o.default.createElement("option",{value:"timeGroupDetail"},"Time Group Detail"),o.default.createElement("option",{value:"unit"},"Unit"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Edge Bundling Cycles"),o.default.createElement("input",{ref:"cycles",type:"number",min:"0",defaultValue:"3"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Edge Concentration Min Count"),o.default.createElement("input",{ref:"minCount",type:"number",min:"1",defaultValue:"6"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Many Body Force"),o.default.createElement("input",{ref:"manyBodyForce",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Link Force"),o.default.createElement("input",{ref:"linkForce",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Intra Group Strength"),o.default.createElement("input",{ref:"intraGroup",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Inter Group Strength"),o.default.createElement("input",{ref:"interGroup",type:"number",min:"0",step:"0.01",defaultValue:"0.3"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Center Force"),o.default.createElement("input",{ref:"centerForce",type:"number",min:"0",step:"0.01",defaultValue:"0.2"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Use Edge Concentration"),o.default.createElement("select",{ref:"useEdgeConcentration",className:"ui selection dropdown",defaultValue:"yes"},o.default.createElement("option",{value:"yes"},"Yes"),o.default.createElement("option",{value:"no"},"No"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Show Single Edge"),o.default.createElement("select",{ref:"showSingleEdge",className:"ui selection dropdown",defaultValue:"no"},o.default.createElement("option",{value:"yes"},"Yes"),o.default.createElement("option",{value:"no"},"No"))),o.default.createElement("button",{className:"ui button",type:"submit"},"update"))))}},{key:"handleClickCenterButton",value:function(){this.refs.renderer.center()}},{key:"handleClickFullscreenButton",value:function(){this.refs.renderer.webkitRequestFullscreen&&this.refs.renderer.webkitRequestFullscreen()}},{key:"handleSubmitQueryForm",value:function(t){var e=this;t.preventDefault(),function(t,e,n,r){var o={"Content-Type":"application/json"};return e&&n&&(o.Authorization="Basic "+window.btoa(e+":"+n)),window.fetch("https://neo4j.likr-lab.com/db/data/transaction/commit",{method:"POST",headers:o,body:JSON.stringify({statements:[{statement:t,resultDataContents:["graph"]}]})}).then(function(t){return t.json()}).then(function(t){var e=t.results[0].data[0].graph,n=a.scaleLinear().domain([0,1]).range([0,3]),o=a.scaleLinear().domain([-1,0,1]).range(["#00f","#fff","#f00"]),i=!0,u=!1,c=void 0;try{for(var l,f=e.nodes[Symbol.iterator]();!(i=(l=f.next()).done);i=!0){var d=l.value;d.fillColor=s(d.properties[r])}}catch(t){u=!0,c=t}finally{try{!i&&f.return&&f.return()}finally{if(u)throw c}}var h=!0,p=!1,y=void 0;try{for(var g,v=e.relationships[Symbol.iterator]();!(h=(g=v.next()).done);h=!0){var m=g.value;m.type="line",m.strokeWidth=n(Math.abs(m.properties.value)),m.strokeColor=o(m.properties.value)}}catch(t){p=!0,y=t}finally{try{!h&&v.return&&v.return()}finally{if(p)throw y}}return e})}(this.refs.query.value,this.refs.userId.value,this.refs.password.value,this.refs.nodeColor.value).then(function(t){e.data=t,e.layout().then(function(){e.refs.renderer.center()})})}},{key:"handleSubmitOptionsForm",value:function(t){t.preventDefault(),this.layout()}},{key:"layout",value:function(){var t=this,e={type:this.refs.group.value,cycles:+this.refs.cycles.value,s0:.1,i0:90,sStep:.5,iStep:.6,groupProperty:this.refs.nodeGroup.value,manyBodyForce:+this.refs.manyBodyForce.value,linkForce:+this.refs.linkForce.value,centerForce:+this.refs.centerForce.value,intraGroup:+this.refs.intraGroup.value,interGroup:+this.refs.interGroup.value,useEdgeConcentration:"yes"===this.refs.useEdgeConcentration.value,showSingleEdge:"yes"===this.refs.showSingleEdge.value,mu:.5,minCount:+this.refs.minCount.value};return(0,u.layout)(this.data,e).then(function(e){var n=a.scaleLinear().domain([0,1]).range([1,3]),r=a.scaleLinear().domain([-1,0,1]).range(["#00f","#888","#f00"]),o=!0,i=!1,u=void 0;try{for(var c,l=e.nodes[Symbol.iterator]();!(o=(c=l.next()).done);o=!0){var f=c.value;f.fillColor=s(f.properties[t.refs.nodeColor.value])}}catch(t){i=!0,u=t}finally{try{!o&&l.return&&l.return()}finally{if(i)throw u}}var d=!0,h=!1,p=void 0;try{for(var y,g=e.relationships[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;v.type="line",v.strokeWidth=n(Math.abs(v.properties.value)),v.strokeColor=r(v.properties.value)}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}t.refs.renderer.load(e)})}},{key:"update",value:function(){var t=!0,e=!1,n=void 0;try{for(var r,o=this.refs.renderer.data.nodes[Symbol.iterator]();!(t=(r=o.next()).done);t=!0){var i=r.value;i.fillColor=s(i.properties[this.refs.nodeColor.value])}}catch(t){e=!0,n=t}finally{try{!t&&o.return&&o.return()}finally{if(e)throw n}}this.refs.renderer.invalidate()}}]),e}();(0,i.render)(o.default.createElement(c,null),document.getElementById("content"))},function(t,e,n){"use strict";t.exports=n(20)},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";var r=n(102),o=n(21),i=n(61),a=n(103),u=r.twoArgumentPooler,s=r.fourArgumentPooler,c=/\/+/g;function l(t){return(""+t).replace(c,"$&/")}function f(t,e){this.func=t,this.context=e,this.count=0}function d(t,e,n){var r=t.func,o=t.context;r.call(o,e,t.count++)}function h(t,e,n,r){this.result=t,this.keyPrefix=e,this.func=n,this.context=r,this.count=0}function p(t,e,n){var r=t.result,a=t.keyPrefix,u=t.func,s=t.context,c=u.call(s,e,t.count++);Array.isArray(c)?y(c,r,n,i.thatReturnsArgument):null!=c&&(o.isValidElement(c)&&(c=o.cloneAndReplaceKey(c,a+(!c.key||e&&e.key===c.key?"":l(c.key)+"/")+n)),r.push(c))}function y(t,e,n,r,o){var i="";null!=n&&(i=l(n)+"/");var u=h.getPooled(e,i,r,o);a(t,p,u),h.release(u)}function g(t,e,n){return null}f.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},r.addPoolingTo(f,u),h.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},r.addPoolingTo(h,s);var v={forEach:function(t,e,n){if(null==t)return t;var r=f.getPooled(e,n);a(t,d,r),f.release(r)},map:function(t,e,n){if(null==t)return t;var r=[];return y(t,r,null,e,n),r},mapIntoWithKeyPrefixInternal:y,count:function(t,e){return a(t,g,null)},toArray:function(t){var e=[];return y(t,e,null,i.thatReturnsArgument),e}};t.exports=v},function(t,e,n){"use strict";var r=n(26),o=(n(27),function(t){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,t),e}return new this(t)}),i=function(t){t instanceof this||r("25"),t.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(t)},a=o,u={addPoolingTo:function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||a,n.poolSize||(n.poolSize=10),n.release=i,n},oneArgumentPooler:o,twoArgumentPooler:function(t,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,t,e),n}return new this(t,e)},threeArgumentPooler:function(t,e,n){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,t,e,n),r}return new this(t,e,n)},fourArgumentPooler:function(t,e,n,r){if(this.instancePool.length){var o=this.instancePool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}};t.exports=u},function(t,e,n){"use strict";var r=n(26),o=(n(13),n(63)),i=n(104),a=(n(27),n(105)),u=(n(33),"."),s=":";function c(t,e){return t&&"object"==typeof t&&null!=t.key?a.escape(t.key):e.toString(36)}t.exports=function(t,e,n){return null==t?0:function t(e,n,l,f){var d,h=typeof e;if("undefined"!==h&&"boolean"!==h||(e=null),null===e||"string"===h||"number"===h||"object"===h&&e.$$typeof===o)return l(f,e,""===n?u+c(e,0):n),1;var p=0,y=""===n?u:n+s;if(Array.isArray(e))for(var g=0;g<e.length;g++)p+=t(d=e[g],y+c(d,g),l,f);else{var v=i(e);if(v){var m,b=v.call(e);if(v!==e.entries)for(var _=0;!(m=b.next()).done;)p+=t(d=m.value,y+c(d,_++),l,f);else for(;!(m=b.next()).done;){var w=m.value;w&&(p+=t(d=w[1],y+a.escape(w[0])+s+c(d,0),l,f))}}else if("object"===h){var E=String(e);r("31","[object Object]"===E?"object with keys {"+Object.keys(e).join(", ")+"}":E,"")}}return p}(t,"",e,n)}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";t.exports=function(t){var e=t&&(r&&t[r]||t[o]);if("function"==typeof e)return e}},function(t,e,n){"use strict";var r={escape:function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})},unescape:function(t){var e={"=0":"=","=2":":"};return(""+("."===t[0]&&"$"===t[1]?t.substring(2):t.substring(1))).replace(/(=0|=2)/g,function(t){return e[t]})}};t.exports=r},function(t,e,n){"use strict";var r=n(21).createFactory,o={a:r("a"),abbr:r("abbr"),address:r("address"),area:r("area"),article:r("article"),aside:r("aside"),audio:r("audio"),b:r("b"),base:r("base"),bdi:r("bdi"),bdo:r("bdo"),big:r("big"),blockquote:r("blockquote"),body:r("body"),br:r("br"),button:r("button"),canvas:r("canvas"),caption:r("caption"),cite:r("cite"),code:r("code"),col:r("col"),colgroup:r("colgroup"),data:r("data"),datalist:r("datalist"),dd:r("dd"),del:r("del"),details:r("details"),dfn:r("dfn"),dialog:r("dialog"),div:r("div"),dl:r("dl"),dt:r("dt"),em:r("em"),embed:r("embed"),fieldset:r("fieldset"),figcaption:r("figcaption"),figure:r("figure"),footer:r("footer"),form:r("form"),h1:r("h1"),h2:r("h2"),h3:r("h3"),h4:r("h4"),h5:r("h5"),h6:r("h6"),head:r("head"),header:r("header"),hgroup:r("hgroup"),hr:r("hr"),html:r("html"),i:r("i"),iframe:r("iframe"),img:r("img"),input:r("input"),ins:r("ins"),kbd:r("kbd"),keygen:r("keygen"),label:r("label"),legend:r("legend"),li:r("li"),link:r("link"),main:r("main"),map:r("map"),mark:r("mark"),menu:r("menu"),menuitem:r("menuitem"),meta:r("meta"),meter:r("meter"),nav:r("nav"),noscript:r("noscript"),object:r("object"),ol:r("ol"),optgroup:r("optgroup"),option:r("option"),output:r("output"),p:r("p"),param:r("param"),picture:r("picture"),pre:r("pre"),progress:r("progress"),q:r("q"),rp:r("rp"),rt:r("rt"),ruby:r("ruby"),s:r("s"),samp:r("samp"),script:r("script"),section:r("section"),select:r("select"),small:r("small"),source:r("source"),span:r("span"),strong:r("strong"),style:r("style"),sub:r("sub"),summary:r("summary"),sup:r("sup"),table:r("table"),tbody:r("tbody"),td:r("td"),textarea:r("textarea"),tfoot:r("tfoot"),th:r("th"),thead:r("thead"),time:r("time"),title:r("title"),tr:r("tr"),track:r("track"),u:r("u"),ul:r("ul"),var:r("var"),video:r("video"),wbr:r("wbr"),circle:r("circle"),clipPath:r("clipPath"),defs:r("defs"),ellipse:r("ellipse"),g:r("g"),image:r("image"),line:r("line"),linearGradient:r("linearGradient"),mask:r("mask"),path:r("path"),pattern:r("pattern"),polygon:r("polygon"),polyline:r("polyline"),radialGradient:r("radialGradient"),rect:r("rect"),stop:r("stop"),svg:r("svg"),text:r("text"),tspan:r("tspan")};t.exports=o},function(t,e,n){"use strict";var r=n(21).isValidElement,o=n(64);t.exports=o(r)},function(t,e,n){"use strict";var r=n(65),o=n(109),i=n(110),a=n(111),u=n(112);t.exports=function(t,e){var n="function"==typeof Symbol&&Symbol.iterator,s="@@iterator";var c="<<anonymous>>",l={array:p("array"),bool:p("boolean"),func:p("function"),number:p("number"),object:p("object"),string:p("string"),symbol:p("symbol"),any:h(r.thatReturnsNull),arrayOf:function(t){return h(function(e,n,r,o,i){if("function"!=typeof t)return new d("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var u=e[n];if(!Array.isArray(u)){var s=g(u);return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected an array.")}for(var c=0;c<u.length;c++){var l=t(u,c,r,o,i+"["+c+"]",a);if(l instanceof Error)return l}return null})},element:function(){return h(function(e,n,r,o,i){var a=e[n];if(!t(a)){var u=g(a);return new d("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(t){return h(function(e,n,r,o,i){if(!(e[n]instanceof t)){var a=t.name||c,u=function(t){if(!t.constructor||!t.constructor.name)return c;return t.constructor.name}(e[n]);return new d("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null})},node:function(){return h(function(t,e,n,r,o){if(!y(t[e]))return new d("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(t){return h(function(e,n,r,o,i){if("function"!=typeof t)return new d("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var u=e[n],s=g(u);if("object"!==s)return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected an object.");for(var c in u)if(u.hasOwnProperty(c)){var l=t(u,c,r,o,i+"."+c,a);if(l instanceof Error)return l}return null})},oneOf:function(t){if(!Array.isArray(t))return r.thatReturnsNull;return h(function(e,n,r,o,i){for(var a=e[n],u=0;u<t.length;u++)if(f(a,t[u]))return null;var s=JSON.stringify(t);return new d("Invalid "+o+" `"+i+"` of value `"+a+"` supplied to `"+r+"`, expected one of "+s+".")})},oneOfType:function(t){if(!Array.isArray(t))return r.thatReturnsNull;for(var e=0;e<t.length;e++){var n=t[e];if("function"!=typeof n)return i(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",m(n),e),r.thatReturnsNull}return h(function(e,n,r,o,i){for(var u=0;u<t.length;u++){var s=t[u];if(null==s(e,n,r,o,i,a))return null}return new d("Invalid "+o+" `"+i+"` supplied to `"+r+"`.")})},shape:function(t){return h(function(e,n,r,o,i){var u=e[n],s=g(u);if("object"!==s)return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");for(var c in t){var l=t[c];if(l){var f=l(u,c,r,o,i+"."+c,a);if(f)return f}}return null})}};function f(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function d(t){this.message=t,this.stack=""}function h(t){function n(n,r,i,u,s,l,f){(u=u||c,l=l||i,f!==a)&&(e&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"));return null==r[i]?n?null===r[i]?new d("The "+s+" `"+l+"` is marked as required in `"+u+"`, but its value is `null`."):new d("The "+s+" `"+l+"` is marked as required in `"+u+"`, but its value is `undefined`."):null:t(r,i,u,s,l)}var r=n.bind(null,!1);return r.isRequired=n.bind(null,!0),r}function p(t){return h(function(e,n,r,o,i,a){var u=e[n];return g(u)!==t?new d("Invalid "+o+" `"+i+"` of type `"+v(u)+"` supplied to `"+r+"`, expected `"+t+"`."):null})}function y(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(y);if(null===e||t(e))return!0;var r=function(t){var e=t&&(n&&t[n]||t[s]);if("function"==typeof e)return e}(e);if(!r)return!1;var o,i=r.call(e);if(r!==e.entries){for(;!(o=i.next()).done;)if(!y(o.value))return!1}else for(;!(o=i.next()).done;){var a=o.value;if(a&&!y(a[1]))return!1}return!0;default:return!1}}function g(t){var e=typeof t;return Array.isArray(t)?"array":t instanceof RegExp?"object":function(t,e){return"symbol"===t||"Symbol"===e["@@toStringTag"]||"function"==typeof Symbol&&e instanceof Symbol}(e,t)?"symbol":e}function v(t){if(void 0===t||null===t)return""+t;var e=g(t);if("object"===e){if(t instanceof Date)return"date";if(t instanceof RegExp)return"regexp"}return e}function m(t){var e=v(t);switch(e){case"array":case"object":return"an "+e;case"boolean":case"date":case"regexp":return"a "+e;default:return e}}return d.prototype=Error.prototype,l.checkPropTypes=u,l.PropTypes=l,l}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(65);t.exports=r},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){}},function(t,e,n){"use strict";t.exports="15.6.1"},function(t,e,n){"use strict";var r=n(59).Component,o=n(21).isValidElement,i=n(60),a=n(115);t.exports=a(r,o,i)},function(t,e,n){"use strict";var r=n(116),o=n(117),i=n(118),a="mixins";t.exports=function(t,e,n){var u=[],s={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},c={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)f(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=r({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=r({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=h(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=r({},t.propTypes,e)},statics:function(t,e){!function(t,e){if(e)for(var n in e){var r=e[n];if(e.hasOwnProperty(n)){var o=n in c;i(!o,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var a=n in t;i(!a,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),t[n]=r}}}(t,e)},autobind:function(){}};function l(t,e){var n=s.hasOwnProperty(e)?s[e]:null;m.hasOwnProperty(e)&&i("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",e),t&&i("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",e)}function f(t,n){if(n){i("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),i(!e(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var r=t.prototype,o=r.__reactAutoBindPairs;for(var u in n.hasOwnProperty(a)&&c.mixins(t,n.mixins),n)if(n.hasOwnProperty(u)&&u!==a){var f=n[u],d=r.hasOwnProperty(u);if(l(d,u),c.hasOwnProperty(u))c[u](t,f);else{var y=s.hasOwnProperty(u);if("function"!=typeof f||y||d||!1===n.autobind)if(d){var g=s[u];i(y&&("DEFINE_MANY_MERGED"===g||"DEFINE_MANY"===g),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",g,u),"DEFINE_MANY_MERGED"===g?r[u]=h(r[u],f):"DEFINE_MANY"===g&&(r[u]=p(r[u],f))}else r[u]=f;else o.push(u,f),r[u]=f}}}}function d(t,e){for(var n in i(t&&e&&"object"==typeof t&&"object"==typeof e,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),e)e.hasOwnProperty(n)&&(i(void 0===t[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),t[n]=e[n]);return t}function h(t,e){return function(){var n=t.apply(this,arguments),r=e.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return d(o,n),d(o,r),o}}function p(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function y(t,e){return e.bind(t)}var g={componentDidMount:function(){this.__isMounted=!0}},v={componentWillUnmount:function(){this.__isMounted=!1}},m={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t,e)},isMounted:function(){return!!this.__isMounted}},b=function(){};return r(b.prototype,t.prototype,m),function(t){var e=function(t){return t}(function(t,r,a){this.__reactAutoBindPairs.length&&function(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];t[r]=y(t,o)}}(this),this.props=t,this.context=r,this.refs=o,this.updater=a||n,this.state=null;var u=this.getInitialState?this.getInitialState():null;i("object"==typeof u&&!Array.isArray(u),"%s.getInitialState(): must return an object or null",e.displayName||"ReactCompositeComponent"),this.state=u});for(var r in e.prototype=new b,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],u.forEach(f.bind(null,e)),f(e,g),f(e,t),f(e,v),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),i(e.prototype.render,"createClass(...): Class specification must implement a `render` method."),s)e.prototype[r]||(e.prototype[r]=null);return e}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(26),o=n(21);n(27);t.exports=function(t){return o.isValidElement(t)||r("143"),t}},function(t,e,n){"use strict";t.exports=n(121)},function(t,e,n){"use strict";var r=n(6),o=n(122),i=n(90),a=n(23),u=n(12),s=n(194),c=n(195),l=n(91),f=n(196);n(5);o.inject();var d={findDOMNode:c,render:i.render,unmountComponentAtNode:i.unmountComponentAtNode,version:s,unstable_batchedUpdates:u.batchedUpdates,unstable_renderSubtreeIntoContainer:f};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:r.getClosestInstanceFromNode,getNodeFromInstance:function(t){return t._renderedComponent&&(t=l(t)),t?r.getNodeFromInstance(t):null}},Mount:i,Reconciler:a}),t.exports=d},function(t,e,n){"use strict";var r=n(123),o=n(124),i=n(128),a=n(131),u=n(132),s=n(133),c=n(134),l=n(140),f=n(6),d=n(165),h=n(166),p=n(167),y=n(168),g=n(169),v=n(171),m=n(172),b=n(178),_=n(179),w=n(180),E=!1;t.exports={inject:function(){E||(E=!0,v.EventEmitter.injectReactEventListener(g),v.EventPluginHub.injectEventPluginOrder(a),v.EventPluginUtils.injectComponentTree(f),v.EventPluginUtils.injectTreeTraversal(h),v.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:w,EnterLeaveEventPlugin:u,ChangeEventPlugin:i,SelectEventPlugin:_,BeforeInputEventPlugin:o}),v.HostComponent.injectGenericComponentClass(l),v.HostComponent.injectTextComponentClass(p),v.DOMProperty.injectDOMPropertyConfig(r),v.DOMProperty.injectDOMPropertyConfig(s),v.DOMProperty.injectDOMPropertyConfig(b),v.EmptyComponent.injectEmptyComponentFactory(function(t){return new d(t)}),v.Updates.injectReconcileTransaction(m),v.Updates.injectBatchingStrategy(y),v.Component.injectEnvironment(c))}}},function(t,e,n){"use strict";t.exports={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}}},function(t,e,n){"use strict";var r=n(28),o=n(8),i=n(125),a=n(126),u=n(127),s=[9,13,27,32],c=229,l=o.canUseDOM&&"CompositionEvent"in window,f=null;o.canUseDOM&&"documentMode"in document&&(f=document.documentMode);var d=o.canUseDOM&&"TextEvent"in window&&!f&&!function(){var t=window.opera;return"object"==typeof t&&"function"==typeof t.version&&parseInt(t.version(),10)<=12}(),h=o.canUseDOM&&(!l||f&&f>8&&f<=11);var p=32,y=String.fromCharCode(p),g={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},v=!1;function m(t,e){switch(t){case"topKeyUp":return-1!==s.indexOf(e.keyCode);case"topKeyDown":return e.keyCode!==c;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function b(t){var e=t.detail;return"object"==typeof e&&"data"in e?e.data:null}var _=null;function w(t,e,n,o){var u,s;if(l?u=function(t){switch(t){case"topCompositionStart":return g.compositionStart;case"topCompositionEnd":return g.compositionEnd;case"topCompositionUpdate":return g.compositionUpdate}}(t):_?m(t,n)&&(u=g.compositionEnd):function(t,e){return"topKeyDown"===t&&e.keyCode===c}(t,n)&&(u=g.compositionStart),!u)return null;h&&(_||u!==g.compositionStart?u===g.compositionEnd&&_&&(s=_.getData()):_=i.getPooled(o));var f=a.getPooled(u,e,n,o);if(s)f.data=s;else{var d=b(n);null!==d&&(f.data=d)}return r.accumulateTwoPhaseDispatches(f),f}function E(t,e,n,o){var a;if(!(a=d?function(t,e){switch(t){case"topCompositionEnd":return b(e);case"topKeyPress":return e.which!==p?null:(v=!0,y);case"topTextInput":var n=e.data;return n===y&&v?null:n;default:return null}}(t,n):function(t,e){if(_){if("topCompositionEnd"===t||!l&&m(t,e)){var n=_.getData();return i.release(_),_=null,n}return null}switch(t){case"topPaste":return null;case"topKeyPress":return e.which&&!function(t){return(t.ctrlKey||t.altKey||t.metaKey)&&!(t.ctrlKey&&t.altKey)}(e)?String.fromCharCode(e.which):null;case"topCompositionEnd":return h?null:e.data;default:return null}}(t,n)))return null;var s=u.getPooled(g.beforeInput,e,n,o);return s.data=a,r.accumulateTwoPhaseDispatches(s),s}var x={eventTypes:g,extractEvents:function(t,e,n,r){return[w(t,e,n,r),E(t,e,n,r)]}};t.exports=x},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(69);function a(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}r(a.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[i()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,n=this._startText,r=n.length,o=this.getText(),i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);var u=e>1?1-e:void 0;return this._fallbackText=o.slice(t,u),this._fallbackText}}),o.addPoolingTo(a),t.exports=a},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{data:null}),t.exports=o},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{data:null}),t.exports=o},function(t,e,n){"use strict";var r=n(29),o=n(28),i=n(8),a=n(6),u=n(12),s=n(15),c=n(72),l=n(44),f=n(45),d=n(73),h={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}};function p(t,e,n){var r=s.getPooled(h.change,t,e,n);return r.type="change",o.accumulateTwoPhaseDispatches(r),r}var y=null,g=null;var v=!1;function m(t){var e=p(g,t,l(t));u.batchedUpdates(b,e)}function b(t){r.enqueueEvents(t),r.processEventQueue(!1)}function _(){y&&(y.detachEvent("onchange",m),y=null,g=null)}function w(t,e){var n=c.updateValueIfChanged(t),r=!0===e.simulated&&N._allowSimulatedPassThrough;if(n||r)return t}function E(t,e){if("topChange"===t)return e}function x(t,e,n){"topFocus"===t?(_(),function(t,e){g=e,(y=t).attachEvent("onchange",m)}(e,n)):"topBlur"===t&&_()}i.canUseDOM&&(v=f("change")&&(!document.documentMode||document.documentMode>8));var k=!1;function S(){y&&(y.detachEvent("onpropertychange",M),y=null,g=null)}function M(t){"value"===t.propertyName&&w(g,t)&&m(t)}function C(t,e,n){"topFocus"===t?(S(),function(t,e){g=e,(y=t).attachEvent("onpropertychange",M)}(e,n)):"topBlur"===t&&S()}function A(t,e,n){if("topSelectionChange"===t||"topKeyUp"===t||"topKeyDown"===t)return w(g,n)}function P(t,e,n){if("topClick"===t)return w(e,n)}function T(t,e,n){if("topInput"===t||"topChange"===t)return w(e,n)}i.canUseDOM&&(k=f("input")&&(!("documentMode"in document)||document.documentMode>9));var N={eventTypes:h,_allowSimulatedPassThrough:!0,_isInputEventSupported:k,extractEvents:function(t,e,n,r){var o,i,u=e?a.getNodeFromInstance(e):window;if(!function(t){var e=t.nodeName&&t.nodeName.toLowerCase();return"select"===e||"input"===e&&"file"===t.type}(u)?d(u)?k?o=T:(o=A,i=C):function(t){var e=t.nodeName;return e&&"input"===e.toLowerCase()&&("checkbox"===t.type||"radio"===t.type)}(u)&&(o=P):v?o=E:i=x,o){var s=o(t,e,n);if(s)return p(s,n,r)}i&&i(t,u,e),"topBlur"===t&&function(t,e){if(null!=t){var n=t._wrapperState||e._wrapperState;if(n&&n.controlled&&"number"===e.type){var r=""+e.value;e.getAttribute("value")!==r&&e.setAttribute("value",r)}}}(e,u)}};t.exports=N},function(t,e,n){"use strict";var r=n(130),o={};o.attachRefs=function(t,e){if(null!==e&&"object"==typeof e){var n=e.ref;null!=n&&function(t,e,n){"function"==typeof t?t(e.getPublicInstance()):r.addComponentAsRefTo(e,t,n)}(n,t,e._owner)}},o.shouldUpdateRefs=function(t,e){var n=null,r=null;null!==t&&"object"==typeof t&&(n=t.ref,r=t._owner);var o=null,i=null;return null!==e&&"object"==typeof e&&(o=e.ref,i=e._owner),n!==o||"string"==typeof o&&i!==r},o.detachRefs=function(t,e){if(null!==e&&"object"==typeof e){var n=e.ref;null!=n&&function(t,e,n){"function"==typeof t?t(null):r.removeComponentAsRefFrom(e,t,n)}(n,t,e._owner)}},t.exports=o},function(t,e,n){"use strict";var r=n(4);n(2);function o(t){return!(!t||"function"!=typeof t.attachRef||"function"!=typeof t.detachRef)}var i={addComponentAsRefTo:function(t,e,n){o(n)||r("119"),n.attachRef(e,t)},removeComponentAsRefFrom:function(t,e,n){o(n)||r("120");var i=n.getPublicInstance();i&&i.refs[e]===t.getPublicInstance()&&n.detachRef(e)}};t.exports=i},function(t,e,n){"use strict";t.exports=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"]},function(t,e,n){"use strict";var r=n(28),o=n(6),i=n(35),a={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},u={eventTypes:a,extractEvents:function(t,e,n,u){if("topMouseOver"===t&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==t&&"topMouseOver"!==t)return null;var s,c,l;if(u.window===u)s=u;else{var f=u.ownerDocument;s=f?f.defaultView||f.parentWindow:window}if("topMouseOut"===t){c=e;var d=n.relatedTarget||n.toElement;l=d?o.getClosestInstanceFromNode(d):null}else c=null,l=e;if(c===l)return null;var h=null==c?s:o.getNodeFromInstance(c),p=null==l?s:o.getNodeFromInstance(l),y=i.getPooled(a.mouseLeave,c,n,u);y.type="mouseleave",y.target=h,y.relatedTarget=p;var g=i.getPooled(a.mouseEnter,l,n,u);return g.type="mouseenter",g.target=p,g.relatedTarget=h,r.accumulateEnterLeaveDispatches(y,g,c,l),[y,g]}};t.exports=u},function(t,e,n){"use strict";var r=n(22),o=r.injection.MUST_USE_PROPERTY,i=r.injection.HAS_BOOLEAN_VALUE,a=r.injection.HAS_NUMERIC_VALUE,u=r.injection.HAS_POSITIVE_NUMERIC_VALUE,s=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,c={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+r.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:i,allowTransparency:0,alt:0,as:0,async:i,autoComplete:0,autoPlay:i,capture:i,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:o|i,cite:0,classID:0,className:0,cols:u,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:i,coords:0,crossOrigin:0,data:0,dateTime:0,default:i,defer:i,dir:0,disabled:i,download:s,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:i,formTarget:0,frameBorder:0,headers:0,height:0,hidden:i,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:i,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:o|i,muted:o|i,name:0,nonce:0,noValidate:i,open:i,optimum:0,pattern:0,placeholder:0,playsInline:i,poster:0,preload:0,profile:0,radioGroup:0,readOnly:i,referrerPolicy:0,rel:0,required:i,reversed:i,role:0,rows:u,rowSpan:a,sandbox:0,scope:0,scoped:i,scrolling:0,seamless:i,selected:o|i,shape:0,size:u,sizes:0,span:u,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:a,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:i,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{},DOMMutationMethods:{value:function(t,e){if(null==e)return t.removeAttribute("value");"number"!==t.type||!1===t.hasAttribute("value")?t.setAttribute("value",""+e):t.validity&&!t.validity.badInput&&t.ownerDocument.activeElement!==t&&t.setAttribute("value",""+e)}}};t.exports=c},function(t,e,n){"use strict";var r=n(47),o={processChildrenUpdates:n(139).dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup};t.exports=o},function(t,e,n){"use strict";var r=n(4),o=n(24),i=n(8),a=n(136),u=n(14),s=(n(2),{dangerouslyReplaceNodeWithMarkup:function(t,e){if(i.canUseDOM||r("56"),e||r("57"),"HTML"===t.nodeName&&r("58"),"string"==typeof e){var n=a(e,u)[0];t.parentNode.replaceChild(n,t)}else o.replaceChildWithTree(t,e)}});t.exports=s},function(t,e,n){"use strict";var r=n(8),o=n(137),i=n(138),a=n(2),u=r.canUseDOM?document.createElement("div"):null,s=/^\s*<(\w+)/;t.exports=function(t,e){var n=u;u||a(!1);var r=function(t){var e=t.match(s);return e&&e[1].toLowerCase()}(t),c=r&&i(r);if(c){n.innerHTML=c[1]+t+c[2];for(var l=c[0];l--;)n=n.lastChild}else n.innerHTML=t;var f=n.getElementsByTagName("script");f.length&&(e||a(!1),o(f).forEach(e));for(var d=Array.from(n.childNodes);n.lastChild;)n.removeChild(n.lastChild);return d}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t){return function(t){return!!t&&("object"==typeof t||"function"==typeof t)&&"length"in t&&!("setInterval"in t)&&"number"!=typeof t.nodeType&&(Array.isArray(t)||"callee"in t||"item"in t)}(t)?Array.isArray(t)?t.slice():function(t){var e=t.length;if((Array.isArray(t)||"object"!=typeof t&&"function"!=typeof t)&&r(!1),"number"!=typeof e&&r(!1),0===e||e-1 in t||r(!1),"function"==typeof t.callee&&r(!1),t.hasOwnProperty)try{return Array.prototype.slice.call(t)}catch(t){}for(var n=Array(e),o=0;o<e;o++)n[o]=t[o];return n}(t):[t]}},function(t,e,n){"use strict";var r=n(8),o=n(2),i=r.canUseDOM?document.createElement("div"):null,a={},u=[1,'<select multiple="true">',"</select>"],s=[1,"<table>","</table>"],c=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],f={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:s,colgroup:s,tbody:s,tfoot:s,thead:s,td:c,th:c};["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"].forEach(function(t){f[t]=l,a[t]=!0}),t.exports=function(t){return i||o(!1),f.hasOwnProperty(t)||(t="*"),a.hasOwnProperty(t)||(i.innerHTML="*"===t?"<link />":"<"+t+"></"+t+">",a[t]=!i.firstChild),a[t]?f[t]:null}},function(t,e,n){"use strict";var r=n(47),o=n(6),i={dangerouslyProcessChildrenUpdates:function(t,e){var n=o.getNodeFromInstance(t);r.processUpdates(n,e)}};t.exports=i},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(141),a=n(142),u=n(24),s=n(48),c=n(22),l=n(78),f=n(29),d=n(41),h=n(38),p=n(66),y=n(6),g=n(152),v=n(154),m=n(79),b=n(155),_=(n(10),n(156)),w=n(163),E=(n(14),n(37)),x=(n(2),n(45),n(53),n(72)),k=(n(57),n(5),p),S=f.deleteListener,M=y.getNodeFromInstance,C=h.listenTo,A=d.registrationNameModules,P={string:!0,number:!0},T="__html",N={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},O=11;function D(t,e){e&&(q[t._tag]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&r("137",t._tag,t._currentElement._owner?" Check the render method of "+t._currentElement._owner.getName()+".":""),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&r("60"),"object"==typeof e.dangerouslySetInnerHTML&&T in e.dangerouslySetInnerHTML||r("61")),null!=e.style&&"object"!=typeof e.style&&r("62",function(t){if(t){var e=t._currentElement._owner||null;if(e){var n=e.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}(t)))}function R(t,e,n,r){if(!(r instanceof w)){0;var o=t._hostContainerInfo,i=o._node&&o._node.nodeType===O?o._node:o._ownerDocument;C(e,i),r.getReactMountReady().enqueue(I,{inst:t,registrationName:e,listener:n})}}function I(){f.putListener(this.inst,this.registrationName,this.listener)}function L(){g.postMountWrapper(this)}function F(){b.postMountWrapper(this)}function B(){v.postMountWrapper(this)}var U={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function j(){x.track(this)}function z(){this._rootNodeID||r("63");var t=M(this);switch(t||r("64"),this._tag){case"iframe":case"object":this._wrapperState.listeners=[h.trapBubbledEvent("topLoad","load",t)];break;case"video":case"audio":for(var e in this._wrapperState.listeners=[],U)U.hasOwnProperty(e)&&this._wrapperState.listeners.push(h.trapBubbledEvent(e,U[e],t));break;case"source":this._wrapperState.listeners=[h.trapBubbledEvent("topError","error",t)];break;case"img":this._wrapperState.listeners=[h.trapBubbledEvent("topError","error",t),h.trapBubbledEvent("topLoad","load",t)];break;case"form":this._wrapperState.listeners=[h.trapBubbledEvent("topReset","reset",t),h.trapBubbledEvent("topSubmit","submit",t)];break;case"input":case"select":case"textarea":this._wrapperState.listeners=[h.trapBubbledEvent("topInvalid","invalid",t)]}}function V(){m.postUpdateWrapper(this)}var W={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Y={listing:!0,pre:!0,textarea:!0},q=o({menuitem:!0},W),H=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,G={},X={}.hasOwnProperty;function K(t,e){return t.indexOf("-")>=0||null!=e.is}var $=1;function Q(t){var e=t.type;!function(t){X.call(G,t)||(H.test(t)||r("65",t),G[t]=!0)}(e),this._currentElement=t,this._tag=e.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=0,this._domID=0,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0}Q.displayName="ReactDOMComponent",Q.Mixin={mountComponent:function(t,e,n,r){this._rootNodeID=$++,this._domID=n._idCounter++,this._hostParent=e,this._hostContainerInfo=n;var o,a,c,f=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(z,this);break;case"input":g.mountWrapper(this,f,e),f=g.getHostProps(this,f),t.getReactMountReady().enqueue(j,this),t.getReactMountReady().enqueue(z,this);break;case"option":v.mountWrapper(this,f,e),f=v.getHostProps(this,f);break;case"select":m.mountWrapper(this,f,e),f=m.getHostProps(this,f),t.getReactMountReady().enqueue(z,this);break;case"textarea":b.mountWrapper(this,f,e),f=b.getHostProps(this,f),t.getReactMountReady().enqueue(j,this),t.getReactMountReady().enqueue(z,this)}if(D(this,f),null!=e?(o=e._namespaceURI,a=e._tag):n._tag&&(o=n._namespaceURI,a=n._tag),(null==o||o===s.svg&&"foreignobject"===a)&&(o=s.html),o===s.html&&("svg"===this._tag?o=s.svg:"math"===this._tag&&(o=s.mathml)),this._namespaceURI=o,t.useCreateElement){var d,h=n._ownerDocument;if(o===s.html)if("script"===this._tag){var p=h.createElement("div"),_=this._currentElement.type;p.innerHTML="<"+_+"></"+_+">",d=p.removeChild(p.firstChild)}else d=f.is?h.createElement(this._currentElement.type,f.is):h.createElement(this._currentElement.type);else d=h.createElementNS(o,this._currentElement.type);y.precacheNode(this,d),this._flags|=k.hasCachedChildNodes,this._hostParent||l.setAttributeForRoot(d),this._updateDOMProperties(null,f,t);var w=u(d);this._createInitialChildren(t,f,r,w),c=w}else{var E=this._createOpenTagMarkupAndPutListeners(t,f),x=this._createContentMarkup(t,f,r);c=!x&&W[this._tag]?E+"/>":E+">"+x+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(L,this),f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"textarea":t.getReactMountReady().enqueue(F,this),f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"select":case"button":f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"option":t.getReactMountReady().enqueue(B,this)}return c},_createOpenTagMarkupAndPutListeners:function(t,e){var n="<"+this._currentElement.type;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if(null!=i)if(A.hasOwnProperty(r))i&&R(this,r,i,t);else{"style"===r&&(i&&(i=this._previousStyleCopy=o({},e.style)),i=a.createMarkupForStyles(i,this));var u=null;null!=this._tag&&K(this._tag,e)?N.hasOwnProperty(r)||(u=l.createMarkupForCustomAttribute(r,i)):u=l.createMarkupForProperty(r,i),u&&(n+=" "+u)}}return t.renderToStaticMarkup?n:(this._hostParent||(n+=" "+l.createMarkupForRoot()),n+=" "+l.createMarkupForID(this._domID))},_createContentMarkup:function(t,e,n){var r="",o=e.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&(r=o.__html);else{var i=P[typeof e.children]?e.children:null,a=null!=i?null:e.children;if(null!=i)r=E(i);else if(null!=a){r=this.mountChildren(a,t,n).join("")}}return Y[this._tag]&&"\n"===r.charAt(0)?"\n"+r:r},_createInitialChildren:function(t,e,n,r){var o=e.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&u.queueHTML(r,o.__html);else{var i=P[typeof e.children]?e.children:null,a=null!=i?null:e.children;if(null!=i)""!==i&&u.queueText(r,i);else if(null!=a)for(var s=this.mountChildren(a,t,n),c=0;c<s.length;c++)u.queueChild(r,s[c])}},receiveComponent:function(t,e,n){var r=this._currentElement;this._currentElement=t,this.updateComponent(e,r,t,n)},updateComponent:function(t,e,n,r){var o=e.props,i=this._currentElement.props;switch(this._tag){case"input":o=g.getHostProps(this,o),i=g.getHostProps(this,i);break;case"option":o=v.getHostProps(this,o),i=v.getHostProps(this,i);break;case"select":o=m.getHostProps(this,o),i=m.getHostProps(this,i);break;case"textarea":o=b.getHostProps(this,o),i=b.getHostProps(this,i)}switch(D(this,i),this._updateDOMProperties(o,i,t),this._updateDOMChildren(o,i,t,r),this._tag){case"input":g.updateWrapper(this);break;case"textarea":b.updateWrapper(this);break;case"select":t.getReactMountReady().enqueue(V,this)}},_updateDOMProperties:function(t,e,n){var r,i,u;for(r in t)if(!e.hasOwnProperty(r)&&t.hasOwnProperty(r)&&null!=t[r])if("style"===r){var s=this._previousStyleCopy;for(i in s)s.hasOwnProperty(i)&&((u=u||{})[i]="");this._previousStyleCopy=null}else A.hasOwnProperty(r)?t[r]&&S(this,r):K(this._tag,t)?N.hasOwnProperty(r)||l.deleteValueForAttribute(M(this),r):(c.properties[r]||c.isCustomAttribute(r))&&l.deleteValueForProperty(M(this),r);for(r in e){var f=e[r],d="style"===r?this._previousStyleCopy:null!=t?t[r]:void 0;if(e.hasOwnProperty(r)&&f!==d&&(null!=f||null!=d))if("style"===r)if(f?f=this._previousStyleCopy=o({},f):this._previousStyleCopy=null,d){for(i in d)!d.hasOwnProperty(i)||f&&f.hasOwnProperty(i)||((u=u||{})[i]="");for(i in f)f.hasOwnProperty(i)&&d[i]!==f[i]&&((u=u||{})[i]=f[i])}else u=f;else if(A.hasOwnProperty(r))f?R(this,r,f,n):d&&S(this,r);else if(K(this._tag,e))N.hasOwnProperty(r)||l.setValueForAttribute(M(this),r,f);else if(c.properties[r]||c.isCustomAttribute(r)){var h=M(this);null!=f?l.setValueForProperty(h,r,f):l.deleteValueForProperty(h,r)}}u&&a.setValueForStyles(M(this),u,this)},_updateDOMChildren:function(t,e,n,r){var o=P[typeof t.children]?t.children:null,i=P[typeof e.children]?e.children:null,a=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,u=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=null!=o?null:t.children,c=null!=i?null:e.children,l=null!=o||null!=a,f=null!=i||null!=u;null!=s&&null==c?this.updateChildren(null,n,r):l&&!f&&this.updateTextContent(""),null!=i?o!==i&&this.updateTextContent(""+i):null!=u?a!==u&&this.updateMarkup(""+u):null!=c&&this.updateChildren(c,n,r)},getHostNode:function(){return M(this)},unmountComponent:function(t){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var e=this._wrapperState.listeners;if(e)for(var n=0;n<e.length;n++)e[n].remove();break;case"input":case"textarea":x.stopTracking(this);break;case"html":case"head":case"body":r("66",this._tag)}this.unmountChildren(t),y.uncacheNode(this),f.deleteAllListeners(this),this._rootNodeID=0,this._domID=0,this._wrapperState=null},getPublicInstance:function(){return M(this)}},o(Q.prototype,Q.Mixin,_.Mixin),t.exports=Q},function(t,e,n){"use strict";var r=n(6),o=n(76),i={focusDOMComponent:function(){o(r.getNodeFromInstance(this))}};t.exports=i},function(t,e,n){"use strict";var r=n(77),o=n(8),i=(n(10),n(143),n(145)),a=n(146),u=n(148),s=(n(5),u(function(t){return a(t)})),c=!1,l="cssFloat";if(o.canUseDOM){var f=document.createElement("div").style;try{f.font=""}catch(t){c=!0}void 0===document.documentElement.style.cssFloat&&(l="styleFloat")}var d={createMarkupForStyles:function(t,e){var n="";for(var r in t)if(t.hasOwnProperty(r)){var o=0===r.indexOf("--"),a=t[r];0,null!=a&&(n+=s(r)+":",n+=i(r,a,e,o)+";")}return n||null},setValueForStyles:function(t,e,n){var o=t.style;for(var a in e)if(e.hasOwnProperty(a)){var u=0===a.indexOf("--");0;var s=i(a,e[a],n,u);if("float"!==a&&"cssFloat"!==a||(a=l),u)o.setProperty(a,s);else if(s)o[a]=s;else{var f=c&&r.shorthandPropertyExpansions[a];if(f)for(var d in f)o[d]="";else o[a]=""}}}};t.exports=d},function(t,e,n){"use strict";var r=n(144),o=/^-ms-/;t.exports=function(t){return r(t.replace(o,"ms-"))}},function(t,e,n){"use strict";var r=/-(.)/g;t.exports=function(t){return t.replace(r,function(t,e){return e.toUpperCase()})}},function(t,e,n){"use strict";var r=n(77),o=(n(5),r.isUnitlessNumber);t.exports=function(t,e,n,r){if(null==e||"boolean"==typeof e||""===e)return"";var i=isNaN(e);return r||i||0===e||o.hasOwnProperty(t)&&o[t]?""+e:("string"==typeof e&&(e=e.trim()),e+"px")}},function(t,e,n){"use strict";var r=n(147),o=/^ms-/;t.exports=function(t){return r(t).replace(o,"-ms-")}},function(t,e,n){"use strict";var r=/([A-Z])/g;t.exports=function(t){return t.replace(r,"-$1").toLowerCase()}},function(t,e,n){"use strict";t.exports=function(t){var e={};return function(n){return e.hasOwnProperty(n)||(e[n]=t.call(this,n)),e[n]}}},function(t,e,n){"use strict";var r=n(37);t.exports=function(t){return'"'+r(t)+'"'}},function(t,e,n){"use strict";var r=n(29);var o={handleTopLevel:function(t,e,n,o){!function(t){r.enqueueEvents(t),r.processEventQueue(!1)}(r.extractEvents(t,e,n,o))}};t.exports=o},function(t,e,n){"use strict";var r=n(8);function o(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}var i={animationend:o("Animation","AnimationEnd"),animationiteration:o("Animation","AnimationIteration"),animationstart:o("Animation","AnimationStart"),transitionend:o("Transition","TransitionEnd")},a={},u={};r.canUseDOM&&(u=document.createElement("div").style,"AnimationEvent"in window||(delete i.animationend.animation,delete i.animationiteration.animation,delete i.animationstart.animation),"TransitionEvent"in window||delete i.transitionend.transition),t.exports=function(t){if(a[t])return a[t];if(!i[t])return t;var e=i[t];for(var n in e)if(e.hasOwnProperty(n)&&n in u)return a[t]=e[n];return""}},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(78),a=n(50),u=n(6),s=n(12);n(2),n(5);function c(){this._rootNodeID&&l.updateWrapper(this)}var l={getHostProps:function(t,e){var n=a.getValue(e),r=a.getChecked(e);return o({type:void 0,step:void 0,min:void 0,max:void 0},e,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:t._wrapperState.initialValue,checked:null!=r?r:t._wrapperState.initialChecked,onChange:t._wrapperState.onChange})},mountWrapper:function(t,e){var n=e.defaultValue;t._wrapperState={initialChecked:null!=e.checked?e.checked:e.defaultChecked,initialValue:null!=e.value?e.value:n,listeners:null,onChange:function(t){var e=this._currentElement.props,n=a.executeOnChange(e,t);s.asap(c,this);var o=e.name;if("radio"===e.type&&null!=o){for(var i=u.getNodeFromInstance(this),l=i;l.parentNode;)l=l.parentNode;for(var f=l.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),d=0;d<f.length;d++){var h=f[d];if(h!==i&&h.form===i.form){var p=u.getInstanceFromNode(h);p||r("90"),s.asap(c,p)}}}return n}.bind(t),controlled:function(t){return"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}(e)}},updateWrapper:function(t){var e=t._currentElement.props,n=e.checked;null!=n&&i.setValueForProperty(u.getNodeFromInstance(t),"checked",n||!1);var r=u.getNodeFromInstance(t),o=a.getValue(e);if(null!=o)if(0===o&&""===r.value)r.value="0";else if("number"===e.type){var s=parseFloat(r.value,10)||0;(o!=s||o==s&&r.value!=o)&&(r.value=""+o)}else r.value!==""+o&&(r.value=""+o);else null==e.value&&null!=e.defaultValue&&r.defaultValue!==""+e.defaultValue&&(r.defaultValue=""+e.defaultValue),null==e.checked&&null!=e.defaultChecked&&(r.defaultChecked=!!e.defaultChecked)},postMountWrapper:function(t){var e=t._currentElement.props,n=u.getNodeFromInstance(t);switch(e.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}var r=n.name;""!==r&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==r&&(n.name=r)}};t.exports=l},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var r=n(7),o=n(20),i=n(6),a=n(79),u=(n(5),!1);function s(t){var e="";return o.Children.forEach(t,function(t){null!=t&&("string"==typeof t||"number"==typeof t?e+=t:u||(u=!0))}),e}var c={mountWrapper:function(t,e,n){var r=null;if(null!=n){var o=n;"optgroup"===o._tag&&(o=o._hostParent),null!=o&&"select"===o._tag&&(r=a.getSelectValueContext(o))}var i,u=null;if(null!=r)if(i=null!=e.value?e.value+"":s(e.children),u=!1,Array.isArray(r)){for(var c=0;c<r.length;c++)if(""+r[c]===i){u=!0;break}}else u=""+r===i;t._wrapperState={selected:u}},postMountWrapper:function(t){var e=t._currentElement.props;null!=e.value&&i.getNodeFromInstance(t).setAttribute("value",e.value)},getHostProps:function(t,e){var n=r({selected:void 0,children:void 0},e);null!=t._wrapperState.selected&&(n.selected=t._wrapperState.selected);var o=s(e.children);return o&&(n.children=o),n}};t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(50),a=n(6),u=n(12);n(2),n(5);function s(){this._rootNodeID&&c.updateWrapper(this)}var c={getHostProps:function(t,e){return null!=e.dangerouslySetInnerHTML&&r("91"),o({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue,onChange:t._wrapperState.onChange})},mountWrapper:function(t,e){var n=i.getValue(e),o=n;if(null==n){var a=e.defaultValue,c=e.children;null!=c&&(null!=a&&r("92"),Array.isArray(c)&&(c.length<=1||r("93"),c=c[0]),a=""+c),null==a&&(a=""),o=a}t._wrapperState={initialValue:""+o,listeners:null,onChange:function(t){var e=this._currentElement.props,n=i.executeOnChange(e,t);return u.asap(s,this),n}.bind(t)}},updateWrapper:function(t){var e=t._currentElement.props,n=a.getNodeFromInstance(t),r=i.getValue(e);if(null!=r){var o=""+r;o!==n.value&&(n.value=o),null==e.defaultValue&&(n.defaultValue=o)}null!=e.defaultValue&&(n.defaultValue=e.defaultValue)},postMountWrapper:function(t){var e=a.getNodeFromInstance(t),n=e.textContent;n===t._wrapperState.initialValue&&(e.value=n)}};t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(51),i=(n(31),n(10),n(13),n(23)),a=n(157),u=(n(14),n(162));n(2);function s(t,e){return e&&(t=t||[]).push(e),t}function c(t,e){o.processChildrenUpdates(t,e)}var l={Mixin:{_reconcilerInstantiateChildren:function(t,e,n){return a.instantiateChildren(t,e,n)},_reconcilerUpdateChildren:function(t,e,n,r,o,i){var s;return s=u(e,0),a.updateChildren(t,s,n,r,o,this,this._hostContainerInfo,i,0),s},mountChildren:function(t,e,n){var r=this._reconcilerInstantiateChildren(t,e,n);this._renderedChildren=r;var o=[],a=0;for(var u in r)if(r.hasOwnProperty(u)){var s=r[u];0;var c=i.mountComponent(s,e,this,this._hostContainerInfo,n,0);s._mountIndex=a++,o.push(c)}return o},updateTextContent:function(t){var e=this._renderedChildren;for(var n in a.unmountChildren(e,!1),e)e.hasOwnProperty(n)&&r("118");c(this,[function(t){return{type:"TEXT_CONTENT",content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}(t)])},updateMarkup:function(t){var e=this._renderedChildren;for(var n in a.unmountChildren(e,!1),e)e.hasOwnProperty(n)&&r("118");c(this,[function(t){return{type:"SET_MARKUP",content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}(t)])},updateChildren:function(t,e,n){this._updateChildren(t,e,n)},_updateChildren:function(t,e,n){var r=this._renderedChildren,o={},a=[],u=this._reconcilerUpdateChildren(r,t,a,o,e,n);if(u||r){var l,f=null,d=0,h=0,p=0,y=null;for(l in u)if(u.hasOwnProperty(l)){var g=r&&r[l],v=u[l];g===v?(f=s(f,this.moveChild(g,y,d,h)),h=Math.max(g._mountIndex,h),g._mountIndex=d):(g&&(h=Math.max(g._mountIndex,h)),f=s(f,this._mountChildAtIndex(v,a[p],y,d,e,n)),p++),d++,y=i.getHostNode(v)}for(l in o)o.hasOwnProperty(l)&&(f=s(f,this._unmountChild(r[l],o[l])));f&&c(this,f),this._renderedChildren=u}},unmountChildren:function(t){var e=this._renderedChildren;a.unmountChildren(e,t),this._renderedChildren=null},moveChild:function(t,e,n,r){if(t._mountIndex<r)return function(t,e,n){return{type:"MOVE_EXISTING",content:null,fromIndex:t._mountIndex,fromNode:i.getHostNode(t),toIndex:n,afterNode:e}}(t,e,n)},createChild:function(t,e,n){return function(t,e,n){return{type:"INSERT_MARKUP",content:t,fromIndex:null,fromNode:null,toIndex:n,afterNode:e}}(n,e,t._mountIndex)},removeChild:function(t,e){return function(t,e){return{type:"REMOVE_NODE",content:null,fromIndex:t._mountIndex,fromNode:e,toIndex:null,afterNode:null}}(t,e)},_mountChildAtIndex:function(t,e,n,r,o,i){return t._mountIndex=r,this.createChild(t,n,e)},_unmountChild:function(t,e){var n=this.removeChild(t,e);return t._mountIndex=null,n}}};t.exports=l},function(t,e,n){"use strict";(function(e){var r=n(23),o=n(80),i=(n(55),n(54)),a=n(85);n(5);function u(t,e,n,r){var i=void 0===t[n];null!=e&&i&&(t[n]=o(e,!0))}void 0!==e&&e.env;var s={instantiateChildren:function(t,e,n,r){if(null==t)return null;var o={};return a(t,u,o),o},updateChildren:function(t,e,n,a,u,s,c,l,f){if(e||t){var d,h;for(d in e)if(e.hasOwnProperty(d)){var p=(h=t&&t[d])&&h._currentElement,y=e[d];if(null!=h&&i(p,y))r.receiveComponent(h,y,u,l),e[d]=h;else{h&&(a[d]=r.getHostNode(h),r.unmountComponent(h,!1));var g=o(y,!0);e[d]=g;var v=r.mountComponent(g,u,s,c,l,f);n.push(v)}}for(d in t)!t.hasOwnProperty(d)||e&&e.hasOwnProperty(d)||(h=t[d],a[d]=r.getHostNode(h),r.unmountComponent(h,!1))}},unmountChildren:function(t,e){for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];r.unmountComponent(o,e)}}};t.exports=s}).call(this,n(52))},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(20),a=n(51),u=n(13),s=n(43),c=n(31),l=(n(10),n(81)),f=n(23),d=n(82),h=(n(2),n(53)),p=n(54),y=(n(5),0),g=1,v=2;function m(t){}function b(t,e){0}m.prototype.render=function(){var t=c.get(this)._currentElement.type,e=t(this.props,this.context,this.updater);return b(t,e),e};var _=1,w={construct:function(t){this._currentElement=t,this._rootNodeID=0,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1},mountComponent:function(t,e,n,o){this._context=o,this._mountOrder=_++,this._hostParent=e,this._hostContainerInfo=n;var a,u=this._currentElement.props,s=this._processContext(o),l=this._currentElement.type,f=t.getUpdateQueue(),h=function(t){return!(!t.prototype||!t.prototype.isReactComponent)}(l),p=this._constructComponent(h,u,s,f);h||null!=p&&null!=p.render?!function(t){return!(!t.prototype||!t.prototype.isPureReactComponent)}(l)?this._compositeType=y:this._compositeType=g:(a=p,b(),null===p||!1===p||i.isValidElement(p)||r("105",l.displayName||l.name||"Component"),p=new m(l),this._compositeType=v),p.props=u,p.context=s,p.refs=d,p.updater=f,this._instance=p,c.set(p,this);var w,E=p.state;return void 0===E&&(p.state=E=null),("object"!=typeof E||Array.isArray(E))&&r("106",this.getName()||"ReactCompositeComponent"),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,w=p.unstable_handleError?this.performInitialMountWithErrorHandling(a,e,n,t,o):this.performInitialMount(a,e,n,t,o),p.componentDidMount&&t.getReactMountReady().enqueue(p.componentDidMount,p),w},_constructComponent:function(t,e,n,r){return this._constructComponentWithoutOwner(t,e,n,r)},_constructComponentWithoutOwner:function(t,e,n,r){var o=this._currentElement.type;return t?new o(e,n,r):o(e,n,r)},performInitialMountWithErrorHandling:function(t,e,n,r,o){var i,a=r.checkpoint();try{i=this.performInitialMount(t,e,n,r,o)}catch(u){r.rollback(a),this._instance.unstable_handleError(u),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),a=r.checkpoint(),this._renderedComponent.unmountComponent(!0),r.rollback(a),i=this.performInitialMount(t,e,n,r,o)}return i},performInitialMount:function(t,e,n,r,o){var i=this._instance;i.componentWillMount&&(i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===t&&(t=this._renderValidatedComponent());var a=l.getType(t);this._renderedNodeType=a;var u=this._instantiateReactComponent(t,a!==l.EMPTY);return this._renderedComponent=u,f.mountComponent(u,r,e,n,this._processChildContext(o),0)},getHostNode:function(){return f.getHostNode(this._renderedComponent)},unmountComponent:function(t){if(this._renderedComponent){var e=this._instance;if(e.componentWillUnmount&&!e._calledComponentWillUnmount)if(e._calledComponentWillUnmount=!0,t){var n=this.getName()+".componentWillUnmount()";s.invokeGuardedCallback(n,e.componentWillUnmount.bind(e))}else e.componentWillUnmount();this._renderedComponent&&(f.unmountComponent(this._renderedComponent,t),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=0,this._topLevelWrapper=null,c.remove(e)}},_maskContext:function(t){var e=this._currentElement.type.contextTypes;if(!e)return d;var n={};for(var r in e)n[r]=t[r];return n},_processContext:function(t){return this._maskContext(t)},_processChildContext:function(t){var e,n=this._currentElement.type,i=this._instance;if(i.getChildContext&&(e=i.getChildContext()),e){for(var a in"object"!=typeof n.childContextTypes&&r("107",this.getName()||"ReactCompositeComponent"),e)a in n.childContextTypes||r("108",this.getName()||"ReactCompositeComponent",a);return o({},t,e)}return t},_checkContextTypes:function(t,e,n){0},receiveComponent:function(t,e,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(e,r,t,o,n)},performUpdateIfNecessary:function(t){null!=this._pendingElement?f.receiveComponent(this,this._pendingElement,t,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(t,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(t,e,n,o,i){var a=this._instance;null==a&&r("136",this.getName()||"ReactCompositeComponent");var u,s=!1;this._context===i?u=a.context:(u=this._processContext(i),s=!0);var c=e.props,l=n.props;e!==n&&(s=!0),s&&a.componentWillReceiveProps&&a.componentWillReceiveProps(l,u);var f=this._processPendingState(l,u),d=!0;this._pendingForceUpdate||(a.shouldComponentUpdate?d=a.shouldComponentUpdate(l,f,u):this._compositeType===g&&(d=!h(c,l)||!h(a.state,f))),this._updateBatchNumber=null,d?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,l,f,u,t,i)):(this._currentElement=n,this._context=i,a.props=l,a.state=f,a.context=u)},_processPendingState:function(t,e){var n=this._instance,r=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(i&&1===r.length)return r[0];for(var a=o({},i?r[0]:n.state),u=i?1:0;u<r.length;u++){var s=r[u];o(a,"function"==typeof s?s.call(n,a,t,e):s)}return a},_performComponentUpdate:function(t,e,n,r,o,i){var a,u,s,c=this._instance,l=Boolean(c.componentDidUpdate);l&&(a=c.props,u=c.state,s=c.context),c.componentWillUpdate&&c.componentWillUpdate(e,n,r),this._currentElement=t,this._context=i,c.props=e,c.state=n,c.context=r,this._updateRenderedComponent(o,i),l&&o.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,u,s),c)},_updateRenderedComponent:function(t,e){var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(p(r,o))f.receiveComponent(n,o,t,this._processChildContext(e));else{var i=f.getHostNode(n);f.unmountComponent(n,!1);var a=l.getType(o);this._renderedNodeType=a;var u=this._instantiateReactComponent(o,a!==l.EMPTY);this._renderedComponent=u;var s=f.mountComponent(u,t,this._hostParent,this._hostContainerInfo,this._processChildContext(e),0);this._replaceNodeWithMarkup(i,s,n)}},_replaceNodeWithMarkup:function(t,e,n){a.replaceNodeWithMarkup(t,e,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){return this._instance.render()},_renderValidatedComponent:function(){var t;if(this._compositeType!==v){u.current=this;try{t=this._renderValidatedComponentWithoutOwnerOrContext()}finally{u.current=null}}else t=this._renderValidatedComponentWithoutOwnerOrContext();return null===t||!1===t||i.isValidElement(t)||r("109",this.getName()||"ReactCompositeComponent"),t},attachRef:function(t,e){var n=this.getPublicInstance();null==n&&r("110");var o=e.getPublicInstance();(n.refs===d?n.refs={}:n.refs)[t]=o},detachRef:function(t){delete this.getPublicInstance().refs[t]},getName:function(){var t=this._currentElement.type,e=this._instance&&this._instance.constructor;return t.displayName||e&&e.displayName||t.name||e&&e.name||null},getPublicInstance:function(){var t=this._instance;return this._compositeType===v?null:t},_instantiateReactComponent:null};t.exports=w},function(t,e,n){"use strict";var r=1;t.exports=function(){return r++}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;t.exports=r},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";t.exports=function(t){var e=t&&(r&&t[r]||t[o]);if("function"==typeof e)return e}},function(t,e,n){"use strict";(function(e){n(55);var r=n(85);n(5);function o(t,e,n,r){if(t&&"object"==typeof t){var o=t;0,void 0===o[n]&&null!=e&&(o[n]=e)}}void 0!==e&&e.env,t.exports=function(t,e){if(null==t)return t;var n={};return r(t,o,n),n}}).call(this,n(52))},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(34),a=(n(10),n(164)),u=[];var s={enqueue:function(){}};function c(t){this.reinitializeTransaction(),this.renderToStaticMarkup=t,this.useCreateElement=!1,this.updateQueue=new a(this)}var l={getTransactionWrappers:function(){return u},getReactMountReady:function(){return s},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};r(c.prototype,i,l),o.addPoolingTo(c),t.exports=c},function(t,e,n){"use strict";var r=n(56);n(5);var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.transaction=e}return t.prototype.isMounted=function(t){return!1},t.prototype.enqueueCallback=function(t,e,n){this.transaction.isInTransaction()&&r.enqueueCallback(t,e,n)},t.prototype.enqueueForceUpdate=function(t){this.transaction.isInTransaction()&&r.enqueueForceUpdate(t)},t.prototype.enqueueReplaceState=function(t,e){this.transaction.isInTransaction()&&r.enqueueReplaceState(t,e)},t.prototype.enqueueSetState=function(t,e){this.transaction.isInTransaction()&&r.enqueueSetState(t,e)},t}();t.exports=o},function(t,e,n){"use strict";var r=n(7),o=n(24),i=n(6),a=function(t){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=0};r(a.prototype,{mountComponent:function(t,e,n,r){var a=n._idCounter++;this._domID=a,this._hostParent=e,this._hostContainerInfo=n;var u=" react-empty: "+this._domID+" ";if(t.useCreateElement){var s=n._ownerDocument.createComment(u);return i.precacheNode(this,s),o(s)}return t.renderToStaticMarkup?"":"\x3c!--"+u+"--\x3e"},receiveComponent:function(){},getHostNode:function(){return i.getNodeFromInstance(this)},unmountComponent:function(){i.uncacheNode(this)}}),t.exports=a},function(t,e,n){"use strict";var r=n(4);n(2);function o(t,e){"_hostNode"in t||r("33"),"_hostNode"in e||r("33");for(var n=0,o=t;o;o=o._hostParent)n++;for(var i=0,a=e;a;a=a._hostParent)i++;for(;n-i>0;)t=t._hostParent,n--;for(;i-n>0;)e=e._hostParent,i--;for(var u=n;u--;){if(t===e)return t;t=t._hostParent,e=e._hostParent}return null}t.exports={isAncestor:function(t,e){"_hostNode"in t||r("35"),"_hostNode"in e||r("35");for(;e;){if(e===t)return!0;e=e._hostParent}return!1},getLowestCommonAncestor:o,getParentInstance:function(t){return"_hostNode"in t||r("36"),t._hostParent},traverseTwoPhase:function(t,e,n){for(var r,o=[];t;)o.push(t),t=t._hostParent;for(r=o.length;r-- >0;)e(o[r],"captured",n);for(r=0;r<o.length;r++)e(o[r],"bubbled",n)},traverseEnterLeave:function(t,e,n,r,i){for(var a=t&&e?o(t,e):null,u=[];t&&t!==a;)u.push(t),t=t._hostParent;for(var s,c=[];e&&e!==a;)c.push(e),e=e._hostParent;for(s=0;s<u.length;s++)n(u[s],"bubbled",r);for(s=c.length;s-- >0;)n(c[s],"captured",i)}}},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(47),a=n(24),u=n(6),s=n(37),c=(n(2),n(57),function(t){this._currentElement=t,this._stringText=""+t,this._hostNode=null,this._hostParent=null,this._domID=0,this._mountIndex=0,this._closingComment=null,this._commentNodes=null});o(c.prototype,{mountComponent:function(t,e,n,r){var o=n._idCounter++,i=" react-text: "+o+" ";if(this._domID=o,this._hostParent=e,t.useCreateElement){var c=n._ownerDocument,l=c.createComment(i),f=c.createComment(" /react-text "),d=a(c.createDocumentFragment());return a.queueChild(d,a(l)),this._stringText&&a.queueChild(d,a(c.createTextNode(this._stringText))),a.queueChild(d,a(f)),u.precacheNode(this,l),this._closingComment=f,d}var h=s(this._stringText);return t.renderToStaticMarkup?h:"\x3c!--"+i+"--\x3e"+h+"\x3c!-- /react-text --\x3e"},receiveComponent:function(t,e){if(t!==this._currentElement){this._currentElement=t;var n=""+t;if(n!==this._stringText){this._stringText=n;var r=this.getHostNode();i.replaceDelimitedText(r[0],r[1],n)}}},getHostNode:function(){var t=this._commentNodes;if(t)return t;if(!this._closingComment)for(var e=u.getNodeFromInstance(this).nextSibling;;){if(null==e&&r("67",this._domID),8===e.nodeType&&" /react-text "===e.nodeValue){this._closingComment=e;break}e=e.nextSibling}return t=[this._hostNode,this._closingComment],this._commentNodes=t,t},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,u.uncacheNode(this)}}),t.exports=c},function(t,e,n){"use strict";var r=n(7),o=n(12),i=n(34),a=n(14),u={initialize:a,close:function(){f.isBatchingUpdates=!1}},s=[{initialize:a,close:o.flushBatchedUpdates.bind(o)},u];function c(){this.reinitializeTransaction()}r(c.prototype,i,{getTransactionWrappers:function(){return s}});var l=new c,f={isBatchingUpdates:!1,batchedUpdates:function(t,e,n,r,o,i){var a=f.isBatchingUpdates;return f.isBatchingUpdates=!0,a?t(e,n,r,o,i):l.perform(t,null,e,n,r,o,i)}};t.exports=f},function(t,e,n){"use strict";var r=n(7),o=n(87),i=n(8),a=n(18),u=n(6),s=n(12),c=n(44),l=n(170);function f(t){for(;t._hostParent;)t=t._hostParent;var e=u.getNodeFromInstance(t).parentNode;return u.getClosestInstanceFromNode(e)}function d(t,e){this.topLevelType=t,this.nativeEvent=e,this.ancestors=[]}function h(t){var e=c(t.nativeEvent),n=u.getClosestInstanceFromNode(e),r=n;do{t.ancestors.push(r),r=r&&f(r)}while(r);for(var o=0;o<t.ancestors.length;o++)n=t.ancestors[o],p._handleTopLevel(t.topLevelType,n,t.nativeEvent,c(t.nativeEvent))}r(d.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),a.addPoolingTo(d,a.twoArgumentPooler);var p={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:i.canUseDOM?window:null,setHandleTopLevel:function(t){p._handleTopLevel=t},setEnabled:function(t){p._enabled=!!t},isEnabled:function(){return p._enabled},trapBubbledEvent:function(t,e,n){return n?o.listen(n,e,p.dispatchEvent.bind(null,t)):null},trapCapturedEvent:function(t,e,n){return n?o.capture(n,e,p.dispatchEvent.bind(null,t)):null},monitorScrollValue:function(t){var e=function(t){t(l(window))}.bind(null,t);o.listen(window,"scroll",e)},dispatchEvent:function(t,e){if(p._enabled){var n=d.getPooled(t,e);try{s.batchedUpdates(h,n)}finally{d.release(n)}}}};t.exports=p},function(t,e,n){"use strict";t.exports=function(t){return t.Window&&t instanceof t.Window?{x:t.pageXOffset||t.document.documentElement.scrollLeft,y:t.pageYOffset||t.document.documentElement.scrollTop}:{x:t.scrollLeft,y:t.scrollTop}}},function(t,e,n){"use strict";var r=n(22),o=n(29),i=n(42),a=n(51),u=n(83),s=n(38),c=n(84),l=n(12),f={Component:a.injection,DOMProperty:r.injection,EmptyComponent:u.injection,EventPluginHub:o.injection,EventPluginUtils:i.injection,EventEmitter:s.injection,HostComponent:c.injection,Updates:l.injection};t.exports=f},function(t,e,n){"use strict";var r=n(7),o=n(70),i=n(18),a=n(38),u=n(88),s=(n(10),n(34)),c=n(56),l=[{initialize:u.getSelectionInformation,close:u.restoreSelection},{initialize:function(){var t=a.isEnabled();return a.setEnabled(!1),t},close:function(t){a.setEnabled(t)}},{initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}}];function f(t){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.useCreateElement=t}var d={getTransactionWrappers:function(){return l},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return c},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(t){this.reactMountReady.rollback(t)},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null}};r(f.prototype,s,d),i.addPoolingTo(f),t.exports=f},function(t,e,n){"use strict";var r=n(8),o=n(174),i=n(69);function a(t,e,n,r){return t===n&&e===r}var u=r.canUseDOM&&"selection"in document&&!("getSelection"in window),s={getOffsets:u?function(t){var e=document.selection.createRange(),n=e.text.length,r=e.duplicate();r.moveToElementText(t),r.setEndPoint("EndToStart",e);var o=r.text.length;return{start:o,end:o+n}}:function(t){var e=window.getSelection&&window.getSelection();if(!e||0===e.rangeCount)return null;var n=e.anchorNode,r=e.anchorOffset,o=e.focusNode,i=e.focusOffset,u=e.getRangeAt(0);try{u.startContainer.nodeType,u.endContainer.nodeType}catch(t){return null}var s=a(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset)?0:u.toString().length,c=u.cloneRange();c.selectNodeContents(t),c.setEnd(u.startContainer,u.startOffset);var l=a(c.startContainer,c.startOffset,c.endContainer,c.endOffset)?0:c.toString().length,f=l+s,d=document.createRange();d.setStart(n,r),d.setEnd(o,i);var h=d.collapsed;return{start:h?f:l,end:h?l:f}},setOffsets:u?function(t,e){var n,r,o=document.selection.createRange().duplicate();void 0===e.end?r=n=e.start:e.start>e.end?(n=e.end,r=e.start):(n=e.start,r=e.end),o.moveToElementText(t),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}:function(t,e){if(window.getSelection){var n=window.getSelection(),r=t[i()].length,a=Math.min(e.start,r),u=void 0===e.end?a:Math.min(e.end,r);if(!n.extend&&a>u){var s=u;u=a,a=s}var c=o(t,a),l=o(t,u);if(c&&l){var f=document.createRange();f.setStart(c.node,c.offset),n.removeAllRanges(),a>u?(n.addRange(f),n.extend(l.node,l.offset)):(f.setEnd(l.node,l.offset),n.addRange(f))}}}};t.exports=s},function(t,e,n){"use strict";function r(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function o(t){for(;t;){if(t.nextSibling)return t.nextSibling;t=t.parentNode}}t.exports=function(t,e){for(var n=r(t),i=0,a=0;n;){if(3===n.nodeType){if(a=i+n.textContent.length,i<=e&&a>=e)return{node:n,offset:e-i};i=a}n=r(o(n))}}},function(t,e,n){"use strict";var r=n(176);t.exports=function t(e,n){return!(!e||!n)&&(e===n||!r(e)&&(r(n)?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}},function(t,e,n){"use strict";var r=n(177);t.exports=function(t){return r(t)&&3==t.nodeType}},function(t,e,n){"use strict";t.exports=function(t){var e=(t?t.ownerDocument||t:document).defaultView||window;return!(!t||!("function"==typeof e.Node?t instanceof e.Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}},function(t,e,n){"use strict";var r="http://www.w3.org/1999/xlink",o="http://www.w3.org/XML/1998/namespace",i={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},a={Properties:{},DOMAttributeNamespaces:{xlinkActuate:r,xlinkArcrole:r,xlinkHref:r,xlinkRole:r,xlinkShow:r,xlinkTitle:r,xlinkType:r,xmlBase:o,xmlLang:o,xmlSpace:o},DOMAttributeNames:{}};Object.keys(i).forEach(function(t){a.Properties[t]=0,i[t]&&(a.DOMAttributeNames[t]=i[t])}),t.exports=a},function(t,e,n){"use strict";var r=n(28),o=n(8),i=n(6),a=n(88),u=n(15),s=n(89),c=n(73),l=n(53),f=o.canUseDOM&&"documentMode"in document&&document.documentMode<=11,d={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},h=null,p=null,y=null,g=!1,v=!1;function m(t,e){if(g||null==h||h!==s())return null;var n=function(t){if("selectionStart"in t&&a.hasSelectionCapabilities(t))return{start:t.selectionStart,end:t.selectionEnd};if(window.getSelection){var e=window.getSelection();return{anchorNode:e.anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}(h);if(!y||!l(y,n)){y=n;var o=u.getPooled(d.select,p,t,e);return o.type="select",o.target=h,r.accumulateTwoPhaseDispatches(o),o}return null}var b={eventTypes:d,extractEvents:function(t,e,n,r){if(!v)return null;var o=e?i.getNodeFromInstance(e):window;switch(t){case"topFocus":(c(o)||"true"===o.contentEditable)&&(h=o,p=e,y=null);break;case"topBlur":h=null,p=null,y=null;break;case"topMouseDown":g=!0;break;case"topContextMenu":case"topMouseUp":return g=!1,m(n,r);case"topSelectionChange":if(f)break;case"topKeyDown":case"topKeyUp":return m(n,r)}return null},didPutListener:function(t,e,n){"onSelect"===e&&(v=!0)}};t.exports=b},function(t,e,n){"use strict";var r=n(4),o=n(87),i=n(28),a=n(6),u=n(181),s=n(182),c=n(15),l=n(183),f=n(184),d=n(35),h=n(186),p=n(187),y=n(188),g=n(30),v=n(189),m=n(14),b=n(58),_=(n(2),{}),w={};["abort","animationEnd","animationIteration","animationStart","blur","canPlay","canPlayThrough","click","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(t){var e=t[0].toUpperCase()+t.slice(1),n="on"+e,r="top"+e,o={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[r]};_[t]=o,w[r]=o});var E={};function x(t){return"."+t._rootNodeID}function k(t){return"button"===t||"input"===t||"select"===t||"textarea"===t}var S={eventTypes:_,extractEvents:function(t,e,n,o){var a,m=w[t];if(!m)return null;switch(t){case"topAbort":case"topCanPlay":case"topCanPlayThrough":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topVolumeChange":case"topWaiting":a=c;break;case"topKeyPress":if(0===b(n))return null;case"topKeyDown":case"topKeyUp":a=f;break;case"topBlur":case"topFocus":a=l;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=d;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=h;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=p;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=u;break;case"topTransitionEnd":a=y;break;case"topScroll":a=g;break;case"topWheel":a=v;break;case"topCopy":case"topCut":case"topPaste":a=s}a||r("86",t);var _=a.getPooled(m,e,n,o);return i.accumulateTwoPhaseDispatches(_),_},didPutListener:function(t,e,n){if("onClick"===e&&!k(t._tag)){var r=x(t),i=a.getNodeFromInstance(t);E[r]||(E[r]=o.listen(i,"click",m))}},willDeleteListener:function(t,e){if("onClick"===e&&!k(t._tag)){var n=x(t);E[n].remove(),delete E[n]}}};t.exports=S},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{animationName:null,elapsedTime:null,pseudoElement:null}),t.exports=o},function(t,e,n){"use strict";var r=n(15),o={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};function i(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(i,o),t.exports=i},function(t,e,n){"use strict";var r=n(30);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{relatedTarget:null}),t.exports=o},function(t,e,n){"use strict";var r=n(30),o=n(58),i={key:n(185),location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:n(46),charCode:function(t){return"keypress"===t.type?o(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?o(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r=n(58),o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=function(t){if(t.key){var e=o[t.key]||t.key;if("Unidentified"!==e)return e}if("keypress"===t.type){var n=r(t);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===t.type||"keyup"===t.type?i[t.keyCode]||"Unidentified":""}},function(t,e,n){"use strict";var r=n(35);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{dataTransfer:null}),t.exports=o},function(t,e,n){"use strict";var r=n(30),o={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:n(46)};function i(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(i,o),t.exports=i},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{propertyName:null,elapsedTime:null,pseudoElement:null}),t.exports=o},function(t,e,n){"use strict";var r=n(35);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),t.exports=o},function(t,e,n){"use strict";n(57);var r=9;t.exports=function(t,e){return{_topLevelWrapper:t,_idCounter:1,_ownerDocument:e?e.nodeType===r?e:e.ownerDocument:null,_node:e,_tag:e?e.nodeName.toLowerCase():null,_namespaceURI:e?e.namespaceURI:null}}},function(t,e,n){"use strict";t.exports={useCreateElement:!0,useFiber:!1}},function(t,e,n){"use strict";var r=n(193),o=/\/?>/,i=/^<\!\-\-/,a={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(t){var e=r(t);return i.test(t)?t:t.replace(o," "+a.CHECKSUM_ATTR_NAME+'="'+e+'"$&')},canReuseMarkup:function(t,e){var n=e.getAttribute(a.CHECKSUM_ATTR_NAME);return n=n&&parseInt(n,10),r(t)===n}};t.exports=a},function(t,e,n){"use strict";var r=65521;t.exports=function(t){for(var e=1,n=0,o=0,i=t.length,a=-4&i;o<a;){for(var u=Math.min(o+4096,a);o<u;o+=4)n+=(e+=t.charCodeAt(o))+(e+=t.charCodeAt(o+1))+(e+=t.charCodeAt(o+2))+(e+=t.charCodeAt(o+3));e%=r,n%=r}for(;o<i;o++)n+=e+=t.charCodeAt(o);return(e%=r)|(n%=r)<<16}},function(t,e,n){"use strict";t.exports="15.6.1"},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(6)),i=n(31),a=n(91);n(2),n(5);t.exports=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=i.get(t);if(e)return(e=a(e))?o.getNodeFromInstance(e):null;"function"==typeof t.render?r("44"):r("45",Object.keys(t))}},function(t,e,n){"use strict";var r=n(90);t.exports=r.renderSubtreeIntoContainer},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.layout=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(95)),i=n(198),a=n(39),u=n(199),s=n(200),c=n(201),l=n(202),f=p(n(92)),d=p(n(211)),h=p(n(216));function p(t){return t&&t.__esModule?t:{default:t}}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var g=function(t,e,n,r){var o=new i.Algorithms(r),a=t.map(function(t){return t.count}),u=a.reduce(function(t,e){return t+e}),s=a.map(function(t){return t/u*e*n});return o.squarifiedTreemap(e,n,s)},v=function(t,e,n,r,i){switch(t){case"circle-pack":return function(t,e,n){var r={name:"",children:t.map(function(t){return{name:t.name,size:t.count}})},i=o.hierarchy(r).sum(function(t){return t.size}).sort(function(t,e){return e.value-t.value}),a=o.pack().size([e,n])(i).descendants().map(function(t){return{x:t.x-t.r,y:t.y-t.r,width:2*t.r,height:2*t.r}});return a.shift(0),a}(e,n,r);case"treemap":return g(e,n,r,i)}return g(e,n,r,i)},m=new Map([["circle-pack","circle"],["treemap","rect"]]),b=function(t,e,n){var o=new a.Allocator(t),i=function(t,e){var n=new Map,o=!0,i=!1,a=void 0;try{for(var u,s=t[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value;n.has(c.properties[e])||n.set(c.properties[e],0),n.set(c.properties[e],n.get(c.properties[e])+1)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}var l=Array.from(n.entries()).map(function(t){var e=r(t,2);return{name:e[0],count:e[1]}});return l.sort(function(t,e){return e.count-t.count}),l}(e.nodes,n.groupProperty),l=v(n.type,i,2e3,2e3,t),p=o.alloc(16*i.length);l.forEach(function(e,n){t.HEAPF32[p/4+2*n]=e.x+e.width/2,t.HEAPF32[p/4+2*n+1]=e.y+e.height/2});var g=n.useEdgeConcentration?function(t,e,n){var o=new f.default,i=!0,a=!1,u=void 0;try{for(var s,c=t.nodes[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;o.addVertex(l.id,l)}}catch(t){a=!0,u=t}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}var p=!0,g=!1,v=void 0;try{for(var m,b=t.relationships[Symbol.iterator]();!(p=(m=b.next()).done);p=!0){var _=m.value,w=_.startNode,E=_.endNode;o.vertex(w).properties[n.groupProperty]===o.vertex(E).properties[n.groupProperty]&&o.addEdge(w,E,_)}}catch(t){g=!0,v=t}finally{try{!p&&b.return&&b.return()}finally{if(g)throw v}}for(var x=e.map(function(e){var r=e.name;return t.nodes.filter(function(t){return t.properties[n.groupProperty]===r})}),k=(new d.default).method(function(t,e,r){return(0,h.default)(t,e,r,n.mu,n.minCount)}).idGenerator(function(t,e,n){return(e=Array.from(e)).sort(),(n=Array.from(n)).sort(),e.join(",")+":"+n.join(",")}),S=0;S<e.length;++S)for(var M=x[S],C=function(i){var a=x[i],u=new f.default,s=!0,c=!1,l=void 0;try{for(var d,h=M[Symbol.iterator]();!(s=(d=h.next()).done);s=!0){var p=d.value;u.addVertex(p.id,p)}}catch(t){c=!0,l=t}finally{try{!s&&h.return&&h.return()}finally{if(c)throw l}}var g=!0,v=!1,m=void 0;try{for(var b,_=a[Symbol.iterator]();!(g=(b=_.next()).done);g=!0){var w=b.value;u.addVertex(w.id,w)}}catch(t){v=!0,m=t}finally{try{!g&&_.return&&_.return()}finally{if(v)throw m}}var E=!0,C=!1,A=void 0;try{for(var P,T=t.relationships[Symbol.iterator]();!(E=(P=T.next()).done);E=!0){var N=P.value,O=N.startNode,D=N.endNode,R=o.vertex(O).properties[n.groupProperty],I=o.vertex(D).properties[n.groupProperty];R===e[S].name&&I===e[i].name&&u.addEdge(O,D,N),R===e[i].name&&I===e[S].name&&u.addEdge(D,O,N)}}catch(t){C=!0,A=t}finally{try{!E&&T.return&&T.return()}finally{if(C)throw A}}k.dummy(function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value,l=!0,f=!1,d=void 0;try{for(var h,p=e[Symbol.iterator]();!(l=(h=p.next()).done);l=!0){var y=h.value,g=u.edge(c,y);g&&n.push(g)}}catch(t){f=!0,d=t}finally{try{!l&&p.return&&p.return()}finally{if(f)throw d}}}}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return{dummy:!0,average:n.reduce(function(t,e){return t+e.properties.value},0)/n.length,strokeColor:"black",strokeWidth:1,fillOpacity:0}});var L=k.transform(u),F=!0,B=!1,U=void 0;try{for(var j,z=L.vertices()[Symbol.iterator]();!(F=(j=z.next()).done);F=!0){var V=j.value,W=L.vertex(V);W.dummy&&(o.addVertex(V+"-l",Object.assign({},W,{id:V+"-l",properties:y({},n.groupProperty,e[S].name)})),o.addVertex(V+"-r",Object.assign({},W,{id:V+"-r",properties:y({},n.groupProperty,e[i].name)})),o.addEdge(V+"-l",V+"-r",{properties:{value:W.average}}))}}catch(t){B=!0,U=t}finally{try{!F&&z.return&&z.return()}finally{if(B)throw U}}var Y=!0,q=!1,H=void 0;try{for(var G,X=L.edges()[Symbol.iterator]();!(Y=(G=X.next()).done);Y=!0){var K=G.value,$=r(K,2),Q=$[0],Z=$[1],J=L.vertex(Q),tt=L.vertex(Z);J.dummy||tt.dummy||n.showSingleEdge&&o.addEdge(Q,Z),J.dummy&&!tt.dummy&&o.addEdge(Q+"-r",Z,{properties:{value:J.average}}),!J.dummy&&tt.dummy&&o.addEdge(Q,Z+"-l",{properties:{value:tt.average}})}}catch(t){q=!0,H=t}finally{try{!Y&&X.return&&X.return()}finally{if(q)throw H}}},A=S+1;A<e.length;++A)C(A);return{nodes:o.vertices().map(function(t){return o.vertex(t)}),relationships:o.edges().map(function(t){var e=r(t,2),n=e[0],i=e[1];return Object.assign({},o.edge(n,i),{startNode:n,endNode:i})})}}(e,i,n):e,b=function(t,e,n,r){var o=new s.Graph(t),i=0,a=new Map,u=!0,c=!1,l=void 0;try{for(var f,d=e.nodes[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var h=f.value;o.addNode(),a.set(h.id,i++)}}catch(t){c=!0,l=t}finally{try{!u&&d.return&&d.return()}finally{if(c)throw l}}var p=!0,y=!1,g=void 0;try{for(var v,m=e.relationships[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value,_=b.startNode,w=b.endNode;o.addEdge(a.get(_),a.get(w))}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}return o}(t,g),_=new Map(i.map(function(t,e){return[t.name,e]})),w=o.alloc(4*b.nodeCount());g.nodes.forEach(function(e,r){t.HEAPU32[w/4+r]=_.get(e.properties[n.groupProperty])});var E=new u.Simulation(t),x=E.addGroupManyBodyForce(p,i.length,w,b.nodeCount()),k=E.addGroupLinkForce(b,w,n.intraGroup,n.interGroup),S=E.addGroupCenterForce(p,i.length,w,b.nodeCount());E.setStrength(x,n.manyBodyForce),E.setStrength(k,n.linkForce),E.setStrength(S,n.centerForce),E.start(b);var M=new c.EdgeBundling(t);M.cycles=n.cycles,M.s0=n.s0,M.i0=n.i0,M.sStep=n.sStep,M.iStep=n.iStep;var C=M.call(b);return l.forEach(function(t,e){t.type=m.get(n.type),t.label=i[e].name.toString(),t.x+=t.width/2,t.y+=t.height/2}),g.groups=l,g.nodes.forEach(function(t,e){t.x=b.getX(e),t.y=b.getY(e)}),g.relationships.forEach(function(t,e){t.bends=C[e].map(function(t){return[t.x,t.y]})}),g};e.layout=function(t,e){return(0,l.loadModule)().then(function(n){var r=n.Module;return b(r,t,e)})}},function(t,e,n){"use strict";n.r(e),n.d(e,"Algorithms",function(){return o});var r=n(39);class o{constructor(t){this.Module=t,this.module={connectedComponents:t.cwrap("connected_components","number",["number"]),squarifiedTreemap:t.cwrap("squarified_treemap","number",["number","number","number","number"])}}connectedComponents(t){const e=new r.Allocator(this.Module),n=this.module.connectedComponents(t.pointer),o=t.nodeCount(),i=new Array(o);for(let t=0;t<o;++t)i[t]=this.Module.HEAPU32[n/4+t];return e.free(n),i}squarifiedTreemap(t,e,n){const o=new r.Allocator(this.Module),i=o.alloc(8*n.length);n.forEach((t,e)=>{this.Module.HEAPF64[i/8+e]=t});const a=this.module.squarifiedTreemap(t,e,i,n.length),u=n.map((t,e)=>({x:this.Module.HEAPF64[a/8+4*e],y:this.Module.HEAPF64[a/8+4*e+1],width:this.Module.HEAPF64[a/8+4*e+2],height:this.Module.HEAPF64[a/8+4*e+3]}));return o.free(a),u}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Simulation",function(){return r});class r{constructor(t){this.module={simulationNew:t.cwrap("simulation_new","number",[]),simulationAddCenterForce:t.cwrap("simulation_add_center_force","number",["number"]),simulationAddGroupCenterForce:t.cwrap("simulation_add_group_center_force","number",["number","number","number","number","number"]),simulationAddGroupLinkForce:t.cwrap("simulation_add_group_link_force","number",["number","number","number","number","number"]),simulationAddGroupManyBodyForce:t.cwrap("simulation_add_group_many_body_force","number",["number","number","number","number","number"]),simulationAddLinkForce:t.cwrap("simulation_add_link_force","number",["number","number"]),simulationAddManyBodyForce:t.cwrap("simulation_add_many_body_force","number",["number"]),simulationStart:t.cwrap("simulation_start","void",["number","number"]),simulationGetStrength:t.cwrap("simulation_get_strength","number",["number"]),simulationSetStrength:t.cwrap("simulation_set_strength","void",["number","number"])},this.pointer=this.module.simulationNew()}addCenterForce(){return this.module.simulationAddCenterForce(this.pointer)}addGroupCenterForce(t,e,n,r){return this.module.simulationAddGroupCenterForce(this.pointer,t,e,n,r)}addGroupLinkForce(t,e,n=.5,r=.01){return this.module.simulationAddGroupLinkForce(this.pointer,t.pointer,e,n,r)}addGroupManyBodyForce(t,e,n,r){return this.module.simulationAddGroupManyBodyForce(this.pointer,t,e,n,r)}addLinkForce(t){return this.module.simulationAddLinkForce(this.pointer,t.pointer)}addManyBodyForce(){return this.module.simulationAddManyBodyForce(this.pointer)}start(t){const e=Date.now();this.module.simulationStart(this.pointer,t.pointer);const n=Date.now();console.log(n-e)}getStrength(t){return this.module.simulationGetStrength(this.pointer,t)}setStrength(t,e){this.module.simulationSetStrength(this.pointer,t,e)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Graph",function(){return r});class r{constructor(t){this.module={graphNew:t.cwrap("graph_new","number",[]),graphAddNode:t.cwrap("graph_add_node","number",["number"]),graphAddEdge:t.cwrap("graph_add_edge","number",["number","number","number"]),graphNodeCount:t.cwrap("graph_node_count","number",["number"]),graphEdgeCount:t.cwrap("graph_edge_count","number",["number"]),graphGetX:t.cwrap("graph_get_x","number",["number","number"]),graphGetY:t.cwrap("graph_get_y","number",["number","number"])},this.pointer=this.module.graphNew()}addNode(){return this.module.graphAddNode(this.pointer)}addEdge(t,e){return this.module.graphAddEdge(this.pointer,t,e)}nodeCount(){return this.module.graphNodeCount(this.pointer)}edgeCount(){return this.module.graphEdgeCount(this.pointer)}getX(t){return this.module.graphGetX(this.pointer,t)}getY(t){return this.module.graphGetY(this.pointer,t)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"EdgeBundling",function(){return r});class r{constructor(t){this.Module=t,this.module={edgeBundlingNew:t.cwrap("edge_bundling_new","number",[]),edgeBundlingCall:t.cwrap("edge_bundling_call","number",["number"]),edgeBundlingGetCycles:t.cwrap("edge_bundling_get_cycles","number",["number"]),edgeBundlingGetS0:t.cwrap("edge_bundling_get_s0","number",["number"]),edgeBundlingGetI0:t.cwrap("edge_bundling_get_i0","number",["number"]),edgeBundlingGetSStep:t.cwrap("edge_bundling_get_s_step","number",["number"]),edgeBundlingGetIStep:t.cwrap("edge_bundling_get_i_step","number",["number"]),edgeBundlingSetCycles:t.cwrap("edge_bundling_set_cycles","void",["number","number"]),edgeBundlingSetS0:t.cwrap("edge_bundling_set_s0","void",["number","number"]),edgeBundlingSetI0:t.cwrap("edge_bundling_set_i0","void",["number","number"]),edgeBundlingSetSStep:t.cwrap("edge_bundling_set_s_step","void",["number","number"]),edgeBundlingSetIStep:t.cwrap("edge_bundling_set_i_step","void",["number","number"]),linesAt:t.cwrap("lines_at","number",["number","number"]),linePoints:t.cwrap("line_points","number",["number"]),linePointsAt:t.cwrap("line_points_at","number",["number","number"]),linePointsLength:t.cwrap("line_points_length","number",["number"]),pointX:t.cwrap("point_x","number",["number"]),pointY:t.cwrap("point_y","number",["number"])},this.pointer=this.module.edgeBundlingNew()}call(t){const e=this.module.edgeBundlingCall(this.pointer,t.pointer),n=t.edgeCount(),r=new Array(n);for(let t=0;t<n;++t){const n=this.module.linesAt(e,t),o=this.module.linePointsLength(n);r[t]=new Array(o-2);for(let e=1;e<o-1;++e){const o=this.module.linePointsAt(n,e);r[t][e-1]={x:this.module.pointX(o),y:this.module.pointY(o)}}}return r}get cycles(){return this.module.edgeBundlingGetCycles(this.pointer)}set cycles(t){this.module.edgeBundlingSetCycles(this.pointer,t)}get s0(){return this.module.edgeBundlingGetS0(this.pointer)}set s0(t){this.module.edgeBundlingSetS0(this.pointer,t)}get i0(){return this.module.edgeBundlingGetI0(this.pointer)}set i0(t){this.module.edgeBundlingSetI0(this.pointer,t)}get sStep(){return this.module.edgeBundlingGetSStep(this.pointer)}set sStep(t){this.module.edgeBundlingSetSStep(this.pointer,t)}get iStep(){return this.module.edgeBundlingGetIStep(this.pointer)}set iStep(t){this.module.edgeBundlingSetIStep(this.pointer,t)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.loadModule=void 0;var r=(0,n(203).egraph)("egraph.wasm");e.loadModule=function(){return r}},function(t,e,n){"use strict";n.r(e),n.d(e,"egraph",function(){return i});var r=n(96),o=n.n(r);const i=(t="egraph.wasm")=>new Promise((e,n)=>{window.fetch(t).then(t=>t.arrayBuffer()).then(t=>{o()({wasmBinary:t}).then(t=>{e({Module:t})})})})},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(206),o=n(207),i=n(208);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),o=(t=u(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|h(e.length);return 0===(t=u(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?u(t,0):d(t,e);if("Buffer"===e.type&&i(e.data))return d(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=u(t,e<0?0:0|h(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|h(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return j(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){var i,a=1,u=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,u/=2,s/=2,n/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var l=-1;for(i=n;i<u;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===s)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+s>u&&(n=u-s),i=n;i>=0;i--){for(var f=!0,d=0;d<s;d++)if(c(t,i+d)!==c(e,d)){f=!1;break}if(f)return i}return-1}function m(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[n+a]=u}return a}function b(t,e,n,r){return V(j(e,t.length-n),t,n,r)}function _(t,e,n,r){return V(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return _(t,e,n,r)}function E(t,e,n,r){return V(z(e),t,n,r)}function x(t,e,n,r){return V(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function S(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,u,s,c=t[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(l=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(l=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(l=s)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(t){var e=t.length;if(e<=M)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=M));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return c(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,n);case"utf8":case"utf-8":return S(this,e,n);case"ascii":return C(this,e,n);case"latin1":case"binary":return A(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,o>>>=0,this===t)return 0;for(var i=o-r,a=n-e,u=Math.min(i,a),c=this.slice(r,o),l=t.slice(e,n),f=0;f<u;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var M=4096;function C(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function P(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=U(t[i]);return o}function T(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function N(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function D(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function R(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function I(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(t,e,n,r,i){return i||I(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,i){return i||I(t,0,n,8),o.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var o=e-t;n=new s(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},s.prototype.readUInt8=function(t,e){return e||N(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||N(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||N(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},s.prototype.readInt8=function(t,e){return e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||N(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||N(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||N(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||N(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||N(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||N(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):R(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=0,a=1,u=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=n-1,a=1,u=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):R(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return L(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return L(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=s.isBuffer(t)?t:j(new s(t,r).toString()),u=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%u]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(205))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],a=n[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,a)),s=0,l=a>0?r-4:r,f=0;f<l;f+=4)e=o[t.charCodeAt(f)]<<18|o[t.charCodeAt(f+1)]<<12|o[t.charCodeAt(f+2)]<<6|o[t.charCodeAt(f+3)],u[s++]=e>>16&255,u[s++]=e>>8&255,u[s++]=255&e;2===a&&(e=o[t.charCodeAt(f)]<<2|o[t.charCodeAt(f+1)]>>4,u[s++]=255&e);1===a&&(e=o[t.charCodeAt(f)]<<10|o[t.charCodeAt(f+1)]<<4|o[t.charCodeAt(f+2)]>>2,u[s++]=e>>8&255,u[s++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],a=0,u=n-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function f(t,e,n){for(var r,o=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(l(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,c=s>>1,l=-7,f=n?o-1:0,d=n?-1:1,h=t[e+f];for(f+=d,i=h&(1<<-l)-1,h>>=-l,l+=u;l>0;i=256*i+t[e+f],f+=d,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[e+f],f+=d,l-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=c}return(h?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,u,s,c=8*i-o-1,l=(1<<c)-1,f=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+f>=1?d/s:d*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=l?(u=0,a=l):a+f>=1?(u=(e*s-1)*Math.pow(2,o),a+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[n+h]=255&u,h+=p,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[n+h]=255&a,h+=p,a/=256,c-=8);t[n+h-p]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=n(210),i=new WeakMap,a=function(t){return i.get(t)},u=function(t,e){if(null===t.vertex(e))throw new Error("Invalid vertex: "+e)},s=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.set(t,{vertices:new Map,numVertices:0,numEdges:0}),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o),r(e,[{key:"vertex",value:function(t){var e=a(this).vertices;return e.get(t)?e.get(t).data:null}},{key:"edge",value:function(t,e){var n=a(this).vertices;return n.get(t)&&n.get(t).outVertices.get(e)?n.get(t).outVertices.get(e):null}},{key:"vertices",value:function(){return Array.from(a(this).vertices.keys())}},{key:"outVertices",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).outVertices.keys())}},{key:"inVertices",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).inVertices.keys())}},{key:"parent",value:function(t){return u(this,t),a(this).vertices.get(t).parent}},{key:"children",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).children)}},{key:"numVertices",value:function(){return a(this).numVertices}},{key:"numEdges",value:function(){return a(this).numEdges}},{key:"outDegree",value:function(t){return u(this,t),a(this).vertices.get(t).outVertices.size}},{key:"inDegree",value:function(t){return u(this,t),a(this).vertices.get(t).inVertices.size}},{key:"addVertex",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.vertex(t))throw new Error("Duplicated vertex: "+t);return a(this).vertices.set(t,{outVertices:new Map,inVertices:new Map,children:new Set,parent:null,data:e}),a(this).numVertices++,this}},{key:"addEdge",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(u(this,t),u(this,e),this.edge(t,e))throw new Error("Duplicated edge: ("+t+", "+e+")");return a(this).numEdges++,a(this).vertices.get(t).outVertices.set(e,n),a(this).vertices.get(e).inVertices.set(t,n),this}},{key:"setChild",value:function(t,e){return u(this,t),u(this,e),a(this).vertices.get(t).children.add(e),a(this).vertices.get(e).parent=t,this}},{key:"removeVertex",value:function(t){var e=!0,n=!1,r=void 0;try{for(var o,i=this.outVertices(t)[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var u=o.value;this.removeEdge(t,u)}}catch(t){n=!0,r=t}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}var s=!0,c=!1,l=void 0;try{for(var f,d=this.inVertices(t)[Symbol.iterator]();!(s=(f=d.next()).done);s=!0){var h=f.value;this.removeEdge(h,t)}}catch(t){c=!0,l=t}finally{try{!s&&d.return&&d.return()}finally{if(c)throw l}}var p=this.parent(t);return p&&this.unsetChild(p,t),a(this).vertices.delete(t),a(this).numVertices--,this}},{key:"removeEdge",value:function(t,e){if(null===this.edge(t,e))throw Error("Invalid edge: ("+t+", "+e+")");return a(this).vertices.get(t).outVertices.delete(e),a(this).vertices.get(e).inVertices.delete(t),a(this).numEdges--,this}},{key:"unsetChild",value:function(t,e){return u(this,t),u(this,e),a(this).vertices.get(t).children.delete(e),a(this).vertices.get(e).parent=null,this}}]),e}();t.exports=s},function(t,e,n){"use strict";var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return o(t,[{key:"edges",value:function(){var t=[],e=!0,n=!1,r=void 0;try{for(var o,i=this.vertices()[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var a=o.value,u=!0,s=!1,c=void 0;try{for(var l,f=this.outVertices(a)[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value;t.push([a,d])}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}}}catch(t){n=!0,r=t}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}return t}},{key:"outEdges",value:function(t){return this.outVertices(t).map(function(e){return[t,e]})}},{key:"inEdges",value:function(t){return this.outVertices(t).map(function(e){return[e,t]})}},{key:"toJSON",value:function(){var t=this;return{vertices:this.vertices().map(function(e){return{u:e,d:t.vertex(e)}}),edges:this.edges().map(function(e){var n=r(e,2),o=n[0],i=n[1];return{u:o,v:i,d:t.edge(o,i)}})}}},{key:"toString",value:function(){return JSON.stringify(this.toJSON())}}]),t}();t.exports=i},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=n(92),i=n(93),a=n(212),u=n(214),s=n(215),c=function(t,e,n,r,i,a){var u=new o,s=!0,c=!1,l=void 0;try{for(var f,d=e[Symbol.iterator]();!(s=(f=d.next()).done);s=!0){var h=f.value;u.addVertex(h,t.vertex(h))}}catch(t){c=!0,l=t}finally{try{!s&&d.return&&d.return()}finally{if(c)throw l}}var p=!0,y=!1,g=void 0;try{for(var v,m=n[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value;u.addVertex(b,t.vertex(b))}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}var _=!0,w=!1,E=void 0;try{for(var x,k=e[Symbol.iterator]();!(_=(x=k.next()).done);_=!0){var S=x.value,M=!0,C=!1,A=void 0;try{for(var P,T=n[Symbol.iterator]();!(M=(P=T.next()).done);M=!0){var N=P.value;t.edge(S,N)&&u.addEdge(S,N,t.edge(S,N))}}catch(t){C=!0,A=t}finally{try{!M&&T.return&&T.return()}finally{if(C)throw A}}}}catch(t){w=!0,E=t}finally{try{!_&&k.return&&k.return()}finally{if(w)throw E}}var O=!0,D=!1,R=void 0;try{for(var I,L=r(u,e,n)[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value,B=a(t,F.source,F.target);if(!t.vertex(B)){t.addVertex(B,i(F.source,F.target));var U=!0,j=!1,z=void 0;try{for(var V,W=F.source[Symbol.iterator]();!(U=(V=W.next()).done);U=!0){var Y=V.value;t.addEdge(Y,B)}}catch(t){j=!0,z=t}finally{try{!U&&W.return&&W.return()}finally{if(j)throw z}}var q=!0,H=!1,G=void 0;try{for(var X,K=F.target[Symbol.iterator]();!(q=(X=K.next()).done);q=!0){var $=X.value;t.addEdge(B,$)}}catch(t){H=!0,G=t}finally{try{!q&&K.return&&K.return()}finally{if(H)throw G}}var Q=!0,Z=!1,J=void 0;try{for(var tt,et=t.inVertices(B)[Symbol.iterator]();!(Q=(tt=et.next()).done);Q=!0){var nt=tt.value,rt=!0,ot=!1,it=void 0;try{for(var at,ut=t.outVertices(B)[Symbol.iterator]();!(rt=(at=ut.next()).done);rt=!0){var st=at.value;t.edge(nt,st)&&t.removeEdge(nt,st)}}catch(t){ot=!0,it=t}finally{try{!rt&&ut.return&&ut.return()}finally{if(ot)throw it}}}}catch(t){Z=!0,J=t}finally{try{!Q&&et.return&&et.return()}finally{if(Z)throw J}}}}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}},l=new WeakMap,f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l.set(this,{layerAssignment:new a.QuadHeuristic,method:s,dummy:function(){return{dummy:!0}},idGenerator:function(){return Symbol("")}})}return r(t,[{key:"transform",value:function(t){for(var e=this.layerAssignment().call(t),n=u(t,e),r=0;r<n.length-1;++r){var o=n[r],i=new Set,a=!0,s=!1,l=void 0;try{for(var f,d=o[Symbol.iterator]();!(a=(f=d.next()).done);a=!0){var h=f.value,p=!0,y=!1,g=void 0;try{for(var v,m=t.outVertices(h)[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value;i.add(b)}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}}}catch(t){s=!0,l=t}finally{try{!a&&d.return&&d.return()}finally{if(s)throw l}}c(t,o,Array.from(i.values()),this.method(),this.dummy(),this.idGenerator())}return t}},{key:"layerAssignment",value:function(){return i(this,l,"layerAssignment",arguments)}},{key:"method",value:function(){return i(this,l,"method",arguments)}},{key:"dummy",value:function(){return i(this,l,"dummy",arguments)}},{key:"idGenerator",value:function(){return i(this,l,"idGenerator",arguments)}}]),t}();t.exports=f},function(t,e,n){"use strict";var r=n(94),o=n(213);t.exports={LongestPath:r,QuadHeuristic:o}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var i=n(93),a=n(94),u=new WeakMap,s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),u.set(this,{repeat:4})}return r(t,[{key:"call",value:function(t){return function(t,e){var n=(new a).call(t),r=1/0,i=-1/0,u=!0,s=!1,c=void 0;try{for(var l,f=t.vertices()[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value;r=Math.min(r,n[d]),i=Math.max(i,n[d])}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}var h=!0,p=!1,y=void 0;try{for(var g,v=t.vertices()[Symbol.iterator]();!(h=(g=v.next()).done);h=!0){var m=g.value;0===t.inDegree(m)?n[m]=0:n[m]-=r}}catch(t){p=!0,y=t}finally{try{!h&&v.return&&v.return()}finally{if(p)throw y}}for(var b=t.vertices().filter(function(e){return t.inDegree(e)>0&&t.outDegree(e)>0}),_={},w=function(t,e){return _[e]-_[t]},E=0;E<e;++E){var x=!0,k=!1,S=void 0;try{for(var M,C=t.vertices()[Symbol.iterator]();!(x=(M=C.next()).done);x=!0){var A=M.value;_[A]=0}}catch(t){k=!0,S=t}finally{try{!x&&C.return&&C.return()}finally{if(k)throw S}}var P=!0,T=!1,N=void 0;try{for(var O,D=t.edges()[Symbol.iterator]();!(P=(O=D.next()).done);P=!0){var R=O.value,I=o(R,2),L=I[0],F=I[1],B=n[F]-n[L];_[L]+=B,_[F]+=B}}catch(t){T=!0,N=t}finally{try{!P&&D.return&&D.return()}finally{if(T)throw N}}b.sort(w);var U=!0,j=!1,z=void 0;try{for(var V,W=b[Symbol.iterator]();!(U=(V=W.next()).done);U=!0){var Y=V.value,q=0,H=0,G=-1/0,X=1/0,K=!0,$=!1,Q=void 0;try{for(var Z,J=t.inVertices(Y)[Symbol.iterator]();!(K=(Z=J.next()).done);K=!0){var tt=n[Z.value];G=Math.max(G,tt),q+=tt,H+=1}}catch(t){$=!0,Q=t}finally{try{!K&&J.return&&J.return()}finally{if($)throw Q}}var et=!0,nt=!1,rt=void 0;try{for(var ot,it=t.outVertices(Y)[Symbol.iterator]();!(et=(ot=it.next()).done);et=!0)tt=n[ot.value],X=Math.min(X,tt),q+=tt,H+=1}catch(t){nt=!0,rt=t}finally{try{!et&&it.return&&it.return()}finally{if(nt)throw rt}}n[Y]=Math.min(X-1,Math.max(G+1,Math.round(q/H)))}}catch(t){j=!0,z=t}finally{try{!U&&W.return&&W.return()}finally{if(j)throw z}}}return n}(t,this.repeat())}},{key:"repeat",value:function(){return i(this,u,"repeat",arguments)}}]),t}();t.exports=s},function(t,e,n){"use strict";t.exports=function(t,e,n){var r=[],o=!0,i=!1,a=void 0;try{for(var u,s=t.vertices()[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value,l=e[c];void 0===r[l]&&(r[l]=[]),r[l].push(c)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}if(n){for(var f=0;f<r.length;++f)void 0===r[f]&&(r[f]=[]);return r}return r.filter(function(t){return void 0!==t})}},function(t,e,n){"use strict";t.exports=function(t,e,n){if(0===e.length||0===n.length)return[];var r=t.numEdges(),o={},i=function(t,e,n){var r=new Set(e),o={},i=!0,a=!1,u=void 0;try{for(var s,c=n[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;o[l]=new Set;var f=!0,d=!1,h=void 0;try{for(var p,y=t.inVertices(l)[Symbol.iterator]();!(f=(p=y.next()).done);f=!0){var g=p.value;r.has(g)&&o[l].add(g)}}catch(t){d=!0,h=t}finally{try{!f&&y.return&&y.return()}finally{if(d)throw h}}}}catch(t){a=!0,u=t}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}return o}(t,e,n),a=function(t){return o[t]},u=function(t,e){return i[e].size-i[t].size},s=function(t,e){var n=0,r=!0,o=!1,a=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done);r=!0){var c=u.value,l=!0,f=!1,d=void 0;try{for(var h,p=e[Symbol.iterator]();!(l=(h=p.next()).done);l=!0){var y=h.value;i[y].has(c)&&(n+=1)}}catch(t){f=!0,d=t}finally{try{!l&&p.return&&p.return()}finally{if(f)throw d}}}}catch(t){o=!0,a=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n-t.length-e.length};n=Array.from(n);for(var c=[],l=0,f=0;f<r;++f){var d=!0,h=!1,p=void 0;try{for(var y,g=e[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;o[v]=!0}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}if(n.sort(u),i[n[l]].size<=0)break;for(var m=-1,b=void 0,_=void 0,w=[],E=l;E<n.length;++E){var x=n[E],k=!0,S=!1,M=void 0;try{for(var C,A=e[Symbol.iterator]();!(k=(C=A.next()).done);k=!0){var P=C.value;o[P]&&(t.edge(P,x)||(o[P]=!1))}}catch(t){S=!0,M=t}finally{try{!k&&A.return&&A.return()}finally{if(S)throw M}}w.push(x);var T=e.filter(a),N=s(T,w);N>m&&(m=N,b=T,_=Array.from(w))}if(m>-1){var O=!0,D=!1,R=void 0;try{for(var I,L=_[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value,B=!0,U=!1,j=void 0;try{for(var z,V=b[Symbol.iterator]();!(B=(z=V.next()).done);B=!0){var W=z.value;i[F].delete(W)}}catch(t){U=!0,j=t}finally{try{!B&&V.return&&V.return()}finally{if(U)throw j}}}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}c.push({source:Array.from(b),target:Array.from(_)}),l=0}else l+=1;if(l>=n.length)break}return c}},function(t,e,n){"use strict";var r=function(t){return t.sort(),t.map(function(t){return t.toString()}).join(",")};t.exports=function(t,e,n,o,i){var a=new Map,u=!0,s=!1,c=void 0;try{for(var l,f=e[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value,h=t.outVertices(d),p=new Set,y=new Set(h);a.set(r(h),{source:p,target:y})}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}var g=!0,v=!1,m=void 0;try{for(var b,_=a.keys()[Symbol.iterator]();!(g=(b=_.next()).done);g=!0){var w=b.value,E=new Map,x=a.get(w),k=x.source,S=x.target;if(0===k.size){var M=!0,C=!1,A=void 0;try{for(var P,T=S[Symbol.iterator]();!(M=(P=T.next()).done);M=!0){var N=P.value,O=!0,D=!1,R=void 0;try{for(var I,L=t.inVertices(N)[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value;E.has(F)||E.set(F,0),E.set(F,E.get(F)+1)}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}}}catch(t){C=!0,A=t}finally{try{!M&&T.return&&T.return()}finally{if(C)throw A}}var B=!0,U=!1,j=void 0;try{for(var z,V=E.keys()[Symbol.iterator]();!(B=(z=V.next()).done);B=!0){var W=z.value;E.get(W)>=o*S.size&&k.add(W)}}catch(t){U=!0,j=t}finally{try{!B&&V.return&&V.return()}finally{if(U)throw j}}}else{var Y=!0,q=!1,H=void 0;try{for(var G,X=k[Symbol.iterator]();!(Y=(G=X.next()).done);Y=!0){var K=G.value,$=!0,Q=!1,Z=void 0;try{for(var J,tt=t.outVertices(K)[Symbol.iterator]();!($=(J=tt.next()).done);$=!0){var et=J.value;E.has(et)||E.set(et,0),E.set(et,E.get(et)+1)}}catch(t){Q=!0,Z=t}finally{try{!$&&tt.return&&tt.return()}finally{if(Q)throw Z}}}}catch(t){q=!0,H=t}finally{try{!Y&&X.return&&X.return()}finally{if(q)throw H}}var nt=!0,rt=!1,ot=void 0;try{for(var it,at=E.keys()[Symbol.iterator]();!(nt=(it=at.next()).done);nt=!0){var ut=it.value;E.get(ut)>=o*k.size&&S.add(ut)}}catch(t){rt=!0,ot=t}finally{try{!nt&&at.return&&at.return()}finally{if(rt)throw ot}}}}}catch(t){v=!0,m=t}finally{try{!g&&_.return&&_.return()}finally{if(v)throw m}}return function(t){var e=Array.from(t);e.sort(function(t,e){return e.source.length+e.target.length-(t.source.length+t.target.length)});for(var n=e.map(function(){return!1}),r=e.length,o=function(t){if(n[t])return"continue";for(var o=e[t],i=new Set(o.source),a=new Set(o.target),u=t+1;u<r;++u){var s=e[u];s.source.every(function(t){return i.has(t)})&&s.target.every(function(t){return a.has(t)})&&(n[u]=!0)}},i=0;i<r;++i)o(i);return e.filter(function(t,e){return!n[e]})}(Array.from(a.values()).filter(function(e){var n=e.source,r=e.target,o=0,a=!0,u=!1,s=void 0;try{for(var c,l=n[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=!0,h=!1,p=void 0;try{for(var y,g=r[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;t.edge(f,v)&&(o+=1)}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}}}catch(t){u=!0,s=t}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return o>=i}).map(function(t){var e=t.source,n=t.target;return{source:Array.from(e),target:Array.from(n)}}))}},function(t,e,n){"use strict";n.r(e);var r=n(25),o=n(1),i=n(0),a=n(19);const u=t=>{if(0===t.size)return{left:0,top:0,layoutWidth:0,layoutHeight:0};t=Array.from(t.values());const e=Math.min(...t.map(({x:t,width:e})=>t-e/2)),n=Math.max(...t.map(({x:t,width:e})=>t+e/2)),r=Math.min(...t.map(({y:t,height:e})=>t-e/2));return{left:e,top:r,layoutWidth:n-e,layoutHeight:Math.max(...t.map(({y:t,height:e})=>t+e/2))-r}},s=(t,e,n,r,o,i,a)=>{if(0===t||0===e)return{x:0,y:0,k:1};const u=o-2*a,s=i-2*a,c=u/t,l=s/e,f=Math.min(c,l);return{x:c<l?0:(u-t*f)/2,y:l<c?0:(s-e*f)/2,k:f}};var c=n(3);const l=(t,e,n)=>(e-t)*n+t,f=(t,e,n)=>d(t,e,n),d=(t,e,n)=>{const r=["u","type","label","labelFontFamily","d"],o=["x","y","width","height","strokeWidth","labelStrokeWidth","labelFontSize","alpha"],i=["fillColor","strokeColor","labelFillColor","labelStrokeColor"],a={};for(const t of r)a[t]=e[t];for(const r of o)a[r]=l(t[r],e[r],n);for(const r of i)a[r]=Object(c.q)(t[r],e[r])(n);return a},h=(t,e,n)=>{const r=["u","v","type","sourceMarkerShape","targetMarkerShape","label","labelFontFamily","d"],o=["strokeWidth","sourceMarkerSize","targetMarkerSize","labelStrokeWidth","labelFontSize","alpha"],i=["strokeColor","labelFillColor","labelStrokeColor"],a={};for(const t of r)a[t]=e[t];for(const r of o)a[r]=l(t[r],e[r],n);for(const r of i)a[r]=Object(c.q)(t[r],e[r])(n);return a.points=t.points.map(([t,r],o)=>[l(t,e.points[o][0],n),l(r,e.points[o][1],n)]),a},p=(t,e)=>{return{update:{groups:e.groupIds.filter(e=>t.groups.has(e)).map(n=>({current:t.groups.get(n),next:e.groups.get(n)})),vertices:e.vertexIds.filter(e=>t.vertices.has(e)).map(n=>({current:t.vertices.get(n),next:e.vertices.get(n)})),edges:e.edgeIds.filter(([n,r])=>{if(!t.edges.has(n)||!t.edges.get(n).has(r))return!1;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type===i.type&&o.points.length===i.points.length}).map(([n,r])=>({current:t.edges.get(n).get(r),next:e.edges.get(n).get(r)}))},enter:{groups:e.groupIds.filter(e=>!t.groups.has(e)).map(t=>e.groups.get(t)),vertices:e.vertexIds.filter(e=>!t.vertices.has(e)).map(t=>e.vertices.get(t)),edges:e.edgeIds.filter(([n,r])=>{if(!t.edges.has(n)||!t.edges.get(n).has(r))return!0;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type!==i.type||o.points.length!==i.points.length}).map(([t,n])=>e.edges.get(t).get(n))},exit:{groups:t.groupIds.filter(t=>!e.groups.has(t)).map(e=>t.groups.get(e)),vertices:t.vertexIds.filter(t=>!e.vertices.has(t)).map(e=>t.vertices.get(e)),edges:t.edgeIds.filter(([n,r])=>{if(!e.edges.has(n)||!e.edges.get(n).has(r))return!0;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type!==i.type||o.points.length!==i.points.length}).map(([e,n])=>t.edges.get(e).get(n))}}},y=(t,e)=>{t.save(),e(),t.restore()},g=(t,e)=>{const{labelFillColor:n,labelStrokeColor:r,labelStrokeWidth:o,labelFontSize:i,labelFontFamily:a}=e;t.fillStyle=n.toString(),t.strokeStyle=r.toString(),t.lineWidth=o,t.font=`${i}px ${a}`},v=(t,e)=>{const{type:n,x:r,y:o,width:i,height:a,label:u}=e;u&&y(t,()=>{switch(g(t,e),n){case"circle":t.textAlign="center",t.textBaseline="top",t.translate(r,o-a/2);break;case"rect":t.textAlign="left",t.textBaseline="top",t.translate(r-i/2+5,o-a/2+5)}e.labelStrokeWidth>0&&t.strokeText(u,0,0),t.fillText(u,0,0)})},m=(t,e)=>{const{type:n,u:r,x:o,y:i,width:a,height:u,strokeWidth:s}=e;y(t,()=>{t.translate(o,i),y(t,()=>{switch(((t,e)=>{const{fillColor:n,strokeColor:r,strokeWidth:o}=e;t.fillStyle=n.toString(),t.strokeStyle=r.toString(),t.lineWidth=o})(t,e),t.beginPath(),n){case"circle":((t,e,n)=>{t.ellipse(0,0,e/2,n/2,0,0,2*Math.PI)})(t,a,u);break;case"rect":((t,e,n)=>{t.moveTo(-e/2,-n/2),t.lineTo(e/2,-n/2),t.lineTo(e/2,n/2),t.lineTo(-e/2,n/2),t.closePath()})(t,a,u);break;default:throw new Error(`Unknown type "${n}"`)}t.closePath(),t.fill(),s>0&&t.stroke()}),t.addHitRegion&&t.addHitRegion({id:JSON.stringify({id:r})})})},b=(t,e)=>{const{x:n,y:r,label:o}=e;o&&y(t,()=>{g(t,e),t.textAlign="center",t.textBaseline="middle",e.labelStrokeWidth>0&&t.strokeText(o,n,r),t.fillText(o,n,r)})},_=(t,e)=>{const{u:n,v:r,points:o}=e;y(t,()=>{const e=o[0][0],i=o[0][1],a=o[o.length-1][0],u=o[o.length-1][1],s=Math.atan2(u-i,a-e)+Math.PI/2;t.strokeStyle="#fff",t.moveTo(e+5*Math.cos(s),i+5*Math.sin(s)),t.lineTo(a+5*Math.cos(s),u+5*Math.sin(s)),t.lineTo(a+5*Math.cos(s+Math.PI),u+5*Math.sin(s+Math.PI)),t.lineTo(e+5*Math.cos(s+Math.PI),i+5*Math.sin(s+Math.PI)),t.closePath(),t.stroke(),t.addHitRegion&&t.addHitRegion({id:JSON.stringify({source:n,target:r})})})},w=(t,e)=>{const{type:n,points:r,sourceMarkerShape:o,sourceMarkerSize:i,targetMarkerShape:a,targetMarkerSize:u}=e;y(t,()=>{switch(y(t,()=>{switch(((t,e)=>{const{strokeColor:n,strokeWidth:r}=e;t.strokeStyle=n.toString(),t.lineWidth=r})(t,e),t.beginPath(),n){case"arc":((t,e)=>{const n=e[1][0]-e[0][0],r=e[1][1]-e[0][1],o=Math.sqrt(n*n+r*r)/2,i=(e[0][0]+e[1][0])/2,a=(e[0][1]+e[1][1])/2,u=Math.atan2(r,n);t.arc(i,a,o,u,u+Math.PI)})(t,r);break;case"quadratic":((t,e)=>{const n=e.length;if(t.moveTo(e[0][0],e[0][1]),2!==n){for(let r=2;r<n-1;++r){const[n,o]=e[r-1],[i,a]=e[r],u=(i-n)/2,s=(a-o)/2;t.quadraticCurveTo(n,o,n+u,o+s)}t.quadraticCurveTo(e[n-2][0],e[n-2][1],e[n-1][0],e[n-1][1])}else t.lineTo(e[1][0],e[1][1])})(t,r);break;case"line":((t,e)=>{t.moveTo(e[0][0],e[0][1]);for(let n=1;n<e.length;++n)t.lineTo(e[n][0],e[n][1])})(t,r);break;default:throw new Error(`Unknown type "${n}"`)}t.stroke()}),o){case"circle":y(t,()=>{const[n,o]=r[0],a=i/2;t.fillStyle=e.strokeColor.toString(),t.translate(n,o),t.beginPath(),t.ellipse(0,0,a,a,0,0,2*Math.PI),t.fill()});break;case"triangle":y(t,()=>{const[n,o]=r[0],[a,u]=r[1],s=Math.atan2(o-u,n-a),c=2*i/3;t.fillStyle=e.strokeColor.toString(),t.beginPath(),t.moveTo(n+Math.cos(s)*c,o+Math.sin(s)*c),t.lineTo(n+Math.cos(s+2*Math.PI/3)*c,o+Math.sin(s+2*Math.PI/3)*c),t.lineTo(n+Math.cos(s+4*Math.PI/3)*c,o+Math.sin(s+4*Math.PI/3)*c),t.closePath(),t.fill()})}switch(a){case"circle":y(t,()=>{const[n,o]=r[r.length-1],i=u/2;t.fillStyle=e.strokeColor.toString(),t.translate(n,o),t.beginPath(),t.ellipse(0,0,i,i,0,0,2*Math.PI),t.fill()});break;case"triangle":y(t,()=>{const[n,o]=r[r.length-1],[i,a]=r[r.length-2],s=Math.atan2(o-a,n-i),c=2*u/3;t.fillStyle=e.strokeColor.toString(),t.beginPath(),t.moveTo(n+Math.cos(s)*c,o+Math.sin(s)*c),t.lineTo(n+Math.cos(s+2*Math.PI/3)*c,o+Math.sin(s+2*Math.PI/3)*c),t.lineTo(n+Math.cos(s+4*Math.PI/3)*c,o+Math.sin(s+4*Math.PI/3)*c),t.closePath(),t.fill()})}})},E=(t,e)=>{const{points:n,label:r}=e;r&&y(t,()=>{const o=(n[0][0]+n[n.length-1][0])/2,i=(n[0][1]+n[n.length-1][1])/2;g(t,e),t.textAlign="center",t.textBaseline="middle",e.labelStrokeWidth>0&&t.strokeText(r,o,i),t.fillText(r,o,i)})},x=(t,e)=>{m(t,e)},k=(t,e,n,r,o,i,a)=>{const u=a/2;if(t===n)return[0,i/2+u];const s=Math.abs((e-r)/(t-n)),c=Math.atan(s);if(c<Math.atan2(i/2,o/2+u))return[o/2+u,Math.tan(c)*(o/2+u)];if(c>Math.atan2(i/2+u,o/2))return[Math.tan(Math.PI/2-c)*(i/2+u),i/2+u];const l=-1,f=t+o/2,d=e+i/2,h=s*f+l*d+(e-s*t),p=Math.sqrt((s**2+1)*u**2-h**2);return[(-s*h-l*p)/(s**2+1)+f-t,(1*h+s*p)/(s**2+1)+d-e]},S=(t,e,n,r,o,i,a)=>{const u=2*a/3;if(t===n)return[0,i/2+u];const s=Math.abs((e-r)/(t-n)),c=Math.atan(s);return c<Math.atan2(i/2,o/2)?[o/2+Math.cos(c)*u,Math.tan(c)*o/2+Math.sin(c)*u]:[Math.tan(Math.PI/2-c)*i/2+Math.sin(Math.PI/2-c)*u,i/2+Math.cos(Math.PI/2-c)*u]},M=(t,e,n,r,o,i,a)=>{const u=a/2;if(t===n)return[0,i/2+u];const s=o/2,c=i/2,l=Math.abs((e-r)/(t-n)),f=Math.atan(l),d=s*c/Math.sqrt(l**2*s**2+c**2),h=l*d;return[d+u*Math.cos(f),h+u*Math.sin(f)]},C=(t,e,n,r,o,i,a)=>{const u=2*a/3;if(t===n)return[0,i/2+u];const s=o/2,c=i/2,l=Math.abs((e-r)/(t-n)),f=Math.atan(l),d=s*c/Math.sqrt(l**2*s**2+c**2),h=l*d;return[d+u*Math.cos(f),h+u*Math.sin(f)]},A=(t,e,n,r,o,i)=>n<o?r<i?[n+t,r+e]:[n+t,r-e]:r<i?[n-t,r+e]:[n-t,r-e],P=(t,e,n)=>"arc"===n?()=>[0,0]:"circle"===t&&"rect"===e?k:"triangle"===t&&"rect"===e?S:"circle"===t&&"circle"===e?M:"triangle"===t&&"circle"===e?C:()=>[0,0],T=(t,e,n)=>{const{points:r,sourceMarkerShape:o,sourceMarkerSize:i,targetMarkerShape:a,targetMarkerSize:u}=t,s=r.length,c=P(o,e.type,t.type),[l,f]=c(e.x,e.y,r[1][0],r[1][1],e.width,e.height,i);r[0]=A(l,f,e.x,e.y,r[1][0],r[1][1]);const d=P(a,n.type,t.type),[h,p]=d(n.x,n.y,r[s-2][0],r[s-2][1],n.width,n.height,u);r[s-1]=A(h,p,n.x,n.y,r[s-2][0],r[s-2][1])},N=(t,e)=>{const n={region:null,x0:0,y0:0};let r=!1;const o=Object(a.a)();return o.on("start",()=>{if(!t.canZoom||t.canDragNode&&i.e.sourceEvent&&i.e.sourceEvent.region){const e=i.e.sourceEvent?JSON.parse(i.e.sourceEvent.region).id:null,{x:r,y:o,k:a}=i.e.transform;n.region=e,n.x0=r/a,n.y0=o/a,e&&((t,e)=>{const n=new window.CustomEvent("nodemovestart",{detail:{id:e}});t.dispatchEvent(n)})(t,e)}}).on("zoom",()=>{const{x:r,y:o,k:a}=i.e.transform;if(t.canDragNode&&n.region){const i=n.region,u=r/a-n.x0,s=o/a-n.y0,{data:c}=e,l=c.vertices.get(i);l.x+=u,l.y+=s;for(const t of l.outEdges){const{points:e}=t;e[0][0]+=u,e[0][1]+=s,T(t,l,c.vertices.get(t.v))}for(const t of l.inEdges){const{points:e}=t;e[e.length-1][0]+=u,e[e.length-1][1]+=s,T(t,c.vertices.get(t.u),l)}n.x0=r/a,n.y0=o/a,((t,{u:e,x:n,y:r})=>{const o=new window.CustomEvent("nodemove",{detail:{id:e,x:n,y:r}});t.dispatchEvent(o)})(t,l)}else!t.canZoom&&i.e.sourceEvent||Object.assign(e.transform,{x:r,y:o,k:a})}).on("end",function(){if(!r&&(!t.canZoom||n.region)){const u=n.region;n.region=null,r=!0,Object(i.k)(this).call(o.transform,a.b.translate(e.transform.x,e.transform.y).scale(e.transform.k)),r=!1,u&&((t,e)=>{const n=new window.CustomEvent("nodemoveend",{detail:{id:e}});t.dispatchEvent(n)})(t,u)}}),o},O=()=>window.devicePixelRatio||1,D=(...t)=>{let e=t[0];const n=t[1],r=n.split(".");for(const o of r){if(!e.hasOwnProperty(o)){if(2===t.length)throw new Error(`Object doesn't have an attribute ${n}`);return t[2]}e=e[o]}return e},R=new WeakMap,I=(t,e)=>{const n=R.get(t);n.canvas.width=e*O(),n.canvas.style.width=`${e}px`},L=(t,e)=>{const n=R.get(t);n.canvas.height=e*O(),n.canvas.style.height=`${e}px`},F=(t,e,n)=>t.hasAttribute(e)?t.getAttribute(e):n,B=(t,e,n,r,o,i,a)=>{if(e<1){t.globalAlpha=1-e;for(const e of n)i(t,e)}t.globalAlpha=Math.min(1,e);for(const e of r)i(t,e);t.globalAlpha=1;for(const{current:n,next:r}of o)i(t,e<1?a(n,r,e):r)};window.customElements.define("eg-renderer",class extends window.HTMLElement{static get observedAttributes(){return["src","width","height","graph-groups-property","graph-nodes-property","graph-links-property","group-x-property","group-y-property","group-width-property","group-height-property","group-type-property","group-visibility-property","group-fill-color-property","group-fill-opacity-property","group-stroke-color-property","group-stroke-opacity-property","group-stroke-width-property","group-label-property","group-label-fill-color-property","group-label-fill-opacity-property","group-label-stroke-color-property","group-label-stroke-opacity-property","group-label-stroke-width-property","group-label-font-size-property","group-label-font-family-property","node-id-property","node-x-property","node-y-property","node-width-property","node-height-property","node-type-property","node-visibility-property","node-fill-color-property","node-fill-opacity-property","node-stroke-color-property","node-stroke-opacity-property","node-stroke-width-property","node-label-property","node-label-fill-color-property","node-label-fill-opacity-property","node-label-stroke-color-property","node-label-stroke-opacity-property","node-label-stroke-width-property","node-label-font-size-property","node-label-font-family-property","link-source-property","link-target-property","link-stroke-color-property","link-stroke-opacity-property","link-stroke-width-property","link-visibility-property","link-source-marker-shape-property","link-source-marker-size-property","link-target-marker-shape-property","link-target-marker-size-property","link-label-property","link-label-fill-color-property","link-label-fill-opacity-property","link-label-stroke-color-property","link-label-stroke-opacity-property","link-label-stroke-width-property","link-label-font-size-property","link-label-font-family-property","default-group-x","default-group-y","default-group-width","default-group-height","default-group-type","default-group-visibility","default-group-fill-color","default-group-fill-opacity","default-group-stroke-color","default-group-stroke-opacity","default-group-stroke-width","default-group-label-fill-color","default-group-label-fill-opacity","default-group-label-stroke-color","default-group-label-stroke-opacity","default-group-label-stroke-width","default-group-label-font-size","default-group-label-font-family","default-node-x","default-node-y","default-node-width","default-node-height","default-node-type","default-node-visibility","default-node-fill-color","default-node-fill-opacity","default-node-stroke-color","default-node-stroke-opacity","default-node-stroke-width","default-node-label","default-node-label-fill-color","default-node-label-fill-opacity","default-node-label-stroke-color","default-node-label-stroke-opacity","default-node-label-stroke-width","default-node-label-font-size","default-node-label-font-family","default-link-stroke-color","default-link-stroke-opacity","default-link-stroke-width","default-link-visibility","default-link-source-marker-shape","default-link-source-marker-size","default-link-target-marker-shape","default-link-target-marker-size","default-link-label","default-link-label-fill-color","default-link-label-fill-opacity","default-link-label-stroke-color","default-link-label-stroke-opacity","default-link-label-stroke-width","default-link-label-font-size","default-link-label-font-family"]}constructor(){super();const t={invalidate:!1,invalidatePositions:!1,originalData:null,canvas:document.createElement("canvas"),data:{groupIds:[],groups:new Map,vertexIds:[],vertices:new Map,edgeIds:[],edges:new Map},transform:{x:0,y:0,k:1},currentRegion:null,layout:{update:{groups:[],vertices:[],edges:[]},enter:{groups:[],vertices:[],edges:[]},exit:{groups:[],vertices:[],edges:[]}},margin:10,layoutTime:0,ease:r.m};t.zoom=N(this,t),R.set(this,t),Object(i.k)(t.canvas).call(t.zoom),t.canvas.addEventListener("mousemove",e=>{if(e.region){const n=JSON.parse(e.region);if(null==t.currentRegion)if(n.id){const{id:t}=n;this.dispatchEvent(new window.CustomEvent("nodemouseenter",{detail:{id:t}}))}else if(n.source&&n.target){const{source:t,target:e}=n;this.dispatchEvent(new window.CustomEvent("linkmouseenter",{detail:{source:t,target:e}}))}t.currentRegion=n}else{if(t.currentRegion){const e=t.currentRegion;if(e.id){const{id:t}=e;this.dispatchEvent(new window.CustomEvent("nodemouseleave",{detail:{id:t}}))}else if(e.source&&e.target){const{source:t,target:n}=e;this.dispatchEvent(new window.CustomEvent("linkmouseleave",{detail:{source:t,target:n}}))}}t.currentRegion=null}this.canDragNode&&e.region?JSON.parse(e.region).id&&(t.canvas.style.cursor="pointer"):this.canZoom?t.canvas.style.cursor="move":t.canvas.style.cursor="default"}),t.canvas.addEventListener("click",t=>{if(t.region){const e=JSON.parse(t.region);if(e.id){const{id:t}=e;this.dispatchEvent(new window.CustomEvent("nodeclick",{detail:{id:t}}))}else if(e.source&&e.target){const{source:t,target:n}=e;this.dispatchEvent(new window.CustomEvent("linkclick",{detail:{source:t,target:n}}))}}})}connectedCallback(){const t=R.get(this);this.appendChild(t.canvas);const e=()=>{t.invalidate&&t.originalData&&this.update(!t.invalidatePositions),t.invalidate=!1,t.invalidatePositions=!1;const n=new Date,r=this.transitionDuration,o=n>t.layoutTime?(n-t.layoutTime)/r:1/r,i=t.ease(o),a=t.canvas.getContext("2d");a.save(),a.clearRect(0,0,t.canvas.width,t.canvas.height),a.scale(O(),O()),a.translate(t.margin,t.margin),a.translate(t.transform.x,t.transform.y),a.scale(t.transform.k,t.transform.k),B(a,i,t.layout.exit.groups,t.layout.enter.groups,t.layout.update.groups,x,f),B(a,i,t.layout.exit.groups,t.layout.enter.groups,t.layout.update.groups,v,f),this.enableLinkEvents&&B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,_,h),B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,w,h),B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,E,h),B(a,i,t.layout.exit.vertices,t.layout.enter.vertices,t.layout.update.vertices,m,d),B(a,i,t.layout.exit.vertices,t.layout.enter.vertices,t.layout.update.vertices,b,d),a.restore(),window.requestAnimationFrame(e)};e()}attributeChangedCallback(t,e,n){switch(t){case"src":window.fetch(n).then(t=>t.json()).then(t=>{this.dispatchEvent(new window.CustomEvent("datafetchend",{detail:t})),this.load(t)});break;case"width":I(this,n);break;case"height":L(this,n);break;default:this.invalidate()}}center(){const{canvas:t,data:e,margin:n,zoom:r}=R.get(this),o=[].concat(Array.from(e.vertices.values()),Array.from(e.groups.values())),{layoutWidth:c,layoutHeight:l,left:f,top:d}=u(o),h=t.width/O(),p=t.height/O(),{x:y,y:g,k:v}=s(c,l,f,d,h,p,n);return r.transform(Object(i.k)(t),a.b.translate(y,g).scale(v).translate(-f,-d)),this}load(t){return R.get(this).originalData=t,this.update()}update(t=!1){const e=R.get(this);e.prevData=e.data;const n=e.originalData,r=D(n,this.graphGroupsProperty,[]).filter(t=>D(t,this.groupVisibilityProperty,this.defaultGroupVisibility)).map((n,r)=>{const i=Object(o.a)(D(n,this.groupFillColorProperty,this.defaultGroupFillColor));i.opacity=+D(n,this.groupFillOpacityProperty,this.defaultGroupFillOpacity);const a=Object(o.a)(D(n,this.groupStrokeColorProperty,this.defaultGroupStrokeColor));a.opacity=+D(n,this.groupStrokeOpacityProperty,this.defaultGroupStrokeOpacity);const u=Object(o.a)(D(n,this.groupLabelFillColorProperty,this.defaultGroupLabelFillColor));u.opacity=+D(n,this.groupLabelFillOpacityProperty,this.defaultGroupLabelFillOpacity);const s=Object(o.a)(D(n,this.groupLabelStrokeColorProperty,this.defaultGroupLabelStrokeColor));s.opacity=+D(n,this.groupLabelStrokeOpacityProperty,this.defaultGroupLabelStrokeOpacity);const c=r.toString();return{g:c,x:t&&e.prevData.groups.has(c)?e.prevData.groups.get(c).x:+D(n,this.groupXProperty,this.defaultGroupX),y:t&&e.prevData.groups.has(c)?e.prevData.groups.get(c).y:+D(n,this.groupYProperty,this.defaultGroupY),width:+D(n,this.groupWidthProperty,this.defaultGroupWidth),height:+D(n,this.groupHeightProperty,this.defaultGroupHeight),type:D(n,this.groupTypeProperty,this.defaultGroupType),fillColor:i,strokeColor:a,strokeWidth:+D(n,this.groupStrokeWidthProperty,this.defaultGroupStrokeWidth),label:D(n,this.groupLabelProperty,this.defaultGroupLabel),labelFillColor:u,labelStrokeColor:s,labelStrokeWidth:+D(n,this.groupLabelStrokeWidthProperty,this.defaultGroupLabelStrokeWidth),labelFontSize:+D(n,this.groupLabelFontSizeProperty,this.defaultGroupLabelFontSize),labelFontFamily:D(n,this.groupLabelFontFamilyProperty,this.defaultGroupLabelFontFamily),d:n}}),i=D(n,this.graphNodesProperty).filter(t=>D(t,this.nodeVisibilityProperty,this.defaultNodeVisibility)).map((n,r)=>{const i=Object(o.a)(D(n,this.nodeFillColorProperty,this.defaultNodeFillColor));i.opacity=+D(n,this.nodeFillOpacityProperty,this.defaultNodeFillOpacity);const a=Object(o.a)(D(n,this.nodeStrokeColorProperty,this.defaultNodeStrokeColor));a.opacity=+D(n,this.nodeStrokeOpacityProperty,this.defaultNodeStrokeOpacity);const u=Object(o.a)(D(n,this.nodeLabelFillColorProperty,this.defaultNodeLabelFillColor));u.opacity=+D(n,this.nodeLabelFillOpacityProperty,this.defaultNodeLabelFillOpacity);const s=Object(o.a)(D(n,this.nodeLabelStrokeColorProperty,this.defaultNodeLabelStrokeColor));s.opacity=+D(n,this.nodeLabelStrokeOpacityProperty,this.defaultNodeLabelStrokeOpacity);const c=("$index"===this.nodeIdProperty?r:D(n,this.nodeIdProperty)).toString();return{u:c,x:t&&e.prevData.vertices.has(c)?e.prevData.vertices.get(c).x:+D(n,this.nodeXProperty,this.defaultNodeX),y:t&&e.prevData.vertices.has(c)?e.prevData.vertices.get(c).y:+D(n,this.nodeYProperty,this.defaultNodeY),width:+D(n,this.nodeWidthProperty,this.defaultNodeWidth),height:+D(n,this.nodeHeightProperty,this.defaultNodeHeight),type:D(n,this.nodeTypeProperty,this.defaultNodeType),fillColor:i,strokeColor:a,strokeWidth:+D(n,this.nodeStrokeWidthProperty,this.defaultNodeStrokeWidth),label:D(n,this.nodeLabelProperty,this.defaultNodeLabel),labelFillColor:u,labelStrokeColor:s,labelStrokeWidth:+D(n,this.nodeLabelStrokeWidthProperty,this.defaultNodeLabelStrokeWidth),labelFontSize:+D(n,this.nodeLabelFontSizeProperty,this.defaultNodeLabelFontSize),labelFontFamily:D(n,this.nodeLabelFontFamilyProperty,this.defaultNodeLabelFontFamily),inEdges:[],outEdges:[],d:n}}),a=new Map(i.map(({u:t},e)=>[t,e])),u=D(n,this.graphLinksProperty).filter(t=>D(t,this.linkVisibilityProperty,this.defaultLinkVisibility)).filter(t=>{const e=D(t,this.linkSourceProperty).toString(),n=D(t,this.linkTargetProperty).toString();return a.has(e)&&a.has(n)}).map(n=>{const r=D(n,this.linkSourceProperty).toString(),u=D(n,this.linkTargetProperty).toString(),s=Object(o.a)(D(n,this.linkStrokeColorProperty,this.defaultLinkStrokeColor));s.opacity=+D(n,this.linkStrokeOpacityProperty,this.defaultLinkStrokeOpacity);const c=Object(o.a)(D(n,this.linkLabelFillColorProperty,this.defaultLinkLabelFillColor));c.opacity=+D(n,this.linkLabelFillOpacityProperty,this.defaultLinkLabelFillOpacity);const l=Object(o.a)(D(n,this.linkLabelStrokeColorProperty,this.defaultLinkLabelStrokeColor));l.opacity=+D(n,this.linkLabelStrokeOpacityProperty,this.defaultLinkLabelStrokeOpacity);const f=i[a.get(r)],d=i[a.get(u)],h=[[f.x,f.y]];for(const[t,e]of D(n,this.linkBendsProperty,[]))h.push([t,e]);h.push([d.x,d.y]);const p={u:r,v:u,points:t&&e.prevData.edges.has(r)&&e.prevData.edges.get(r).has(u)?e.prevData.edges.get(r).get(u).points:h,type:D(n,this.linkTypeProperty,this.defaultLinkType),strokeColor:s,strokeWidth:+D(n,this.linkStrokeWidthProperty,this.defaultLinkStrokeWidth),sourceMarkerShape:D(n,this.linkSourceMarkerShapeProperty,this.defaultLinkSourceMarkerShape),sourceMarkerSize:+D(n,this.linkSourceMarkerSizeProperty,this.defaultLinkSourceMarkerSize),targetMarkerShape:D(n,this.linkTargetMarkerShapeProperty,this.defaultLinkTargetMarkerShape),targetMarkerSize:+D(n,this.linkTargetMarkerSizeProperty,this.defaultLinkTargetMarkerSize),label:D(n,this.linkLabelProperty,this.defaultLinkLabel),labelFillColor:c,labelStrokeColor:l,labelStrokeWidth:+D(n,this.linkLabelStrokeWidthProperty,this.defaultLinkLabelStrokeWidth),labelFontSize:+D(n,this.linkLabelFontSizeProperty,this.defaultLinkLabelFontSize),labelFontFamily:D(n,this.linkLabelFontFamilyProperty,this.defaultLinkLabelFontFamily),d:n};return f.outEdges.push(p),d.inEdges.push(p),p});e.data={groupIds:r.map(({g:t})=>t),groups:new Map(r.map(t=>[t.g,t])),vertexIds:i.map(({u:t})=>t),vertices:new Map(i.map(t=>[t.u,t])),edgeIds:u.map(({u:t,v:e})=>[t,e]),edges:new Map(i.map(t=>[t.u,new Map]))};for(const t of u)e.data.edges.get(t.u).set(t.v,t);this.onLayout(e.data,t);for(const[t,n]of e.data.edgeIds){const r=e.data.edges.get(t).get(n),o=e.data.vertices.get(t),i=e.data.vertices.get(n);T(r,o,i)}return e.layout=p(e.prevData,e.data),e.layoutTime=new Date,this.autoCentering&&this.center(),this.dispatchEvent(new window.CustomEvent("updateend",{detail:{preservePositions:t}})),this}onLayout(){}invalidate(){this.autoUpdate&&(R.get(this).invalidate=!0)}invalidatePositions(){this.autoUpdate&&(R.get(this).invalidatePositions=!0)}get autoUpdate(){return!this.hasAttribute("no-auto-update")}set autoUpdate(t){t?this.removeAttribute("no-auto-update"):this.setAttribute("no-auto-update","")}get autoCentering(){return!this.hasAttribute("no-auto-centering")}set autoCentering(t){t?this.removeAttribute("no-auto-centering"):this.setAttribute("no-auto-centering","")}get canZoom(){return!this.hasAttribute("no-zoom")}set canZoom(t){t?this.removeAttribute("no-zoom"):this.setAttribute("no-zoom","")}get canDragNode(){return!this.hasAttribute("no-drag-node")}set canDragNode(t){t?this.removeAttribute("no-drag-node"):this.setAttribute("no-drag-node","")}get enableLinkEvents(){return this.hasAttribute("enable-link-events")}set enableLinkEvents(t){t?this.removeAttribute("no-drag-node"):this.setAttribute("enable-link-events","")}get src(){return F(this,"src",null)}set src(t){this.setAttribute("src",t)}get width(){return F(this,"width",300)}set width(t){this.setAttribute("width",t)}get height(){return F(this,"height",150)}set height(t){this.setAttribute("height",t)}get transitionDuration(){return F(this,"transition-duration",0)}set transitionDuration(t){this.setAttribute("transition-duration",t)}get graphGroupsProperty(){return F(this,"graph-groups-property","groups")}set graphGroupsProperty(t){this.setAttribute("graph-groups-property",t)}get graphNodesProperty(){return F(this,"graph-nodes-property","nodes")}set graphNodesProperty(t){this.setAttribute("graph-nodes-property",t)}get graphLinksProperty(){return F(this,"graph-links-property","links")}set graphLinksProperty(t){this.setAttribute("graph-links-property",t)}get groupXProperty(){return F(this,"group-x-property","x")}set groupXProperty(t){this.setAttribute("group-x-property",t)}get groupYProperty(){return F(this,"group-y-property","y")}set groupYProperty(t){this.setAttribute("group-y-property",t)}get groupWidthProperty(){return F(this,"group-width-property","width")}set groupWidthProperty(t){this.setAttribute("group-width-property",t)}get groupHeightProperty(){return F(this,"group-height-property","height")}set groupHeightProperty(t){this.setAttribute("group-height-property",t)}get groupFillColorProperty(){return F(this,"group-fill-color-property","fillColor")}set groupFillColorProperty(t){this.setAttribute("group-fill-color-property",t)}get groupFillOpacityProperty(){return F(this,"group-fill-opacity-property","fillOpacity")}set groupFillOpacityProperty(t){this.setAttribute("group-fill-opacity-property",t)}get groupStrokeColorProperty(){return F(this,"group-stroke-color-property","strokeColor")}set groupStrokeColorProperty(t){this.setAttribute("group-stroke-color-property",t)}get groupStrokeOpacityProperty(){return F(this,"group-stroke-opacity-property","strokeOpacity")}set groupStrokeOpacityProperty(t){this.setAttribute("group-stroke-opacity-property",t)}get groupStrokeWidthProperty(){return F(this,"group-stroke-width-property","strokeWidth")}set groupStrokeWidthProperty(t){this.setAttribute("group-stroke-width-property",t)}get groupTypeProperty(){return F(this,"group-type-property","type")}set groupTypeProperty(t){this.setAttribute("group-type-property",t)}get groupVisibilityProperty(){return F(this,"group-visibility-property","visibility")}set groupVisibilityProperty(t){this.setAttribute("group-visibility-property",t)}get groupLabelProperty(){return F(this,"group-label-property","label")}set groupLabelProperty(t){this.setAttribute("group-label-property",t)}get groupLabelFillColorProperty(){return F(this,"group-label-fill-color-property","labelFillColor")}set groupLabelFillColorProperty(t){this.setAttribute("group-label-fill-color-property",t)}get groupLabelFillOpacityProperty(){return F(this,"group-label-fill-opacity-property","labelFillOpacity")}set groupLabelFillOpacityProperty(t){this.setAttribute("group-label-fill-opacity-property",t)}get groupLabelStrokeColorProperty(){return F(this,"group-label-stroke-color-property","labelStrokeColor")}set groupLabelStrokeColorProperty(t){this.setAttribute("group-label-stroke-color-property",t)}get groupLabelStrokeOpacityProperty(){return F(this,"group-label-stroke-opacity-property","labelStrokeOpacity")}set groupLabelStrokeOpacityProperty(t){this.setAttribute("group-label-stroke-opacity-property",t)}get groupLabelStrokeWidthProperty(){return F(this,"group-label-stroke-width-property","labelStrokeWidth")}set groupLabelStrokeWidthProperty(t){this.setAttribute("group-label-stroke-width-property",t)}get groupLabelFontSizeProperty(){return F(this,"group-label-font-size-property","labelFontSize")}set groupLabelFontSizeProperty(t){this.setAttribute("group-label-font-size-property",t)}get groupLabelFontFamilyProperty(){return F(this,"group-label-font-family-property","labelFontFamily")}set groupLabelFontFamilyProperty(t){this.setAttribute("group-label-font-family-property",t)}get nodeIdProperty(){return F(this,"node-id-property","$index")}set nodeIdProperty(t){this.setAttribute("node-id-property",t)}get nodeXProperty(){return F(this,"node-x-property","x")}set nodeXProperty(t){this.setAttribute("node-x-property",t)}get nodeYProperty(){return F(this,"node-y-property","y")}set nodeYProperty(t){this.setAttribute("node-y-property",t)}get nodeWidthProperty(){return F(this,"node-width-property","width")}set nodeWidthProperty(t){this.setAttribute("node-width-property",t)}get nodeHeightProperty(){return F(this,"node-height-property","height")}set nodeHeightProperty(t){this.setAttribute("node-height-property",t)}get nodeFillColorProperty(){return F(this,"node-fill-color-property","fillColor")}set nodeFillColorProperty(t){this.setAttribute("node-fill-color-property",t)}get nodeFillOpacityProperty(){return F(this,"node-fill-opacity-property","fillOpacity")}set nodeFillOpacityProperty(t){this.setAttribute("node-fill-opacity-property",t)}get nodeStrokeColorProperty(){return F(this,"node-stroke-color-property","strokeColor")}set nodeStrokeColorProperty(t){this.setAttribute("node-stroke-color-property",t)}get nodeStrokeOpacityProperty(){return F(this,"node-stroke-opacity-property","strokeOpacity")}set nodeStrokeOpacityProperty(t){this.setAttribute("node-stroke-opacity-property",t)}get nodeStrokeWidthProperty(){return F(this,"node-stroke-width-property","strokeWidth")}set nodeStrokeWidthProperty(t){this.setAttribute("node-stroke-width-property",t)}get nodeTypeProperty(){return F(this,"node-type-property","type")}set nodeTypeProperty(t){this.setAttribute("node-type-property",t)}get nodeVisibilityProperty(){return F(this,"node-visibility-property","visibility")}set nodeVisibilityProperty(t){this.setAttribute("node-visibility-property",t)}get nodeLabelProperty(){return F(this,"node-label-property","label")}set nodeLabelProperty(t){this.setAttribute("node-label-property",t)}get nodeLabelFillColorProperty(){return F(this,"node-label-fill-color-property","labelFillColor")}set nodeLabelFillColorProperty(t){this.setAttribute("node-label-fill-color-property",t)}get nodeLabelFillOpacityProperty(){return F(this,"node-label-fill-opacity-property","labelFillOpacity")}set nodeLabelFillOpacityProperty(t){this.setAttribute("node-label-fill-opacity-property",t)}get nodeLabelStrokeColorProperty(){return F(this,"node-label-stroke-color-property","labelStrokeColor")}set nodeLabelStrokeColorProperty(t){this.setAttribute("node-label-stroke-color-property",t)}get nodeLabelStrokeOpacityProperty(){return F(this,"node-label-stroke-opacity-property","labelStrokeOpacity")}set nodeLabelStrokeOpacityProperty(t){this.setAttribute("node-label-stroke-opacity-property",t)}get nodeLabelStrokeWidthProperty(){return F(this,"node-label-stroke-width-property","labelStrokeWidth")}set nodeLabelStrokeWidthProperty(t){this.setAttribute("node-label-stroke-width-property",t)}get nodeLabelFontSizeProperty(){return F(this,"node-label-font-size-property","labelFontSize")}set nodeLabelFontSizeProperty(t){this.setAttribute("node-label-font-size-property",t)}get nodeLabelFontFamilyProperty(){return F(this,"node-label-font-family-property","labelFontFamily")}set nodeLabelFontFamilyProperty(t){this.setAttribute("node-label-font-family-property",t)}get linkSourceProperty(){return F(this,"link-source-property","source")}set linkSourceProperty(t){this.setAttribute("link-source-property",t)}get linkTargetProperty(){return F(this,"link-target-property","target")}set linkTargetProperty(t){this.setAttribute("link-target-property",t)}get linkBendsProperty(){return F(this,"link-bends-property","bends")}set linkBendsProperty(t){this.setAttribute("link-bends-property",t)}get linkStrokeColorProperty(){return F(this,"link-stroke-color-property","strokeColor")}set linkStrokeColorProperty(t){this.setAttribute("link-stroke-color-property",t)}get linkStrokeOpacityProperty(){return F(this,"link-stroke-opacity-property","strokeOpacity")}set linkStrokeOpacityProperty(t){this.setAttribute("link-stroke-opacity-property",t)}get linkStrokeWidthProperty(){return F(this,"link-stroke-width-property","strokeWidth")}set linkStrokeWidthProperty(t){this.setAttribute("link-stroke-width-property",t)}get linkTypeProperty(){return F(this,"link-type-property","type")}set linkTypeProperty(t){this.setAttribute("link-type-property",t)}get linkVisibilityProperty(){return F(this,"link-visibility-property","visibility")}set linkVisibilityProperty(t){this.setAttribute("link-visibility-property",t)}get linkSourceMarkerShapeProperty(){return F(this,"link-source-marker-shape-property","sourceMarkerShape")}set linkSourceMarkerShapeProperty(t){this.setAttribute("link-source-marker-shape-property",t)}get linkSourceMarkerSizeProperty(){return F(this,"link-source-marker-size-property","sourceMarkerSize")}set linkSourceMarkerSizeProperty(t){this.setAttribute("link-source-marker-size-property",t)}get linkTargetMarkerShapeProperty(){return F(this,"link-target-marker-shape-property","targetMarkerShape")}set linkTargetMarkerShapeProperty(t){this.setAttribute("link-target-marker-shape-property",t)}get linkTargetMarkerSizeProperty(){return F(this,"link-target-marker-size-property","targetMarkerSize")}set linkTargetMarkerSizeProperty(t){this.setAttribute("link-target-marker-size-property",t)}get linkLabelProperty(){return F(this,"link-label-property","label")}set linkLabelProperty(t){this.setAttribute("link-label-property",t)}get linkLabelFillColorProperty(){return F(this,"link-label-fill-color-property","labelFillColor")}set linkLabelFillColorProperty(t){this.setAttribute("link-label-fill-color-property",t)}get linkLabelFillOpacityProperty(){return F(this,"link-label-fill-opacity-property","labelFillOpacity")}set linkLabelFillOpacityProperty(t){this.setAttribute("link-label-fill-opacity-property",t)}get linkLabelStrokeColorProperty(){return F(this,"link-label-stroke-color-property","labelStrokeColor")}set linkLabelStrokeColorProperty(t){this.setAttribute("link-label-stroke-color-property",t)}get linkLabelStrokeOpacityProperty(){return F(this,"link-label-stroke-opacity-property","labelStrokeOpacity")}set linkLabelStrokeOpacityProperty(t){this.setAttribute("link-label-stroke-opacity-property",t)}get linkLabelStrokeWidthProperty(){return F(this,"link-label-stroke-width-property","labelStrokeWidth")}set linkLabelStrokeWidthProperty(t){this.setAttribute("link-label-stroke-width-property",t)}get linkLabelFontSizeProperty(){return F(this,"link-label-font-size-property","labelFontSize")}set linkLabelFontSizeProperty(t){this.setAttribute("link-label-font-size-property",t)}get linkLabelFontFamilyProperty(){return F(this,"link-label-font-family-property","labelFontFamily")}set linkLabelFontFamilyProperty(t){this.setAttribute("link-label-font-family-property",t)}get defaultGroupX(){return F(this,"default-group-x",0)}set defaultGroupX(t){this.setAttribute("default-group-x",t)}get defaultGroupY(){return F(this,"default-group-y",0)}set defaultGroupY(t){this.setAttribute("default-group-y",t)}get defaultGroupWidth(){return F(this,"default-group-width",10)}set defaultGroupWidth(t){this.setAttribute("default-group-width",t)}get defaultGroupHeight(){return F(this,"default-group-height",10)}set defaultGroupHeight(t){this.setAttribute("default-group-height",t)}get defaultGroupFillColor(){return F(this,"default-group-fill-color","#fff")}set defaultGroupFillColor(t){this.setAttribute("default-group-fill-color",t)}get defaultGroupFillOpacity(){return F(this,"default-group-fill-opacity",1)}set defaultGroupFillOpacity(t){this.setAttribute("default-group-fill-opacity",t)}get defaultGroupStrokeColor(){return F(this,"default-group-stroke-color","#000")}set defaultGroupStrokeColor(t){this.setAttribute("default-group-stroke-color",t)}get defaultGroupStrokeOpacity(){return F(this,"default-group-stroke-opacity",1)}set defaultGroupStrokeOpacity(t){this.setAttribute("default-group-stroke-opacity",t)}get defaultGroupStrokeWidth(){return F(this,"default-group-stroke-width",1)}set defaultGroupStrokeWidth(t){this.setAttribute("default-group-stroke-width",t)}get defaultGroupType(){return F(this,"default-group-type","rect")}set defaultGroupType(t){this.setAttribute("default-group-type",t)}get defaultGroupVisibility(){return F(this,"default-group-visibility",!0)}set defaultGroupVisibility(t){this.setAttribute("default-group-visibility",t)}get defaultGroupLabel(){return F(this,"default-group-label","")}set defaultGroupLabel(t){this.setAttribute("default-group-label",t)}get defaultGroupLabelFillColor(){return F(this,"default-group-label-fill-color","#000")}set defaultGroupLabelFillColor(t){this.setAttribute("default-group-label-fill-color",t)}get defaultGroupLabelFillOpacity(){return F(this,"default-group-label-fill-opacity",1)}set defaultGroupLabelFillOpacity(t){this.setAttribute("default-group-label-fill-opacity",t)}get defaultGroupLabelStrokeColor(){return F(this,"default-group-label-stroke-color","#fff")}set defaultGroupLabelStrokeColor(t){this.setAttribute("default-group-label-stroke-color",t)}get defaultGroupLabelStrokeOpacity(){return F(this,"default-group-label-stroke-opacity",1)}set defaultGroupLabelStrokeOpacity(t){this.setAttribute("default-group-label-stroke-opacity",t)}get defaultGroupLabelStrokeWidth(){return F(this,"default-group-label-stroke-width",0)}set defaultGroupLabelStrokeWidth(t){this.setAttribute("default-group-label-stroke-width",t)}get defaultGroupLabelFontSize(){return F(this,"default-group-label-font-size",10)}set defaultGroupLabelFontSize(t){this.setAttribute("default-group-label-font-size",t)}get defaultGroupLabelFontFamily(){return F(this,"default-group-label-font-family","serif")}set defaultGroupLabelFontFamily(t){this.setAttribute("default-group-label-font-family",t)}get defaultNodeX(){return F(this,"default-node-x",0)}set defaultNodeX(t){this.setAttribute("default-node-x",t)}get defaultNodeY(){return F(this,"default-node-y",0)}set defaultNodeY(t){this.setAttribute("default-node-y",t)}get defaultNodeWidth(){return F(this,"default-node-width",10)}set defaultNodeWidth(t){this.setAttribute("default-node-width",t)}get defaultNodeHeight(){return F(this,"default-node-height",10)}set defaultNodeHeight(t){this.setAttribute("default-node-height",t)}get defaultNodeFillColor(){return F(this,"default-node-fill-color","#fff")}set defaultNodeFillColor(t){this.setAttribute("default-node-fill-color",t)}get defaultNodeFillOpacity(){return F(this,"default-node-fill-opacity",1)}set defaultNodeFillOpacity(t){this.setAttribute("default-node-fill-opacity",t)}get defaultNodeStrokeColor(){return F(this,"default-node-stroke-color","#000")}set defaultNodeStrokeColor(t){this.setAttribute("default-node-stroke-color",t)}get defaultNodeStrokeOpacity(){return F(this,"default-node-stroke-opacity",1)}set defaultNodeStrokeOpacity(t){this.setAttribute("default-node-stroke-opacity",t)}get defaultNodeStrokeWidth(){return F(this,"default-node-stroke-width",1)}set defaultNodeStrokeWidth(t){this.setAttribute("default-node-stroke-width",t)}get defaultNodeType(){return F(this,"default-node-type","circle")}set defaultNodeType(t){this.setAttribute("default-node-type",t)}get defaultNodeVisibility(){return F(this,"default-node-visibility",!0)}set defaultNodeVisibility(t){this.setAttribute("default-node-visibility",t)}get defaultNodeLabel(){return F(this,"default-node-label","")}set defaultNodeLabel(t){this.setAttribute("default-node-label",t)}get defaultNodeLabelFillColor(){return F(this,"default-node-label-fill-color","#000")}set defaultNodeLabelFillColor(t){this.setAttribute("default-node-label-fill-color",t)}get defaultNodeLabelFillOpacity(){return F(this,"default-node-label-fill-opacity",1)}set defaultNodeLabelFillOpacity(t){this.setAttribute("default-node-label-fill-opacity",t)}get defaultNodeLabelStrokeColor(){return F(this,"default-node-label-stroke-color","#fff")}set defaultNodeLabelStrokeColor(t){this.setAttribute("default-node-label-stroke-color",t)}get defaultNodeLabelStrokeOpacity(){return F(this,"default-node-label-stroke-opacity",1)}set defaultNodeLabelStrokeOpacity(t){this.setAttribute("default-node-label-stroke-opacity",t)}get defaultNodeLabelStrokeWidth(){return F(this,"default-node-label-stroke-width",0)}set defaultNodeLabelStrokeWidth(t){this.setAttribute("default-node-label-stroke-width",t)}get defaultNodeLabelFontSize(){return F(this,"default-node-label-font-size",10)}set defaultNodeLabelFontSize(t){this.setAttribute("default-node-label-font-size",t)}get defaultNodeLabelFontFamily(){return F(this,"default-node-label-font-family","serif")}set defaultNodeLabelFontFamily(t){this.setAttribute("default-node-label-font-family",t)}get defaultLinkStrokeColor(){return F(this,"default-link-stroke-color","#000")}set defaultLinkStrokeColor(t){this.setAttribute("default-link-stroke-color",t)}get defaultLinkStrokeOpacity(){return F(this,"default-link-stroke-opacity",1)}set defaultLinkStrokeOpacity(t){this.setAttribute("default-link-stroke-opacity",t)}get defaultLinkStrokeWidth(){return F(this,"default-link-stroke-width",1)}set defaultLinkStrokeWidth(t){this.setAttribute("default-link-stroke-width",t)}get defaultLinkType(){return F(this,"default-link-type","line")}set defaultLinkType(t){this.setAttribute("default-link-type",t)}get defaultLinkVisibility(){return F(this,"default-link-visibility",!0)}set defaultLinkVisibility(t){this.setAttribute("default-link-visibility",t)}get defaultLinkSourceMarkerShape(){return F(this,"default-link-source-marker-shape","none")}set defaultLinkSourceMarkerShape(t){this.setAttribute("default-link-source-marker-shape",t)}get defaultLinkSourceMarkerSize(){return F(this,"default-link-source-marker-size",5)}set defaultLinkSourceMarkerSize(t){this.setAttribute("default-link-source-marker-size",t)}get defaultLinkTargetMarkerShape(){return F(this,"default-link-target-marker-shape","none")}set defaultLinkTargetMarkerShape(t){this.setAttribute("default-link-target-marker-shape",t)}get defaultLinkTargetMarkerSize(){return F(this,"default-link-target-marker-size",5)}set defaultLinkTargetMarkerSize(t){this.setAttribute("default-link-target-marker-size",t)}get defaultLinkLabel(){return F(this,"default-link-label","")}set defaultLinkLabel(t){this.setAttribute("default-link-label",t)}get defaultLinkLabelFillColor(){return F(this,"default-link-label-fill-color","#000")}set defaultLinkLabelFillColor(t){this.setAttribute("default-link-label-fill-color",t)}get defaultLinkLabelFillOpacity(){return F(this,"default-link-label-fill-opacity",1)}set defaultLinkLabelFillOpacity(t){this.setAttribute("default-link-label-fill-opacity",t)}get defaultLinkLabelStrokeColor(){return F(this,"default-link-label-stroke-color","#fff")}set defaultLinkLabelStrokeColor(t){this.setAttribute("default-link-label-stroke-color",t)}get defaultLinkLabelStrokeOpacity(){return F(this,"default-link-label-stroke-opacity",1)}set defaultLinkLabelStrokeOpacity(t){this.setAttribute("default-link-label-stroke-opacity",t)}get defaultLinkLabelStrokeWidth(){return F(this,"default-link-label-stroke-width",0)}set defaultLinkLabelStrokeWidth(t){this.setAttribute("default-link-label-stroke-width",t)}get defaultLinkLabelFontSize(){return F(this,"default-link-label-font-size",10)}set defaultLinkLabelFontSize(t){this.setAttribute("default-link-label-font-size",t)}get defaultLinkLabelFontFamily(){return F(this,"default-link-label-font-family","serif")}set defaultLinkLabelFontFamily(t){this.setAttribute("default-link-label-font-family",t)}get data(){return R.get(this).originalData}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9sb2NhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tb3VzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvdG91Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvdG91Y2hlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGlzY3JldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9odWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaHNsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaGNsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcGllY2V3aXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcXVhbnRpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvcmVhY3RQcm9kSW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RET01Db21wb25lbnRUcmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEluc3RydW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0VXBkYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZVR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2FjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUG9vbGVkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRE9NUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RSZWNvbmNpbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0RPTUxhenlUcmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3F1YWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9wb2x5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9ib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2JhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2VsYXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9yZWFjdFByb2RJbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpbkh1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvc2V0SW5uZXJIVE1MLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2VncmFwaC1ycy9lZ3JhcGgtanMvYWxsb2NhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RFcnJvclV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2dldEV2ZW50VGFyZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0RPTUNoaWxkcmVuT3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9ET01OYW1lc3BhY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvTGlua2VkVmFsdWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0tleUVzY2FwZVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0VXBkYXRlUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvdmFsaWRhdGVET01OZXN0aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2dldEV2ZW50Q2hhckNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROb29wVXBkYXRlUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2FuRGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudEZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0NhbGxiYWNrUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RGZWF0dXJlRmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvaW5wdXRWYWx1ZVRyYWNraW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9WaWV3cG9ydE1ldHJpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvc2V0VGV4dENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvZmJqcy9saWIvZm9jdXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0NTU1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0Tm9kZVR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RW1wdHlDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0TW91bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VncmFwaC9ncmFwaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWdyYXBoL3V0aWxzL2FjY2Vzc29yLmpzIiwid2VicGFjazovLy8uL3NyYy9lZ3JhcGgvbGF5b3V0ZXIvc3VnaXlhbWEvbGF5ZXItYXNzaWdubWVudC9sb25nZXN0LXBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzL2Rpc3QvcGFja2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy92YXJpYW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2RldmlhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2hpc3RvZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL2ZyZWVkbWFuRGlhY29uaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc2NvdHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc2Nhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NodWZmbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90cmFuc3Bvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvY2hvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvcmliYm9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL25lc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnRvdXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9ibHVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9kZW5zaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy9jc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvYmxvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy94bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2ppZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZHRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb2xsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXRBZnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYWRkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NhcnRlc2lhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9pbnRFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3Jlam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9yZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2Rpc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2dyYXRpY3VsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0NvbmZvcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWlyZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NsdXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQmVmb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZGVzY2VuZGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xlYXZlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9lbmNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svc2libGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYWNjZXNzb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2RpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFydGl0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3N0cmF0aWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NxdWFyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZURpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yZXNxdWFyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2h1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9sb2dOb3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvaXJ3aW5IYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2JhdGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2V4cG9uZW50aWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL25pY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9wb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9xdWFudGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGhyZXNob2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb1BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3V0Y1RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvZGl2ZXJnaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0FjY2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0Mi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL0JyQkcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BSR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BpWUcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1B1T3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkQnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkR3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxCdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9TcGVjdHJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1R24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdVB1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvR25CdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL09yUmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1R24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVSZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPckJyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPclJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZWVucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1JlZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3JhaW5ib3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9zaW5lYm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdmlyaWRpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lUmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYVJhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50UmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5rL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9kaWFtb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3F1YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3RyaWFuZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3d5ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNPcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYnVuZGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbENsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbU9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXJDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL25hdHVyYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L25vbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvZXhwYW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L2RpdmVyZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9zaWxob3VldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L3dpZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9pbnNpZGVPdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9yZXZlcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL1JlZEJsYWNrVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9CZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRGlhZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvdm9yb25vaS5qcyIsIndlYnBhY2s6Ly8vLi4vZWdyYXBoLXJzL2VncmFwaC1qcy9lZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qvbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvbG93UHJpb3JpdHlXYXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9LZXlFc2NhcGVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NRmFjdG9yaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9vbmx5Q2hpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERlZmF1bHRJbmplY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvQVJJQURPTVByb3BlcnR5Q29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljSW5wdXRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdE93bmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0VudGVyTGVhdmVFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9IVE1MRE9NUHJvcGVydHlDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRGFuZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRNYXJrdXBXcmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0F1dG9Gb2N1c1V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0NTU1Byb3BlcnR5T3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvZmJqcy9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NT3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dGFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0TmV4dERlYnVnSUQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2dldEl0ZXJhdG9yRm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NVHJlZVRyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVRleHRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RJbmplY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNBbmltYXRpb25FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNGb2N1c0V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljVHJhbnNpdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RET01Db250YWluZXJJbmZvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NRmVhdHVyZUZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0TWFya3VwQ2hlY2tzdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdFZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC5qcyIsIndlYnBhY2s6Ly8vLi4vZWdyYXBoLXJzL2VncmFwaC1qcy9hbGdvcml0aG1zLmpzIiwid2VicGFjazovLy8uLi9lZ3JhcGgtcnMvZWdyYXBoLWpzL2xheW91dC9mb3JjZS1kaXJlY3RlZC5qcyIsIndlYnBhY2s6Ly8vLi4vZWdyYXBoLXJzL2VncmFwaC1qcy9ncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi4vZWdyYXBoLXJzL2VncmFwaC1qcy9lZGdlLWJ1bmRsaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL2VncmFwaC1ycy9lZ3JhcGgtanMvbG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9lZ3JhcGgvZ3JhcGgvbXV0YWJsZS1ncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWdyYXBoL2dyYXBoL2Fic3RyYWN0LWdyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9lZ3JhcGgvdHJhbnNmb3JtZXIvZWRnZS1jb25jZW50cmF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9lZ3JhcGgvbGF5b3V0ZXIvc3VnaXlhbWEvbGF5ZXItYXNzaWdubWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWdyYXBoL2xheW91dGVyL3N1Z2l5YW1hL2xheWVyLWFzc2lnbm1lbnQvcXVhZC1oZXVyaXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VncmFwaC9sYXlvdXRlci9zdWdpeWFtYS9taXNjL2dyb3VwLWxheWVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWdyYXBoL3RyYW5zZm9ybWVyL2VkZ2UtY29uY2VudHJhdGlvbi9yZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWdyYXBoL3RyYW5zZm9ybWVyL2VkZ2UtY29uY2VudHJhdGlvbi9xdWFzaS1iaWNsaXF1ZS1taW5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VnLXJlbmRlcmVyL3NyYy9jZW50ZXJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VnLXJlbmRlcmVyL3NyYy9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWctcmVuZGVyZXIvc3JjL3JlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWctcmVuZGVyZXIvc3JjL21hcmtlci1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWctcmVuZGVyZXIvc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VnLXJlbmRlcmVyL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInhodG1sIiwibmFtZXNwYWNlcyIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lc3BhY2UiLCJwcmVmaXgiLCJpbmRleE9mIiwic2xpY2UiLCJzcGFjZSIsImxvY2FsIiwiY3JlYXRvciIsImZ1bGxuYW1lIiwidGhpcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJkb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJub25lIiwic3JjX3NlbGVjdG9yIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsIm1hdGNoZXJfZWxlbWVudCIsInZlbmRvck1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJzcmNfbWF0Y2hlciIsInNwYXJzZSIsInVwZGF0ZSIsIkFycmF5IiwibGVuZ3RoIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhc2NlbmRpbmciLCJhIiwiYiIsIk5hTiIsInNyY193aW5kb3ciLCJkZWZhdWx0VmlldyIsInN0eWxlVmFsdWUiLCJzdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJwdXNoIiwic2V0QXR0cmlidXRlIiwiam9pbiIsInNwbGljZSIsImNvbnRhaW5zIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsIm9uX2V2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwiZXZlbnQiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIm9uIiwiX19vbiIsImoiLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VzdG9tRXZlbnQiLCJ0aGF0IiwiYXJncyIsInNvdXJjZUV2ZW50IiwiYXBwbHkiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb25fc2VsZWN0aW9uIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwiZmlsdGVyIiwibWF0Y2giLCJzaXplIiwiZWFjaCIsIngiLCJjb25zdGFudCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTAiLCJpMSIsIl9lbnRlciIsIl9leGl0IiwibWFwIiwibWVyZ2UiLCJzZWxlY3Rpb24iLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJNYXRoIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwib3JkZXIiLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwibm9kZXMiLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInYiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImNsYXNzZWQiLCJ0ZXh0IiwiaHRtbCIsImFwcGVuZCIsImluc2VydCIsImJlZm9yZSIsImNsb25lIiwiZGVlcCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJzcmNfc2VsZWN0aW9uIiwic3JjX3NlbGVjdCIsInNyY19jcmVhdGUiLCJuZXh0SWQiLCJMb2NhbCIsIl8iLCJ0b1N0cmluZyIsImlkIiwic2V0Iiwic291cmNlIiwiY3VycmVudCIsInBvaW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwibW91c2UiLCJjaGFuZ2VkVG91Y2hlcyIsInNyY19zZWxlY3RBbGwiLCJzcmNfdG91Y2giLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsInRvdWNoIiwic3JjX3RvdWNoZXMiLCJwb2ludHMiLCJkZWZpbmUiLCJmYWN0b3J5IiwiZXh0ZW5kIiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgzIiwicmVIZXg2IiwicmVSZ2JJbnRlZ2VyIiwiUmVnRXhwIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yIiwiZm9ybWF0IiwidG9Mb3dlckNhc2UiLCJleGVjIiwiUmdiIiwicGFyc2VJbnQiLCJyZ2JuIiwicmdiYSIsImhzbGEiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJtYXgiLCJyb3VuZCIsImgiLCJIc2wiLCJoc2wiLCJoc2xDb252ZXJ0IiwiaHNsMnJnYiIsIm0yIiwiZGlzcGxheWFibGUiLCJicmlnaHRlciIsImsiLCJwb3ciLCJkYXJrZXIiLCJpc05hTiIsImRlZzJyYWQiLCJQSSIsInJhZDJkZWciLCJYbiIsIlluIiwiWm4iLCJ0MCIsInQxIiwidDIiLCJ0MyIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJjb3MiLCJzaW4iLCJ6IiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImF0YW4yIiwic3FydCIsImxjaCIsImhjbCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRUQiLCJFQiIsIkJDX0RBIiwiY3ViZWhlbGl4IiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwiY29zaCIsInNpbmgiLCJ2YWxpZGF0ZUZvcm1hdCIsImNvbmRpdGlvbiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiYmFzaXMiLCJ2MCIsInYxIiwidjIiLCJ2MyIsInNyY19iYXNpcyIsInZhbHVlcyIsImZsb29yIiwiYmFzaXNDbG9zZWQiLCJsaW5lYXIiLCJjb2xvcl9odWUiLCJnYW1tYSIsIm5vZ2FtbWEiLCJleHBvbmVudGlhbCIsInJnYkdhbW1hIiwic3RhcnQiLCJlbmQiLCJzcmMiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJjb2xvcnMiLCJyZ2JCYXNpcyIsInJnYkJhc2lzQ2xvc2VkIiwiYXJyYXkiLCJuYiIsIm5hIiwic3JjX3ZhbHVlIiwiZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwibnVtYmVyIiwicmVBIiwicmVCIiwiY3NzTm9kZSIsImNzc1Jvb3QiLCJjc3NWaWV3Iiwic3ZnTm9kZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsInplcm8iLCJzcmNfcmdiIiwiaXNBcnJheSIsInZhbHVlT2YiLCJkaXNjcmV0ZSIsInJhbmdlIiwic3JjX2h1ZSIsImRlZ3JlZXMiLCJpZGVudGl0eSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJkZWNvbXBvc2UiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsInNjYWxlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJ0cmFuc2Zvcm0iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsInJobyIsIlNRUlQyIiwiZXhwIiwiem9vbSIsInAwIiwicDEiLCJTIiwidXgwIiwidXkwIiwidzAiLCJ1eDEiLCJ1eTEiLCJ3MSIsImR4IiwiZHkiLCJkMiIsImxvZyIsImQxIiwiYjAiLCJiMSIsInIwIiwicjEiLCJjb3NocjAiLCJ1IiwidGFuaCIsImR1cmF0aW9uIiwiaHVlIiwic3JjX2hzbCIsImhzbExvbmciLCJzcmNfaGNsIiwiaGNsTG9uZyIsImN1YmVoZWxpeF9jdWJlaGVsaXgiLCJjdWJlaGVsaXhHYW1tYSIsInNyY19jdWJlaGVsaXgiLCJjdWJlaGVsaXhMb25nIiwicGllY2V3aXNlIiwiaW50ZXJwb2xhdGUiLCJJIiwicXVhbnRpemUiLCJpbnRlcnBvbGF0b3IiLCJzYW1wbGVzIiwiY29kZSIsImFyZ0NvdW50IiwibWVzc2FnZSIsImFyZ0lkeCIsImVuY29kZVVSSUNvbXBvbmVudCIsIndhcm5pbmciLCJfcHJvZEludmFyaWFudCIsIkRPTVByb3BlcnR5IiwiUmVhY3RET01Db21wb25lbnRGbGFncyIsIkFUVFJfTkFNRSIsIklEX0FUVFJJQlVURV9OQU1FIiwiRmxhZ3MiLCJpbnRlcm5hbEluc3RhbmNlS2V5IiwicmFuZG9tIiwic2hvdWxkUHJlY2FjaGVOb2RlIiwibm9kZUlEIiwibm9kZVR5cGUiLCJTdHJpbmciLCJub2RlVmFsdWUiLCJnZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50IiwiY29tcG9uZW50IiwicmVuZGVyZWQiLCJfcmVuZGVyZWRDb21wb25lbnQiLCJwcmVjYWNoZU5vZGUiLCJpbnN0IiwiaG9zdEluc3QiLCJfaG9zdE5vZGUiLCJwcmVjYWNoZUNoaWxkTm9kZXMiLCJfZmxhZ3MiLCJoYXNDYWNoZWRDaGlsZE5vZGVzIiwiY2hpbGRyZW4iLCJfcmVuZGVyZWRDaGlsZHJlbiIsImNoaWxkTm9kZSIsIm91dGVyIiwiY2hpbGRJbnN0IiwiY2hpbGRJRCIsIl9kb21JRCIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiY2xvc2VzdCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiX2hvc3RQYXJlbnQiLCJ1bmNhY2hlTm9kZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFzc2lnbiIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJub29wIiwiRGlzcGF0Y2giLCJjb25jYXQiLCJUIiwidHlwZXMiLCJjb3B5Iiwic3JjX2Rpc3BhdGNoIiwiZGVidWdUb29sIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInRpbWVyX2ZyYW1lIiwidGltZW91dCIsImludGVydmFsIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ0aW1lckZsdXNoIiwid2FrZSIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwic3RvcCIsInNyY190aW1lb3V0IiwiZWxhcHNlZCIsInNyY19pbnRlcnZhbCIsInRvdGFsIiwidGljayIsIl9hc3NpZ24iLCJDYWxsYmFja1F1ZXVlIiwiUG9vbGVkQ2xhc3MiLCJSZWFjdEZlYXR1cmVGbGFncyIsIlJlYWN0UmVjb25jaWxlciIsIlRyYW5zYWN0aW9uIiwiZGlydHlDb21wb25lbnRzIiwidXBkYXRlQmF0Y2hOdW1iZXIiLCJhc2FwQ2FsbGJhY2tRdWV1ZSIsImdldFBvb2xlZCIsImFzYXBFbnF1ZXVlZCIsImJhdGNoaW5nU3RyYXRlZ3kiLCJlbnN1cmVJbmplY3RlZCIsIlJlYWN0VXBkYXRlcyIsIlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJUUkFOU0FDVElPTl9XUkFQUEVSUyIsImluaXRpYWxpemUiLCJkaXJ0eUNvbXBvbmVudHNMZW5ndGgiLCJjbG9zZSIsImZsdXNoQmF0Y2hlZFVwZGF0ZXMiLCJjYWxsYmFja1F1ZXVlIiwicmVzZXQiLCJub3RpZnlBbGwiLCJSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uIiwicmVpbml0aWFsaXplVHJhbnNhY3Rpb24iLCJyZWNvbmNpbGVUcmFuc2FjdGlvbiIsIm1vdW50T3JkZXJDb21wYXJhdG9yIiwiYzEiLCJjMiIsIl9tb3VudE9yZGVyIiwicnVuQmF0Y2hlZFVwZGF0ZXMiLCJ0cmFuc2FjdGlvbiIsImxlbiIsIm1hcmtlck5hbWUiLCJjYWxsYmFja3MiLCJfcGVuZGluZ0NhbGxiYWNrcyIsImxvZ1RvcExldmVsUmVuZGVycyIsIm5hbWVkQ29tcG9uZW50IiwiX2N1cnJlbnRFbGVtZW50IiwiaXNSZWFjdFRvcExldmVsV3JhcHBlciIsImdldE5hbWUiLCJjb25zb2xlIiwicGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IiwidGltZUVuZCIsImVucXVldWUiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImdldFRyYW5zYWN0aW9uV3JhcHBlcnMiLCJkZXN0cnVjdG9yIiwicmVsZWFzZSIsInBlcmZvcm0iLCJtZXRob2QiLCJzY29wZSIsImFkZFBvb2xpbmdUbyIsInF1ZXVlIiwiYmF0Y2hlZFVwZGF0ZXMiLCJlbnF1ZXVlVXBkYXRlIiwiaXNCYXRjaGluZ1VwZGF0ZXMiLCJfdXBkYXRlQmF0Y2hOdW1iZXIiLCJpbmplY3Rpb24iLCJpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIlJlY29uY2lsZVRyYW5zYWN0aW9uIiwiaW5qZWN0QmF0Y2hpbmdTdHJhdGVneSIsIl9iYXRjaGluZ1N0cmF0ZWd5IiwiYXNhcCIsImNvbnRleHQiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwic2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMiLCJFdmVudEludGVyZmFjZSIsImN1cnJlbnRUYXJnZXQiLCJldmVudFBoYXNlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIlN5bnRoZXRpY0V2ZW50IiwiZGlzcGF0Y2hDb25maWciLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsIl90YXJnZXRJbnN0IiwiSW50ZXJmYWNlIiwicHJvcE5hbWUiLCJub3JtYWxpemUiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwiYXVnbWVudENsYXNzIiwiQ2xhc3MiLCJmb3VyQXJndW1lbnRQb29sZXIiLCJlbXB0eU9uIiwiZDNfZGlzcGF0Y2hfc3JjIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJ0cmFuc2l0aW9uX3NjaGVkdWxlIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJkM190aW1lcl9zcmMiLCJlYXNlIiwiaW5pdCIsInNjaGVkdWxlIiwiaW50ZXJydXB0IiwiYWN0aXZlIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJ0cmFuc2l0aW9uX2ludGVycG9sYXRlIiwiZDNfaW50ZXJwb2xhdGVfc3JjIiwiZDNfY29sb3Jfc3JjIiwidHJhbnNpdGlvbl9pZCIsIlRyYW5zaXRpb24iLCJfbmFtZSIsInNyY190cmFuc2l0aW9uX3RyYW5zaXRpb24iLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJpbmhlcml0IiwiaWQwIiwiaWQxIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJvbl9zdGFydCIsIm9uRnVuY3Rpb24iLCJhdHRyVHdlZW4iLCJ2YWx1ZTAwIiwidmFsdWUxMCIsImludGVycG9sYXRlMCIsInZhbHVlMCIsInZhbHVlMSIsIl92YWx1ZSIsInN0eWxlVHdlZW4iLCJzdHlsZVJlbW92ZSIsInN0eWxlUmVtb3ZlRW5kIiwic3R5bGVGdW5jdGlvbiIsInN0eWxlQ29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJ0ZXh0Q29uc3RhbnQiLCJyZW1vdmVGdW5jdGlvbiIsInR3ZWVuMCIsInR3ZWVuMSIsImVhc2VDb25zdGFudCIsImRlZmF1bHRUaW1pbmciLCJ0cmFuc2l0aW9uX2luaGVyaXQiLCJzcmNfYWN0aXZlIiwibm9wcm9wYWdhdGlvbiIsImQzX3NlbGVjdGlvbl9zcmMiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJub2V2ZW50Iiwibm9kcmFnIiwidmlldyIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwieWVzZHJhZyIsIm5vY2xpY2siLCJEcmFnRXZlbnQiLCJzdWJqZWN0IiwiZGVmYXVsdEZpbHRlciIsImJ1dHRvbiIsImRlZmF1bHRDb250YWluZXIiLCJkZWZhdWx0U3ViamVjdCIsImRlZmF1bHRUb3VjaGFibGUiLCJzcmNfZHJhZyIsIm1vdXNlZG93bngiLCJtb3VzZWRvd255IiwibW91c2Vtb3ZpbmciLCJ0b3VjaGVuZGluZyIsImNvbnRhaW5lciIsInRvdWNoYWJsZSIsImdlc3R1cmVzIiwibGlzdGVuZXJzIiwiY2xpY2tEaXN0YW5jZTIiLCJkcmFnIiwibW91c2Vkb3duZWQiLCJ0b3VjaHN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsImdlc3R1cmUiLCJiZWZvcmVzdGFydCIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwic3VibGlzdGVuZXJzIiwiY2xpY2tEaXN0YW5jZSIsIm9uZUFyZ3VtZW50UG9vbGVyIiwiY29weUZpZWxkc0Zyb20iLCJpbnN0YW5jZVBvb2wiLCJpbnN0YW5jZSIsInN0YW5kYXJkUmVsZWFzZXIiLCJwb29sU2l6ZSIsIkRFRkFVTFRfUE9PTEVSIiwiQ29weUNvbnN0cnVjdG9yIiwicG9vbGVyIiwiTmV3S2xhc3MiLCJ0d29Bcmd1bWVudFBvb2xlciIsImExIiwiYTIiLCJ0aHJlZUFyZ3VtZW50UG9vbGVyIiwiYTMiLCJhNCIsIlRyYW5zZm9ybSIsImFwcGx5WCIsImFwcGx5WSIsImludmVydCIsImxvY2F0aW9uIiwiaW52ZXJ0WCIsImludmVydFkiLCJyZXNjYWxlWCIsImRvbWFpbiIsInJlc2NhbGVZIiwidHJhbnNmb3JtX3RyYW5zZm9ybSIsIl9fem9vbSIsImRlZmF1bHRFeHRlbnQiLCJ3IiwiU1ZHRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkZWZhdWx0VHJhbnNmb3JtIiwiZGVmYXVsdFdoZWVsRGVsdGEiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJkZWZhdWx0Q29uc3RyYWluIiwiZXh0ZW50IiwidHJhbnNsYXRlRXh0ZW50IiwiZHgwIiwiZHgxIiwiZHkwIiwiZHkxIiwic3JjX3pvb20iLCJ0b3VjaHN0YXJ0aW5nIiwiY29uc3RyYWluIiwid2hlZWxEZWx0YSIsInNjYWxlRXh0ZW50IiwidG91Y2hEZWxheSIsIndoZWVsRGVsYXkiLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsImNlbnRyb2lkIiwiY2VudGVyIiwiR2VzdHVyZSIsIndoZWVsIiwiZDNfdHJhbnNpdGlvbl9zcmMiLCJtb3ZlZCIsIngwIiwieTAiLCJkM19kcmFnX3NyYyIsImsxIiwic2hpZnRLZXkiLCJzdGFydGVkIiwidG91Y2gwIiwidG91Y2gxIiwibDAiLCJsMSIsImRwIiwiZGwiLCJjb2xsZWN0aW9uIiwic2NhbGVCeSIsInNjYWxlVG8iLCJ0cmFuc2xhdGVCeSIsInRyYW5zbGF0ZVRvIiwiZW1pdCIsIlJlYWN0QmFzZUNsYXNzZXMiLCJSZWFjdENoaWxkcmVuIiwiUmVhY3RET01GYWN0b3JpZXMiLCJSZWFjdEVsZW1lbnQiLCJSZWFjdFByb3BUeXBlcyIsIlJlYWN0VmVyc2lvbiIsImNyZWF0ZVJlYWN0Q2xhc3MiLCJvbmx5Q2hpbGQiLCJjcmVhdGVGYWN0b3J5IiwiY2xvbmVFbGVtZW50IiwiX19zcHJlYWQiLCJSZWFjdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJpc1ZhbGlkRWxlbWVudCIsIlByb3BUeXBlcyIsImNyZWF0ZUNsYXNzIiwiY3JlYXRlTWl4aW4iLCJtaXhpbiIsIkRPTSIsInZlcnNpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlJFU0VSVkVEX1BST1BTIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJoYXNWYWxpZFJlZiIsImNvbmZpZyIsImhhc1ZhbGlkS2V5Iiwib3duZXIiLCJwcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5IiwiZGVmYXVsdFByb3BzIiwiY2xvbmVBbmRSZXBsYWNlS2V5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIl9zZWxmIiwiX3NvdXJjZSIsImVsZW1lbnQiLCJjaGVja01hc2siLCJiaXRtYXNrIiwiRE9NUHJvcGVydHlJbmplY3Rpb24iLCJNVVNUX1VTRV9QUk9QRVJUWSIsIkhBU19CT09MRUFOX1ZBTFVFIiwiSEFTX05VTUVSSUNfVkFMVUUiLCJIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSIsIkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUiLCJpbmplY3RET01Qcm9wZXJ0eUNvbmZpZyIsImRvbVByb3BlcnR5Q29uZmlnIiwiSW5qZWN0aW9uIiwiUHJvcGVydGllcyIsIkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTVByb3BlcnR5TmFtZXMiLCJET01NdXRhdGlvbk1ldGhvZHMiLCJpc0N1c3RvbUF0dHJpYnV0ZSIsIl9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucyIsInByb3BlcnRpZXMiLCJsb3dlckNhc2VkIiwicHJvcENvbmZpZyIsInByb3BlcnR5SW5mbyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJwcm9wZXJ0eU5hbWUiLCJtdXRhdGlvbk1ldGhvZCIsIm11c3RVc2VQcm9wZXJ0eSIsImhhc0Jvb2xlYW5WYWx1ZSIsImhhc051bWVyaWNWYWx1ZSIsImhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlIiwiaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSIsIkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIiLCJST09UX0FUVFJJQlVURV9OQU1FIiwiQVRUUklCVVRFX05BTUVfQ0hBUiIsImdldFBvc3NpYmxlU3RhbmRhcmROYW1lIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsIlJlYWN0UmVmIiwiYXR0YWNoUmVmcyIsIm1vdW50Q29tcG9uZW50IiwiaW50ZXJuYWxJbnN0YW5jZSIsImhvc3RQYXJlbnQiLCJob3N0Q29udGFpbmVySW5mbyIsInBhcmVudERlYnVnSUQiLCJtYXJrdXAiLCJnZXRSZWFjdE1vdW50UmVhZHkiLCJnZXRIb3N0Tm9kZSIsInVubW91bnRDb21wb25lbnQiLCJzYWZlbHkiLCJkZXRhY2hSZWZzIiwicmVjZWl2ZUNvbXBvbmVudCIsIm5leHRFbGVtZW50IiwicHJldkVsZW1lbnQiLCJfY29udGV4dCIsInJlZnNDaGFuZ2VkIiwic2hvdWxkVXBkYXRlUmVmcyIsIkRPTU5hbWVzcGFjZXMiLCJzZXRJbm5lckhUTUwiLCJjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uIiwic2V0VGV4dENvbnRlbnQiLCJlbmFibGVMYXp5IiwiZG9jdW1lbnRNb2RlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidGVzdCIsImluc2VydFRyZWVDaGlsZHJlbiIsInRyZWUiLCJpbnNlcnRUcmVlQmVmb3JlIiwicmVmZXJlbmNlTm9kZSIsIm5vZGVOYW1lIiwiRE9NTGF6eVRyZWUiLCJyZXBsYWNlQ2hpbGRXaXRoVHJlZSIsIm9sZE5vZGUiLCJuZXdUcmVlIiwicmVwbGFjZUNoaWxkIiwicXVldWVDaGlsZCIsInBhcmVudFRyZWUiLCJjaGlsZFRyZWUiLCJxdWV1ZUhUTUwiLCJxdWV1ZVRleHQiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0IiwiY3ViaWNJbiIsImN1YmljT3V0IiwiY3ViaWNJbk91dCIsInBvbHlJbiIsImN1c3RvbSIsImV4cG9uZW50IiwicG9seU91dCIsInBvbHlJbk91dCIsInBpIiwiaGFsZlBpIiwic2luSW4iLCJzaW5PdXQiLCJzaW5Jbk91dCIsImV4cEluIiwiZXhwT3V0IiwiZXhwSW5PdXQiLCJjaXJjbGVJbiIsImNpcmNsZU91dCIsImNpcmNsZUluT3V0IiwiYjIiLCJiMyIsImI0IiwiYjUiLCJiNiIsImI3IiwiYjgiLCJiOSIsImJvdW5jZUluIiwiYm91bmNlT3V0IiwiYm91bmNlSW5PdXQiLCJiYWNrSW4iLCJvdmVyc2hvb3QiLCJiYWNrT3V0IiwiYmFja0luT3V0IiwidGF1IiwiZWxhc3RpY0luIiwiYXNpbiIsImFtcGxpdHVkZSIsInBlcmlvZCIsImVsYXN0aWNPdXQiLCJlbGFzdGljSW5PdXQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luVXRpbHMiLCJhY2N1bXVsYXRlSW50byIsImZvckVhY2hBY2N1bXVsYXRlZCIsImdldExpc3RlbmVyIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsInBoYXNlIiwicHJvcGFnYXRpb25QaGFzZSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImxpc3RlbmVyQXRQaGFzZSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUiLCJ0cmF2ZXJzZVR3b1BoYXNlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQiLCJwYXJlbnRJbnN0IiwiZ2V0UGFyZW50SW5zdGFuY2UiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiZXZlbnRzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwidHJhdmVyc2VFbnRlckxlYXZlIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIlJlYWN0RXJyb3JVdGlscyIsImxpc3RlbmVyQmFuayIsImV2ZW50UXVldWUiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UiLCJzaW11bGF0ZWQiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCIsImdldERpY3Rpb25hcnlLZXkiLCJfcm9vdE5vZGVJRCIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJwdXRMaXN0ZW5lciIsIlBsdWdpbk1vZHVsZSIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwiZGlkUHV0TGlzdGVuZXIiLCJiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSIsImRpc2FibGVkIiwidGFnIiwiaXNJbnRlcmFjdGl2ZSIsInNob3VsZFByZXZlbnRNb3VzZUV2ZW50IiwiZGVsZXRlTGlzdGVuZXIiLCJ3aWxsRGVsZXRlTGlzdGVuZXIiLCJkZWxldGVBbGxMaXN0ZW5lcnMiLCJleHRyYWN0RXZlbnRzIiwidG9wTGV2ZWxUeXBlIiwicGx1Z2lucyIsInBvc3NpYmxlUGx1Z2luIiwiZXh0cmFjdGVkRXZlbnRzIiwiZW5xdWV1ZUV2ZW50cyIsInByb2Nlc3NFdmVudFF1ZXVlIiwicHJvY2Vzc2luZ0V2ZW50UXVldWUiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJfX3B1cmdlIiwiX19nZXRMaXN0ZW5lckJhbmsiLCJnZXRFdmVudFRhcmdldCIsIlVJRXZlbnRJbnRlcmZhY2UiLCJkb2MiLCJwYXJlbnRXaW5kb3ciLCJTeW50aGV0aWNVSUV2ZW50IiwiZGlzcGF0Y2hNYXJrZXIiLCJSZWFjdEluc3RhbmNlTWFwIiwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsImhhcyIsIk9CU0VSVkVEX0VSUk9SIiwiVHJhbnNhY3Rpb25JbXBsIiwidHJhbnNhY3Rpb25XcmFwcGVycyIsIndyYXBwZXJJbml0RGF0YSIsIl9pc0luVHJhbnNhY3Rpb24iLCJpc0luVHJhbnNhY3Rpb24iLCJlcnJvclRocm93biIsInJldCIsImluaXRpYWxpemVBbGwiLCJjbG9zZUFsbCIsInN0YXJ0SW5kZXgiLCJ3cmFwcGVyIiwiaW5pdERhdGEiLCJWaWV3cG9ydE1ldHJpY3MiLCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwicGFnZVgiLCJjdXJyZW50U2Nyb2xsTGVmdCIsInBhZ2VZIiwiY3VycmVudFNjcm9sbFRvcCIsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJyZXVzYWJsZVNWR0NvbnRhaW5lciIsIldISVRFU1BBQ0VfVEVTVCIsIk5PTlZJU0lCTEVfVEVTVCIsInRlc3RFbGVtZW50IiwidGV4dE5vZGUiLCJkZWxldGVEYXRhIiwibWF0Y2hIdG1sUmVnRXhwIiwiZXNjYXBlIiwic3RyIiwiY2hhckNvZGVBdCIsInN1YnN0cmluZyIsImVzY2FwZUh0bWwiLCJoYXNFdmVudFBhZ2VYWSIsIlJlYWN0RXZlbnRFbWl0dGVyTWl4aW4iLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSIsInJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciIsInRvcEV2ZW50TWFwcGluZyIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BGb2N1cyIsInRvcElucHV0IiwidG9wS2V5RG93biIsInRvcEtleVByZXNzIiwidG9wS2V5VXAiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTY3JvbGwiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUZXh0SW5wdXQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsInRvcFdoZWVsIiwidG9wTGlzdGVuZXJzSURLZXkiLCJSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIiLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIiLCJzZXRIYW5kbGVUb3BMZXZlbCIsImhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJsaXN0ZW5UbyIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsIm1vdW50QXQiLCJpc0xpc3RlbmluZyIsImdldExpc3RlbmluZ0ZvckRvY3VtZW50IiwiZGVwZW5kZW5jaWVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsImRlcGVuZGVuY3kiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJXSU5ET1dfSEFORExFIiwiaGFuZGxlckJhc2VOYW1lIiwiaGFuZGxlIiwic3VwcG9ydHNFdmVudFBhZ2VYWSIsImV2IiwiZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nIiwicmVmcmVzaCIsInJlZnJlc2hTY3JvbGxWYWx1ZXMiLCJtb25pdG9yU2Nyb2xsVmFsdWUiLCJBbGxvY2F0b3IiLCJbb2JqZWN0IE9iamVjdF0iLCJNb2R1bGUiLCJhbGxvYyIsImN3cmFwIiwiZnJlZSIsImJ5dGVzIiwicG9pbnRlciIsImV2ZW50UGx1Z2luT3JkZXIiLCJuYW1lc1RvUGx1Z2lucyIsInJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nIiwicGx1Z2luTmFtZSIsInBsdWdpbk1vZHVsZSIsInBsdWdpbkluZGV4IiwicHVibGlzaGVkRXZlbnRzIiwiZXZlbnRUeXBlcyIsImV2ZW50TmFtZSIsInB1Ymxpc2hFdmVudEZvclBsdWdpbiIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInBoYXNlTmFtZSIsInB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdGVkRXZlbnRQbHVnaW5PcmRlciIsImluamVjdGVkTmFtZXNUb1BsdWdpbnMiLCJpc09yZGVyaW5nRGlydHkiLCJnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudCIsIl9yZXNldEV2ZW50UGx1Z2lucyIsIkNvbXBvbmVudFRyZWUiLCJUcmVlVHJhdmVyc2FsIiwiZXhlY3V0ZURpc3BhdGNoIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaXNFbmRpc2giLCJpc01vdmVpc2giLCJpc1N0YXJ0aXNoIiwiZXhlY3V0ZURpcmVjdERpc3BhdGNoIiwiZGlzcGF0Y2hMaXN0ZW5lciIsImRpc3BhdGNoSW5zdGFuY2UiLCJyZXMiLCJkaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSW5zdGFuY2VzIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiaGFzRGlzcGF0Y2hlcyIsImlzQW5jZXN0b3IiLCJnZXRMb3dlc3RDb21tb25BbmNlc3RvciIsImZuIiwiYXJnRnJvbSIsImFyZ1RvIiwiaW5qZWN0Q29tcG9uZW50VHJlZSIsIkluamVjdGVkIiwiaW5qZWN0VHJlZVRyYXZlcnNhbCIsImNhdWdodEVycm9yIiwiZnVuYyIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImV2ZW50TmFtZVN1ZmZpeCIsImlzU3VwcG9ydGVkIiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsImtleVByb3AiLCJEYW5nZXIiLCJnZXROb2RlQWZ0ZXIiLCJpbnNlcnRDaGlsZEF0IiwiaW5zZXJ0TGF6eVRyZWVDaGlsZEF0IiwibW92ZUNoaWxkIiwib3BlbmluZ0NvbW1lbnQiLCJjbG9zaW5nQ29tbWVudCIsIm5leHROb2RlIiwibW92ZURlbGltaXRlZFRleHQiLCJyZW1vdmVEZWxpbWl0ZWRUZXh0Iiwic3RhcnROb2RlIiwiRE9NQ2hpbGRyZW5PcGVyYXRpb25zIiwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAiLCJyZXBsYWNlRGVsaW1pdGVkVGV4dCIsInN0cmluZ1RleHQiLCJub2RlQWZ0ZXJDb21tZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJwcm9jZXNzVXBkYXRlcyIsInVwZGF0ZXMiLCJjb250ZW50IiwiYWZ0ZXJOb2RlIiwiZnJvbU5vZGUiLCJtYXRobWwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwicHJvcFR5cGVzRmFjdG9yeSIsImhhc1JlYWRPbmx5VmFsdWUiLCJjaGVja2JveCIsImltYWdlIiwiaGlkZGVuIiwicmFkaW8iLCJzdWJtaXQiLCJfYXNzZXJ0U2luZ2xlTGluayIsImlucHV0UHJvcHMiLCJjaGVja2VkTGluayIsInZhbHVlTGluayIsIl9hc3NlcnRWYWx1ZUxpbmsiLCJvbkNoYW5nZSIsIl9hc3NlcnRDaGVja2VkTGluayIsImNoZWNrZWQiLCJwcm9wVHlwZXMiLCJjb21wb25lbnROYW1lIiwicmVhZE9ubHkiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0iLCJMaW5rZWRWYWx1ZVV0aWxzIiwiY2hlY2tQcm9wVHlwZXMiLCJ0YWdOYW1lIiwiZ2V0VmFsdWUiLCJnZXRDaGVja2VkIiwiZXhlY3V0ZU9uQ2hhbmdlIiwicmVxdWVzdENoYW5nZSIsImluamVjdGVkIiwiUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsInJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsInByb2Nlc3NDaGlsZHJlblVwZGF0ZXMiLCJpbmplY3RFbnZpcm9ubWVudCIsImVudmlyb25tZW50IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJpcyIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsInByZXZFbXB0eSIsIm5leHRFbXB0eSIsInByZXZUeXBlIiwibmV4dFR5cGUiLCJLZXlFc2NhcGVVdGlscyIsImVzY2FwZXJMb29rdXAiLCI9IiwiOiIsInVuZXNjYXBlIiwidW5lc2NhcGVyTG9va3VwIiwiPTAiLCI9MiIsImdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZSIsInB1YmxpY0luc3RhbmNlIiwiY2FsbGVyTmFtZSIsIlJlYWN0VXBkYXRlUXVldWUiLCJpc01vdW50ZWQiLCJlbnF1ZXVlQ2FsbGJhY2siLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJfcGVuZGluZ0ZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNvbXBsZXRlU3RhdGUiLCJfcGVuZGluZ1N0YXRlUXVldWUiLCJfcGVuZGluZ1JlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsImVucXVldWVFbGVtZW50SW50ZXJuYWwiLCJuZXh0Q29udGV4dCIsIl9wZW5kaW5nRWxlbWVudCIsImRpc3BsYXlOYW1lIiwiZm9ybWF0VW5leHBlY3RlZEFyZ3VtZW50IiwidmFsaWRhdGVET01OZXN0aW5nIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJlbXB0eU9iamVjdCIsIlJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsInJlZnMiLCJSZWFjdFB1cmVDb21wb25lbnQiLCJDb21wb25lbnREdW1teSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJhcnIiLCJjYiIsImNvbnRlbnRLZXkiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJfYXJnIiwiY29udGV4dHMiLCJjaGVja3BvaW50Iiwicm9sbGJhY2siLCJpc0NoZWNrYWJsZSIsImVsZW0iLCJnZXRUcmFja2VyIiwiX3dyYXBwZXJTdGF0ZSIsInZhbHVlVHJhY2tlciIsImlucHV0VmFsdWVUcmFja2luZyIsIl9nZXRUcmFja2VyRnJvbU5vZGUiLCJ0cmFjayIsInZhbHVlRmllbGQiLCJkZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY3VycmVudFZhbHVlIiwiY29uZmlndXJhYmxlIiwidHJhY2tlciIsImF0dGFjaFRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImRldGFjaFRyYWNrZXIiLCJ1cGRhdGVWYWx1ZUlmQ2hhbmdlZCIsImxhc3RWYWx1ZSIsIm5leHRWYWx1ZSIsImdldFZhbHVlRnJvbU5vZGUiLCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInNlYXJjaCIsInRlbCIsInVybCIsIndlZWsiLCJzY3JvbGxQb3NpdGlvbiIsImVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciIsImxhc3RDaGlsZCIsImZvY3VzIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJwcmVmaXhlcyIsInByb3AiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInByZWZpeEtleSIsIkNTU1Byb3BlcnR5Iiwic2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRBdHRhY2htZW50IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFBvc2l0aW9uWCIsImJhY2tncm91bmRQb3NpdGlvblkiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYm9yZGVyIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJTdHlsZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJCb3R0b21TdHlsZSIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlckxlZnRTdHlsZSIsImJvcmRlckxlZnRDb2xvciIsImJvcmRlclJpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclJpZ2h0U3R5bGUiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyVG9wIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJUb3BTdHlsZSIsImJvcmRlclRvcENvbG9yIiwiZm9udCIsImZvbnRTdHlsZSIsImZvbnRWYXJpYW50IiwiZm9udFNpemUiLCJmb250RmFtaWx5Iiwib3V0bGluZSIsIm91dGxpbmVXaWR0aCIsIm91dGxpbmVTdHlsZSIsIm91dGxpbmVDb2xvciIsInF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyIiwiVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgiLCJpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlIiwidmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlIiwiaXNBdHRyaWJ1dGVOYW1lU2FmZSIsInNob3VsZElnbm9yZVZhbHVlIiwiRE9NUHJvcGVydHlPcGVyYXRpb25zIiwiY3JlYXRlTWFya3VwRm9ySUQiLCJzZXRBdHRyaWJ1dGVGb3JJRCIsImNyZWF0ZU1hcmt1cEZvclJvb3QiLCJzZXRBdHRyaWJ1dGVGb3JSb290IiwiY3JlYXRlTWFya3VwRm9yUHJvcGVydHkiLCJjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUiLCJzZXRWYWx1ZUZvclByb3BlcnR5IiwiZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eSIsInNldFZhbHVlRm9yQXR0cmlidXRlIiwiZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGUiLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUiLCJ1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCIsInBlbmRpbmdVcGRhdGUiLCJ1cGRhdGVPcHRpb25zIiwiQm9vbGVhbiIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2VsZWN0ZWRWYWx1ZSIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsIlJlYWN0RE9NU2VsZWN0IiwiZ2V0SG9zdFByb3BzIiwibW91bnRXcmFwcGVyIiwiaW5pdGlhbFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwid2FzTXVsdGlwbGUiLCJnZXRTZWxlY3RWYWx1ZUNvbnRleHQiLCJwb3N0VXBkYXRlV3JhcHBlciIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IiwiUmVhY3RFbXB0eUNvbXBvbmVudCIsIlJlYWN0SG9zdENvbXBvbmVudCIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciIsImNvbnN0cnVjdCIsImluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCJzaG91bGRIYXZlRGVidWdJRCIsImluZm8iLCJjcmVhdGVJbnRlcm5hbENvbXBvbmVudCIsImlzSW50ZXJuYWxDb21wb25lbnRUeXBlIiwiZ2V0TmF0aXZlTm9kZSIsImNyZWF0ZUluc3RhbmNlRm9yVGV4dCIsIl9tb3VudEluZGV4IiwiX21vdW50SW1hZ2UiLCJfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIlJlYWN0Tm9kZVR5cGVzIiwiSE9TVCIsIkNPTVBPU0lURSIsIkVNUFRZIiwiZ2V0VHlwZSIsImVtcHR5Q29tcG9uZW50RmFjdG9yeSIsIlJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24iLCJpbmplY3RFbXB0eUNvbXBvbmVudEZhY3RvcnkiLCJpbnN0YW50aWF0ZSIsImdlbmVyaWNDb21wb25lbnRDbGFzcyIsInRleHRDb21wb25lbnRDbGFzcyIsImlzVGV4dENvbXBvbmVudCIsImluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyIsImNvbXBvbmVudENsYXNzIiwiaW5qZWN0VGV4dENvbXBvbmVudENsYXNzIiwiZ2V0SXRlcmF0b3JGbiIsIlNFUEFSQVRPUiIsIlNVQlNFUEFSQVRPUiIsImdldENvbXBvbmVudEtleSIsInRyYXZlcnNlQ29udGV4dCIsInRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsIiwibmFtZVNvRmFyIiwic3VidHJlZUNvdW50IiwibmV4dE5hbWVQcmVmaXgiLCJpdGVyYXRvckZuIiwic3RlcCIsIml0ZXJhdG9yIiwiZW50cmllcyIsImlpIiwiZG9uZSIsImVudHJ5IiwiY2hpbGRyZW5TdHJpbmciLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJnZXRJdGVtSURzIiwiYWRkUm9vdCIsInJlbW92ZVJvb3QiLCJnZXRSb290SURzIiwiaXNOYXRpdmUiLCJmdW5jVG9TdHJpbmciLCJGdW5jdGlvbiIsInJlSXNOYXRpdmUiLCJNYXAiLCJTZXQiLCJpdGVtTWFwIiwicm9vdElEU2V0IiwiaXRlbSIsIml0ZW1CeUtleSIsInJvb3RCeUtleSIsImdldEtleUZyb21JRCIsImdldElERnJvbUtleSIsInN1YnN0ciIsInVubW91bnRlZElEcyIsInB1cmdlRGVlcCIsImNoaWxkSURzIiwiZGVzY3JpYmVDb21wb25lbnRGcmFtZSIsIm93bmVyTmFtZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImdldERpc3BsYXlOYW1lIiwiZGVzY3JpYmVJRCIsIlJlYWN0Q29tcG9uZW50VHJlZUhvb2siLCJnZXRFbGVtZW50Iiwib3duZXJJRCIsImdldE93bmVySUQiLCJvblNldENoaWxkcmVuIiwibmV4dENoaWxkSURzIiwibmV4dENoaWxkSUQiLCJuZXh0Q2hpbGQiLCJwYXJlbnRJRCIsIm9uQmVmb3JlTW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb3VudCIsIm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50Iiwib25Nb3VudENvbXBvbmVudCIsIm9uVXBkYXRlQ29tcG9uZW50Iiwib25Vbm1vdW50Q29tcG9uZW50IiwicHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzIiwiX3ByZXZlbnRQdXJnaW5nIiwiZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0iLCJ0b3BFbGVtZW50IiwiY3VycmVudE93bmVyIiwiX2RlYnVnSUQiLCJnZXRTdGFja0FkZGVuZHVtQnlJRCIsImdldFBhcmVudElEIiwiZ2V0Q2hpbGRJRHMiLCJnZXRTb3VyY2UiLCJnZXRUZXh0IiwiZ2V0VXBkYXRlQ291bnQiLCJnZXRSZWdpc3RlcmVkSURzIiwicHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrIiwiaXNDcmVhdGluZ0VsZW1lbnQiLCJjdXJyZW50U291cmNlIiwicmVhY3RTdGFjayIsInN0YWNrIiwicG9wTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2siLCJyZWFjdFN0YWNrRW5kIiwiRXZlbnRMaXN0ZW5lciIsImxpc3RlbiIsImV2ZW50VHlwZSIsImRldGFjaEV2ZW50IiwicmVnaXN0ZXJEZWZhdWx0IiwiUmVhY3RET01TZWxlY3Rpb24iLCJjb250YWluc05vZGUiLCJmb2N1c05vZGUiLCJnZXRBY3RpdmVFbGVtZW50IiwiUmVhY3RJbnB1dFNlbGVjdGlvbiIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImdldFNlbGVjdGlvbiIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsImlzSW5Eb2N1bWVudCIsInNldFNlbGVjdGlvbiIsImlucHV0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJjcmVhdGVSYW5nZSIsInBhcmVudEVsZW1lbnQiLCJtb3ZlU3RhcnQiLCJtb3ZlRW5kIiwiZ2V0T2Zmc2V0cyIsIm9mZnNldHMiLCJjcmVhdGVUZXh0UmFuZ2UiLCJjb2xsYXBzZSIsInNldE9mZnNldHMiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIlJlYWN0RE9NQ29udGFpbmVySW5mbyIsIlJlYWN0RE9NRmVhdHVyZUZsYWdzIiwiUmVhY3RNYXJrdXBDaGVja3N1bSIsInNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IiwiUk9PVF9BVFRSX05BTUUiLCJFTEVNRU5UX05PREVfVFlQRSIsIkRPQ19OT0RFX1RZUEUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUiLCJpbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwibW91bnRDb21wb25lbnRJbnRvTm9kZSIsIndyYXBwZXJJbnN0YW5jZSIsInNob3VsZFJldXNlTWFya3VwIiwiX3RvcExldmVsV3JhcHBlciIsIlJlYWN0TW91bnQiLCJfbW91bnRJbWFnZUludG9Ob2RlIiwiYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsInVzZUNyZWF0ZUVsZW1lbnQiLCJ1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUiLCJoYXNOb25Sb290UmVhY3RDaGlsZCIsInJvb3RFbCIsImlzVmFsaWRDb250YWluZXIiLCJnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lciIsInByZXZIb3N0SW5zdGFuY2UiLCJnZXRIb3N0Um9vdEluc3RhbmNlSW5Db250YWluZXIiLCJfaG9zdENvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFJvb3RDb3VudGVyIiwiVG9wTGV2ZWxXcmFwcGVyIiwicm9vdElEIiwicmVuZGVyIiwiX2luc3RhbmNlc0J5UmVhY3RSb290SUQiLCJzY3JvbGxNb25pdG9yIiwicmVuZGVyQ2FsbGJhY2siLCJfdXBkYXRlUm9vdENvbXBvbmVudCIsInByZXZDb21wb25lbnQiLCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCIsIndyYXBwZXJJRCIsIl9pbnN0YW5jZSIsInJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwicGFyZW50Q29tcG9uZW50IiwiX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwibmV4dFdyYXBwZWRFbGVtZW50IiwiX3Byb2Nlc3NDaGlsZENvbnRleHQiLCJwdWJsaWNJbnN0IiwidXBkYXRlZENhbGxiYWNrIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInJlYWN0Um9vdEVsZW1lbnQiLCJjb250YWluZXJIYXNSZWFjdE1hcmt1cCIsImludGVybmFsR2V0SUQiLCJjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCIsImhhc0F0dHJpYnV0ZSIsInJvb3RFbGVtZW50IiwiY2FuUmV1c2VNYXJrdXAiLCJjaGVja3N1bSIsIkNIRUNLU1VNX0FUVFJfTkFNRSIsInJvb3RNYXJrdXAiLCJvdXRlckhUTUwiLCJub3JtYWxpemVkTWFya3VwIiwiZGlmZkluZGV4Iiwic3RyaW5nMSIsInN0cmluZzIiLCJtaW5MZW4iLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsImRpZmZlcmVuY2UiLCJfcmVuZGVyZWROb2RlVHlwZSIsInByaXZhdGVzIiwiTG9uZ2VzdFBhdGgiLCJ2aXNpdGVkIiwibGF5ZXJzIiwiZGZzIiwibGF5ZXIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwib3V0VmVydGljZXMiLCJyZXR1cm4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJ2ZXJ0aWNlcyIsImluRGVncmVlIiwibWluTGF5ZXIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCIsIl9kaWRJdGVyYXRvckVycm9yNCIsIl9pdGVyYXRvckVycm9yNCIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJsb25nZXN0UGF0aCIsImJpc2VjdG9yIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImFzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0TGVmdCIsImJpc2VjdCIsInBhaXJzIiwicGFpciIsImNyb3NzIiwidmFsdWVzMCIsInZhbHVlczEiLCJyZWR1Y2UiLCJuMCIsIm4xIiwiZGVzY2VuZGluZyIsInZhcmlhbmNlIiwidmFsdWVvZiIsImRlbHRhIiwibWVhbiIsInN1bSIsImRldmlhdGlvbiIsInNyY19leHRlbnQiLCJhcnJheV9hcnJheSIsInNyY19yYW5nZSIsImNlaWwiLCJlMTAiLCJlNSIsImUyIiwidGlja3MiLCJyZXZlcnNlIiwidGlja0luY3JlbWVudCIsImlzRmluaXRlIiwicG93ZXIiLCJMTjEwIiwidGlja1N0ZXAiLCJzdGVwMCIsImFicyIsInN0ZXAxIiwic3R1cmdlcyIsIkxOMiIsInNyY19oaXN0b2dyYW0iLCJ0aHJlc2hvbGQiLCJoaXN0b2dyYW0iLCJ4eiIsIngxIiwidHoiLCJzaGlmdCIsImJpbiIsImJpbnMiLCJ0aHJlc2hvbGRzIiwicXVhbnRpbGUiLCJmcmVlZG1hbkRpYWNvbmlzIiwic2NvdHQiLCJzcmNfbWF4Iiwic3JjX21lYW4iLCJtZWRpYW4iLCJudW1iZXJzIiwiYXJyYXlzIiwibWVyZ2VkIiwic3JjX21pbiIsInBlcm11dGUiLCJpbmRleGVzIiwicGVybXV0ZXMiLCJzY2FuIiwieGkiLCJ4aiIsInNodWZmbGUiLCJzcmNfc3VtIiwic3JjX3RyYW5zcG9zZSIsInRyYW5zcG9zZV9sZW5ndGgiLCJ0cmFuc3Bvc2UiLCJyb3ciLCJ6aXAiLCJhcnJheV9zbGljZSIsInNyY19pZGVudGl0eSIsImF4aXNfdG9wIiwiYXhpc19yaWdodCIsImF4aXNfYm90dG9tIiwiYXhpc19sZWZ0IiwiZXBzaWxvbiIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpc19heGlzIiwib3JpZW50IiwidGlja0FyZ3VtZW50cyIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImF4aXMiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJiYW5kd2lkdGgiLCJvZmZzZXQiLCJwYXRoIiwidGlja0V4aXQiLCJ0aWNrRW50ZXIiLCJsaW5lIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0Iiwic3JjX2NvbnN0YW50Iiwic3JjX2V2ZW50IiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJicnVzaF9YIiwiaGFuZGxlcyIsImJydXNoX3R5cGUiLCJvdXRwdXQiLCJ4eSIsImJydXNoX1kiLCJYWSIsImN1cnNvcnMiLCJvdmVybGF5IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiX19icnVzaCIsImJydXNoU2VsZWN0aW9uIiwiZGltIiwiYnJ1c2hYIiwiYnJ1c2hfYnJ1c2giLCJicnVzaFkiLCJicnVzaCIsImhhbmRsZVNpemUiLCJyZWRyYXciLCJlbWl0dGVyIiwiRW1pdHRlciIsImUwIiwiZTEiLCJzMCIsInMxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsInNpZ25YIiwic2lnblkiLCJXIiwiTiIsInNoaWZ0aW5nIiwicG9pbnQwIiwiZW5kZWQiLCJtb3ZlIiwicG9pbnQxIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJzdGFydGluZyIsIm1hdGhfbWF4Iiwic3JjX2Nob3JkIiwicGFkQW5nbGUiLCJzb3J0R3JvdXBzIiwic29ydFN1Ymdyb3VwcyIsInNvcnRDaG9yZHMiLCJjaG9yZCIsImdyb3VwU3VtcyIsImdyb3VwSW5kZXgiLCJzdWJncm91cEluZGV4IiwiY2hvcmRzIiwiZGkiLCJkaiIsImEwIiwic3ViaW5kZXgiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJjb21wYXJlVmFsdWUiLCJzcmNfYXJyYXlfc2xpY2UiLCJkM19jaG9yZF9zcmNfY29uc3RhbnQiLCJwYXRoX3BpIiwicGF0aF90YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGhfcGF0aCIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ4MjEiLCJ5MjEiLCJ4MDEiLCJ5MDEiLCJsMDFfMiIsIngyMCIsInkyMCIsImwyMV8yIiwibDIwXzIiLCJsMjEiLCJsMDEiLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiY2N3IiwiY3ciLCJkYSIsInNyY19wYXRoIiwiZGVmYXVsdFNvdXJjZSIsImRlZmF1bHRUYXJnZXQiLCJkZWZhdWx0UmFkaXVzIiwicmFkaXVzIiwiZGVmYXVsdFN0YXJ0QW5nbGUiLCJkZWZhdWx0RW5kQW5nbGUiLCJzcmNfcmliYm9uIiwicmliYm9uIiwiYnVmZmVyIiwic3IiLCJzYTAiLCJzYTEiLCJzeDAiLCJzeTAiLCJ0ciIsInRhMCIsInRhMSIsIm1hcF9tYXAiLCJjbGVhciIsInNyY19tYXAiLCJzcmNfbmVzdCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlc0J5S2V5IiwicmVzdWx0IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwic29ydEtleSIsInByb3RvIiwic3JjX3NldCIsInNyY19rZXlzIiwic3JjX3ZhbHVlcyIsInNyY19lbnRyaWVzIiwiZDNfY29udG91cl9zcmNfYXJyYXlfc2xpY2UiLCJzcmNfYXNjZW5kaW5nIiwic3JjX2FyZWEiLCJyaW5nIiwiYXJlYSIsImQzX2NvbnRvdXJfc3JjX2NvbnN0YW50IiwiaG9sZSIsInJpbmdDb250YWlucyIsInlpIiwicGoiLCJ5aiIsInNlZ21lbnRDb250YWlucyIsImNvbGxpbmVhciIsIndpdGhpbiIsImNhc2VzIiwic3JjX2NvbnRvdXJzIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91cnMiLCJjb250b3VyIiwicG9seWdvbnMiLCJob2xlcyIsImZyYWdtZW50QnlTdGFydCIsImZyYWdtZW50QnlFbmQiLCJzdGl0Y2giLCJlbmRJbmRleCIsInVuc2hpZnQiLCJpc29yaW5ncyIsInBvbHlnb24iLCJjb29yZGluYXRlcyIsInh0IiwieXQiLCJfMCIsIl8xIiwiYmx1clgiLCJibHVyWSIsImRlZmF1bHRYIiwiZGVmYXVsdFkiLCJkZWZhdWx0V2VpZ2h0Iiwic3JjX2RlbnNpdHkiLCJ3ZWlnaHQiLCJkZW5zaXR5IiwiRmxvYXQzMkFycmF5Iiwid2kiLCJnZW9tZXRyeSIsInRyYW5zZm9ybVBvbHlnb24iLCJ0cmFuc2Zvcm1SaW5nIiwidHJhbnNmb3JtUG9pbnQiLCJyZXNpemUiLCJjZWxsU2l6ZSIsIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiZHN2IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJwYXJzZVJvd3MiLCJyb3dzIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsImNvbnZlcnQiLCJjdXN0b21Db252ZXJ0ZXIiLCJjb2x1bW5TZXQiLCJjb2x1bW4iLCJpbmZlckNvbHVtbnMiLCJmb3JtYXRSb3dzIiwiY3N2IiwiY3N2UGFyc2UiLCJjc3ZQYXJzZVJvd3MiLCJjc3ZGb3JtYXQiLCJjc3ZGb3JtYXRSb3dzIiwidHN2IiwidHN2UGFyc2UiLCJ0c3ZQYXJzZVJvd3MiLCJ0c3ZGb3JtYXQiLCJ0c3ZGb3JtYXRSb3dzIiwicmVzcG9uc2VCbG9iIiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJibG9iIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2VBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwic3JjX2J1ZmZlciIsInJlc3BvbnNlVGV4dCIsInNyY190ZXh0IiwiZHN2UGFyc2UiLCJkc3ZfZHN2IiwiZHN2X2NzdiIsImRzdl90c3YiLCJzcmNfaW1hZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkltYWdlIiwib25lcnJvciIsIm9ubG9hZCIsInJlc3BvbnNlSnNvbiIsImpzb24iLCJwYXJzZXIiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJzcmNfY2VudGVyIiwiZm9yY2UiLCJzeCIsInN5IiwiZDNfZm9yY2Vfc3JjX2NvbnN0YW50IiwiamlnZ2xlIiwiYWRkX2FkZCIsInhtIiwieW0iLCJ4cCIsInlwIiwiYm90dG9tIiwiX3Jvb3QiLCJsZWFmIiwiX3giLCJfeSIsInNyY19xdWFkIiwieF9kZWZhdWx0WCIsInlfZGVmYXVsdFkiLCJxdWFkdHJlZSIsIlF1YWR0cmVlIiwiYWRkQWxsIiwibGVhZl9jb3B5IiwidHJlZVByb3RvIiwiY29sbGlkZV94IiwidngiLCJjb2xsaWRlX3kiLCJ2eSIsImNvdmVyIiwieXoiLCJ2aXNpdCIsImZpbmQiLCJ4MyIsInkzIiwicXVhZHMiLCJyZXRhaW5lciIsInJlbW92ZUFsbCIsInZpc2l0QWZ0ZXIiLCJjb2xsaWRlIiwicmFkaWkiLCJzdHJlbmd0aCIsIml0ZXJhdGlvbnMiLCJyaSIsInJpMiIsInByZXBhcmUiLCJxdWFkIiwicmoiLCJsaW5rX2luZGV4IiwibGlua19maW5kIiwibm9kZUJ5SWQiLCJub2RlSWQiLCJsaW5rcyIsInN0cmVuZ3RocyIsImRpc3RhbmNlcyIsImJpYXMiLCJsaW5rIiwiZGlzdGFuY2UiLCJhbHBoYSIsImluaXRpYWxpemVTdHJlbmd0aCIsImluaXRpYWxpemVEaXN0YW5jZSIsInNpbXVsYXRpb25feCIsInNpbXVsYXRpb25feSIsImluaXRpYWxSYWRpdXMiLCJpbml0aWFsQW5nbGUiLCJzcmNfc2ltdWxhdGlvbiIsInNpbXVsYXRpb24iLCJhbHBoYU1pbiIsImFscGhhRGVjYXkiLCJhbHBoYVRhcmdldCIsInZlbG9jaXR5RGVjYXkiLCJmb3JjZXMiLCJzdGVwcGVyIiwiZngiLCJmeSIsImluaXRpYWxpemVOb2RlcyIsImFuZ2xlIiwiaW5pdGlhbGl6ZUZvcmNlIiwiZGlzdGFuY2VNaW4yIiwiZGlzdGFuY2VNYXgyIiwidGhldGEyIiwiYWNjdW11bGF0ZSIsImRpc3RhbmNlTWluIiwiZGlzdGFuY2VNYXgiLCJ0aGV0YSIsInJhZGlhbCIsInJhZGl1c2VzIiwiZDNfZm9yY2Vfc3JjX3giLCJkM19mb3JjZV9zcmNfeSIsImZvcm1hdERlY2ltYWwiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJzcmNfZXhwb25lbnQiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJhbGlnbiIsInNpZ24iLCJzeW1ib2wiLCJjb21tYSIsInByZWNpc2lvbiIsInByZWZpeEV4cG9uZW50IiwiZGVmYXVsdExvY2FsZV9sb2NhbGUiLCJkZWZhdWx0TG9jYWxlX2Zvcm1hdCIsImRlZmF1bHRMb2NhbGVfZm9ybWF0UHJlZml4IiwiZm9ybWF0VHJpbSIsIm91dCIsImZvcm1hdFJvdW5kZWQiLCJmb3JtYXRUeXBlcyIsIiUiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJYIiwiZDNfZm9ybWF0X3NyY19pZGVudGl0eSIsInNyY19sb2NhbGUiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsImZvcm1hdEdyb3VwIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsInBlcmNlbnQiLCJuZXdGb3JtYXQiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsInBhZGRpbmciLCJmb3JtYXRQcmVmaXgiLCJkZWZhdWx0TG9jYWxlIiwicHJlY2lzaW9uRml4ZWQiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsImFkZGVyIiwiQWRkZXIiLCJhZGRlcl9hZGQiLCJ0ZW1wIiwiYnYiLCJhdiIsIm1hdGhfZXBzaWxvbiIsIm1hdGhfcGkiLCJtYXRoX2hhbGZQaSIsInF1YXJ0ZXJQaSIsIm1hdGhfdGF1IiwicmFkaWFucyIsIm1hdGhfY29zIiwibWF0aF9zaW4iLCJtYXRoX3NpZ24iLCJoYXZlcnNpbiIsIm5vb3Bfbm9vcCIsInN0cmVhbUdlb21ldHJ5Iiwic3RyZWFtIiwic3RyZWFtR2VvbWV0cnlUeXBlIiwic3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJGZWF0dXJlQ29sbGVjdGlvbiIsImZlYXR1cmVzIiwiU3BoZXJlIiwic3BoZXJlIiwiUG9pbnQiLCJNdWx0aVBvaW50IiwiTGluZVN0cmluZyIsInN0cmVhbUxpbmUiLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwic3RyZWFtUG9seWdvbiIsIk11bHRpUG9seWdvbiIsIkdlb21ldHJ5Q29sbGVjdGlvbiIsImdlb21ldHJpZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsInBvbHlnb25TdGFydCIsInBvbHlnb25FbmQiLCJhcmVhX2xhbWJkYTAwIiwicGhpMDAiLCJhcmVhX2xhbWJkYTAiLCJhcmVhX2Nvc1BoaTAiLCJhcmVhX3NpblBoaTAiLCJzcmNfc3RyZWFtIiwiYXJlYVJpbmdTdW0iLCJhcmVhU3VtIiwiYXJlYVN0cmVhbSIsImFyZWFSaW5nU3RhcnQiLCJhcmVhUmluZ0VuZCIsImFyZWFSaW5nIiwiYXJlYVBvaW50Rmlyc3QiLCJhcmVhUG9pbnQiLCJsYW1iZGEiLCJwaGkiLCJkTGFtYmRhIiwic2RMYW1iZGEiLCJhZExhbWJkYSIsImNvc1BoaSIsInNpblBoaSIsImQzX2dlb19zcmNfYXJlYSIsImNhcnRlc2lhbl9zcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJjYXJ0ZXNpYW5fY2FydGVzaWFuIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiYm91bmRzX2xhbWJkYTAiLCJib3VuZHNfcGhpMCIsImJvdW5kc19sYW1iZGExIiwiYm91bmRzX3BoaTEiLCJib3VuZHNfbGFtYmRhMiIsImJvdW5kc19sYW1iZGEwMCIsImJvdW5kc19waGkwMCIsImJvdW5kc19wMCIsInJhbmdlcyIsImJvdW5kc19yYW5nZSIsImRlbHRhU3VtIiwiYm91bmRzU3RyZWFtIiwiYm91bmRzUG9pbnQiLCJib3VuZHNMaW5lU3RhcnQiLCJib3VuZHNMaW5lRW5kIiwiYm91bmRzUmluZ1BvaW50IiwiYm91bmRzUmluZ1N0YXJ0IiwiYm91bmRzUmluZ0VuZCIsImJvdW5kc19saW5lUG9pbnQiLCJub3JtYWwiLCJpbmZsZWN0aW9uIiwicGhpaSIsImxhbWJkYWkiLCJhbnRpbWVyaWRpYW4iLCJib3VuZHNfYW5nbGUiLCJsYW1iZGEwIiwibGFtYmRhMSIsInJhbmdlQ29tcGFyZSIsInJhbmdlQ29udGFpbnMiLCJXMCIsIlcxIiwiY2VudHJvaWRfWDAiLCJjZW50cm9pZF9ZMCIsIlowIiwiY2VudHJvaWRfWDEiLCJjZW50cm9pZF9ZMSIsIloxIiwiWDIiLCJZMiIsIloyIiwiY2VudHJvaWRfbGFtYmRhMDAiLCJjZW50cm9pZF9waGkwMCIsImNlbnRyb2lkX3gwIiwiY2VudHJvaWRfeTAiLCJ6MCIsImJvdW5kcyIsImZlYXR1cmUiLCJkZWx0YU1heCIsImNlbnRyb2lkU3RyZWFtIiwiY2VudHJvaWRQb2ludCIsImNlbnRyb2lkTGluZVN0YXJ0IiwiY2VudHJvaWRMaW5lRW5kIiwiY2VudHJvaWRSaW5nU3RhcnQiLCJjZW50cm9pZFJpbmdFbmQiLCJjZW50cm9pZFBvaW50Q2FydGVzaWFuIiwiY2VudHJvaWRMaW5lUG9pbnRGaXJzdCIsImNlbnRyb2lkTGluZVBvaW50IiwiY2VudHJvaWRSaW5nUG9pbnRGaXJzdCIsImNlbnRyb2lkUmluZ1BvaW50IiwiY3giLCJjeSIsImN6IiwiZDNfZ2VvX3NyY19jb25zdGFudCIsImNvbXBvc2UiLCJyb3RhdGlvbklkZW50aXR5Iiwicm90YXRlUmFkaWFucyIsImRlbHRhTGFtYmRhIiwiZGVsdGFQaGkiLCJkZWx0YUdhbW1hIiwicm90YXRpb25MYW1iZGEiLCJyb3RhdGlvblBoaUdhbW1hIiwiZm9yd2FyZFJvdGF0aW9uTGFtYmRhIiwicm90YXRpb24iLCJjb3NEZWx0YVBoaSIsInNpbkRlbHRhUGhpIiwiY29zRGVsdGFHYW1tYSIsInNpbkRlbHRhR2FtbWEiLCJzcmNfcm90YXRpb24iLCJmb3J3YXJkIiwiY2lyY2xlU3RyZWFtIiwiZGlyZWN0aW9uIiwiY29zUmFkaXVzIiwic2luUmFkaXVzIiwiY2lyY2xlUmFkaXVzIiwic3JjX2NpcmNsZSIsImNpcmNsZSIsImNsaXBfYnVmZmVyIiwibGluZXMiLCJyZWpvaW4iLCJwb2ludEVxdWFsIiwiSW50ZXJzZWN0aW9uIiwib3RoZXIiLCJzZWdtZW50cyIsImNvbXBhcmVJbnRlcnNlY3Rpb24iLCJzdGFydEluc2lkZSIsImNsaXAiLCJzZWdtZW50IiwicmVqb2luX2xpbmsiLCJpc1N1YmplY3QiLCJwb2x5Z29uQ29udGFpbnNfc3VtIiwicG9seWdvbkNvbnRhaW5zIiwid2luZGluZyIsInBoaTAiLCJzaW5QaGkwIiwiY29zUGhpMCIsInNpblBoaTEiLCJjb3NQaGkxIiwicGhpMSIsImFic0RlbHRhIiwiaW50ZXJzZWN0aW9uIiwicGhpQXJjIiwic3JjX2NsaXAiLCJwb2ludFZpc2libGUiLCJjbGlwTGluZSIsInNpbmsiLCJyaW5nQnVmZmVyIiwicmluZ1NpbmsiLCJwb2x5Z29uU3RhcnRlZCIsInBvaW50UmluZyIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJjbGlwX2NvbXBhcmVJbnRlcnNlY3Rpb24iLCJwb2ludExpbmUiLCJjbGVhbiIsInJpbmdTZWdtZW50cyIsInZhbGlkU2VnbWVudCIsInNpZ24wIiwic2lnbjEiLCJzaW5MYW1iZGEwTGFtYmRhMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJjbGlwX2NpcmNsZSIsImNyIiwic21hbGxSYWRpdXMiLCJub3RIZW1pc3BoZXJlIiwidmlzaWJsZSIsImludGVyc2VjdCIsInR3byIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsIm4xeG4yIiwidXUiLCJwb2xhciIsInExIiwiYzAiLCJ2MDAiLCJwb2ludDIiLCJjbGlwX2xpbmUiLCJheCIsImF5IiwiY2xpcE1heCIsImNsaXBNaW4iLCJjbGlwUmVjdGFuZ2xlIiwiY29ybmVyIiwiY29tcGFyZVBvaW50IiwiY2EiLCJ4X18iLCJ5X18iLCJ2X18iLCJ4XyIsInlfIiwidl8iLCJmaXJzdCIsImFjdGl2ZVN0cmVhbSIsImJ1ZmZlclN0cmVhbSIsImNsaXBTdHJlYW0iLCJsaW5lUG9pbnQiLCJwb2x5Z29uSW5zaWRlIiwiY2xlYW5JbnNpZGUiLCJsZW5ndGhfbGFtYmRhMCIsImxlbmd0aF9zaW5QaGkwIiwibGVuZ3RoX2Nvc1BoaTAiLCJjbGlwX2V4dGVudCIsImNhY2hlIiwiY2FjaGVTdHJlYW0iLCJsZW5ndGhTdW0iLCJsZW5ndGhTdHJlYW0iLCJsZW5ndGhQb2ludEZpcnN0IiwibGVuZ3RoTGluZUVuZCIsImxlbmd0aFBvaW50IiwiY29zRGVsdGEiLCJzcmNfbGVuZ3RoIiwiZGlzdGFuY2VfY29vcmRpbmF0ZXMiLCJkaXN0YW5jZV9vYmplY3QiLCJzcmNfZGlzdGFuY2UiLCJjb250YWluc09iamVjdFR5cGUiLCJjb250YWluc0dlb21ldHJ5IiwiY29udGFpbnNHZW9tZXRyeVR5cGUiLCJjb250YWluc1BvaW50IiwiY29udGFpbnNMaW5lIiwiY29udGFpbnNQb2x5Z29uIiwiYWIiLCJyaW5nUmFkaWFucyIsInBvaW50UmFkaWFucyIsInNyY19jb250YWlucyIsImdyYXRpY3VsZVgiLCJncmF0aWN1bGVZIiwiZ3JhdGljdWxlX2dyYXRpY3VsZSIsIlgxIiwiWDAiLCJZMSIsIlkwIiwiWSIsIkRYIiwiRFkiLCJncmF0aWN1bGUiLCJleHRlbnRNYWpvciIsImV4dGVudE1pbm9yIiwic3RlcE1ham9yIiwic3RlcE1pbm9yIiwiZ3JhdGljdWxlMTAiLCJhcmVhX3gwMCIsImFyZWFfeTAwIiwiYXJlYV94MCIsImFyZWFfeTAiLCJzcmNfaW50ZXJwb2xhdGUiLCJjeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJkM19nZW9fc3JjX2lkZW50aXR5IiwiYXJlYV9hcmVhU3VtIiwiYXJlYV9hcmVhUmluZ1N1bSIsImFyZWFfYXJlYVN0cmVhbSIsImFyZWFfYXJlYVJpbmdTdGFydCIsImFyZWFfYXJlYVJpbmdFbmQiLCJhcmVhX2FyZWFQb2ludEZpcnN0IiwiYXJlYV9hcmVhUG9pbnQiLCJwYXRoX2FyZWEiLCJib3VuZHNfeDAiLCJib3VuZHNfeTAiLCJib3VuZHNfeDEiLCJib3VuZHNfeTEiLCJjZW50cm9pZF94MDAiLCJjZW50cm9pZF95MDAiLCJwYXRoX2NlbnRyb2lkX3gwIiwicGF0aF9jZW50cm9pZF95MCIsInBhdGhfYm91bmRzIiwicGF0aF9jZW50cm9pZF9YMCIsInBhdGhfY2VudHJvaWRfWTAiLCJjZW50cm9pZF9aMCIsInBhdGhfY2VudHJvaWRfWDEiLCJwYXRoX2NlbnRyb2lkX1kxIiwiY2VudHJvaWRfWjEiLCJjZW50cm9pZF9YMiIsImNlbnRyb2lkX1kyIiwiY2VudHJvaWRfWjIiLCJjZW50cm9pZF9jZW50cm9pZFN0cmVhbSIsImNlbnRyb2lkX2NlbnRyb2lkUG9pbnQiLCJjZW50cm9pZF9jZW50cm9pZExpbmVTdGFydCIsImNlbnRyb2lkX2NlbnRyb2lkTGluZUVuZCIsImNlbnRyb2lkX2NlbnRyb2lkUmluZ1N0YXJ0IiwiY2VudHJvaWRfY2VudHJvaWRSaW5nRW5kIiwiY2VudHJvaWRQb2ludEZpcnN0TGluZSIsImNlbnRyb2lkUG9pbnRMaW5lIiwiY2VudHJvaWRQb2ludEZpcnN0UmluZyIsImNlbnRyb2lkUG9pbnRSaW5nIiwicGF0aF9jZW50cm9pZCIsIlBhdGhDb250ZXh0IiwiX3JhZGl1cyIsInBvaW50UmFkaXVzIiwiX2xpbmUiLCJfcG9pbnQiLCJsZW5ndGhSaW5nIiwibWVhc3VyZV94MDAiLCJtZWFzdXJlX3kwMCIsIm1lYXN1cmVfeDAiLCJtZWFzdXJlX3kwIiwibWVhc3VyZV9sZW5ndGhTdW0iLCJtZWFzdXJlX2xlbmd0aFN0cmVhbSIsIm1lYXN1cmVfbGVuZ3RoUG9pbnRGaXJzdCIsIm1lYXN1cmVfbGVuZ3RoUG9pbnQiLCJtZWFzdXJlIiwiUGF0aFN0cmluZyIsIl9zdHJpbmciLCJzdHJpbmdfY2lyY2xlIiwiX2NpcmNsZSIsInByb2plY3Rpb24iLCJwcm9qZWN0aW9uU3RyZWFtIiwiY29udGV4dFN0cmVhbSIsInNyY190cmFuc2Zvcm0iLCJtZXRob2RzIiwidHJhbnNmb3JtZXIiLCJUcmFuc2Zvcm1TdHJlYW0iLCJmaXQiLCJmaXRCb3VuZHMiLCJjbGlwRXh0ZW50IiwiZml0RXh0ZW50IiwiZml0U2l6ZSIsImZpdFdpZHRoIiwiZml0SGVpZ2h0IiwibWF4RGVwdGgiLCJjb3NNaW5EaXN0YW5jZSIsInJlc2FtcGxlIiwicHJvamVjdCIsImRlbHRhMiIsInJlc2FtcGxlTGluZVRvIiwicGhpMiIsImxhbWJkYTIiLCJkeDIiLCJkeTIiLCJkeiIsImxhbWJkYTAwIiwieDAwIiwieTAwIiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZV9yZXNhbXBsZSIsInJlc2FtcGxlTm9uZSIsInRyYW5zZm9ybVJhZGlhbnMiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImNvc0FscGhhIiwic2luQWxwaGEiLCJhaSIsImNpIiwiZmkiLCJwcm9qZWN0aW9uX3Byb2plY3Rpb24iLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwicHJlY2xpcCIsImNsaXBfYW50aW1lcmlkaWFuIiwicG9zdGNsaXAiLCJyZWNlbnRlciIsInRyYW5zZm9ybVJvdGF0ZSIsImNsaXBBbmdsZSIsImNvbmljUHJvamVjdGlvbiIsInBhcmFsbGVscyIsImNvbmljRXF1YWxBcmVhUmF3IiwiY3lsaW5kcmljYWxFcXVhbEFyZWFSYXciLCJyMHkiLCJjb25pY0VxdWFsQXJlYSIsImFsYmVycyIsInByb2plY3Rpb25fYWxiZXJzVXNhIiwibG93ZXI0OFBvaW50IiwiYWxhc2thUG9pbnQiLCJoYXdhaWlQb2ludCIsImxvd2VyNDgiLCJhbGFza2EiLCJoYXdhaWkiLCJwb2ludFN0cmVhbSIsImFsYmVyc1VzYSIsInN0cmVhbXMiLCJtdWx0aXBsZXgiLCJhemltdXRoYWxSYXciLCJhemltdXRoYWxJbnZlcnQiLCJzYyIsImNjIiwiYXppbXV0aGFsRXF1YWxBcmVhUmF3IiwiY3hjeSIsImF6aW11dGhhbEVxdWFsQXJlYSIsImF6aW11dGhhbEVxdWlkaXN0YW50UmF3IiwiYXppbXV0aGFsRXF1aWRpc3RhbnQiLCJtZXJjYXRvclJhdyIsIm1lcmNhdG9yIiwibWVyY2F0b3JQcm9qZWN0aW9uIiwicmVjbGlwIiwidGFueSIsImNvbmljQ29uZm9ybWFsUmF3IiwiY29uaWNDb25mb3JtYWwiLCJlcXVpcmVjdGFuZ3VsYXJSYXciLCJlcXVpcmVjdGFuZ3VsYXIiLCJjb25pY0VxdWlkaXN0YW50UmF3IiwiZ3kiLCJueCIsImNvbmljRXF1aWRpc3RhbnQiLCJBMSIsIkEyIiwiQTMiLCJBNCIsIk0iLCJlcXVhbEVhcnRoUmF3IiwibDIiLCJsNiIsImVxdWFsRWFydGgiLCJnbm9tb25pY1JhdyIsImdub21vbmljIiwiaWRlbnRpdHlfc2NhbGVUcmFuc2xhdGUiLCJreCIsImt5IiwidHgiLCJ0eSIsInByb2plY3Rpb25faWRlbnRpdHkiLCJyZWZsZWN0WCIsInJlZmxlY3RZIiwibmF0dXJhbEVhcnRoMVJhdyIsInBoaTQiLCJuYXR1cmFsRWFydGgxIiwib3J0aG9ncmFwaGljUmF3Iiwib3J0aG9ncmFwaGljIiwic3RlcmVvZ3JhcGhpY1JhdyIsInN0ZXJlb2dyYXBoaWMiLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3IiLCJkZWZhdWx0U2VwYXJhdGlvbiIsIm1lYW5YUmVkdWNlIiwibWF4WVJlZHVjZSIsImNsdXN0ZXIiLCJzZXBhcmF0aW9uIiwibm9kZVNpemUiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJtZWFuWCIsIm1heFkiLCJsZWFmTGVmdCIsImxlYWZSaWdodCIsImNvdW50X2NvdW50IiwiaGllcmFyY2h5IiwiY2hpbGRzIiwiTm9kZSIsInZhbHVlZCIsImRlZmF1bHRDaGlsZHJlbiIsImVhY2hCZWZvcmUiLCJjb21wdXRlSGVpZ2h0IiwiY29weURhdGEiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImQzX2hpZXJhcmNoeV9zcmNfYXJyYXlfc2xpY2UiLCJlbmNsb3NlIiwiY2lyY2xlcyIsImFycmF5X3NodWZmbGUiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJleHRlbmRCYXNpcyIsImVuY2xvc2VzV2Vha0FsbCIsImVuY2xvc2VzTm90IiwiZW5jbG9zZUJhc2lzMiIsImVuY2xvc2VCYXNpczMiLCJkciIsImVuY2xvc2VCYXNpczEiLCJyMiIsInIyMSIsInIzIiwiYzMiLCJkMyIsInBsYWNlIiwiaW50ZXJzZWN0cyIsInNjb3JlIiwic2libGluZ3NfTm9kZSIsInBhY2tFbmNsb3NlIiwiYWEiLCJzaiIsInNrIiwicGFjayIsInNpYmxpbmdzIiwicmVxdWlyZWQiLCJjb25zdGFudFplcm8iLCJkM19oaWVyYXJjaHlfc3JjX2NvbnN0YW50IiwicGFja19kZWZhdWx0UmFkaXVzIiwic3JjX3BhY2siLCJyYWRpdXNMZWFmIiwicGFja0NoaWxkcmVuIiwidHJhbnNsYXRlQ2hpbGQiLCJvcHRpb25hbCIsInRyZWVtYXBfcm91bmQiLCJkaWNlIiwic3JjX3BhcnRpdGlvbiIsInBhcnRpdGlvbiIsInBvc2l0aW9uTm9kZSIsInByZXJvb3QiLCJhbWJpZ3VvdXMiLCJkZWZhdWx0SWQiLCJkZWZhdWx0UGFyZW50SWQiLCJwYXJlbnRJZCIsInN0cmF0aWZ5Iiwibm9kZUtleSIsIm5vZGVCeUtleSIsInRyZWVfZGVmYXVsdFNlcGFyYXRpb24iLCJuZXh0TGVmdCIsIm5leHRSaWdodCIsIm1vdmVTdWJ0cmVlIiwid20iLCJ3cCIsImNoYW5nZSIsIm5leHRBbmNlc3RvciIsInZpbSIsIlRyZWVOb2RlIiwic3JjX3RyZWUiLCJ0cmVlUm9vdCIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsImV4ZWN1dGVTaGlmdHMiLCJtaWRwb2ludCIsInZpcCIsInZvcCIsInZvbSIsInNpcCIsInNvcCIsInNpbSIsInNvbSIsImFwcG9ydGlvbiIsInRyZWVtYXBfc2xpY2UiLCJzcXVhcmlmeV9waGkiLCJzcXVhcmlmeVJhdGlvIiwicmF0aW8iLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYmV0YSIsInNxdWFyaWZ5Iiwic3JjX3RyZWVtYXAiLCJ0aWxlIiwicGFkZGluZ1N0YWNrIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInRyZWVtYXAiLCJwYWRkaW5nT3V0ZXIiLCJiaW5hcnkiLCJzdW1zIiwidmFsdWVPZmZzZXQiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwic2xpY2VEaWNlIiwidHJlZW1hcF9yZXNxdWFyaWZ5IiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsImQzX3BvbHlnb25fc3JjX2FyZWEiLCJzcmNfY2VudHJvaWQiLCJzcmNfY3Jvc3MiLCJsZXhpY29ncmFwaGljT3JkZXIiLCJjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyIsImh1bGwiLCJzb3J0ZWRQb2ludHMiLCJmbGlwcGVkUG9pbnRzIiwidXBwZXJJbmRleGVzIiwibG93ZXJJbmRleGVzIiwic2tpcExlZnQiLCJza2lwUmlnaHQiLCJkM19wb2x5Z29uX3NyY19jb250YWlucyIsImluc2lkZSIsImQzX3BvbHlnb25fc3JjX2xlbmd0aCIsInBlcmltZXRlciIsInNyY19kZWZhdWx0U291cmNlIiwidW5pZm9ybSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Vbmlmb3JtIiwic3JjX25vcm1hbCIsInNvdXJjZVJhbmRvbU5vcm1hbCIsInJhbmRvbU5vcm1hbCIsIm11Iiwic2lnbWEiLCJsb2dOb3JtYWwiLCJzb3VyY2VSYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21Mb2dOb3JtYWwiLCJpcndpbkhhbGwiLCJzb3VyY2VSYW5kb21JcndpbkhhbGwiLCJyYW5kb21JcndpbkhhbGwiLCJiYXRlcyIsInNvdXJjZVJhbmRvbUJhdGVzIiwicmFuZG9tQmF0ZXMiLCJzb3VyY2VSYW5kb21FeHBvbmVudGlhbCIsInJhbmRvbUV4cG9uZW50aWFsIiwiZDNfc2NhbGVfc3JjX2FycmF5X2FycmF5IiwiYXJyYXlfbWFwIiwiZDNfc2NhbGVfc3JjX2FycmF5X3NsaWNlIiwiaW1wbGljaXQiLCJvcmRpbmFsIiwidW5rbm93biIsImJhbmQiLCJvcmRpbmFsUmFuZ2UiLCJyZXNjYWxlIiwicmFuZ2VSb3VuZCIsImJhbmRfcG9pbnQiLCJwb2ludGlzaCIsImQzX3NjYWxlX3NyY19jb25zdGFudCIsInNyY19udW1iZXIiLCJ1bml0IiwiZGVpbnRlcnBvbGF0ZUxpbmVhciIsImJpbWFwIiwiZGVpbnRlcnBvbGF0ZSIsInJlaW50ZXJwb2xhdGUiLCJkMCIsInBvbHltYXAiLCJjbGFtcCIsImNvbnRpbnVvdXMiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJyZWludGVycG9sYXRlQ2xhbXAiLCJzcmNfdGlja0Zvcm1hdCIsImxpbmVhcmlzaCIsIm5pY2UiLCJpZGVudGl0eV9pZGVudGl0eSIsImxvZ19kZWludGVycG9sYXRlIiwibG9nX3JlaW50ZXJwb2xhdGUiLCJwb3cxMCIsInBvd3AiLCJiYXNlIiwibG9ncCIsImxvZzEwIiwibG9nMiIsInJlZmxlY3QiLCJsb2dfbG9nIiwibG9ncyIsInBvd3MiLCJwb3dfcG93IiwicG93X3NxcnQiLCJxdWFudGlsZV9xdWFudGlsZSIsImludmVydEV4dGVudCIsInF1YW50aWxlcyIsInRocmVzaG9sZF90aHJlc2hvbGQiLCJpbnRlcnZhbF90MCIsImludGVydmFsX3QxIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJtaWxsaXNlY29uZF9taWxsaXNlY29uZCIsInNyY19taWxsaXNlY29uZCIsIm1pbGxpc2Vjb25kcyIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25XZWVrIiwic2Vjb25kX3NlY29uZCIsImdldFVUQ1NlY29uZHMiLCJzZWNvbmRzIiwibWludXRlX21pbnV0ZSIsImdldE1pbnV0ZXMiLCJtaW51dGVzIiwiaG91cl9ob3VyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRIb3VycyIsInNyY19ob3VyIiwiaG91cnMiLCJkYXlfZGF5Iiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInNyY19kYXkiLCJkYXlzIiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5Iiwic3VuZGF5cyIsIm1vbmRheXMiLCJ0dWVzZGF5cyIsIndlZG5lc2RheXMiLCJ0aHVyc2RheXMiLCJmcmlkYXlzIiwic2F0dXJkYXlzIiwibW9udGhfbW9udGgiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJzcmNfbW9udGgiLCJtb250aHMiLCJ5ZWFyX3llYXIiLCJzZXRGdWxsWWVhciIsInNyY195ZWFyIiwieWVhcnMiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsInNyY191dGNNaW51dGUiLCJ1dGNNaW51dGVzIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENIb3VycyIsInNyY191dGNIb3VyIiwidXRjSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjRGF5cyIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y1N1bmRheXMiLCJ1dGNNb25kYXlzIiwidXRjVHVlc2RheXMiLCJ1dGNXZWRuZXNkYXlzIiwidXRjVGh1cnNkYXlzIiwidXRjRnJpZGF5cyIsInV0Y1NhdHVyZGF5cyIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y01vbnRoIiwidXRjTW9udGhzIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y1llYXIiLCJ1dGNZZWFycyIsImxvY2FsRGF0ZSIsIkgiLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld1llYXIiLCJmb3JtYXRMb2NhbGUiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwiZm9ybWF0UmUiLCJwZXJpb2RMb29rdXAiLCJmb3JtYXRMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJRIiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJVIiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsIlYiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJsb2NhbGVfZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiWiIsImZvcm1hdFpvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsInV0Y0Zvcm1hdHMiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUhvdXIyNCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VNaW51dGVzIiwicGFyc2VVbml4VGltZXN0YW1wIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlcklTTyIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlck1vbmRheSIsInBhcnNlWWVhciIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVpvbmUiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFkIiwicGFkcyIsIm5ld1BhcnNlIiwibmV3RGF0ZSIsImRheSIsInNyY191dGNEYXkiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInNyY19kZWZhdWx0TG9jYWxlX2xvY2FsZSIsInRpbWVGb3JtYXQiLCJ0aW1lUGFyc2UiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsImdldE1pbGxpc2Vjb25kcyIsImdldFNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJkb3ciLCJkZWZhdWx0TG9jYWxlX2RlZmF1bHRMb2NhbGUiLCJpc29Gb3JtYXQiLCJ0b0lTT1N0cmluZyIsImlzb1BhcnNlIiwidGltZV9kdXJhdGlvblNlY29uZCIsInRpbWVfZHVyYXRpb25NaW51dGUiLCJ0aW1lX2R1cmF0aW9uSG91ciIsInRpbWVfZHVyYXRpb25EYXkiLCJ0aW1lX2R1cmF0aW9uV2VlayIsImR1cmF0aW9uTW9udGgiLCJkdXJhdGlvblllYXIiLCJ0aW1lX2RhdGUiLCJ0aW1lX251bWJlciIsImNhbGVuZGFyIiwieWVhciIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJmb3JtYXRNb250aCIsImZvcm1hdFllYXIiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwic3JjX21pbnV0ZSIsInNyY19zZWNvbmQiLCJ1dGNUaW1lIiwic2VxdWVudGlhbCIsImsxMCIsImRpdmVyZ2luZyIsImsyMSIsImNhdGVnb3J5MTAiLCJBY2NlbnQiLCJEYXJrMiIsIlBhaXJlZCIsIlBhc3RlbDEiLCJQYXN0ZWwyIiwiU2V0MSIsIlNldDIiLCJTZXQzIiwicmFtcCIsInNjaGVtZSIsIkJyQkdfc2NoZW1lIiwiQnJCRyIsIlBSR25fc2NoZW1lIiwiUFJHbiIsIlBpWUdfc2NoZW1lIiwiUGlZRyIsIlB1T3Jfc2NoZW1lIiwiUHVPciIsIlJkQnVfc2NoZW1lIiwiUmRCdSIsIlJkR3lfc2NoZW1lIiwiUmRHeSIsIlJkWWxCdV9zY2hlbWUiLCJSZFlsQnUiLCJSZFlsR25fc2NoZW1lIiwiUmRZbEduIiwiU3BlY3RyYWxfc2NoZW1lIiwiU3BlY3RyYWwiLCJCdUduX3NjaGVtZSIsIkJ1R24iLCJCdVB1X3NjaGVtZSIsIkJ1UHUiLCJHbkJ1X3NjaGVtZSIsIkduQnUiLCJPclJkX3NjaGVtZSIsIk9yUmQiLCJQdUJ1R25fc2NoZW1lIiwiUHVCdUduIiwiUHVCdV9zY2hlbWUiLCJQdUJ1IiwiUHVSZF9zY2hlbWUiLCJQdVJkIiwiUmRQdV9zY2hlbWUiLCJSZFB1IiwiWWxHbkJ1X3NjaGVtZSIsIllsR25CdSIsIllsR25fc2NoZW1lIiwiWWxHbiIsIllsT3JCcl9zY2hlbWUiLCJZbE9yQnIiLCJZbE9yUmRfc2NoZW1lIiwiWWxPclJkIiwiQmx1ZXNfc2NoZW1lIiwiQmx1ZXMiLCJHcmVlbnNfc2NoZW1lIiwiR3JlZW5zIiwiR3JleXNfc2NoZW1lIiwiR3JleXMiLCJQdXJwbGVzX3NjaGVtZSIsIlB1cnBsZXMiLCJSZWRzX3NjaGVtZSIsIlJlZHMiLCJPcmFuZ2VzX3NjaGVtZSIsIk9yYW5nZXMiLCJ3YXJtIiwiY29vbCIsInJhaW5ib3dfYyIsInJhaW5ib3ciLCJ0cyIsInNpbmVib3dfYyIsInBpXzFfMyIsInBpXzJfMyIsInNpbmVib3ciLCJ2aXJpZGlzX3JhbXAiLCJtYWdtYSIsImluZmVybm8iLCJwbGFzbWEiLCJkM19zaGFwZV9zcmNfY29uc3RhbnQiLCJtYXRoX2FicyIsIm1hdGhfYXRhbjIiLCJzcmNfbWF0aF9jb3MiLCJzcmNfbWF0aF9tYXgiLCJtYXRoX21pbiIsInNyY19tYXRoX3NpbiIsIm1hdGhfc3FydCIsInNyY19tYXRoX2Vwc2lsb24iLCJzcmNfbWF0aF9waSIsInNyY19tYXRoX2hhbGZQaSIsInNyY19tYXRoX3RhdSIsIm1hdGhfYXNpbiIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsIngxMCIsInkxMCIsImN4MCIsImN4MSIsInNyY19hcmMiLCJjb3JuZXJSYWRpdXMiLCJwYWRSYWRpdXMiLCJhMDEiLCJhMTEiLCJhMTAiLCJkYTAiLCJkYTEiLCJhcCIsInJwIiwicmMwIiwicmMxIiwib2MiLCJ4MzIiLCJ5MzIiLCJhcmNfaW50ZXJzZWN0IiwiYngiLCJieSIsImtjIiwibWF0aF9hY29zIiwibGMiLCJMaW5lYXIiLCJhcmVhU3RhcnQiLCJhcmVhRW5kIiwiY3VydmVfbGluZWFyIiwicG9pbnRfeCIsInBvaW50X3kiLCJkZWZpbmVkIiwiY3VydmUiLCJkZWZpbmVkMCIsImQzX3NoYXBlX3NyY19hcmVhIiwieDB6IiwieTB6IiwiYXJlYWxpbmUiLCJzcmNfbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsInNyY19kZXNjZW5kaW5nIiwiZDNfc2hhcGVfc3JjX2lkZW50aXR5Iiwic3JjX3BpZSIsInBpZSIsImFyY3MiLCJwYSIsImN1cnZlUmFkaWFsTGluZWFyIiwiY3VydmVSYWRpYWwiLCJSYWRpYWwiLCJfY3VydmUiLCJsaW5lUmFkaWFsIiwic3JjX2xpbmVSYWRpYWwiLCJsaW5lU3RhcnRBbmdsZSIsImxpbmVFbmRBbmdsZSIsImxpbmVJbm5lclJhZGl1cyIsImxpbmVPdXRlclJhZGl1cyIsInBvaW50UmFkaWFsIiwiZDNfc2hhcGVfc3JjX2FycmF5X3NsaWNlIiwibGlua1NvdXJjZSIsImxpbmtUYXJnZXQiLCJsaW5rX2xpbmsiLCJjdXJ2ZUhvcml6b250YWwiLCJjdXJ2ZVZlcnRpY2FsIiwibGlua19jdXJ2ZVJhZGlhbCIsInAyIiwicDMiLCJsaW5rSG9yaXpvbnRhbCIsImxpbmtWZXJ0aWNhbCIsImxpbmtSYWRpYWwiLCJzeW1ib2xfY2lyY2xlIiwiZHJhdyIsInN5bWJvbF9jcm9zcyIsInRhbjMwIiwidGFuMzBfMiIsImRpYW1vbmQiLCJrciIsInN0YXJfa3giLCJzdGFyX2t5Iiwic3RhciIsInNxdWFyZSIsInNxcnQzIiwidHJpYW5nbGUiLCJ3eWVfcyIsInd5ZV9rIiwid3llX2EiLCJ3eWUiLCJzcmNfc3ltYm9sIiwic3JjX25vb3AiLCJiYXNpc19wb2ludCIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJCYXNpc09wZW4iLCJiYXNpc09wZW4iLCJCdW5kbGUiLCJfYmFzaXMiLCJfYmV0YSIsImN1cnZlX2J1bmRsZSIsImJ1bmRsZSIsImNhcmRpbmFsX3BvaW50IiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiY2FyZGluYWxDbG9zZWQiLCJDYXJkaW5hbE9wZW4iLCJjYXJkaW5hbE9wZW4iLCJjYXRtdWxsUm9tX3BvaW50IiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIngyMyIsInkyMyIsImN1cnZlX2NhdG11bGxSb20iLCJjYXRtdWxsUm9tIiwiQ2F0bXVsbFJvbUNsb3NlZCIsImNhdG11bGxSb21DbG9zZWQiLCJDYXRtdWxsUm9tT3BlbiIsImNhdG11bGxSb21PcGVuIiwiTGluZWFyQ2xvc2VkIiwibGluZWFyQ2xvc2VkIiwibW9ub3RvbmVfc2lnbiIsInNsb3BlMyIsImgwIiwiaDEiLCJzbG9wZTIiLCJtb25vdG9uZV9wb2ludCIsIk1vbm90b25lWCIsIk1vbm90b25lWSIsIlJlZmxlY3RDb250ZXh0IiwibW9ub3RvbmVYIiwibW9ub3RvbmVZIiwiTmF0dXJhbCIsImNvbnRyb2xQb2ludHMiLCJfdDAiLCJweCIsInB5IiwibmF0dXJhbCIsIlN0ZXAiLCJfdCIsImN1cnZlX3N0ZXAiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic2VyaWVzIiwib3JkZXJfbm9uZSIsInN0YWNrVmFsdWUiLCJzcmNfc3RhY2siLCJveiIsImt6Iiwic3oiLCJzaWoiLCJraSIsInNpIiwiZXhwYW5kIiwib2Zmc2V0X2RpdmVyZ2luZyIsInluIiwic2lsaG91ZXR0ZSIsIndpZ2dsZSIsInMyIiwic2lqMCIsInMzIiwib3JkZXJfYXNjZW5kaW5nIiwiYXNjZW5kaW5nX3N1bSIsIm9yZGVyX2Rlc2NlbmRpbmciLCJpbnNpZGVPdXQiLCJ0b3BzIiwiYm90dG9tcyIsIm9yZGVyX3JldmVyc2UiLCJkM192b3Jvbm9pX3NyY19jb25zdGFudCIsInNyY19wb2ludF94Iiwic3JjX3BvaW50X3kiLCJSZWRCbGFja1RyZWUiLCJSZWRCbGFja05vZGUiLCJSIiwiUCIsIlJlZEJsYWNrUm90YXRlTGVmdCIsIlJlZEJsYWNrUm90YXRlUmlnaHQiLCJSZWRCbGFja0ZpcnN0IiwiYWZ0ZXIiLCJncmFuZHBhIiwidW5jbGUiLCJzaWJsaW5nIiwic3JjX1JlZEJsYWNrVHJlZSIsImNyZWF0ZUVkZ2UiLCJlZGdlIiwiRGlhZ3JhbV9lZGdlcyIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiY2VsbEhhbGZlZGdlQW5nbGUiLCJjZWxsIiwic2l0ZSIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsImF0dGFjaENpcmNsZSIsImxBcmMiLCJyQXJjIiwibFNpdGUiLCJjU2l0ZSIsInJTaXRlIiwiRGlhZ3JhbV9lcHNpbG9uMiIsImhhIiwiaGMiLCJEaWFncmFtX2NpcmNsZXMiLCJkZXRhY2hDaXJjbGUiLCJiZWFjaFBvb2wiLCJjcmVhdGVCZWFjaCIsImJlYWNoIiwiZGV0YWNoQmVhY2giLCJiZWFjaGVzIiwicmVtb3ZlQmVhY2giLCJkaXNhcHBlYXJpbmciLCJEaWFncmFtX2Vwc2lsb24iLCJpQXJjIiwibkFyY3MiLCJhZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImxlZnRCcmVha1BvaW50IiwicmlnaHRCcmVha1BvaW50IiwiY3JlYXRlQ2VsbCIsIm5ld0FyYyIsImhiIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJ0cmlhbmdsZUFyZWEiLCJsZXhpY29ncmFwaGljIiwiRGlhZ3JhbSIsInNpdGVzIiwic29ydENlbGxIYWxmZWRnZXMiLCJjbGlwRWRnZXMiLCJpQ2VsbCIsImlIYWxmZWRnZSIsIm5IYWxmZWRnZXMiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsIm5DZWxscyIsImRjIiwidjAxIiwidjExIiwidjEwIiwiY2xpcENlbGxzIiwiZWRnZXMiLCJ0cmlhbmdsZXMiLCJfZm91bmQiLCJzcmNfdm9yb25vaSIsInZvcm9ub2kiLCJfc2NyaXB0RGlyIiwiY3VycmVudFNjcmlwdCIsIm1vZHVsZU92ZXJyaWRlcyIsInRvVGhyb3ciLCJFTlZJUk9OTUVOVF9JU19OT0RFIiwiRU5WSVJPTk1FTlRfSVNfU0hFTEwiLCJFTlZJUk9OTUVOVF9JU19XRUIiLCJFTlZJUk9OTUVOVF9JU19XT1JLRVIiLCJpbXBvcnRTY3JpcHRzIiwibm9kZUZTIiwibm9kZVBhdGgiLCJzY3JpcHREaXJlY3RvcnkiLCJsb2NhdGVGaWxlIiwiX19kaXJuYW1lIiwiZmlsZW5hbWUiLCJVaW50OEFycmF5IiwiYXNzZXJ0IiwiZXgiLCJFeGl0U3RhdHVzIiwicmVhc29uIiwicmVhZCIsInJlYWRidWZmZXIiLCJzY3JpcHRBcmdzIiwicXVpdCIsImhyZWYiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZW5kIiwicmVzcG9uc2VUeXBlIiwicHJpbnQiLCJwcmludEVyciIsIndhcm4iLCJTVEFDS19BTElHTiIsInN0YXRpY0FsbG9jIiwiU1RBVElDVE9QIiwiZHluYW1pY0FsbG9jIiwiSEVBUDMyIiwiRFlOQU1JQ1RPUF9QVFIiLCJUT1RBTF9NRU1PUlkiLCJlbmxhcmdlTWVtb3J5IiwiYWxpZ25NZW1vcnkiLCJmYWN0b3IiLCJnZXROYXRpdmVUeXBlU2l6ZSIsImJpdHMiLCJhc20yd2FzbUltcG9ydHMiLCJmNjQtcmVtIiwiZGVidWdnZXIiLCJBQk9SVCIsImFib3J0IiwiZ2V0Q0Z1bmMiLCJpZGVudCIsIkpTZnVuY3MiLCJzdGFja1NhdmUiLCJzdGFja1Jlc3RvcmUiLCJhcnJheVRvQyIsInN0YWNrQWxsb2MiLCJ3cml0ZUFycmF5VG9NZW1vcnkiLCJzdHJpbmdUb0MiLCJzdHJpbmdUb1VURjgiLCJ0b0MiLCJjY2FsbCIsInJldHVyblR5cGUiLCJhcmdUeXBlcyIsIm9wdHMiLCJjQXJncyIsImNvbnZlcnRlciIsIlBvaW50ZXJfc3RyaW5naWZ5IiwiY29udmVydFJldHVyblZhbHVlIiwicHRyIiwibm9TYWZlIiwiSEVBUDgiLCJIRUFQMTYiLCJ0ZW1wSTY0IiwidGVtcERvdWJsZSIsIk1hdGhfYWJzIiwiTWF0aF9taW4iLCJNYXRoX2Zsb29yIiwiTWF0aF9jZWlsIiwiSEVBUEYzMiIsIkhFQVBGNjQiLCJBTExPQ19OT1JNQUwiLCJBTExPQ19TVEFUSUMiLCJBTExPQ19OT05FIiwiZ2V0TWVtb3J5Iiwic3RhdGljU2VhbGVkIiwicnVudGltZUluaXRpYWxpemVkIiwiX21hbGxvYyIsImhhc1V0ZiIsIkhFQVBVOCIsImN1cnIiLCJzdWJhcnJheSIsIlVURjhBcnJheVRvU3RyaW5nIiwiVVRGOFRvU3RyaW5nIiwiVVRGOERlY29kZXIiLCJUZXh0RGVjb2RlciIsInU4QXJyYXkiLCJpZHgiLCJlbmRQdHIiLCJkZWNvZGUiLCJ1MCIsInUxIiwidTIiLCJ1MyIsInU0IiwiY2giLCJzdHJpbmdUb1VURjhBcnJheSIsIm91dFU4QXJyYXkiLCJvdXRJZHgiLCJtYXhCeXRlc1RvV3JpdGUiLCJzdGFydElkeCIsImVuZElkeCIsIm91dFB0ciIsImxlbmd0aEJ5dGVzVVRGOCIsImRlbWFuZ2xlIiwianNTdGFja1RyYWNlIiwic3RhY2tUcmFjZSIsImpzIiwiZGVtYW5nbGVBbGwiLCJTVEFDS1RPUCIsIkRZTkFNSUNfQkFTRSIsIldBU01fUEFHRV9TSVpFIiwiQVNNSlNfUEFHRV9TSVpFIiwidXBkYXRlR2xvYmFsQnVmZmVyVmlld3MiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJhYm9ydE9uQ2Fubm90R3Jvd01lbW9yeSIsIlRPVEFMX1NUQUNLIiwiY2FsbFJ1bnRpbWVDYWxsYmFja3MiLCJXZWJBc3NlbWJseSIsIk1lbW9yeSIsImluaXRpYWwiLCJtYXhpbXVtIiwiQXJyYXlCdWZmZXIiLCJfX0FUUFJFUlVOX18iLCJfX0FUSU5JVF9fIiwiX19BVE1BSU5fXyIsIl9fQVRFWElUX18iLCJfX0FUUE9TVFJVTl9fIiwiYWRkT25QcmVSdW4iLCJhZGRPblBvc3RSdW4iLCJ3cml0ZUFzY2lpVG9NZW1vcnkiLCJkb250QWRkTnVsbCIsIk1hdGhfY29zIiwiTWF0aF9zaW4iLCJydW5EZXBlbmRlbmNpZXMiLCJydW5EZXBlbmRlbmN5V2F0Y2hlciIsImRlcGVuZGVuY2llc0Z1bGZpbGxlZCIsImFkZFJ1bkRlcGVuZGVuY3kiLCJyZW1vdmVSdW5EZXBlbmRlbmN5IiwiZGF0YVVSSVByZWZpeCIsImlzRGF0YVVSSSIsInN0YXJ0c1dpdGgiLCJ3YXNtVGV4dEZpbGUiLCJ3YXNtQmluYXJ5RmlsZSIsImFzbWpzQ29kZUZpbGUiLCJnbG9iYWwiLCJhc20yd2FzbSIsIm1lcmdlTWVtb3J5IiwibmV3QnVmZmVyIiwib2xkQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIm9sZFZpZXciLCJidWYiLCJ1cGRhdGVHbG9iYWxCdWZmZXIiLCJnZXRCaW5hcnkiLCJkb05hdGl2ZVdhc20iLCJwcm92aWRlZEJ1ZmZlciIsInJlY2VpdmVJbnN0YW5jZSIsIm1lbW9yeSIsInJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UiLCJpbnN0YW50aWF0ZUFycmF5QnVmZmVyIiwicmVjZWl2ZXIiLCJjcmVkZW50aWFscyIsImNhdGNoIiwiaW5zdGFudGlhdGVTdHJlYW1pbmciLCJhc21qc1JlYWxsb2NCdWZmZXIiLCJmaW5hbE1ldGhvZCIsImFsaWduVXAiLCJvbGRTaXplIiwiZ3JvdyIsIndhc21SZWFsbG9jQnVmZmVyIiwiaW1wb3J0cyIsImZpeEltcG9ydHMiLCJUQUJMRV9TSVpFIiwiTUFYX1RBQkxFX1NJWkUiLCJUYWJsZSIsImludGVncmF0ZVdhc21KUyIsIlNUQVRJQ19CQVNFIiwiX19fZW1zY3JpcHRlbl9lbnZpcm9uX2NvbnN0cnVjdG9yIiwiX19HTE9CQUxfX3N1Yl9JX2lvc3RyZWFtX2NwcCIsIl9fZW1zY3JpcHRlbl90cmF2ZXJzZV9zdGFjayIsImNhbGxlZSIsImZ1bmNuYW1lIiwiY2FsbGVyIiwiX2Vtc2NyaXB0ZW5fZ2V0X2NhbGxzdGFja19qcyIsImZsYWdzIiwiY2FsbHN0YWNrIiwiaVRoaXNGdW5jIiwibGFzdEluZGV4T2YiLCJpVGhpc0Z1bmMyIiwiaU5leHRMaW5lIiwiZW1zY3JpcHRlbl9zb3VyY2VfbWFwIiwid2Fybk9uY2UiLCJzaG93biIsInN0YWNrX2FyZ3MiLCJuZXdGaXJlZm94UmUiLCJmaXJlZm94UmUiLCJjaHJvbWVSZSIsImpzU3ltYm9sTmFtZSIsImZpbGUiLCJsaW5lbm8iLCJwYXJ0cyIsImNTeW1ib2xOYW1lIiwiaGF2ZVNvdXJjZU1hcCIsIm9yaWciLCJvcmlnaW5hbFBvc2l0aW9uRm9yIiwiRU5WIiwiX19aU3QxOHVuY2F1Z2h0X2V4Y2VwdGlvbnYiLCJ1bmNhdWdodF9leGNlcHRpb24iLCJFWENFUFRJT05TIiwibGFzdCIsImNhdWdodCIsImluZm9zIiwiZGVBZGp1c3QiLCJhZGp1c3RlZCIsImFkZFJlZiIsInJlZmNvdW50IiwiZGVjUmVmIiwicmV0aHJvd24iLCJfX19jeGFfZnJlZV9leGNlcHRpb24iLCJjbGVhclJlZiIsIkVSUk5PX0NPREVTIiwiRVBFUk0iLCJFTk9FTlQiLCJFU1JDSCIsIkVJTlRSIiwiRUlPIiwiRU5YSU8iLCJFMkJJRyIsIkVOT0VYRUMiLCJFQkFERiIsIkVDSElMRCIsIkVBR0FJTiIsIkVXT1VMREJMT0NLIiwiRU5PTUVNIiwiRUFDQ0VTIiwiRUZBVUxUIiwiRU5PVEJMSyIsIkVCVVNZIiwiRUVYSVNUIiwiRVhERVYiLCJFTk9ERVYiLCJFTk9URElSIiwiRUlTRElSIiwiRUlOVkFMIiwiRU5GSUxFIiwiRU1GSUxFIiwiRU5PVFRZIiwiRVRYVEJTWSIsIkVGQklHIiwiRU5PU1BDIiwiRVNQSVBFIiwiRVJPRlMiLCJFTUxJTksiLCJFUElQRSIsIkVET00iLCJFUkFOR0UiLCJFTk9NU0ciLCJFSURSTSIsIkVDSFJORyIsIkVMMk5TWU5DIiwiRUwzSExUIiwiRUwzUlNUIiwiRUxOUk5HIiwiRVVOQVRDSCIsIkVOT0NTSSIsIkVMMkhMVCIsIkVERUFETEsiLCJFTk9MQ0siLCJFQkFERSIsIkVCQURSIiwiRVhGVUxMIiwiRU5PQU5PIiwiRUJBRFJRQyIsIkVCQURTTFQiLCJFREVBRExPQ0siLCJFQkZPTlQiLCJFTk9TVFIiLCJFTk9EQVRBIiwiRVRJTUUiLCJFTk9TUiIsIkVOT05FVCIsIkVOT1BLRyIsIkVSRU1PVEUiLCJFTk9MSU5LIiwiRUFEViIsIkVTUk1OVCIsIkVDT01NIiwiRVBST1RPIiwiRU1VTFRJSE9QIiwiRURPVERPVCIsIkVCQURNU0ciLCJFTk9UVU5JUSIsIkVCQURGRCIsIkVSRU1DSEciLCJFTElCQUNDIiwiRUxJQkJBRCIsIkVMSUJTQ04iLCJFTElCTUFYIiwiRUxJQkVYRUMiLCJFTk9TWVMiLCJFTk9URU1QVFkiLCJFTkFNRVRPT0xPTkciLCJFTE9PUCIsIkVPUE5PVFNVUFAiLCJFUEZOT1NVUFBPUlQiLCJFQ09OTlJFU0VUIiwiRU5PQlVGUyIsIkVBRk5PU1VQUE9SVCIsIkVQUk9UT1RZUEUiLCJFTk9UU09DSyIsIkVOT1BST1RPT1BUIiwiRVNIVVRET1dOIiwiRUNPTk5SRUZVU0VEIiwiRUFERFJJTlVTRSIsIkVDT05OQUJPUlRFRCIsIkVORVRVTlJFQUNIIiwiRU5FVERPV04iLCJFVElNRURPVVQiLCJFSE9TVERPV04iLCJFSE9TVFVOUkVBQ0giLCJFSU5QUk9HUkVTUyIsIkVBTFJFQURZIiwiRURFU1RBRERSUkVRIiwiRU1TR1NJWkUiLCJFUFJPVE9OT1NVUFBPUlQiLCJFU09DS1ROT1NVUFBPUlQiLCJFQUREUk5PVEFWQUlMIiwiRU5FVFJFU0VUIiwiRUlTQ09OTiIsIkVOT1RDT05OIiwiRVRPT01BTllSRUZTIiwiRVVTRVJTIiwiRURRVU9UIiwiRVNUQUxFIiwiRU5PVFNVUCIsIkVOT01FRElVTSIsIkVJTFNFUSIsIkVPVkVSRkxPVyIsIkVDQU5DRUxFRCIsIkVOT1RSRUNPVkVSQUJMRSIsIkVPV05FUkRFQUQiLCJFU1RSUElQRSIsIl9fX3NldEVyck5vIiwiRVJSTk9fTUVTU0FHRVMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSIsIjI2IiwiMjciLCIyOCIsIjI5IiwiMzAiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQyIiwiNDMiLCI0NCIsIjQ1IiwiNDYiLCI0NyIsIjQ4IiwiNDkiLCI1MCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI1NiIsIjU3IiwiNTkiLCI2MCIsIjYxIiwiNjIiLCI2MyIsIjY0IiwiNjUiLCI2NiIsIjY3IiwiNjgiLCI2OSIsIjcwIiwiNzEiLCI3MiIsIjczIiwiNzQiLCI3NSIsIjc2IiwiNzciLCI3OCIsIjc5IiwiODAiLCI4MSIsIjgyIiwiODMiLCI4NCIsIjg2IiwiODciLCI4OCIsIjg5IiwiOTAiLCI5MSIsIjkyIiwiOTMiLCI5NCIsIjk1IiwiOTYiLCI5NyIsIjk4IiwiOTkiLCIxMDAiLCIxMDEiLCIxMDIiLCIxMDMiLCIxMDQiLCIxMDUiLCIxMDYiLCIxMDciLCIxMDgiLCIxMDkiLCIxMTAiLCIxMTEiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMjIiLCIxMjMiLCIxMjUiLCIxMzAiLCIxMzEiLCJQQVRIIiwic3BsaXRQYXRoIiwibm9ybWFsaXplQXJyYXkiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJsYXN0U2xhc2giLCJleHRuYW1lIiwicGF0aHMiLCJqb2luMiIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJGUyIsInJlbGF0aXZlIiwiZnJvbVBhcnRzIiwidG9QYXJ0cyIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwiVFRZIiwidHR5cyIsInNodXRkb3duIiwicmVnaXN0ZXIiLCJkZXYiLCJvcHMiLCJyZWdpc3RlckRldmljZSIsInN0cmVhbV9vcHMiLCJ0dHkiLCJyZGV2IiwiRXJybm9FcnJvciIsInNlZWthYmxlIiwiZmx1c2giLCJwb3MiLCJnZXRfY2hhciIsImJ5dGVzUmVhZCIsInRpbWVzdGFtcCIsIndyaXRlIiwicHV0X2NoYXIiLCJkZWZhdWx0X3R0eV9vcHMiLCJCdWZmZXIiLCJpc1Bvc2l4UGxhdGZvcm0iLCJwbGF0Zm9ybSIsImZkIiwic3RkaW4iLCJ1c2luZ0RldmljZSIsImZzIiwib3BlblN5bmMiLCJyZWFkU3luYyIsImNsb3NlU3luYyIsInByb21wdCIsInJlYWRsaW5lIiwiaW50QXJyYXlGcm9tU3RyaW5nIiwiZGVmYXVsdF90dHkxX29wcyIsIk1FTUZTIiwib3BzX3RhYmxlIiwibW91bnQiLCJjcmVhdGVOb2RlIiwiaXNCbGtkZXYiLCJpc0ZJRk8iLCJnZXRhdHRyIiwibm9kZV9vcHMiLCJzZXRhdHRyIiwibG9va3VwIiwibWtub2QiLCJyZW5hbWUiLCJ1bmxpbmsiLCJybWRpciIsInJlYWRkaXIiLCJzeW1saW5rIiwibGxzZWVrIiwiYWxsb2NhdGUiLCJtbWFwIiwibXN5bmMiLCJyZWFkbGluayIsImNocmRldiIsImNocmRldl9zdHJlYW1fb3BzIiwiaXNEaXIiLCJjb250ZW50cyIsImlzRmlsZSIsInVzZWRCeXRlcyIsImlzTGluayIsImlzQ2hyZGV2IiwiZ2V0RmlsZURhdGFBc1JlZ3VsYXJBcnJheSIsImdldEZpbGVEYXRhQXNUeXBlZEFycmF5IiwiZXhwYW5kRmlsZVN0b3JhZ2UiLCJuZXdDYXBhY2l0eSIsInByZXZDYXBhY2l0eSIsIm9sZENvbnRlbnRzIiwicmVzaXplRmlsZVN0b3JhZ2UiLCJuZXdTaXplIiwiaW5vIiwibmxpbmsiLCJ1aWQiLCJnaWQiLCJhdGltZSIsIm10aW1lIiwiY3RpbWUiLCJibGtzaXplIiwiYmxvY2tzIiwiZ2VuZXJpY0Vycm9ycyIsIm9sZF9ub2RlIiwibmV3X2RpciIsIm5ld19uYW1lIiwibmV3X25vZGUiLCJsb29rdXBOb2RlIiwibmV3bmFtZSIsIm9sZHBhdGgiLCJjYW5Pd24iLCJ3aGVuY2UiLCJwcm90IiwiYWxsb2NhdGVkIiwiYnl0ZU9mZnNldCIsIm1tYXBGbGFncyIsIklEQkZTIiwiZGJzIiwiaW5kZXhlZERCIiwibW96SW5kZXhlZERCIiwid2Via2l0SW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJEQl9WRVJTSU9OIiwiREJfU1RPUkVfTkFNRSIsInN5bmNmcyIsInBvcHVsYXRlIiwiZ2V0TG9jYWxTZXQiLCJnZXRSZW1vdGVTZXQiLCJyZW1vdGUiLCJkc3QiLCJyZWNvbmNpbGUiLCJnZXREQiIsInJlcSIsImRiIiwib251cGdyYWRlbmVlZGVkIiwiZmlsZVN0b3JlIiwib2JqZWN0U3RvcmVOYW1lcyIsIm9iamVjdFN0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJpbmRleE5hbWVzIiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJvbnN1Y2Nlc3MiLCJpc1JlYWxEaXIiLCJ0b0Fic29sdXRlIiwiY2hlY2siLCJtb3VudHBvaW50Iiwic3RhdCIsIm9wZW5LZXlDdXJzb3IiLCJjdXJzb3IiLCJwcmltYXJ5S2V5IiwiY29udGludWUiLCJsb2FkTG9jYWxFbnRyeSIsImxvb2t1cFBhdGgiLCJzdG9yZUxvY2FsRW50cnkiLCJta2RpciIsIndyaXRlRmlsZSIsImNobW9kIiwidXRpbWUiLCJyZW1vdmVMb2NhbEVudHJ5IiwibG9hZFJlbW90ZUVudHJ5Iiwic3RvcmUiLCJzdG9yZVJlbW90ZUVudHJ5IiwicHV0IiwicmVtb3ZlUmVtb3RlRW50cnkiLCJkZWxldGUiLCJjb21wbGV0ZWQiLCJlcnJvcmVkIiwiTk9ERUZTIiwiaXNXaW5kb3dzIiwic3RhdGljSW5pdCIsImZsYWdzRm9yTm9kZU1hcCIsIjEwMjQiLCIxMjgiLCI0MDk2IiwiNTEyIiwiYnVmZmVyRnJvbSIsImdldE1vZGUiLCJsc3RhdFN5bmMiLCJyZWFsUGF0aCIsImZsYWdzRm9yTm9kZSIsIm5ld0ZsYWdzIiwiY2htb2RTeW5jIiwidXRpbWVzU3luYyIsInRydW5jYXRlU3luYyIsIm1rZGlyU3luYyIsIndyaXRlRmlsZVN5bmMiLCJuZXdEaXIiLCJuZXdOYW1lIiwib2xkUGF0aCIsIm5ld1BhdGgiLCJyZW5hbWVTeW5jIiwidW5saW5rU3luYyIsInJtZGlyU3luYyIsInJlYWRkaXJTeW5jIiwic3ltbGlua1N5bmMiLCJyZWFkbGlua1N5bmMiLCJOT0RFSlNfUEFUSCIsIm5mZCIsIndyaXRlU3luYyIsImZzdGF0U3luYyIsIldPUktFUkZTIiwiRElSX01PREUiLCJGSUxFX01PREUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyU3luYyIsImNyZWF0ZWRQYXJlbnRzIiwiZW5zdXJlUGFyZW50IiwibGFzdE1vZGlmaWVkRGF0ZSIsIm9iaiIsImZpbGVzIiwiZ2V0VGltZSIsImNodW5rIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJtb3VudHMiLCJkZXZpY2VzIiwibmV4dElub2RlIiwibmFtZVRhYmxlIiwiY3VycmVudFBhdGgiLCJpbml0aWFsaXplZCIsImlnbm9yZVBlcm1pc3Npb25zIiwidHJhY2tpbmdEZWxlZ2F0ZSIsInRyYWNraW5nIiwib3BlbkZsYWdzIiwiUkVBRCIsIldSSVRFIiwiZmlsZXN5c3RlbXMiLCJzeW5jRlNSZXF1ZXN0cyIsImhhbmRsZUZTRXJyb3IiLCJlcnJubyIsImRlZmF1bHRzIiwiZm9sbG93X21vdW50IiwicmVjdXJzZV9jb3VudCIsImN1cnJlbnRfcGF0aCIsImlzbGFzdCIsImlzTW91bnRwb2ludCIsIm1vdW50ZWQiLCJmb2xsb3ciLCJnZXRQYXRoIiwiaXNSb290IiwiaGFzaE5hbWUiLCJwYXJlbnRpZCIsImhhc2giLCJoYXNoQWRkTm9kZSIsIm5hbWVfbmV4dCIsImhhc2hSZW1vdmVOb2RlIiwibWF5TG9va3VwIiwiRlNOb2RlIiwiZGVmaW5lUHJvcGVydGllcyIsImlzRm9sZGVyIiwiaXNEZXZpY2UiLCJkZXN0cm95Tm9kZSIsImlzU29ja2V0IiwiZmxhZ01vZGVzIiwicnMiLCJyKyIsInd4IiwieHciLCJ3KyIsInd4KyIsInh3KyIsImErIiwiYXgrIiwieGErIiwibW9kZVN0cmluZ1RvRmxhZ3MiLCJmbGFnc1RvUGVybWlzc2lvblN0cmluZyIsImZsYWciLCJwZXJtcyIsIm5vZGVQZXJtaXNzaW9ucyIsIm1heUNyZWF0ZSIsIm1heURlbGV0ZSIsImlzZGlyIiwibWF5T3BlbiIsIk1BWF9PUEVOX0ZEUyIsIm5leHRmZCIsImZkX3N0YXJ0IiwiZmRfZW5kIiwiZ2V0U3RyZWFtIiwiY3JlYXRlU3RyZWFtIiwiRlNTdHJlYW0iLCJpc1JlYWQiLCJpc1dyaXRlIiwiaXNBcHBlbmQiLCJuZXdTdHJlYW0iLCJjbG9zZVN0cmVhbSIsImRldmljZSIsImdldERldmljZSIsIm1ham9yIiwibWlub3IiLCJtYWtlZGV2IiwibWEiLCJtaSIsImdldE1vdW50cyIsImRvQ2FsbGJhY2siLCJwc2V1ZG8iLCJtb3VudFJvb3QiLCJ1bm1vdW50IiwibWtkaXJUcmVlIiwiZGlycyIsIm1rZGV2IiwibmV3cGF0aCIsIm9sZF9wYXRoIiwibmV3X3BhdGgiLCJvbGRfZGlyIiwib2xkX2Rpcm5hbWUiLCJuZXdfZGlybmFtZSIsIm9sZF9uYW1lIiwiZG9udEZvbGxvdyIsImxzdGF0IiwibGNobW9kIiwiZmNobW9kIiwiY2hvd24iLCJsY2hvd24iLCJmY2hvd24iLCJ0cnVuY2F0ZSIsImZ0cnVuY2F0ZSIsImNyZWF0ZWQiLCJ1bmdvdHRlbiIsInJlYWRGaWxlcyIsInRyYWNraW5nRmxhZ3MiLCJpc0Nsb3NlZCIsImdldGRlbnRzIiwic2Vla2luZyIsImJ5dGVzV3JpdHRlbiIsIm11bm1hcCIsImlvY3RsIiwiY21kIiwicmVhZEZpbGUiLCJlbmNvZGluZyIsImFjdHVhbE51bUJ5dGVzIiwiaXNWaWV3IiwiY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzIiwiY3JlYXRlRGVmYXVsdERldmljZXMiLCJyYW5kb21fZGV2aWNlIiwiY3J5cHRvIiwicmFuZG9tQnVmZmVyIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3JlYXRlRGV2aWNlIiwiY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzIiwiY3JlYXRlU3RhbmRhcmRTdHJlYW1zIiwic3Rkb3V0Iiwic3RkZXJyIiwiZW5zdXJlRXJybm9FcnJvciIsInNldEVycm5vIiwid3JpdGFibGUiLCJmZmx1c2giLCJjYW5SZWFkIiwiY2FuV3JpdGUiLCJqb2luUGF0aCIsImZvcmNlUmVsYXRpdmUiLCJhYnNvbHV0ZVBhdGgiLCJzdGFuZGFyZGl6ZVBhdGgiLCJmaW5kT2JqZWN0IiwiZG9udFJlc29sdmVMYXN0TGluayIsImFuYWx5emVQYXRoIiwiZXhpc3RzIiwicGFyZW50RXhpc3RzIiwicGFyZW50UGF0aCIsInBhcmVudE9iamVjdCIsImNyZWF0ZUZvbGRlciIsImNyZWF0ZVBhdGgiLCJwYXJ0IiwiY3JlYXRlRmlsZSIsImNyZWF0ZURhdGFGaWxlIiwiY3JlYXRlTGluayIsImZvcmNlTG9hZEZpbGUiLCJzdWNjZXNzIiwiY3JlYXRlTGF6eUZpbGUiLCJMYXp5VWludDhBcnJheSIsImxlbmd0aEtub3duIiwiY2h1bmtzIiwiY2h1bmtPZmZzZXQiLCJjaHVua1NpemUiLCJjaHVua051bSIsInNldERhdGFHZXR0ZXIiLCJjYWNoZUxlbmd0aCIsImhlYWRlciIsImRhdGFsZW5ndGgiLCJOdW1iZXIiLCJnZXRSZXNwb25zZUhlYWRlciIsImhhc0J5dGVTZXJ2aW5nIiwidXNlc0d6aXAiLCJsYXp5QXJyYXkiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImRvWEhSIiwiX2xlbmd0aCIsIl9jaHVua1NpemUiLCJjcmVhdGVQcmVsb2FkZWRGaWxlIiwiZG9udENyZWF0ZUZpbGUiLCJwcmVGaW5pc2giLCJCcm93c2VyIiwicHJvY2Vzc0RhdGEiLCJieXRlQXJyYXkiLCJmaW5pc2giLCJoYW5kbGVkIiwicGx1Z2luIiwiYXN5bmNMb2FkIiwiREJfTkFNRSIsInBhdGhuYW1lIiwic2F2ZUZpbGVzVG9EQiIsIm9wZW5SZXF1ZXN0IiwiZmFpbCIsInB1dFJlcXVlc3QiLCJsb2FkRmlsZXNGcm9tREIiLCJnZXRSZXF1ZXN0IiwiU1lTQ0FMTFMiLCJERUZBVUxUX1BPTExNQVNLIiwibWFwcGluZ3MiLCJjYWxjdWxhdGVBdCIsImRpcmZkIiwiZGlyc3RyZWFtIiwiZG9TdGF0IiwiZG9Nc3luYyIsImFkZHIiLCJkb01rZGlyIiwiZG9Na25vZCIsImRvUmVhZGxpbmsiLCJidWZzaXplIiwiZW5kQ2hhciIsImRvQWNjZXNzIiwiYW1vZGUiLCJkb0R1cCIsInN1Z2dlc3RGRCIsInN1Z2dlc3QiLCJkb1JlYWR2IiwiaW92IiwiaW92Y250IiwiZG9Xcml0ZXYiLCJ2YXJhcmdzIiwiZ2V0U3RyIiwiZ2V0U3RyZWFtRnJvbUZEIiwiZ2V0U29ja2V0RnJvbUZEIiwic29ja2V0IiwiU09DS0ZTIiwiZ2V0U29ja2V0IiwiZ2V0U29ja2V0QWRkcmVzcyIsImFsbG93TnVsbCIsImFkZHJwIiwiYWRkcmxlbiIsIl9fcmVhZF9zb2NrYWRkciIsIkROUyIsImxvb2t1cF9hZGRyIiwiZ2V0NjQiLCJsb3ciLCJoaWdoIiwiZ2V0WmVybyIsIl9sbHZtX2Nvc19mMzIiLCJfbGx2bV9zaW5fZjMyIiwiX2xsdm1fc3RhY2tzYXZlIiwiTExWTV9TQVZFRFNUQUNLUyIsIl9faXNMZWFwWWVhciIsIl9fYXJyYXlTdW0iLCJfX01PTlRIX0RBWVNfTEVBUCIsIl9fTU9OVEhfREFZU19SRUdVTEFSIiwiX19hZGREYXlzIiwibGVhcCIsImN1cnJlbnRNb250aCIsImRheXNJbkN1cnJlbnRNb250aCIsInN0cmluZ3kiLCJ1OGFycmF5IiwibnVtQnl0ZXNXcml0dGVuIiwiYXNtR2xvYmFsQXJnIiwiYXNtTGlicmFyeUFyZyIsImdldFRvdGFsTWVtb3J5IiwiX19VbndpbmRfQmFja3RyYWNlIiwiX19VbndpbmRfRmluZEVuY2xvc2luZ0Z1bmN0aW9uIiwiX19VbndpbmRfR2V0SVBJbmZvIiwiX19fYnVpbGRFbnZpcm9ubWVudCIsImVudmlyb24iLCJwb29sUHRyIiwiZW52UHRyIiwiY2FsbGVkIiwiTUFYX0VOVl9WQUxVRVMiLCJzdHJpbmdzIiwidG90YWxTaXplIiwiX19fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbiIsIl9fX2N4YV90aHJvdyIsIl9fX2xvY2siLCJfX19tYXBfZmlsZSIsIl9fX3N5c2NhbGwxNDAiLCJ3aGljaCIsIm9mZnNldF9sb3ciLCJfX19zeXNjYWxsMTQ1IiwiX19fc3lzY2FsbDE0NiIsIl9fX3N5c2NhbGwyMjEiLCJfX19zeXNjYWxsMyIsIl9fX3N5c2NhbGw0IiwiX19fc3lzY2FsbDUiLCJfX19zeXNjYWxsNTQiLCJvcCIsImFyZ3AiLCJfX19zeXNjYWxsNiIsIl9fX3N5c2NhbGw5MSIsIl9mcmVlIiwibWFsbG9jIiwiX19fdW5sb2NrIiwiX2Fib3J0IiwiX2RsYWRkciIsImZuYW1lIiwic2xhYiIsImFsbG9jYXRvciIsInplcm9pbml0Iiwic2luZ2xlVHlwZSIsInR5cGVTaXplIiwicHJldmlvdXNUeXBlIiwiX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyIsImRlc3QiLCJudW0iLCJfZ2V0ZW52IiwiYWxsb2NhdGVVVEY4IiwiX2xsdm1fc3RhY2tyZXN0b3JlIiwiX2xsdm1fdHJhcCIsIl9wdGhyZWFkX2NvbmRfZGVzdHJveSIsIl9wdGhyZWFkX2NvbmRfaW5pdCIsIl9wdGhyZWFkX2NvbmRfd2FpdCIsIl9wdGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3kiLCJfcHRocmVhZF9jb25kYXR0cl9pbml0IiwiX3B0aHJlYWRfY29uZGF0dHJfc2V0Y2xvY2siLCJfcHRocmVhZF9tdXRleF9kZXN0cm95IiwiX3B0aHJlYWRfbXV0ZXhfaW5pdCIsIl9wdGhyZWFkX211dGV4YXR0cl9kZXN0cm95IiwiX3B0aHJlYWRfbXV0ZXhhdHRyX2luaXQiLCJfcHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZSIsIl9wdGhyZWFkX3J3bG9ja19yZGxvY2siLCJfcHRocmVhZF9yd2xvY2tfdW5sb2NrIiwiX3N0cmZ0aW1lX2wiLCJtYXhzaXplIiwidG0iLCJ0bV96b25lIiwidG1fc2VjIiwidG1fbWluIiwidG1faG91ciIsInRtX21kYXkiLCJ0bV9tb24iLCJ0bV95ZWFyIiwidG1fd2RheSIsInRtX3lkYXkiLCJ0bV9pc2RzdCIsInRtX2dtdG9mZiIsInBhdHRlcm4iLCJFWFBBTlNJT05fUlVMRVNfMSIsIiVjIiwiJUQiLCIlRiIsIiVoIiwiJXIiLCIlUiIsIiVUIiwiJXgiLCIlWCIsInJ1bGUiLCJXRUVLREFZUyIsIk1PTlRIUyIsImxlYWRpbmdTb21ldGhpbmciLCJkaWdpdHMiLCJjaGFyYWN0ZXIiLCJsZWFkaW5nTnVsbHMiLCJjb21wYXJlQnlEYXkiLCJkYXRlMSIsImRhdGUyIiwic2duIiwiZ2V0Rmlyc3RXZWVrU3RhcnREYXRlIiwiamFuRm91cnRoIiwiZ2V0V2Vla0Jhc2VkWWVhciIsInRoaXNEYXRlIiwiamFuRm91cnRoVGhpc1llYXIiLCJqYW5Gb3VydGhOZXh0WWVhciIsImZpcnN0V2Vla1N0YXJ0VGhpc1llYXIiLCJmaXJzdFdlZWtTdGFydE5leHRZZWFyIiwiRVhQQU5TSU9OX1JVTEVTXzIiLCIlYSIsIiVBIiwiJWIiLCIlQiIsIiVDIiwiJWQiLCIlZSIsIiVnIiwiJUciLCIlSCIsIiVJIiwidHdlbHZlSG91ciIsIiVqIiwiJW0iLCIlTSIsIiVuIiwiJXAiLCIlUyIsIiV0IiwiJXUiLCIlVSIsImphbkZpcnN0IiwiZmlyc3RTdW5kYXkiLCJlbmREYXRlIiwiZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGgiLCIlViIsImRheXNEaWZmZXJlbmNlIiwiJXciLCIlVyIsImZpcnN0TW9uZGF5IiwiJXkiLCIlWSIsIiV6IiwiYWhlYWQiLCIlWiIsIiUlIiwiX3N0cmZ0aW1lIiwiYXNtIiwiZG9SdW4iLCJwb3N0UnVuIiwicHJlUnVuIiwid2hhdCIsIm51bWVyaWNBcmdzIiwib2xkIiwicnVuQ2FsbGVyIiwiX3JlYWN0RG9tIiwiX2xheW91dDIiLCJub2RlQ29sb3IiLCJzY2FsZU9yZGluYWwiLCJzY2hlbWVDYXRlZ29yeTEwIiwiQXBwIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiX3RoaXMyIiwid2Via2l0SXNGdWxsU2NyZWVuIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiX3N0YXRlIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJjbGFzc05hbWUiLCJvblN1Ym1pdCIsImhhbmRsZVN1Ym1pdFF1ZXJ5Rm9ybSIsInF1ZXJ5IiwiZGlzcGxheSIsInRyYW5zaXRpb24tZHVyYXRpb24iLCJncmFwaC1ub2Rlcy1wcm9wZXJ0eSIsImdyYXBoLWxpbmtzLXByb3BlcnR5Iiwibm9kZS1pZC1wcm9wZXJ0eSIsIm5vZGUtbGFiZWwtcHJvcGVydHkiLCJsaW5rLXNvdXJjZS1wcm9wZXJ0eSIsImxpbmstdGFyZ2V0LXByb3BlcnR5IiwiZGVmYXVsdC1ub2RlLXdpZHRoIiwiZGVmYXVsdC1ub2RlLWhlaWdodCIsImRlZmF1bHQtbm9kZS1zdHJva2Utd2lkdGgiLCJkZWZhdWx0LWxpbmstc3Ryb2tlLXdpZHRoIiwibm8tYXV0by1jZW50ZXJpbmciLCJvbkNsaWNrIiwiaGFuZGxlQ2xpY2tDZW50ZXJCdXR0b24iLCJoYW5kbGVDbGlja0Z1bGxzY3JlZW5CdXR0b24iLCJoYW5kbGVTdWJtaXRPcHRpb25zRm9ybSIsInJlbmRlcmVyIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJfdGhpczMiLCJ1c2VySWQiLCJub2RlQ29sb3JQcm9wZXJ0eSIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJidG9hIiwic3RhdGVtZW50cyIsInN0YXRlbWVudCIsInJlc3VsdERhdGFDb250ZW50cyIsIl9yZWYiLCJncmFwaCIsInJlc3VsdHMiLCJsaW5rV2lkdGhTY2FsZSIsInNjYWxlTGluZWFyIiwibGlua0NvbG9yU2NhbGUiLCJmaWxsQ29sb3IiLCJyZWxhdGlvbnNoaXBzIiwic3Ryb2tlQ29sb3IiLCJmZXRjaEdyYXBoIiwibGF5b3V0IiwiX3RoaXM0IiwiY3ljbGVzIiwic1N0ZXAiLCJpU3RlcCIsImdyb3VwUHJvcGVydHkiLCJub2RlR3JvdXAiLCJtYW55Qm9keUZvcmNlIiwibGlua0ZvcmNlIiwiY2VudGVyRm9yY2UiLCJpbnRyYUdyb3VwIiwiaW50ZXJHcm91cCIsInVzZUVkZ2VDb25jZW50cmF0aW9uIiwic2hvd1NpbmdsZUVkZ2UiLCJtaW5Db3VudCIsImxvYWQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSIsIl9kaWRJdGVyYXRvckVycm9yNSIsIl9pdGVyYXRvckVycm9yNSIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJpbnZhbGlkYXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJGb3JFYWNoQm9va0tlZXBpbmciLCJmb3JFYWNoRnVuY3Rpb24iLCJmb3JFYWNoQ29udGV4dCIsImZvckVhY2hTaW5nbGVDaGlsZCIsImJvb2tLZWVwaW5nIiwiTWFwQm9va0tlZXBpbmciLCJtYXBSZXN1bHQiLCJtYXBGdW5jdGlvbiIsIm1hcENvbnRleHQiLCJtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0IiwiY2hpbGRLZXkiLCJtYXBwZWRDaGlsZCIsIm1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwiLCJlc2NhcGVkUHJlZml4IiwiZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkiLCJmb3JFYWNoRnVuYyIsIklURVJBVE9SX1NZTUJPTCIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwibWF5YmVJdGVyYWJsZSIsImNyZWF0ZURPTUZhY3RvcnkiLCJhYmJyIiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImJyIiwiY2FudmFzIiwiY2FwdGlvbiIsImNpdGUiLCJjb2wiLCJjb2xncm91cCIsImRhdGFsaXN0IiwiZGQiLCJkZWwiLCJkZXRhaWxzIiwiZGZuIiwiZGlhbG9nIiwiZGl2IiwiZHQiLCJlbSIsImVtYmVkIiwiZmllbGRzZXQiLCJmaWdjYXB0aW9uIiwiZmlndXJlIiwiZm9vdGVyIiwiZm9ybSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkIiwiaGdyb3VwIiwiaHIiLCJpZnJhbWUiLCJpbWciLCJpbnMiLCJrYmQiLCJrZXlnZW4iLCJsYWJlbCIsImxlZ2VuZCIsImxpIiwibWFpbiIsIm1hcmsiLCJtZW51IiwibWVudWl0ZW0iLCJtZXRhIiwibWV0ZXIiLCJuYXYiLCJub3NjcmlwdCIsIm9sIiwib3B0Z3JvdXAiLCJvcHRpb24iLCJwYXJhbSIsInBpY3R1cmUiLCJwcmUiLCJwcm9ncmVzcyIsInJ0IiwicnVieSIsInNhbXAiLCJzY3JpcHQiLCJzZWN0aW9uIiwic21hbGwiLCJzcGFuIiwic3Ryb25nIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZCIsInRleHRhcmVhIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidWwiLCJ2YXIiLCJ2aWRlbyIsIndiciIsImNsaXBQYXRoIiwiZGVmcyIsImVsbGlwc2UiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5bGluZSIsInJhZGlhbEdyYWRpZW50IiwidHNwYW4iLCJpbnZhcmlhbnQiLCJ0aHJvd09uRGlyZWN0QWNjZXNzIiwiQU5PTllNT1VTIiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJib29sIiwiYW55IiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJhcnJheU9mIiwidHlwZUNoZWNrZXIiLCJwcm9wRnVsbE5hbWUiLCJQcm9wVHlwZUVycm9yIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImluc3RhbmNlT2YiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJhY3R1YWxDbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJpc05vZGUiLCJjcmVhdGVOb2RlQ2hlY2tlciIsIm9iamVjdE9mIiwib25lT2YiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsIm9uZU9mVHlwZSIsImFycmF5T2ZUeXBlQ2hlY2tlcnMiLCJjaGVja2VyIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwic2hhcGUiLCJzaGFwZVR5cGVzIiwidmFsaWRhdGUiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwic2VjcmV0IiwiY2hhaW5lZENoZWNrVHlwZSIsImV4cGVjdGVkVHlwZSIsImdldFByZWNpc2VUeXBlIiwiaXNTeW1ib2wiLCJ0eXBlU3BlY3MiLCJnZXRTdGFjayIsIl9pbnZhcmlhbnQiLCJNSVhJTlNfS0VZIiwiaW5qZWN0ZWRNaXhpbnMiLCJSZWFjdENsYXNzSW50ZXJmYWNlIiwibWl4aW5zIiwic3RhdGljcyIsImNvbnRleHRUeXBlcyIsImNoaWxkQ29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidXBkYXRlQ29tcG9uZW50IiwiUkVTRVJWRURfU1BFQ19LRVlTIiwibWl4U3BlY0ludG9Db21wb25lbnQiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsImlzUmVzZXJ2ZWQiLCJpc0luaGVyaXRlZCIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50IiwiYXV0b2JpbmQiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwiaXNBbHJlYWR5RGVmaW5lZCIsInNwZWNQb2xpY3kiLCJSZWFjdENsYXNzTWl4aW4iLCJzcGVjIiwiYXV0b0JpbmRQYWlycyIsIl9fcmVhY3RBdXRvQmluZFBhaXJzIiwiaXNSZWFjdENsYXNzTWV0aG9kIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyIsImJpbmRBdXRvQmluZE1ldGhvZCIsIklzTW91bnRlZFByZU1peGluIiwiX19pc01vdW50ZWQiLCJJc01vdW50ZWRQb3N0TWl4aW4iLCJyZXBsYWNlU3RhdGUiLCJuZXdTdGF0ZSIsIlJlYWN0Q2xhc3NDb21wb25lbnQiLCJhdXRvQmluZEtleSIsImJpbmRBdXRvQmluZE1ldGhvZHMiLCJpbml0aWFsU3RhdGUiLCJtZXRob2ROYW1lIiwiUmVhY3REZWZhdWx0SW5qZWN0aW9uIiwiZmluZERPTU5vZGUiLCJnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZSIsImluamVjdCIsIlJlYWN0RE9NIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIk1vdW50IiwiUmVjb25jaWxlciIsIkFSSUFET01Qcm9wZXJ0eUNvbmZpZyIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIkRlZmF1bHRFdmVudFBsdWdpbk9yZGVyIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCJSZWFjdERPTUNvbXBvbmVudCIsIlJlYWN0RE9NRW1wdHlDb21wb25lbnQiLCJSZWFjdERPTVRyZWVUcmF2ZXJzYWwiLCJSZWFjdERPTVRleHRDb21wb25lbnQiLCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5IiwiUmVhY3RJbmplY3Rpb24iLCJTVkdET01Qcm9wZXJ0eUNvbmZpZyIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJhbHJlYWR5SW5qZWN0ZWQiLCJFdmVudEVtaXR0ZXIiLCJIb3N0Q29tcG9uZW50IiwiRW1wdHlDb21wb25lbnQiLCJVcGRhdGVzIiwiYXJpYS1jdXJyZW50IiwiYXJpYS1kZXRhaWxzIiwiYXJpYS1kaXNhYmxlZCIsImFyaWEtaGlkZGVuIiwiYXJpYS1pbnZhbGlkIiwiYXJpYS1rZXlzaG9ydGN1dHMiLCJhcmlhLWxhYmVsIiwiYXJpYS1yb2xlZGVzY3JpcHRpb24iLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWEtY2hlY2tlZCIsImFyaWEtZXhwYW5kZWQiLCJhcmlhLWhhc3BvcHVwIiwiYXJpYS1sZXZlbCIsImFyaWEtbW9kYWwiLCJhcmlhLW11bHRpbGluZSIsImFyaWEtbXVsdGlzZWxlY3RhYmxlIiwiYXJpYS1vcmllbnRhdGlvbiIsImFyaWEtcGxhY2Vob2xkZXIiLCJhcmlhLXByZXNzZWQiLCJhcmlhLXJlYWRvbmx5IiwiYXJpYS1yZXF1aXJlZCIsImFyaWEtc2VsZWN0ZWQiLCJhcmlhLXNvcnQiLCJhcmlhLXZhbHVlbWF4IiwiYXJpYS12YWx1ZW1pbiIsImFyaWEtdmFsdWVub3ciLCJhcmlhLXZhbHVldGV4dCIsImFyaWEtYXRvbWljIiwiYXJpYS1idXN5IiwiYXJpYS1saXZlIiwiYXJpYS1yZWxldmFudCIsImFyaWEtZHJvcGVmZmVjdCIsImFyaWEtZ3JhYmJlZCIsImFyaWEtYWN0aXZlZGVzY2VuZGFudCIsImFyaWEtY29sY291bnQiLCJhcmlhLWNvbGluZGV4IiwiYXJpYS1jb2xzcGFuIiwiYXJpYS1jb250cm9scyIsImFyaWEtZGVzY3JpYmVkYnkiLCJhcmlhLWVycm9ybWVzc2FnZSIsImFyaWEtZmxvd3RvIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYS1vd25zIiwiYXJpYS1wb3NpbnNldCIsImFyaWEtcm93Y291bnQiLCJhcmlhLXJvd2luZGV4IiwiYXJpYS1yb3dzcGFuIiwiYXJpYS1zZXRzaXplIiwiRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwiU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsIlN5bnRoZXRpY0lucHV0RXZlbnQiLCJFTkRfS0VZQ09ERVMiLCJTVEFSVF9LRVlDT0RFIiwiY2FuVXNlQ29tcG9zaXRpb25FdmVudCIsImNhblVzZVRleHRJbnB1dEV2ZW50Iiwib3BlcmEiLCJpc1ByZXN0byIsInVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhIiwiU1BBQ0VCQVJfQ09ERSIsIlNQQUNFQkFSX0NIQVIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiaGFzU3BhY2VLZXlwcmVzcyIsImlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJjdXJyZW50Q29tcG9zaXRpb24iLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsImZhbGxiYWNrRGF0YSIsImdldENvbXBvc2l0aW9uRXZlbnRUeXBlIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQiLCJnZXREYXRhIiwiY3VzdG9tRGF0YSIsImV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50IiwiY2hhcnMiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwiaXNLZXlwcmVzc0NvbW1hbmQiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJnZXRUZXh0Q29udGVudEFjY2Vzc29yIiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsInNsaWNlVGFpbCIsImlzVGV4dElucHV0RWxlbWVudCIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImFjdGl2ZUVsZW1lbnRJbnN0IiwiZG9lc0NoYW5nZUV2ZW50QnViYmxlIiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsInJ1bkV2ZW50SW5CYXRjaCIsInN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwidXBkYXRlZCIsIl9hbGxvd1NpbXVsYXRlZFBhc3NUaHJvdWdoIiwiZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50IiwiaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTgiLCJzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsIiwic3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJnZXRUYXJnZXRJbnN0RnVuYyIsImhhbmRsZUV2ZW50RnVuYyIsInRhcmdldE5vZGUiLCJzaG91bGRVc2VDaGFuZ2VFdmVudCIsInNob3VsZFVzZUNsaWNrRXZlbnQiLCJjb250cm9sbGVkIiwiaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1ciIsIlJlYWN0T3duZXIiLCJhZGRDb21wb25lbnRBc1JlZlRvIiwiYXR0YWNoUmVmIiwicHJldlJlZiIsInByZXZPd25lciIsIm5leHRSZWYiLCJuZXh0T3duZXIiLCJyZW1vdmVDb21wb25lbnRBc1JlZkZyb20iLCJkZXRhY2hSZWYiLCJpc1ZhbGlkT3duZXIiLCJvd25lclB1YmxpY0luc3RhbmNlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJ3aW4iLCJ0b05vZGUiLCJhY2NlcHQiLCJhY2NlcHRDaGFyc2V0IiwiYWNjZXNzS2V5IiwiYWN0aW9uIiwiYWxsb3dGdWxsU2NyZWVuIiwiYWxsb3dUcmFuc3BhcmVuY3kiLCJhbHQiLCJhcyIsImFzeW5jIiwiYXV0b0NvbXBsZXRlIiwiYXV0b1BsYXkiLCJjZWxsUGFkZGluZyIsImNlbGxTcGFjaW5nIiwiY2hhclNldCIsImNoYWxsZW5nZSIsImNsYXNzSUQiLCJjb2xzIiwiY29sU3BhbiIsImNvbnRleHRNZW51IiwiY29udHJvbHMiLCJjb29yZHMiLCJjcm9zc09yaWdpbiIsImRlZmVyIiwiZG93bmxvYWQiLCJkcmFnZ2FibGUiLCJlbmNUeXBlIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImZyYW1lQm9yZGVyIiwiaHJlZkxhbmciLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwiaWNvbiIsImlucHV0TW9kZSIsImludGVncml0eSIsImtleVBhcmFtcyIsImtleVR5cGUiLCJraW5kIiwibGFuZyIsImxvb3AiLCJtYW5pZmVzdCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpbldpZHRoIiwibWF4TGVuZ3RoIiwibWVkaWEiLCJtZWRpYUdyb3VwIiwibWluTGVuZ3RoIiwibXV0ZWQiLCJub25jZSIsIm5vVmFsaWRhdGUiLCJvcHRpbXVtIiwicGxhY2Vob2xkZXIiLCJwbGF5c0lubGluZSIsInBvc3RlciIsInByZWxvYWQiLCJwcm9maWxlIiwicmFkaW9Hcm91cCIsInJlZmVycmVyUG9saWN5IiwicmVsIiwicmV2ZXJzZWQiLCJyb2xlIiwicm93U3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemVzIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY0xhbmciLCJzcmNTZXQiLCJ0YWJJbmRleCIsInVzZU1hcCIsIndtb2RlIiwiYWJvdXQiLCJkYXRhdHlwZSIsImlubGlzdCIsInJlc291cmNlIiwidHlwZW9mIiwidm9jYWIiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db3JyZWN0IiwiYXV0b1NhdmUiLCJpdGVtUHJvcCIsIml0ZW1TY29wZSIsIml0ZW1UeXBlIiwiaXRlbUlEIiwiaXRlbVJlZiIsInNlY3VyaXR5IiwidW5zZWxlY3RhYmxlIiwidmFsaWRpdHkiLCJiYWRJbnB1dCIsImRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsIm9sZENoaWxkIiwibmV3Q2hpbGQiLCJjcmVhdGVBcnJheUZyb21NaXhlZCIsImdldE1hcmt1cFdyYXAiLCJkdW1teU5vZGUiLCJub2RlTmFtZVBhdHRlcm4iLCJoYW5kbGVTY3JpcHQiLCJub2RlTmFtZU1hdGNoIiwiZ2V0Tm9kZU5hbWUiLCJ3cmFwRGVwdGgiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGlsZE5vZGVzIiwiaGFzQXJyYXlOYXR1cmUiLCJzaG91bGRXcmFwIiwic2VsZWN0V3JhcCIsInRhYmxlV3JhcCIsInRyV3JhcCIsInN2Z1dyYXAiLCJtYXJrdXBXcmFwIiwiKiIsIlJlYWN0RE9NSURPcGVyYXRpb25zIiwiQXV0b0ZvY3VzVXRpbHMiLCJDU1NQcm9wZXJ0eU9wZXJhdGlvbnMiLCJSZWFjdERPTUlucHV0IiwiUmVhY3RET01PcHRpb24iLCJSZWFjdERPTVRleHRhcmVhIiwiUmVhY3RNdWx0aUNoaWxkIiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsImdldE5vZGUiLCJDT05URU5UX1RZUEVTIiwiSFRNTCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwiRE9DX0ZSQUdNRU5UX1RZUEUiLCJhc3NlcnRWYWxpZFByb3BzIiwidm9pZEVsZW1lbnRUYWdzIiwiX3RhZyIsImVucXVldWVQdXRMaXN0ZW5lciIsImNvbnRhaW5lckluZm8iLCJfb3duZXJEb2N1bWVudCIsImlucHV0UG9zdE1vdW50IiwicG9zdE1vdW50V3JhcHBlciIsInRleHRhcmVhUG9zdE1vdW50Iiwib3B0aW9uUG9zdE1vdW50IiwibWVkaWFFdmVudHMiLCJ0cmFja0lucHV0VmFsdWUiLCJ0cmFwQnViYmxlZEV2ZW50c0xvY2FsIiwicG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIiLCJvbWl0dGVkQ2xvc2VUYWdzIiwibmV3bGluZUVhdGluZ1RhZ3MiLCJsaXN0aW5nIiwiVkFMSURfVEFHX1JFR0VYIiwidmFsaWRhdGVkVGFnQ2FjaGUiLCJpc0N1c3RvbUNvbXBvbmVudCIsImdsb2JhbElkQ291bnRlciIsInZhbGlkYXRlRGFuZ2Vyb3VzVGFnIiwiX25hbWVzcGFjZVVSSSIsIl9wcmV2aW91c1N0eWxlIiwiX3ByZXZpb3VzU3R5bGVDb3B5IiwiTWl4aW4iLCJfaWRDb3VudGVyIiwicGFyZW50VGFnIiwibW91bnRJbWFnZSIsImVsIiwiX3VwZGF0ZURPTVByb3BlcnRpZXMiLCJsYXp5VHJlZSIsIl9jcmVhdGVJbml0aWFsQ2hpbGRyZW4iLCJ0YWdPcGVuIiwiX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnMiLCJ0YWdDb250ZW50IiwiX2NyZWF0ZUNvbnRlbnRNYXJrdXAiLCJhdXRvRm9jdXMiLCJmb2N1c0RPTUNvbXBvbmVudCIsInByb3BLZXkiLCJjcmVhdGVNYXJrdXBGb3JTdHlsZXMiLCJyZW5kZXJUb1N0YXRpY01hcmt1cCIsIl9faHRtbCIsImNvbnRlbnRUb1VzZSIsImNoaWxkcmVuVG9Vc2UiLCJtb3VudENoaWxkcmVuIiwibW91bnRJbWFnZXMiLCJsYXN0UHJvcHMiLCJuZXh0UHJvcHMiLCJfdXBkYXRlRE9NQ2hpbGRyZW4iLCJ1cGRhdGVXcmFwcGVyIiwic3R5bGVOYW1lIiwic3R5bGVVcGRhdGVzIiwibGFzdFN0eWxlIiwibmV4dFByb3AiLCJsYXN0UHJvcCIsInNldFZhbHVlRm9yU3R5bGVzIiwibGFzdENvbnRlbnQiLCJuZXh0Q29udGVudCIsImxhc3RIdG1sIiwibmV4dEh0bWwiLCJsYXN0Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCJsYXN0SGFzQ29udGVudE9ySHRtbCIsIm5leHRIYXNDb250ZW50T3JIdG1sIiwidXBkYXRlQ2hpbGRyZW4iLCJ1cGRhdGVUZXh0Q29udGVudCIsInVwZGF0ZU1hcmt1cCIsInVubW91bnRDaGlsZHJlbiIsImRhbmdlcm91c1N0eWxlVmFsdWUiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJtZW1vaXplU3RyaW5nT25seSIsInByb2Nlc3NTdHlsZU5hbWUiLCJoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyIsInN0eWxlRmxvYXRBY2Nlc3NvciIsInRlbXBTdHlsZSIsImNzc0Zsb2F0Iiwic3R5bGVzIiwic2VyaWFsaXplZCIsImlzQ3VzdG9tUHJvcGVydHkiLCJleHBhbnNpb24iLCJpbmRpdmlkdWFsU3R5bGVOYW1lIiwiY2FtZWxpemUiLCJtc1BhdHRlcm4iLCJfaHlwaGVuUGF0dGVybiIsImlzTm9uTnVtZXJpYyIsImh5cGhlbmF0ZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwicnVuRXZlbnRRdWV1ZUluQmF0Y2giLCJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJhbmltYXRpb24iLCJwcmVmaXhNYXAiLCJmb3JjZVVwZGF0ZUlmTW91bnRlZCIsImRlZmF1bHRDaGVja2VkIiwiaW5pdGlhbENoZWNrZWQiLCJyb290Tm9kZSIsInF1ZXJ5Um9vdCIsIm90aGVyTm9kZSIsIm90aGVySW5zdGFuY2UiLCJpc0NvbnRyb2xsZWQiLCJ2YWx1ZUFzTnVtYmVyIiwicGFyc2VGbG9hdCIsImRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4iLCJmbGF0dGVuQ2hpbGRyZW4iLCJzZWxlY3RWYWx1ZSIsInNlbGVjdFBhcmVudCIsImhvc3RQcm9wcyIsIm5ld1ZhbHVlIiwiUmVhY3RDaGlsZFJlY29uY2lsZXIiLCJwcm9jZXNzUXVldWUiLCJ1cGRhdGVRdWV1ZSIsIl9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbiIsIm5lc3RlZENoaWxkcmVuIiwiaW5zdGFudGlhdGVDaGlsZHJlbiIsIl9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW4iLCJwcmV2Q2hpbGRyZW4iLCJuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyIsInJlbW92ZWROb2RlcyIsImZyb21JbmRleCIsInRvSW5kZXgiLCJtYWtlVGV4dENvbnRlbnQiLCJuZXh0TWFya3VwIiwibWFrZVNldE1hcmt1cCIsIl91cGRhdGVDaGlsZHJlbiIsIm5leHRJbmRleCIsIm5leHRNb3VudEluZGV4IiwibGFzdFBsYWNlZE5vZGUiLCJwcmV2Q2hpbGQiLCJfbW91bnRDaGlsZEF0SW5kZXgiLCJfdW5tb3VudENoaWxkIiwicmVuZGVyZWRDaGlsZHJlbiIsIm1ha2VNb3ZlIiwiY3JlYXRlQ2hpbGQiLCJtYWtlSW5zZXJ0TWFya3VwIiwibWFrZVJlbW92ZSIsImluc3RhbnRpYXRlQ2hpbGQiLCJjaGlsZEluc3RhbmNlcyIsInNlbGZEZWJ1Z0lEIiwia2V5VW5pcXVlIiwibmVzdGVkQ2hpbGROb2RlcyIsIm5leHRDaGlsZEluc3RhbmNlIiwibmV4dENoaWxkTW91bnRJbWFnZSIsInJlbmRlcmVkQ2hpbGQiLCJzaGFsbG93RXF1YWwiLCJDb21wb3NpdGVUeXBlcyIsIlN0YXRlbGVzc0NvbXBvbmVudCIsIndhcm5JZkludmFsaWRFbGVtZW50IiwibmV4dE1vdW50SUQiLCJfY29tcG9zaXRlVHlwZSIsIl9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCIsInJlbmRlcmVkRWxlbWVudCIsInB1YmxpY1Byb3BzIiwicHVibGljQ29udGV4dCIsIl9wcm9jZXNzQ29udGV4dCIsImdldFVwZGF0ZVF1ZXVlIiwiZG9Db25zdHJ1Y3QiLCJzaG91bGRDb25zdHJ1Y3QiLCJfY29uc3RydWN0Q29tcG9uZW50IiwiaXNQdXJlQ29tcG9uZW50IiwidW5zdGFibGVfaGFuZGxlRXJyb3IiLCJwZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmciLCJwZXJmb3JtSW5pdGlhbE1vdW50IiwiX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lciIsIl9wcm9jZXNzUGVuZGluZ1N0YXRlIiwiX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCIsIl9tYXNrQ29udGV4dCIsIm1hc2tlZENvbnRleHQiLCJjb250ZXh0TmFtZSIsImN1cnJlbnRDb250ZXh0IiwiY2hpbGRDb250ZXh0IiwiX2NoZWNrQ29udGV4dFR5cGVzIiwicHJldkNvbnRleHQiLCJwcmV2UGFyZW50RWxlbWVudCIsIm5leHRQYXJlbnRFbGVtZW50IiwicHJldlVubWFza2VkQ29udGV4dCIsIm5leHRVbm1hc2tlZENvbnRleHQiLCJ3aWxsUmVjZWl2ZSIsInByZXZQcm9wcyIsIm5leHRTdGF0ZSIsInNob3VsZFVwZGF0ZSIsIl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlIiwicGFydGlhbCIsInVubWFza2VkQ29udGV4dCIsInByZXZTdGF0ZSIsImhhc0NvbXBvbmVudERpZFVwZGF0ZSIsIl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCIsInByZXZDb21wb25lbnRJbnN0YW5jZSIsInByZXZSZW5kZXJlZEVsZW1lbnQiLCJuZXh0UmVuZGVyZWRFbGVtZW50Iiwib2xkSG9zdE5vZGUiLCJfcmVwbGFjZU5vZGVXaXRoTWFya3VwIiwicHJldkluc3RhbmNlIiwiX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCIsInB1YmxpY0NvbXBvbmVudEluc3RhbmNlIiwibmV4dERlYnVnSUQiLCJmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCIsIlJlYWN0U2VydmVyVXBkYXRlUXVldWUiLCJub29wQ2FsbGJhY2tRdWV1ZSIsImRvbUlEIiwiY3JlYXRlQ29tbWVudCIsImluc3RBIiwiaW5zdEIiLCJkZXB0aEEiLCJ0ZW1wQSIsImRlcHRoQiIsInRlbXBCIiwiY29tbW9uIiwicGF0aEZyb20iLCJwYXRoVG8iLCJfc3RyaW5nVGV4dCIsIl9jbG9zaW5nQ29tbWVudCIsIl9jb21tZW50Tm9kZXMiLCJvcGVuaW5nVmFsdWUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZXNjYXBlZFRleHQiLCJuZXh0VGV4dCIsIm5leHRTdHJpbmdUZXh0IiwiY29tbWVudE5vZGVzIiwiaG9zdE5vZGUiLCJSRVNFVF9CQVRDSEVEX1VQREFURVMiLCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24iLCJhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzIiwiZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24iLCJmaW5kUGFyZW50IiwiVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nIiwiaGFuZGxlVG9wTGV2ZWxJbXBsIiwiX2hhbmRsZVRvcExldmVsIiwiX2VuYWJsZWQiLCJzY3JvbGxhYmxlIiwiV2luZG93IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJjdXJyZW50bHlFbmFibGVkIiwicHJldmlvdXNseUVuYWJsZWQiLCJyZWFjdE1vdW50UmVhZHkiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwiaXNDb2xsYXBzZWQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJ1c2VJRU9mZnNldHMiLCJzZWxlY3RlZFJhbmdlIiwic2VsZWN0ZWRMZW5ndGgiLCJmcm9tU3RhcnQiLCJkdXBsaWNhdGUiLCJtb3ZlVG9FbGVtZW50VGV4dCIsInNldEVuZFBvaW50Iiwic3RhcnRPZmZzZXQiLCJyYW5nZUNvdW50IiwiY3VycmVudFJhbmdlIiwiZ2V0UmFuZ2VBdCIsInN0YXJ0Q29udGFpbmVyIiwiZW5kQ29udGFpbmVyIiwicmFuZ2VMZW5ndGgiLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2V0RW5kIiwiZW5kT2Zmc2V0IiwiZGV0ZWN0aW9uUmFuZ2UiLCJzZXRTdGFydCIsImlzQmFja3dhcmQiLCJjb2xsYXBzZWQiLCJzdGFydE1hcmtlciIsImVuZE1hcmtlciIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiZ2V0TGVhZk5vZGUiLCJnZXRTaWJsaW5nTm9kZSIsIm5vZGVTdGFydCIsIm5vZGVFbmQiLCJpc1RleHROb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiTlMiLCJBVFRSUyIsImFjY2VudEhlaWdodCIsImFkZGl0aXZlIiwiYWxpZ25tZW50QmFzZWxpbmUiLCJhbGxvd1Jlb3JkZXIiLCJhbHBoYWJldGljIiwiYXJhYmljRm9ybSIsImFzY2VudCIsImF0dHJpYnV0ZVR5cGUiLCJhdXRvUmV2ZXJzZSIsImF6aW11dGgiLCJiYXNlRnJlcXVlbmN5IiwiYmFzZVByb2ZpbGUiLCJiYXNlbGluZVNoaWZ0IiwiYmJveCIsImJlZ2luIiwiY2FsY01vZGUiLCJjYXBIZWlnaHQiLCJjbGlwUnVsZSIsImNsaXBQYXRoVW5pdHMiLCJjb2xvckludGVycG9sYXRpb24iLCJjb2xvckludGVycG9sYXRpb25GaWx0ZXJzIiwiY29sb3JQcm9maWxlIiwiY29sb3JSZW5kZXJpbmciLCJjb250ZW50U2NyaXB0VHlwZSIsImNvbnRlbnRTdHlsZVR5cGUiLCJkZWNlbGVyYXRlIiwiZGVzY2VudCIsImRpZmZ1c2VDb25zdGFudCIsImRpdmlzb3IiLCJkb21pbmFudEJhc2VsaW5lIiwiZHVyIiwiZWRnZU1vZGUiLCJlbGV2YXRpb24iLCJlbmFibGVCYWNrZ3JvdW5kIiwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCIsImZpbGxSdWxlIiwiZmlsdGVyUmVzIiwiZmlsdGVyVW5pdHMiLCJmbG9vZENvbG9yIiwiZm9jdXNhYmxlIiwiZm9udFNpemVBZGp1c3QiLCJmb250U3RyZXRjaCIsImcxIiwiZzIiLCJnbHlwaE5hbWUiLCJnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCIsImdseXBoT3JpZW50YXRpb25WZXJ0aWNhbCIsImdseXBoUmVmIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJncmFkaWVudFVuaXRzIiwiaGFuZ2luZyIsImhvcml6QWR2WCIsImhvcml6T3JpZ2luWCIsImlkZW9ncmFwaGljIiwiaW1hZ2VSZW5kZXJpbmciLCJpbiIsImluMiIsImludGVyY2VwdCIsImsyIiwiazMiLCJrNCIsImtlcm5lbE1hdHJpeCIsImtlcm5lbFVuaXRMZW5ndGgiLCJrZXJuaW5nIiwia2V5UG9pbnRzIiwia2V5U3BsaW5lcyIsImtleVRpbWVzIiwibGVuZ3RoQWRqdXN0IiwibGV0dGVyU3BhY2luZyIsImxpZ2h0aW5nQ29sb3IiLCJsaW1pdGluZ0NvbmVBbmdsZSIsIm1hcmtlckVuZCIsIm1hcmtlck1pZCIsIm1hcmtlclN0YXJ0IiwibWFya2VySGVpZ2h0IiwibWFya2VyVW5pdHMiLCJtYXJrZXJXaWR0aCIsIm1hc2tDb250ZW50VW5pdHMiLCJtYXNrVW5pdHMiLCJtYXRoZW1hdGljYWwiLCJudW1PY3RhdmVzIiwib3BlcmF0b3IiLCJvcmllbnRhdGlvbiIsIm9yaWdpbiIsIm92ZXJmbG93Iiwib3ZlcmxpbmVQb3NpdGlvbiIsIm92ZXJsaW5lVGhpY2tuZXNzIiwicGFpbnRPcmRlciIsInBhbm9zZTEiLCJwYXRoTGVuZ3RoIiwicGF0dGVybkNvbnRlbnRVbml0cyIsInBhdHRlcm5UcmFuc2Zvcm0iLCJwYXR0ZXJuVW5pdHMiLCJwb2ludGVyRXZlbnRzIiwicG9pbnRzQXRYIiwicG9pbnRzQXRZIiwicG9pbnRzQXRaIiwicHJlc2VydmVBbHBoYSIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJwcmltaXRpdmVVbml0cyIsInJlZlgiLCJyZWZZIiwicmVuZGVyaW5nSW50ZW50IiwicmVwZWF0Q291bnQiLCJyZXBlYXREdXIiLCJyZXF1aXJlZEV4dGVuc2lvbnMiLCJyZXF1aXJlZEZlYXR1cmVzIiwic2VlZCIsInNoYXBlUmVuZGVyaW5nIiwic2xvcGUiLCJzcGVjdWxhckNvbnN0YW50Iiwic3BlY3VsYXJFeHBvbmVudCIsInNwZWVkIiwic3ByZWFkTWV0aG9kIiwic3RkRGV2aWF0aW9uIiwic3RlbWgiLCJzdGVtdiIsInN0aXRjaFRpbGVzIiwic3RvcENvbG9yIiwic3RyaWtldGhyb3VnaFBvc2l0aW9uIiwic3RyaWtldGhyb3VnaFRoaWNrbmVzcyIsInN0cm9rZSIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInN1cmZhY2VTY2FsZSIsInN5c3RlbUxhbmd1YWdlIiwidGFibGVWYWx1ZXMiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsInRleHRBbmNob3IiLCJ0ZXh0RGVjb3JhdGlvbiIsInRleHRSZW5kZXJpbmciLCJ0ZXh0TGVuZ3RoIiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJ1bmljb2RlIiwidW5pY29kZUJpZGkiLCJ1bmljb2RlUmFuZ2UiLCJ1bml0c1BlckVtIiwidkFscGhhYmV0aWMiLCJ2SGFuZ2luZyIsInZJZGVvZ3JhcGhpYyIsInZNYXRoZW1hdGljYWwiLCJ2ZWN0b3JFZmZlY3QiLCJ2ZXJ0QWR2WSIsInZlcnRPcmlnaW5YIiwidmVydE9yaWdpblkiLCJ2aWV3Qm94Iiwidmlld1RhcmdldCIsInZpc2liaWxpdHkiLCJ3aWR0aHMiLCJ3b3JkU3BhY2luZyIsIndyaXRpbmdNb2RlIiwieEhlaWdodCIsInhDaGFubmVsU2VsZWN0b3IiLCJ4bGlua0FjdHVhdGUiLCJ4bGlua0FyY3JvbGUiLCJ4bGlua0hyZWYiLCJ4bGlua1JvbGUiLCJ4bGlua1Nob3ciLCJ4bGlua1RpdGxlIiwieGxpbmtUeXBlIiwieG1sQmFzZSIsInhtbG5zWGxpbmsiLCJ4bWxMYW5nIiwieG1sU3BhY2UiLCJ5Q2hhbm5lbFNlbGVjdG9yIiwiem9vbUFuZFBhbiIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJoYXNMaXN0ZW5lciIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwiY3VycmVudFNlbGVjdGlvbiIsImJvdW5kaW5nVG9wIiwiYm91bmRpbmdMZWZ0Iiwic3ludGhldGljRXZlbnQiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiU3ludGhldGljRm9jdXNFdmVudCIsIlN5bnRoZXRpY0tleWJvYXJkRXZlbnQiLCJTeW50aGV0aWNEcmFnRXZlbnQiLCJTeW50aGV0aWNUb3VjaEV2ZW50IiwiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50IiwiU3ludGhldGljV2hlZWxFdmVudCIsImdldEV2ZW50Q2hhckNvZGUiLCJ0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWciLCJjYXBpdGFsaXplZEV2ZW50Iiwib25FdmVudCIsInRvcEV2ZW50Iiwib25DbGlja0xpc3RlbmVycyIsIkV2ZW50Q29uc3RydWN0b3IiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UiLCJjbGlwYm9hcmREYXRhIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsInJlcGVhdCIsIm5vcm1hbGl6ZUtleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjE0NCIsIjE0NSIsIjIyNCIsImRhdGFUcmFuc2ZlciIsIlRvdWNoRXZlbnRJbnRlcmZhY2UiLCJ0YXJnZXRUb3VjaGVzIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJ3aGVlbERlbHRhWSIsImRlbHRhWiIsInRvcExldmVsV3JhcHBlciIsInVzZUZpYmVyIiwiYWRsZXIzMiIsIlRBR19FTkQiLCJDT01NRU5UX1NUQVJUIiwiYWRkQ2hlY2tzdW1Ub01hcmt1cCIsImV4aXN0aW5nQ2hlY2tzdW0iLCJNT0QiLCJjb21wb25lbnRPckVsZW1lbnQiLCJfYWxnb3JpdGhtcyIsIl9hbGxvY2F0b3IiLCJfZm9yY2VEaXJlY3RlZCIsIl9ncmFwaCIsIl9lZGdlQnVuZGxpbmciLCJfbW9kdWxlIiwicmVjdEdyb3VwcyIsImFsZ29yaXRobXMiLCJBbGdvcml0aG1zIiwiX3JlZjMiLCJzdW1WYWx1ZXMiLCJub3JtYWxpemVkVmFsdWVzIiwic3F1YXJpZmllZFRyZWVtYXAiLCJncm91cExheW91dCIsIl9yZWY0IiwidGlsZXMiLCJjaXJjbGVHcm91cHMiLCJncm91cFR5cGUiLCJjYWxjTGF5b3V0IiwiZ3JvdXBDb3VudCIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJjb3VudEdyb3VwcyIsImdyb3Vwc1BvaW50ZXIiLCJsYXlvdXREYXRhIiwiRUdyYXBoIiwiYWRkVmVydGV4IiwiZW5kTm9kZSIsImFkZEVkZ2UiLCJncm91cE5vZGVzIiwiX3JlZjUiLCJFZGdlQ29uY2VudHJhdGlvblRyYW5zZm9ybWVyIiwiX3F1YXNpQmljbGlxdWVNaW5pbmcyIiwiaWRHZW5lcmF0b3IiLCJfbG9vcCIsInN1YkdyYXBoIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYiLCJfZGlkSXRlcmF0b3JFcnJvcjYiLCJfaXRlcmF0b3JFcnJvcjYiLCJfc3RlcDYiLCJfaXRlcmF0b3I2Iiwic291cmNlR3JvdXAiLCJ0YXJnZXRHcm91cCIsImR1bW15IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjciLCJfZGlkSXRlcmF0b3JFcnJvcjciLCJfaXRlcmF0b3JFcnJvcjciLCJfc3RlcDciLCJfaXRlcmF0b3I3IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjgiLCJfZGlkSXRlcmF0b3JFcnJvcjgiLCJfaXRlcmF0b3JFcnJvcjgiLCJfc3RlcDgiLCJfaXRlcmF0b3I4IiwiYXZlcmFnZSIsInRyYW5zZm9ybWVkR3JhcGgiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSIsIl9kaWRJdGVyYXRvckVycm9yOSIsIl9pdGVyYXRvckVycm9yOSIsIl9zdGVwOSIsIl9pdGVyYXRvcjkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAiLCJfZGlkSXRlcmF0b3JFcnJvcjEwIiwiX2l0ZXJhdG9yRXJyb3IxMCIsIl9zdGVwMTAiLCJfaXRlcmF0b3IxMCIsIl9yZWY2IiwiX3JlZjciLCJ1Tm9kZSIsInZOb2RlIiwiX3JlZjgiLCJfcmVmOSIsImFwcGx5RWRnZUNvbmNlbnRyYXRpb24iLCJHcmFwaCIsInZlcnRleElkIiwibm9kZUlkcyIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSIsIl9kaWRJdGVyYXRvckVycm9yMTEiLCJfaXRlcmF0b3JFcnJvcjExIiwiX3N0ZXAxMSIsIl9pdGVyYXRvcjExIiwiYWRkTm9kZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMiIsIl9kaWRJdGVyYXRvckVycm9yMTIiLCJfaXRlcmF0b3JFcnJvcjEyIiwiX3N0ZXAxMiIsIl9pdGVyYXRvcjEyIiwiX3JlZjEwIiwibWFrZUdyYXBoIiwiZ3JvdXBNYXAiLCJfcmVmMTEiLCJub2RlR3JvdXBzUG9pbnRlciIsIm5vZGVDb3VudCIsIkhFQVBVMzIiLCJTaW11bGF0aW9uIiwiZjEiLCJhZGRHcm91cE1hbnlCb2R5Rm9yY2UiLCJmMiIsImFkZEdyb3VwTGlua0ZvcmNlIiwiZjMiLCJhZGRHcm91cENlbnRlckZvcmNlIiwic2V0U3RyZW5ndGgiLCJlZGdlQnVuZGxpbmciLCJFZGdlQnVuZGxpbmciLCJnZXRYIiwiZ2V0WSIsImJlbmRzIiwiX3JlZjEyIiwibG9hZE1vZHVsZSIsIl9yZWYxMyIsImNvbm5lY3RlZENvbXBvbmVudHMiLCJfYWxsb2NhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJjb21wb25lbnRzIiwic2ltdWxhdGlvbk5ldyIsInNpbXVsYXRpb25BZGRDZW50ZXJGb3JjZSIsInNpbXVsYXRpb25BZGRHcm91cENlbnRlckZvcmNlIiwic2ltdWxhdGlvbkFkZEdyb3VwTGlua0ZvcmNlIiwic2ltdWxhdGlvbkFkZEdyb3VwTWFueUJvZHlGb3JjZSIsInNpbXVsYXRpb25BZGRMaW5rRm9yY2UiLCJzaW11bGF0aW9uQWRkTWFueUJvZHlGb3JjZSIsInNpbXVsYXRpb25TdGFydCIsInNpbXVsYXRpb25HZXRTdHJlbmd0aCIsInNpbXVsYXRpb25TZXRTdHJlbmd0aCIsIm51bUdyb3VwcyIsIm5vZGVHcm91cHMiLCJudW1Ob2RlcyIsImdyYXBoTmV3IiwiZ3JhcGhBZGROb2RlIiwiZ3JhcGhBZGRFZGdlIiwiZ3JhcGhOb2RlQ291bnQiLCJncmFwaEVkZ2VDb3VudCIsImdyYXBoR2V0WCIsImdyYXBoR2V0WSIsImVkZ2VCdW5kbGluZ05ldyIsImVkZ2VCdW5kbGluZ0NhbGwiLCJlZGdlQnVuZGxpbmdHZXRDeWNsZXMiLCJlZGdlQnVuZGxpbmdHZXRTMCIsImVkZ2VCdW5kbGluZ0dldEkwIiwiZWRnZUJ1bmRsaW5nR2V0U1N0ZXAiLCJlZGdlQnVuZGxpbmdHZXRJU3RlcCIsImVkZ2VCdW5kbGluZ1NldEN5Y2xlcyIsImVkZ2VCdW5kbGluZ1NldFMwIiwiZWRnZUJ1bmRsaW5nU2V0STAiLCJlZGdlQnVuZGxpbmdTZXRTU3RlcCIsImVkZ2VCdW5kbGluZ1NldElTdGVwIiwibGluZXNBdCIsImxpbmVQb2ludHMiLCJsaW5lUG9pbnRzQXQiLCJsaW5lUG9pbnRzTGVuZ3RoIiwicG9pbnRYIiwicG9pbnRZIiwibGluZXNQb2ludGVyIiwiZWRnZUNvdW50IiwibGluZVBvaW50ZXIiLCJwb2ludFBvaW50ZXIiLCJtb2QiLCJlZ3JhcGgiLCJ3YXNtQmluYXJ5IiwiX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwiaXNCdWZmZXIiLCJpc25hbiIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJhcnJheUluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsImZyb21CeXRlQXJyYXkiLCJ1dGY4U2xpY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwidHlwZWRBcnJheVN1cHBvcnQiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJfYXJyIiwidG9IZXgiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImV2YWwiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwidHJpcGxldFRvQmFzZTY0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJBYnN0cmFjdEdyYXBoIiwiV2Vha01hcCIsImNoZWNrVmVydGV4IiwiTXV0YWJsZUdyYXBoIiwibnVtVmVydGljZXMiLCJudW1FZGdlcyIsImluVmVydGljZXMiLCJyZW1vdmVFZGdlIiwidW5zZXRDaGlsZCIsImFjY2Vzc29yIiwibGF5ZXJBc3NpZ25tZW50IiwiZ3JvdXBMYXllcnMiLCJyZWN0YW5ndWxhciIsImVkZ2VDb25jZW50cmF0aW9uIiwic3ViZ3JhcGgiLCJjb25jZW50cmF0aW9uIiwiUXVhZEhldXJpc3RpYyIsImxheWVyTWFwIiwibWF4TGF5ZXIiLCJvdXREZWdyZWUiLCJ3ZWlnaHRzIiwiY21wIiwibGVmdE1heCIsInJpZ2h0TWluIiwicXVhZEhldXJpc3RpYyIsImFsbG93RW1wdHlMYXllciIsInVzIiwibGF5ZXJWZXJ0aWNlcyIsImlzQWN0aXZlIiwiY29uY2VudHJhdGlvbnMiLCJqT2Zmc2V0IiwibWF4RCIsIm1heEgxIiwibWF4SDIiLCJ0bXBIMiIsInRtcEgxIiwidG1wRCIsImhhc2hLZXkiLCJ0bXBTIiwidG1wVCIsIl9DJGdldCIsImJpY2xpcXVlcyIsInJlbW92ZWQiLCJzb3VyY2VTZXQiLCJ0YXJnZXRTZXQiLCJtYXhpbWFsQmljbGlxdWVzIiwibGF5b3V0UmVjdCIsIml0ZW1zIiwibGF5b3V0V2lkdGgiLCJsYXlvdXRIZWlnaHQiLCJjZW50ZXJUcmFuc2Zvcm0iLCJsV2lkdGgiLCJsSGVpZ2h0IiwiY1dpZHRoIiwiY0hlaWdodCIsIm1hcmdpbiIsImFXaWR0aCIsImFIZWlnaHQiLCJoU2NhbGUiLCJ2U2NhbGUiLCJpbnRlcnBvbGF0ZUdyb3VwIiwiaW50ZXJwb2xhdGVWZXJ0ZXgiLCJjb3B5UHJvcGVydGllcyIsImludGVycG9sYXRlUHJvcGVydGllcyIsImNvbG9ySW50ZXJwb2xhdGVQcm9wZXJ0aWVzIiwiaW50ZXJwb2xhdGVFZGdlIiwiZGlmZiIsImdyb3VwSWRzIiwidmVydGV4SWRzIiwiZWRnZUlkcyIsIm5leHRFZGdlIiwiY3VycmVudEVkZ2UiLCJ3aXRoQ29udGV4dCIsImN0eCIsInNhdmUiLCJyZXN0b3JlIiwic2V0TGFiZWxTdHlsZXMiLCJsYWJlbEZpbGxDb2xvciIsImxhYmVsU3Ryb2tlQ29sb3IiLCJsYWJlbFN0cm9rZVdpZHRoIiwibGFiZWxGb250U2l6ZSIsImxhYmVsRm9udEZhbWlseSIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwicmVuZGVyR3JvdXBMYWJlbCIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInN0cm9rZVRleHQiLCJmaWxsVGV4dCIsInJlbmRlclZlcnRleCIsInNldFZlcnRleFN0eWxlcyIsImJlZ2luUGF0aCIsInJlbmRlckNpcmNsZVZlcnRleCIsInJlbmRlclJlY3RWZXJ0ZXgiLCJhZGRIaXRSZWdpb24iLCJyZW5kZXJWZXJ0ZXhMYWJlbCIsInJlbmRlckVkZ2VSZWdpb24iLCJyZW5kZXJFZGdlIiwic291cmNlTWFya2VyU2hhcGUiLCJzb3VyY2VNYXJrZXJTaXplIiwidGFyZ2V0TWFya2VyU2hhcGUiLCJ0YXJnZXRNYXJrZXJTaXplIiwic2V0RWRnZVN0eWxlcyIsInJlbmRlckFyY0VkZ2UiLCJyZW5kZXJRdWFkcmF0aWNDdXJ2ZUVkZ2UiLCJyZW5kZXJMaW5lRWRnZSIsInJlbmRlckVkZ2VMYWJlbCIsInJlbmRlckdyb3VwIiwiYmFzZUNpcmNsZVRvUmVjdE1hcmtlclBvc2l0aW9uIiwiYmFzZVRyaWFuZ2xlVG9SZWN0TWFya2VyUG9zaXRpb24iLCJiYXNlQ2lyY2xlVG9DaXJjbGVNYXJrZXJQb3NpdGlvbiIsImJhc2VUcmlhbmdsZVRvQ2lyY2xlTWFya2VyUG9zaXRpb24iLCJtYXJrZXJQb3NpdGlvbiIsImJhc2VGdW5jdGlvbiIsIm1hcmtlclNoYXBlIiwibGlua1R5cGUiLCJhZGp1c3RFZGdlIiwic291cmNlQmFzZUZ1bmN0aW9uIiwidGFyZ2V0QmFzZUZ1bmN0aW9uIiwiem9vbV96b29tIiwiYXR0cnMiLCJyZWdpb24iLCJyZXN0b3JlVHJhbnNmb3JtIiwiZDNfem9vbV9zcmMiLCJjYW5ab29tIiwiY2FuRHJhZ05vZGUiLCJkaXNwYXRjaE5vZGVNb3ZlU3RhcnRFdmVudCIsIm91dEVkZ2VzIiwiaW5FZGdlcyIsImRpc3BhdGNoTm9kZU1vdmVFdmVudCIsImRpc3BhdGNoTm9kZU1vdmVFbmRFdmVudCIsImRldmljZVBpeGVsUmF0aW8iLCJzZXRXaWR0aCIsInNldEhlaWdodCIsInJlbmRlck9iamVjdHMiLCJnbG9iYWxBbHBoYSIsImN1c3RvbUVsZW1lbnRzIiwiSFRNTEVsZW1lbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJzdXBlciIsImludmFsaWRhdGVQb3NpdGlvbnMiLCJvcmlnaW5hbERhdGEiLCJjdXJyZW50UmVnaW9uIiwibGF5b3V0VGltZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJlbmFibGVMaW5rRXZlbnRzIiwib2xkVmFsdWUiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInByZXNlcnZlUG9zaXRpb25zIiwicHJldkRhdGEiLCJncmFwaEdyb3Vwc1Byb3BlcnR5IiwiZ3JvdXBWaXNpYmlsaXR5UHJvcGVydHkiLCJkZWZhdWx0R3JvdXBWaXNpYmlsaXR5IiwiZ3JvdXBGaWxsQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHRHcm91cEZpbGxDb2xvciIsImdyb3VwRmlsbE9wYWNpdHlQcm9wZXJ0eSIsImRlZmF1bHRHcm91cEZpbGxPcGFjaXR5IiwiZ3JvdXBTdHJva2VDb2xvclByb3BlcnR5IiwiZGVmYXVsdEdyb3VwU3Ryb2tlQ29sb3IiLCJncm91cFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSIsImRlZmF1bHRHcm91cFN0cm9rZU9wYWNpdHkiLCJncm91cExhYmVsRmlsbENvbG9yUHJvcGVydHkiLCJkZWZhdWx0R3JvdXBMYWJlbEZpbGxDb2xvciIsImdyb3VwTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5IiwiZGVmYXVsdEdyb3VwTGFiZWxGaWxsT3BhY2l0eSIsImdyb3VwTGFiZWxTdHJva2VDb2xvclByb3BlcnR5IiwiZGVmYXVsdEdyb3VwTGFiZWxTdHJva2VDb2xvciIsImdyb3VwTGFiZWxTdHJva2VPcGFjaXR5UHJvcGVydHkiLCJkZWZhdWx0R3JvdXBMYWJlbFN0cm9rZU9wYWNpdHkiLCJncm91cFhQcm9wZXJ0eSIsImRlZmF1bHRHcm91cFgiLCJncm91cFlQcm9wZXJ0eSIsImRlZmF1bHRHcm91cFkiLCJncm91cFdpZHRoUHJvcGVydHkiLCJkZWZhdWx0R3JvdXBXaWR0aCIsImdyb3VwSGVpZ2h0UHJvcGVydHkiLCJkZWZhdWx0R3JvdXBIZWlnaHQiLCJncm91cFR5cGVQcm9wZXJ0eSIsImRlZmF1bHRHcm91cFR5cGUiLCJncm91cFN0cm9rZVdpZHRoUHJvcGVydHkiLCJkZWZhdWx0R3JvdXBTdHJva2VXaWR0aCIsImdyb3VwTGFiZWxQcm9wZXJ0eSIsImRlZmF1bHRHcm91cExhYmVsIiwiZ3JvdXBMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHkiLCJkZWZhdWx0R3JvdXBMYWJlbFN0cm9rZVdpZHRoIiwiZ3JvdXBMYWJlbEZvbnRTaXplUHJvcGVydHkiLCJkZWZhdWx0R3JvdXBMYWJlbEZvbnRTaXplIiwiZ3JvdXBMYWJlbEZvbnRGYW1pbHlQcm9wZXJ0eSIsImRlZmF1bHRHcm91cExhYmVsRm9udEZhbWlseSIsImdyYXBoTm9kZXNQcm9wZXJ0eSIsIm5vZGVWaXNpYmlsaXR5UHJvcGVydHkiLCJkZWZhdWx0Tm9kZVZpc2liaWxpdHkiLCJub2RlRmlsbENvbG9yUHJvcGVydHkiLCJkZWZhdWx0Tm9kZUZpbGxDb2xvciIsIm5vZGVGaWxsT3BhY2l0eVByb3BlcnR5IiwiZGVmYXVsdE5vZGVGaWxsT3BhY2l0eSIsIm5vZGVTdHJva2VDb2xvclByb3BlcnR5IiwiZGVmYXVsdE5vZGVTdHJva2VDb2xvciIsIm5vZGVTdHJva2VPcGFjaXR5UHJvcGVydHkiLCJkZWZhdWx0Tm9kZVN0cm9rZU9wYWNpdHkiLCJub2RlTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHROb2RlTGFiZWxGaWxsQ29sb3IiLCJub2RlTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5IiwiZGVmYXVsdE5vZGVMYWJlbEZpbGxPcGFjaXR5Iiwibm9kZUxhYmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHROb2RlTGFiZWxTdHJva2VDb2xvciIsIm5vZGVMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSIsImRlZmF1bHROb2RlTGFiZWxTdHJva2VPcGFjaXR5Iiwibm9kZUlkUHJvcGVydHkiLCJub2RlWFByb3BlcnR5IiwiZGVmYXVsdE5vZGVYIiwibm9kZVlQcm9wZXJ0eSIsImRlZmF1bHROb2RlWSIsIm5vZGVXaWR0aFByb3BlcnR5IiwiZGVmYXVsdE5vZGVXaWR0aCIsIm5vZGVIZWlnaHRQcm9wZXJ0eSIsImRlZmF1bHROb2RlSGVpZ2h0Iiwibm9kZVR5cGVQcm9wZXJ0eSIsImRlZmF1bHROb2RlVHlwZSIsIm5vZGVTdHJva2VXaWR0aFByb3BlcnR5IiwiZGVmYXVsdE5vZGVTdHJva2VXaWR0aCIsIm5vZGVMYWJlbFByb3BlcnR5IiwiZGVmYXVsdE5vZGVMYWJlbCIsIm5vZGVMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHkiLCJkZWZhdWx0Tm9kZUxhYmVsU3Ryb2tlV2lkdGgiLCJub2RlTGFiZWxGb250U2l6ZVByb3BlcnR5IiwiZGVmYXVsdE5vZGVMYWJlbEZvbnRTaXplIiwibm9kZUxhYmVsRm9udEZhbWlseVByb3BlcnR5IiwiZGVmYXVsdE5vZGVMYWJlbEZvbnRGYW1pbHkiLCJpbmRpY2VzIiwiZ3JhcGhMaW5rc1Byb3BlcnR5IiwibGlua1Zpc2liaWxpdHlQcm9wZXJ0eSIsImRlZmF1bHRMaW5rVmlzaWJpbGl0eSIsImxpbmtTb3VyY2VQcm9wZXJ0eSIsImxpbmtUYXJnZXRQcm9wZXJ0eSIsImxpbmtTdHJva2VDb2xvclByb3BlcnR5IiwiZGVmYXVsdExpbmtTdHJva2VDb2xvciIsImxpbmtTdHJva2VPcGFjaXR5UHJvcGVydHkiLCJkZWZhdWx0TGlua1N0cm9rZU9wYWNpdHkiLCJsaW5rTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHRMaW5rTGFiZWxGaWxsQ29sb3IiLCJsaW5rTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5IiwiZGVmYXVsdExpbmtMYWJlbEZpbGxPcGFjaXR5IiwibGlua0xhYmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHRMaW5rTGFiZWxTdHJva2VDb2xvciIsImxpbmtMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSIsImRlZmF1bHRMaW5rTGFiZWxTdHJva2VPcGFjaXR5IiwiZHUiLCJkdiIsIm5ld1BvaW50cyIsImxpbmtCZW5kc1Byb3BlcnR5IiwibGlua1R5cGVQcm9wZXJ0eSIsImRlZmF1bHRMaW5rVHlwZSIsImxpbmtTdHJva2VXaWR0aFByb3BlcnR5IiwiZGVmYXVsdExpbmtTdHJva2VXaWR0aCIsImxpbmtTb3VyY2VNYXJrZXJTaGFwZVByb3BlcnR5IiwiZGVmYXVsdExpbmtTb3VyY2VNYXJrZXJTaGFwZSIsImxpbmtTb3VyY2VNYXJrZXJTaXplUHJvcGVydHkiLCJkZWZhdWx0TGlua1NvdXJjZU1hcmtlclNpemUiLCJsaW5rVGFyZ2V0TWFya2VyU2hhcGVQcm9wZXJ0eSIsImRlZmF1bHRMaW5rVGFyZ2V0TWFya2VyU2hhcGUiLCJsaW5rVGFyZ2V0TWFya2VyU2l6ZVByb3BlcnR5IiwiZGVmYXVsdExpbmtUYXJnZXRNYXJrZXJTaXplIiwibGlua0xhYmVsUHJvcGVydHkiLCJkZWZhdWx0TGlua0xhYmVsIiwibGlua0xhYmVsU3Ryb2tlV2lkdGhQcm9wZXJ0eSIsImRlZmF1bHRMaW5rTGFiZWxTdHJva2VXaWR0aCIsImxpbmtMYWJlbEZvbnRTaXplUHJvcGVydHkiLCJkZWZhdWx0TGlua0xhYmVsRm9udFNpemUiLCJsaW5rTGFiZWxGb250RmFtaWx5UHJvcGVydHkiLCJkZWZhdWx0TGlua0xhYmVsRm9udEZhbWlseSIsIm9uTGF5b3V0IiwiYXV0b0NlbnRlcmluZyIsImF1dG9VcGRhdGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVB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Y0FBQSxRQUNBQyxjQUFBLFFBQ0FDLGNBQUEsTUFDQUMsV0FBQSxRQUNBQyxTQUFBLFNBQ0FDLFlBQUEsTUFDQUMsUUFBQSxRQUNBQyxRQUFBLFFBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxZQUFBLFNBQ0FDLFlBQUEsUUFDQUMsUUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsU0FDQUMsS0FBQSxTQUNBQyxVQUFBLFNBQ0FDLEtBQUEsUUFDQUMsTUFBQSxNQUNBQyxZQUFBLFNBQ0FDLEtBQUEsUUFDQUMsU0FBQSxTQUNBQyxRQUFBLFNBQ0FDLFVBQUEsU0FDQUMsT0FBQSxRQUNBQyxNQUFBLFNBQ0FDLE1BQUEsU0FDQUMsU0FBQSxTQUNBQyxjQUFBLFNBQ0FDLFVBQUEsUUFDQUMsYUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsU0FDQUMsVUFBQSxTQUNBQyxxQkFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFlBQUEsU0FDQUMsY0FBQSxRQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZUFBQSxRQUNBQyxlQUFBLFNBQ0FDLFlBQUEsU0FDQUMsS0FBQSxNQUNBQyxVQUFBLFFBQ0FDLE1BQUEsU0FDQUMsUUFBQSxTQUNBQyxPQUFBLFFBQ0FDLGlCQUFBLFFBQ0FDLFdBQUEsSUFDQUMsYUFBQSxTQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZ0JBQUEsUUFDQUMsa0JBQUEsTUFDQUMsZ0JBQUEsUUFDQUMsZ0JBQUEsU0FDQUMsYUFBQSxRQUNBQyxVQUFBLFNBQ0FDLFVBQUEsU0FDQUMsU0FBQSxTQUNBQyxZQUFBLFNBQ0FDLEtBQUEsSUFDQUMsUUFBQSxTQUNBQyxNQUFBLFFBQ0FDLFVBQUEsUUFDQUMsT0FBQSxTQUNBQyxVQUFBLFNBQ0FDLE9BQUEsU0FDQUMsY0FBQSxTQUNBQyxVQUFBLFNBQ0FDLGNBQUEsU0FDQUMsY0FBQSxTQUNBQyxXQUFBLFNBQ0FDLFVBQUEsU0FDQUMsS0FBQSxTQUNBQyxLQUFBLFNBQ0FDLEtBQUEsU0FDQUMsV0FB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LDBDQUdBMi9NLCtCQUFBeGhOLEdBQ0E2QixLQUFBOEUsYUFBQSxpQ0FBQTNHLEdBR0F5RSxXQUNBLE9BQUFzNUQsRUFBQW4rRCxJQUFBaUMsTUFBQXUzTSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOTcpO1xuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsInZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCFlbGVtZW50Lm1hdGNoZXMpIHtcbiAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3QoY3JlYXRvcihuYW1lKS5jYWxsKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpO1xufVxuIiwidmFyIG5leHRJZCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvY2FsKCkge1xuICByZXR1cm4gbmV3IExvY2FsO1xufVxuXG5mdW5jdGlvbiBMb2NhbCgpIHtcbiAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbn1cblxuTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTG9jYWwsXG4gIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBpZCA9IHRoaXMuXztcbiAgICB3aGlsZSAoIShpZCBpbiBub2RlKSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZVtpZF07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLmNoYW5nZWRUb3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIHBvaW50KG5vZGUsIHRvdWNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHRvdWNoZXMpIHtcbiAgaWYgKHRvdWNoZXMgPT0gbnVsbCkgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkudG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgIHBvaW50c1tpXSA9IHBvaW50KG5vZGUsIHRvdWNoZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmhleCgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG4iLCJpbXBvcnQge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IGh1ZSgrYSwgK2IpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciB4ID0gaSh0KTtcbiAgICByZXR1cm4geCAtIDM2MCAqIE1hdGguZmxvb3IoeCAvIDM2MCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iLCJpbXBvcnQge2xhYiBhcyBjb2xvckxhYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IgZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGwgPSBjb2xvcigoc3RhcnQgPSBjb2xvckxhYihzdGFydCkpLmwsIChlbmQgPSBjb2xvckxhYihlbmQpKS5sKSxcbiAgICAgIGEgPSBjb2xvcihzdGFydC5hLCBlbmQuYSksXG4gICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBzdGFydC5sID0gbCh0KTtcbiAgICBzdGFydC5hID0gYSh0KTtcbiAgICBzdGFydC5iID0gYih0KTtcbiAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICB9O1xufVxuIiwiaW1wb3J0IHtoY2wgYXMgY29sb3JIY2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBoY2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBjb2xvcihzdGFydC5jLCBlbmQuYyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhjbChodWUpO1xuZXhwb3J0IHZhciBoY2xMb25nID0gaGNsKGNvbG9yKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBpZWNld2lzZShpbnRlcnBvbGF0ZSwgdmFsdWVzKSB7XG4gIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGggLSAxLCB2ID0gdmFsdWVzWzBdLCBJID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIElbaV0gPSBpbnRlcnBvbGF0ZSh2LCB2ID0gdmFsdWVzWysraV0pO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqPSBuKSkpO1xuICAgIHJldHVybiBJW2ldKHQgLSBpKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdBUk5JTkc6IERPIE5PVCBtYW51YWxseSByZXF1aXJlIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBgaW52YXJpYW50KC4uLilgIHVzZWQgYnkgdGhlIGVycm9yIGNvZGUgc3lzdGVtXG4gKiBhbmQgd2lsbCBfb25seV8gYmUgcmVxdWlyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgYmFiZWwgcGFzcy5cbiAqIEl0IGFsd2F5cyB0aHJvd3MuXG4gKi9cblxuZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KGNvZGUpIHtcbiAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIG1lc3NhZ2UgPSAnTWluaWZpZWQgUmVhY3QgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArICdodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD0nICsgY29kZTtcblxuICBmb3IgKHZhciBhcmdJZHggPSAwOyBhcmdJZHggPCBhcmdDb3VudDsgYXJnSWR4KyspIHtcbiAgICBtZXNzYWdlICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2FyZ0lkeCArIDFdKTtcbiAgfVxuXG4gIG1lc3NhZ2UgKz0gJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQnICsgJyBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nO1xuXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IHJlYWN0UHJvZEludmFyaWFudCdzIG93biBmcmFtZVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0UHJvZEludmFyaWFudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRGbGFncycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBBVFRSX05BTUUgPSBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRTtcbnZhciBGbGFncyA9IFJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7XG5cbnZhciBpbnRlcm5hbEluc3RhbmNlS2V5ID0gJ19fcmVhY3RJbnRlcm5hbEluc3RhbmNlJCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIGdpdmVuIG5vZGUgc2hvdWxkIGJlIGNhY2hlZC5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkUHJlY2FjaGVOb2RlKG5vZGUsIG5vZGVJRCkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpID09PSBTdHJpbmcobm9kZUlEKSB8fCBub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlID09PSAnIHJlYWN0LXRleHQ6ICcgKyBub2RlSUQgKyAnICcgfHwgbm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyByZWFjdC1lbXB0eTogJyArIG5vZGVJRCArICcgJztcbn1cblxuLyoqXG4gKiBEcmlsbCBkb3duICh0aHJvdWdoIGNvbXBvc2l0ZXMgYW5kIGVtcHR5IGNvbXBvbmVudHMpIHVudGlsIHdlIGdldCBhIGhvc3Qgb3JcbiAqIGhvc3QgdGV4dCBjb21wb25lbnQuXG4gKlxuICogVGhpcyBpcyBwcmV0dHkgcG9seW1vcnBoaWMgYnV0IHVuYXZvaWRhYmxlIHdpdGggdGhlIGN1cnJlbnQgc3RydWN0dXJlIHdlIGhhdmVcbiAqIGZvciBgX3JlbmRlcmVkQ2hpbGRyZW5gLlxuICovXG5mdW5jdGlvbiBnZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICB2YXIgcmVuZGVyZWQ7XG4gIHdoaWxlIChyZW5kZXJlZCA9IGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICBjb21wb25lbnQgPSByZW5kZXJlZDtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50O1xufVxuXG4vKipcbiAqIFBvcHVsYXRlIGBfaG9zdE5vZGVgIG9uIHRoZSByZW5kZXJlZCBob3N0L3RleHQgY29tcG9uZW50IHdpdGggdGhlIGdpdmVuXG4gKiBET00gbm9kZS4gVGhlIHBhc3NlZCBgaW5zdGAgY2FuIGJlIGEgY29tcG9zaXRlLlxuICovXG5mdW5jdGlvbiBwcmVjYWNoZU5vZGUoaW5zdCwgbm9kZSkge1xuICB2YXIgaG9zdEluc3QgPSBnZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50KGluc3QpO1xuICBob3N0SW5zdC5faG9zdE5vZGUgPSBub2RlO1xuICBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldID0gaG9zdEluc3Q7XG59XG5cbmZ1bmN0aW9uIHVuY2FjaGVOb2RlKGluc3QpIHtcbiAgdmFyIG5vZGUgPSBpbnN0Ll9ob3N0Tm9kZTtcbiAgaWYgKG5vZGUpIHtcbiAgICBkZWxldGUgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgICBpbnN0Ll9ob3N0Tm9kZSA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSBgX2hvc3ROb2RlYCBvbiBlYWNoIGNoaWxkIG9mIGBpbnN0YCwgYXNzdW1pbmcgdGhhdCB0aGUgY2hpbGRyZW5cbiAqIG1hdGNoIHVwIHdpdGggdGhlIERPTSAoZWxlbWVudCkgY2hpbGRyZW4gb2YgYG5vZGVgLlxuICpcbiAqIFdlIGNhY2hlIGVudGlyZSBsZXZlbHMgYXQgb25jZSB0byBhdm9pZCBhbiBuXjIgcHJvYmxlbSB3aGVyZSB3ZSBhY2Nlc3MgdGhlXG4gKiBjaGlsZHJlbiBvZiBhIG5vZGUgc2VxdWVudGlhbGx5IGFuZCBoYXZlIHRvIHdhbGsgZnJvbSB0aGUgc3RhcnQgdG8gb3VyIHRhcmdldFxuICogbm9kZSBldmVyeSB0aW1lLlxuICpcbiAqIFNpbmNlIHdlIHVwZGF0ZSBgX3JlbmRlcmVkQ2hpbGRyZW5gIGFuZCB0aGUgYWN0dWFsIERPTSBhdCAoc2xpZ2h0bHkpXG4gKiBkaWZmZXJlbnQgdGltZXMsIHdlIGNvdWxkIHJhY2UgaGVyZSBhbmQgc2VlIGEgbmV3ZXIgYF9yZW5kZXJlZENoaWxkcmVuYCB0aGFuXG4gKiB0aGUgRE9NIG5vZGVzIHdlIHNlZS4gVG8gYXZvaWQgdGhpcywgUmVhY3RNdWx0aUNoaWxkIGNhbGxzXG4gKiBgcHJlcGFyZVRvTWFuYWdlQ2hpbGRyZW5gIGJlZm9yZSB3ZSBjaGFuZ2UgYF9yZW5kZXJlZENoaWxkcmVuYCwgYXQgd2hpY2hcbiAqIHRpbWUgdGhlIGNvbnRhaW5lcidzIGNoaWxkIG5vZGVzIGFyZSBhbHdheXMgY2FjaGVkICh1bnRpbCBpdCB1bm1vdW50cykuXG4gKi9cbmZ1bmN0aW9uIHByZWNhY2hlQ2hpbGROb2RlcyhpbnN0LCBub2RlKSB7XG4gIGlmIChpbnN0Ll9mbGFncyAmIEZsYWdzLmhhc0NhY2hlZENoaWxkTm9kZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gaW5zdC5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgdmFyIGNoaWxkTm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgb3V0ZXI6IGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICBpZiAoIWNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdCA9IGNoaWxkcmVuW25hbWVdO1xuICAgIHZhciBjaGlsZElEID0gZ2V0UmVuZGVyZWRIb3N0T3JUZXh0RnJvbUNvbXBvbmVudChjaGlsZEluc3QpLl9kb21JRDtcbiAgICBpZiAoY2hpbGRJRCA9PT0gMCkge1xuICAgICAgLy8gV2UncmUgY3VycmVudGx5IHVubW91bnRpbmcgdGhpcyBjaGlsZCBpbiBSZWFjdE11bHRpQ2hpbGQ7IHNraXAgaXQuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gV2UgYXNzdW1lIHRoZSBjaGlsZCBub2RlcyBhcmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGNoaWxkIGluc3RhbmNlcy5cbiAgICBmb3IgKDsgY2hpbGROb2RlICE9PSBudWxsOyBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIGlmIChzaG91bGRQcmVjYWNoZU5vZGUoY2hpbGROb2RlLCBjaGlsZElEKSkge1xuICAgICAgICBwcmVjYWNoZU5vZGUoY2hpbGRJbnN0LCBjaGlsZE5vZGUpO1xuICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBET00gY2hpbGRyZW4gd2l0aG91dCBmaW5kaW5nIGFuIElEIG1hdGNoLlxuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBlbGVtZW50IHdpdGggSUQgJXMuJywgY2hpbGRJRCkgOiBfcHJvZEludmFyaWFudCgnMzInLCBjaGlsZElEKSA6IHZvaWQgMDtcbiAgfVxuICBpbnN0Ll9mbGFncyB8PSBGbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgY2xvc2VzdCBSZWFjdERPTUNvbXBvbmVudCBvclxuICogUmVhY3RET01UZXh0Q29tcG9uZW50IGluc3RhbmNlIGFuY2VzdG9yLlxuICovXG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgcmV0dXJuIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIH1cblxuICAvLyBXYWxrIHVwIHRoZSB0cmVlIHVudGlsIHdlIGZpbmQgYW4gYW5jZXN0b3Igd2hvc2UgaW5zdGFuY2Ugd2UgaGF2ZSBjYWNoZWQuXG4gIHZhciBwYXJlbnRzID0gW107XG4gIHdoaWxlICghbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUb3Agb2YgdGhlIHRyZWUuIFRoaXMgbm9kZSBtdXN0IG5vdCBiZSBwYXJ0IG9mIGEgUmVhY3QgdHJlZSAob3IgaXNcbiAgICAgIC8vIHVubW91bnRlZCwgcG90ZW50aWFsbHkpLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNsb3Nlc3Q7XG4gIHZhciBpbnN0O1xuICBmb3IgKDsgbm9kZSAmJiAoaW5zdCA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pOyBub2RlID0gcGFyZW50cy5wb3AoKSkge1xuICAgIGNsb3Nlc3QgPSBpbnN0O1xuICAgIGlmIChwYXJlbnRzLmxlbmd0aCkge1xuICAgICAgcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgUmVhY3RET01Db21wb25lbnQgb3IgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBpbnN0YW5jZSwgb3IgbnVsbCBpZiB0aGUgbm9kZSB3YXMgbm90IHJlbmRlcmVkIGJ5IHRoaXMgUmVhY3QuXG4gKi9cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICB2YXIgaW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5vZGUpO1xuICBpZiAoaW5zdCAhPSBudWxsICYmIGluc3QuX2hvc3ROb2RlID09PSBub2RlKSB7XG4gICAgcmV0dXJuIGluc3Q7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudCwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KSB7XG4gIC8vIFdpdGhvdXQgdGhpcyBmaXJzdCBpbnZhcmlhbnQsIHBhc3NpbmcgYSBub24tRE9NLWNvbXBvbmVudCB0cmlnZ2VycyB0aGUgbmV4dFxuICAvLyBpbnZhcmlhbnQgZm9yIGEgbWlzc2luZyBwYXJlbnQsIHdoaWNoIGlzIHN1cGVyIGNvbmZ1c2luZy5cbiAgIShpbnN0Ll9ob3N0Tm9kZSAhPT0gdW5kZWZpbmVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzMzJykgOiB2b2lkIDA7XG5cbiAgaWYgKGluc3QuX2hvc3ROb2RlKSB7XG4gICAgcmV0dXJuIGluc3QuX2hvc3ROb2RlO1xuICB9XG5cbiAgLy8gV2FsayB1cCB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIGFuIGFuY2VzdG9yIHdob3NlIERPTSBub2RlIHdlIGhhdmUgY2FjaGVkLlxuICB2YXIgcGFyZW50cyA9IFtdO1xuICB3aGlsZSAoIWluc3QuX2hvc3ROb2RlKSB7XG4gICAgcGFyZW50cy5wdXNoKGluc3QpO1xuICAgICFpbnN0Ll9ob3N0UGFyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0IERPTSB0cmVlIHJvb3Qgc2hvdWxkIGFsd2F5cyBoYXZlIGEgbm9kZSByZWZlcmVuY2UuJykgOiBfcHJvZEludmFyaWFudCgnMzQnKSA6IHZvaWQgMDtcbiAgICBpbnN0ID0gaW5zdC5faG9zdFBhcmVudDtcbiAgfVxuXG4gIC8vIE5vdyBwYXJlbnRzIGNvbnRhaW5zIGVhY2ggYW5jZXN0b3IgdGhhdCBkb2VzICpub3QqIGhhdmUgYSBjYWNoZWQgbmF0aXZlXG4gIC8vIG5vZGUsIGFuZCBgaW5zdGAgaXMgdGhlIGRlZXBlc3QgYW5jZXN0b3IgdGhhdCBkb2VzLlxuICBmb3IgKDsgcGFyZW50cy5sZW5ndGg7IGluc3QgPSBwYXJlbnRzLnBvcCgpKSB7XG4gICAgcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIGluc3QuX2hvc3ROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBpbnN0Ll9ob3N0Tm9kZTtcbn1cblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHtcbiAgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlLFxuICBnZXRJbnN0YW5jZUZyb21Ob2RlOiBnZXRJbnN0YW5jZUZyb21Ob2RlLFxuICBnZXROb2RlRnJvbUluc3RhbmNlOiBnZXROb2RlRnJvbUluc3RhbmNlLFxuICBwcmVjYWNoZUNoaWxkTm9kZXM6IHByZWNhY2hlQ2hpbGROb2RlcyxcbiAgcHJlY2FjaGVOb2RlOiBwcmVjYWNoZU5vZGUsXG4gIHVuY2FjaGVOb2RlOiB1bmNhY2hlTm9kZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudFRyZWU7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsInZhciBub29wID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIFJlYWN0SW5zdHJ1bWVudGF0aW9uIHdpdGggYSBfX0RFVl9fIGNoZWNrXG5cbnZhciBkZWJ1Z1Rvb2wgPSBudWxsO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3REZWJ1Z1Rvb2wgPSByZXF1aXJlKCcuL1JlYWN0RGVidWdUb29sJyk7XG4gIGRlYnVnVG9vbCA9IFJlYWN0RGVidWdUb29sO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZGVidWdUb29sOiBkZWJ1Z1Rvb2wgfTsiLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtUaW1lciwgbm93fSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXIsIHRvdGFsID0gZGVsYXk7XG4gIGlmIChkZWxheSA9PSBudWxsKSByZXR1cm4gdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSksIHQ7XG4gIGRlbGF5ID0gK2RlbGF5LCB0aW1lID0gdGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIGVsYXBzZWQgKz0gdG90YWw7XG4gICAgdC5yZXN0YXJ0KHRpY2ssIHRvdGFsICs9IGRlbGF5LCB0aW1lKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkKTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKCcuL0NhbGxiYWNrUXVldWUnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RGZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcbnZhciB1cGRhdGVCYXRjaE51bWJlciA9IDA7XG52YXIgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xudmFyIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuXG52YXIgYmF0Y2hpbmdTdHJhdGVneSA9IG51bGw7XG5cbmZ1bmN0aW9uIGVuc3VyZUluamVjdGVkKCkge1xuICAhKFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uICYmIGJhdGNoaW5nU3RyYXRlZ3kpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBpbmplY3QgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MgYW5kIGJhdGNoaW5nIHN0cmF0ZWd5JykgOiBfcHJvZEludmFyaWFudCgnMTIzJykgOiB2b2lkIDA7XG59XG5cbnZhciBORVNURURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gZGlydHlDb21wb25lbnRzLmxlbmd0aDtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggIT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIEFkZGl0aW9uYWwgdXBkYXRlcyB3ZXJlIGVucXVldWVkIGJ5IGNvbXBvbmVudERpZFVwZGF0ZSBoYW5kbGVycyBvclxuICAgICAgLy8gc2ltaWxhcjsgYmVmb3JlIG91ciBvd24gVVBEQVRFX1FVRVVFSU5HIHdyYXBwZXIgY2xvc2VzLCB3ZSB3YW50IHRvIHJ1blxuICAgICAgLy8gdGhlc2UgbmV3IHVwZGF0ZXMgc28gdGhhdCBpZiBBJ3MgY29tcG9uZW50RGlkVXBkYXRlIGNhbGxzIHNldFN0YXRlIG9uXG4gICAgICAvLyBCLCBCIHdpbGwgdXBkYXRlIGJlZm9yZSB0aGUgY2FsbGJhY2sgQSdzIHVwZGF0ZXIgcHJvdmlkZWQgd2hlbiBjYWxsaW5nXG4gICAgICAvLyBzZXRTdGF0ZS5cbiAgICAgIGRpcnR5Q29tcG9uZW50cy5zcGxpY2UoMCwgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGgpO1xuICAgICAgZmx1c2hCYXRjaGVkVXBkYXRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUERBVEVfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUucmVzZXQoKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtORVNURURfVVBEQVRFUywgVVBEQVRFX1FVRVVFSU5HXTtcblxuZnVuY3Rpb24gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoXG4gIC8qIHVzZUNyZWF0ZUVsZW1lbnQgKi90cnVlKTtcbn1cblxuX2Fzc2lnbihSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24sIHtcbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLmNhbGxiYWNrUXVldWUpO1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IG51bGw7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID0gbnVsbDtcbiAgfSxcblxuICBwZXJmb3JtOiBmdW5jdGlvbiAobWV0aG9kLCBzY29wZSwgYSkge1xuICAgIC8vIEVzc2VudGlhbGx5IGNhbGxzIGB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0obWV0aG9kLCBzY29wZSwgYSlgXG4gICAgLy8gd2l0aCB0aGlzIHRyYW5zYWN0aW9uJ3Mgd3JhcHBlcnMgYXJvdW5kIGl0LlxuICAgIHJldHVybiBUcmFuc2FjdGlvbi5wZXJmb3JtLmNhbGwodGhpcywgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtLCB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLCBtZXRob2QsIHNjb3BlLCBhKTtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKTtcblxuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpIHtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcbiAgcmV0dXJuIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xufVxuXG4vKipcbiAqIEFycmF5IGNvbXBhcmF0b3IgZm9yIFJlYWN0Q29tcG9uZW50cyBieSBtb3VudCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAhKGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvIG1hdGNoIGRpcnR5LWNvbXBvbmVudHMgYXJyYXkgbGVuZ3RoICglcykuJywgbGVuLCBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSA6IF9wcm9kSW52YXJpYW50KCcxMjQnLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogdm9pZCAwO1xuXG4gIC8vIFNpbmNlIHJlY29uY2lsaW5nIGEgY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgb3duZXIgaGllcmFyY2h5IHVzdWFsbHkgKG5vdFxuICAvLyBhbHdheXMgLS0gc2VlIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpKSB3aWxsIHJlY29uY2lsZSBjaGlsZHJlbiwgcmVjb25jaWxlXG4gIC8vIHRoZW0gYmVmb3JlIHRoZWlyIGNoaWxkcmVuIGJ5IHNvcnRpbmcgdGhlIGFycmF5LlxuICBkaXJ0eUNvbXBvbmVudHMuc29ydChtb3VudE9yZGVyQ29tcGFyYXRvcik7XG5cbiAgLy8gQW55IHVwZGF0ZXMgZW5xdWV1ZWQgd2hpbGUgcmVjb25jaWxpbmcgbXVzdCBiZSBwZXJmb3JtZWQgYWZ0ZXIgdGhpcyBlbnRpcmVcbiAgLy8gYmF0Y2guIE90aGVyd2lzZSwgaWYgZGlydHlDb21wb25lbnRzIGlzIFtBLCBCXSB3aGVyZSBBIGhhcyBjaGlsZHJlbiBCIGFuZFxuICAvLyBDLCBCIGNvdWxkIHVwZGF0ZSB0d2ljZSBpbiBhIHNpbmdsZSBiYXRjaCBpZiBDJ3MgcmVuZGVyIGVucXVldWVzIGFuIHVwZGF0ZVxuICAvLyB0byBCIChzaW5jZSBCIHdvdWxkIGhhdmUgYWxyZWFkeSB1cGRhdGVkLCB3ZSBzaG91bGQgc2tpcCBpdCwgYW5kIHRoZSBvbmx5XG4gIC8vIHdheSB3ZSBjYW4ga25vdyB0byBkbyBzbyBpcyBieSBjaGVja2luZyB0aGUgYmF0Y2ggY291bnRlcikuXG4gIHVwZGF0ZUJhdGNoTnVtYmVyKys7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIC8vIElmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgcGVuZGluZyBjaGFuZ2VzIGFwcGx5LCBpdCB3aWxsIHN0aWxsXG4gICAgLy8gYmUgaGVyZSwgYnV0IHdlIGFzc3VtZSB0aGF0IGl0IGhhcyBjbGVhcmVkIGl0cyBfcGVuZGluZ0NhbGxiYWNrcyBhbmRcbiAgICAvLyB0aGF0IHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSBpcyBhIG5vb3AuXG4gICAgdmFyIGNvbXBvbmVudCA9IGRpcnR5Q29tcG9uZW50c1tpXTtcblxuICAgIC8vIElmIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSBoYXBwZW5zIHRvIGVucXVldWUgYW55IG5ldyB1cGRhdGVzLCB3ZVxuICAgIC8vIHNob3VsZG4ndCBleGVjdXRlIHRoZSBjYWxsYmFja3MgdW50aWwgdGhlIG5leHQgcmVuZGVyIGhhcHBlbnMsIHNvXG4gICAgLy8gc3Rhc2ggdGhlIGNhbGxiYWNrcyBmaXJzdFxuICAgIHZhciBjYWxsYmFja3MgPSBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3M7XG4gICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblxuICAgIHZhciBtYXJrZXJOYW1lO1xuICAgIGlmIChSZWFjdEZlYXR1cmVGbGFncy5sb2dUb3BMZXZlbFJlbmRlcnMpIHtcbiAgICAgIHZhciBuYW1lZENvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgIC8vIER1Y2sgdHlwZSBUb3BMZXZlbFdyYXBwZXIuIFRoaXMgaXMgcHJvYmFibHkgYWx3YXlzIHRydWUuXG4gICAgICBpZiAoY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC50eXBlLmlzUmVhY3RUb3BMZXZlbFdyYXBwZXIpIHtcbiAgICAgICAgbmFtZWRDb21wb25lbnQgPSBjb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgICAgfVxuICAgICAgbWFya2VyTmFtZSA9ICdSZWFjdCB1cGRhdGU6ICcgKyBuYW1lZENvbXBvbmVudC5nZXROYW1lKCk7XG4gICAgICBjb25zb2xlLnRpbWUobWFya2VyTmFtZSk7XG4gICAgfVxuXG4gICAgUmVhY3RSZWNvbmNpbGVyLnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeShjb21wb25lbnQsIHRyYW5zYWN0aW9uLnJlY29uY2lsZVRyYW5zYWN0aW9uLCB1cGRhdGVCYXRjaE51bWJlcik7XG5cbiAgICBpZiAobWFya2VyTmFtZSkge1xuICAgICAgY29uc29sZS50aW1lRW5kKG1hcmtlck5hbWUpO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2FsbGJhY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmNhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFja3Nbal0sIGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGZsdXNoQmF0Y2hlZFVwZGF0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ncyB3cmFwcGVycyB3aWxsIGNsZWFyIHRoZSBkaXJ0eUNvbXBvbmVudHNcbiAgLy8gYXJyYXkgYW5kIHBlcmZvcm0gYW55IHVwZGF0ZXMgZW5xdWV1ZWQgYnkgbW91bnQtcmVhZHkgaGFuZGxlcnMgKGkuZS4sXG4gIC8vIGNvbXBvbmVudERpZFVwZGF0ZSkgYnV0IHdlIG5lZWQgdG8gY2hlY2sgaGVyZSB0b28gaW4gb3JkZXIgdG8gY2F0Y2hcbiAgLy8gdXBkYXRlcyBlbnF1ZXVlZCBieSBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIGFzYXAgY2FsbHMuXG4gIHdoaWxlIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoIHx8IGFzYXBFbnF1ZXVlZCkge1xuICAgIGlmIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShydW5CYXRjaGVkVXBkYXRlcywgbnVsbCwgdHJhbnNhY3Rpb24pO1xuICAgICAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoYXNhcEVucXVldWVkKSB7XG4gICAgICBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBxdWV1ZSA9IGFzYXBDYWxsYmFja1F1ZXVlO1xuICAgICAgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICAgICAgcXVldWUubm90aWZ5QWxsKCk7XG4gICAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UocXVldWUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBNYXJrIGEgY29tcG9uZW50IGFzIG5lZWRpbmcgYSByZXJlbmRlciwgYWRkaW5nIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGFcbiAqIGxpc3Qgb2YgZnVuY3Rpb25zIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgb25jZSB0aGUgcmVyZW5kZXIgb2NjdXJzLlxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGNvbXBvbmVudCkge1xuICBlbnN1cmVJbmplY3RlZCgpO1xuXG4gIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoVGhpcyBpcyBjYWxsZWQgYnkgZWFjaCB0b3AtbGV2ZWwgdXBkYXRlXG4gIC8vIGZ1bmN0aW9uLCBsaWtlIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG4gIC8vIGRlc3RydWN0aW9uIG9mIHRvcC1sZXZlbCBjb21wb25lbnRzIGlzIGd1YXJkZWQgaW4gUmVhY3RNb3VudC4pXG5cbiAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gIGlmIChjb21wb25lbnQuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwpIHtcbiAgICBjb21wb25lbnQuX3VwZGF0ZUJhdGNoTnVtYmVyID0gdXBkYXRlQmF0Y2hOdW1iZXIgKyAxO1xuICB9XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZXVwZGF0ZXMgYXJlIG5vdCBiZWluZyBiYXRjaGVkLicpIDogX3Byb2RJbnZhcmlhbnQoJzEyNScpIDogdm9pZCAwO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uIChSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgICFSZWNvbmNpbGVUcmFuc2FjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcycpIDogX3Byb2RJbnZhcmlhbnQoJzEyNicpIDogdm9pZCAwO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gUmVjb25jaWxlVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgaW5qZWN0QmF0Y2hpbmdTdHJhdGVneTogZnVuY3Rpb24gKF9iYXRjaGluZ1N0cmF0ZWd5KSB7XG4gICAgIV9iYXRjaGluZ1N0cmF0ZWd5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3knKSA6IF9wcm9kSW52YXJpYW50KCcxMjcnKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGVkVXBkYXRlcygpIGZ1bmN0aW9uJykgOiBfcHJvZEludmFyaWFudCgnMTI4JykgOiB2b2lkIDA7XG4gICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnKSA6IF9wcm9kSW52YXJpYW50KCcxMjknKSA6IHZvaWQgMDtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5ID0gX2JhdGNoaW5nU3RyYXRlZ3k7XG4gIH1cbn07XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSB7XG4gIC8qKlxuICAgKiBSZWFjdCByZWZlcmVuY2VzIGBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uYCB1c2luZyB0aGlzIHByb3BlcnR5IGluIG9yZGVyXG4gICAqIHRvIGFsbG93IGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IG51bGwsXG5cbiAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzLFxuICBlbnF1ZXVlVXBkYXRlOiBlbnF1ZXVlVXBkYXRlLFxuICBmbHVzaEJhdGNoZWRVcGRhdGVzOiBmbHVzaEJhdGNoZWRVcGRhdGVzLFxuICBpbmplY3Rpb246IFJlYWN0VXBkYXRlc0luamVjdGlvbixcbiAgYXNhcDogYXNhcFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDdXJyZW50T3duZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgPSBmYWxzZTtcbnZhciBpc1Byb3h5U3VwcG9ydGVkID0gdHlwZW9mIFByb3h5ID09PSAnZnVuY3Rpb24nO1xuXG52YXIgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMgPSBbJ2Rpc3BhdGNoQ29uZmlnJywgJ190YXJnZXRJbnN0JywgJ25hdGl2ZUV2ZW50JywgJ2lzRGVmYXVsdFByZXZlbnRlZCcsICdpc1Byb3BhZ2F0aW9uU3RvcHBlZCcsICdfZGlzcGF0Y2hMaXN0ZW5lcnMnLCAnX2Rpc3BhdGNoSW5zdGFuY2VzJ107XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgdHlwZTogbnVsbCxcbiAgdGFyZ2V0OiBudWxsLFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgfSxcbiAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgaXNUcnVzdGVkOiBudWxsXG59O1xuXG4vKipcbiAqIFN5bnRoZXRpYyBldmVudHMgYXJlIGRpc3BhdGNoZWQgYnkgZXZlbnQgcGx1Z2lucywgdHlwaWNhbGx5IGluIHJlc3BvbnNlIHRvIGFcbiAqIHRvcC1sZXZlbCBldmVudCBkZWxlZ2F0aW9uIGhhbmRsZXIuXG4gKlxuICogVGhlc2Ugc3lzdGVtcyBzaG91bGQgZ2VuZXJhbGx5IHVzZSBwb29saW5nIHRvIHJlZHVjZSB0aGUgZnJlcXVlbmN5IG9mIGdhcmJhZ2VcbiAqIGNvbGxlY3Rpb24uIFRoZSBzeXN0ZW0gc2hvdWxkIGNoZWNrIGBpc1BlcnNpc3RlbnRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuICogZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGludG8gdGhlIHBvb2wgYWZ0ZXIgYmVpbmcgZGlzcGF0Y2hlZC4gVXNlcnMgdGhhdFxuICogbmVlZCBhIHBlcnNpc3RlZCBldmVudCBzaG91bGQgaW52b2tlIGBwZXJzaXN0YC5cbiAqXG4gKiBTeW50aGV0aWMgZXZlbnRzIChhbmQgc3ViY2xhc3NlcykgaW1wbGVtZW50IHRoZSBET00gTGV2ZWwgMyBFdmVudHMgQVBJIGJ5XG4gKiBub3JtYWxpemluZyBicm93c2VyIHF1aXJrcy4gU3ViY2xhc3NlcyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBpbXBsZW1lbnQgYVxuICogRE9NIGludGVyZmFjZTsgY3VzdG9tIGFwcGxpY2F0aW9uLXNwZWNpZmljIGV2ZW50cyBjYW4gYWxzbyBzdWJjbGFzcyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0SW5zdCBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IG5hdGl2ZUV2ZW50VGFyZ2V0IFRhcmdldCBub2RlLlxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNFdmVudChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gdGhlc2UgaGF2ZSBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgZGVsZXRlIHRoaXMucHJldmVudERlZmF1bHQ7XG4gICAgZGVsZXRlIHRoaXMuc3RvcFByb3BhZ2F0aW9uO1xuICB9XG5cbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLl90YXJnZXRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuXG4gIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgaWYgKCFJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW3Byb3BOYW1lXTsgLy8gdGhpcyBoYXMgYSBnZXR0ZXIvc2V0dGVyIGZvciB3YXJuaW5nc1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcbiAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wTmFtZSA9PT0gJ3RhcmdldCcpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbcHJvcE5hbWVdID0gbmF0aXZlRXZlbnRbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWZhdWx0UHJldmVudGVkID0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAhPSBudWxsID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCA6IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gIHJldHVybiB0aGlzO1xufVxuXG5fYXNzaWduKFN5bnRoZXRpY0V2ZW50LnByb3RvdHlwZSwge1xuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZhbGlkLXR5cGVvZlxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICE9PSAndW5rbm93bicpIHtcbiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdmFsaWQtdHlwZW9mXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICE9PSAndW5rbm93bicpIHtcbiAgICAgIC8vIFRoZSBDaGFuZ2VFdmVudFBsdWdpbiByZWdpc3RlcnMgYSBcInByb3BlcnR5Y2hhbmdlXCIgZXZlbnQgZm9yXG4gICAgICAvLyBJRS4gVGhpcyBldmVudCBkb2VzIG5vdCBzdXBwb3J0IGJ1YmJsaW5nIG9yIGNhbmNlbGxpbmcsIGFuZFxuICAgICAgLy8gYW55IHJlZmVyZW5jZXMgdG8gY2FuY2VsQnViYmxlIHRocm93IFwiTWVtYmVyIG5vdCBmb3VuZFwiLiAgQVxuICAgICAgLy8gdHlwZW9mIGNoZWNrIG9mIFwidW5rbm93blwiIGNpcmN1bXZlbnRzIHRoaXMgaXNzdWUgKGFuZCBpcyBhbHNvXG4gICAgICAvLyBJRSBzcGVjaWZpYykuXG4gICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBzaG91bGQgbm90IGJlIHJlbGVhc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBJbnRlcmZhY2VbcHJvcE5hbWVdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXNbc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXNbaV1dID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmF0aXZlRXZlbnQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCduYXRpdmVFdmVudCcsIG51bGwpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncHJldmVudERlZmF1bHQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdwcmV2ZW50RGVmYXVsdCcsIGVtcHR5RnVuY3Rpb24pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcFByb3BhZ2F0aW9uJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignc3RvcFByb3BhZ2F0aW9uJywgZW1wdHlGdW5jdGlvbikpO1xuICAgIH1cbiAgfVxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBpZiAoaXNQcm94eVN1cHBvcnRlZCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tZnVuYy1hc3NpZ24gKi9cbiAgICBTeW50aGV0aWNFdmVudCA9IG5ldyBQcm94eShTeW50aGV0aWNFdmVudCwge1xuICAgICAgY29uc3RydWN0OiBmdW5jdGlvbiAodGFyZ2V0LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHRhcmdldCwgT2JqZWN0LmNyZWF0ZSh0YXJnZXQucHJvdG90eXBlKSwgYXJncyk7XG4gICAgICB9LFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uIChjb25zdHJ1Y3RvciwgdGhhdCwgYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KGNvbnN0cnVjdG9yLmFwcGx5KHRoYXQsIGFyZ3MpLCB7XG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHByb3AgIT09ICdpc1BlcnNpc3RlbnQnICYmICF0YXJnZXQuY29uc3RydWN0b3IuSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3ApICYmIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5IHx8IHRhcmdldC5pc1BlcnNpc3RlbnQoKSwgXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBcIiArIFwic2VlaW5nIHRoaXMsIHlvdSdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuIFwiICsgJ1RoZSBwcm9wZXJ0eSBpcyBuZXZlciByZWxlYXNlZC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLWZ1bmMtYXNzaWduICovXG4gIH1cbn1cbi8qKlxuICogSGVscGVyIHRvIHJlZHVjZSBib2lsZXJwbGF0ZSB3aGVuIGNyZWF0aW5nIHN1YmNsYXNzZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gQ2xhc3NcbiAqIEBwYXJhbSB7P29iamVjdH0gSW50ZXJmYWNlXG4gKi9cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyA9IGZ1bmN0aW9uIChDbGFzcywgSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIEUgPSBmdW5jdGlvbiAoKSB7fTtcbiAgRS5wcm90b3R5cGUgPSBTdXBlci5wcm90b3R5cGU7XG4gIHZhciBwcm90b3R5cGUgPSBuZXcgRSgpO1xuXG4gIF9hc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpO1xuICBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzO1xuXG4gIENsYXNzLkludGVyZmFjZSA9IF9hc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDbGFzcywgUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyKTtcbn07XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhTeW50aGV0aWNFdmVudCwgUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNFdmVudDtcblxuLyoqXG4gICogSGVscGVyIHRvIG51bGxpZnkgc3ludGhldGljRXZlbnQgaW5zdGFuY2UgcHJvcGVydGllcyB3aGVuIGRlc3RydWN0aW5nXG4gICpcbiAgKiBAcGFyYW0ge29iamVjdH0gU3ludGhldGljRXZlbnRcbiAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAgKiBAcmV0dXJuIHtvYmplY3R9IGRlZmluZVByb3BlcnR5IG9iamVjdFxuICAqL1xuZnVuY3Rpb24gZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgZ2V0VmFsKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIGdldFZhbCA9PT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgc2V0OiBzZXQsXG4gICAgZ2V0OiBnZXRcbiAgfTtcblxuICBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnc2V0dGluZyB0aGUgbWV0aG9kJyA6ICdzZXR0aW5nIHRoZSBwcm9wZXJ0eSc7XG4gICAgd2FybihhY3Rpb24sICdUaGlzIGlzIGVmZmVjdGl2ZWx5IGEgbm8tb3AnKTtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZhciBhY3Rpb24gPSBpc0Z1bmN0aW9uID8gJ2FjY2Vzc2luZyB0aGUgbWV0aG9kJyA6ICdhY2Nlc3NpbmcgdGhlIHByb3BlcnR5JztcbiAgICB2YXIgcmVzdWx0ID0gaXNGdW5jdGlvbiA/ICdUaGlzIGlzIGEgbm8tb3AgZnVuY3Rpb24nIDogJ1RoaXMgaXMgc2V0IHRvIG51bGwnO1xuICAgIHdhcm4oYWN0aW9uLCByZXN1bHQpO1xuICAgIHJldHVybiBnZXRWYWw7XG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKGFjdGlvbiwgcmVzdWx0KSB7XG4gICAgdmFyIHdhcm5pbmdDb25kaXRpb24gPSBmYWxzZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh3YXJuaW5nQ29uZGl0aW9uLCBcIlRoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCBcIiArIFwieW91J3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gXCIgKyAnSWYgeW91IG11c3Qga2VlcCB0aGUgb3JpZ2luYWwgc3ludGhldGljIGV2ZW50IGFyb3VuZCwgdXNlIGV2ZW50LnBlcnNpc3QoKS4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGFjdGlvbiwgcHJvcE5hbWUsIHJlc3VsdCkgOiB2b2lkIDA7XG4gIH1cbn0iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc3RhcnRlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICAvLyBEaXNwYXRjaCB0aGUgaW50ZXJydXB0IGV2ZW50LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuIE5vIGludGVycnVwdCBldmVudCBpcyBkaXNwYXRjaGVkXG4gICAgICAvLyBiZWNhdXNlIHRoZSBjYW5jZWxsZWQgdHJhbnNpdGlvbnMgbmV2ZXIgc3RhcnRlZC4gTm90ZSB0aGF0IHRoaXMgYWxzb1xuICAgICAgLy8gcmVtb3ZlcyB0aGlzIHRyYW5zaXRpb24gZnJvbSB0aGUgcGVuZGluZyBsaXN0IVxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChudWxsLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgaWYgKGFjdGl2ZSkgc2NoZWR1bGUub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2VlblwiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZVxufTtcbiIsImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHttYXRjaGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQobmFtZSkgPyBpbml0IDogc2V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlICsgXCJcIikpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZVJlbW92ZShuYW1lLCBpKSlcbiAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcbiAgICAgIDogdGhpcy5zdHlsZVR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUgKyBcIlwiKSwgcHJpb3JpdHkpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGltaW5nLnRpbWUgPSBub3coKSwgZGVmYXVsdFRpbWluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQge1NDSEVEVUxFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG52YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGk7XG5cbiAgaWYgKHNjaGVkdWxlcykge1xuICAgIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkuc3RhdGUgPiBTQ0hFRFVMRUQgJiYgc2NoZWR1bGUubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oW1tub2RlXV0sIHJvb3QsIG5hbWUsICtpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEcmFnRXZlbnQodGFyZ2V0LCB0eXBlLCBzdWJqZWN0LCBpZCwgYWN0aXZlLCB4LCB5LCBkeCwgZHksIGRpc3BhdGNoKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICB0aGlzLmlkZW50aWZpZXIgPSBpZDtcbiAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG4gIHRoaXMuZHggPSBkeDtcbiAgdGhpcy5keSA9IGR5O1xuICB0aGlzLl8gPSBkaXNwYXRjaDtcbn1cblxuRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSB0aGlzLl8ub24uYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgPT09IHRoaXMuXyA/IHRoaXMgOiB2YWx1ZTtcbn07XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZHJhZywge3llc2RyYWd9IGZyb20gXCIuL25vZHJhZ1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBEcmFnRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZCkge1xuICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV2ZW50LngsIHk6IGV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBnZXN0dXJlcyA9IHt9LFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICBhY3RpdmUgPSAwLFxuICAgICAgbW91c2Vkb3dueCxcbiAgICAgIG1vdXNlZG93bnksXG4gICAgICBtb3VzZW1vdmluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGdlc3R1cmUgPSBiZWZvcmVzdGFydChcIm1vdXNlXCIsIGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBtb3VzZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCB0cnVlKTtcbiAgICBub2RyYWcoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIG1vdXNlbW92aW5nID0gZmFsc2U7XG4gICAgbW91c2Vkb3dueCA9IGV2ZW50LmNsaWVudFg7XG4gICAgbW91c2Vkb3dueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsIGR5ID0gZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgIG5vZXZlbnQoKTtcbiAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXNbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJlbmRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBzLCBkeCwgZHksXG4gICAgICAgIHN1Ymxpc3RlbmVycyA9IGxpc3RlbmVycy5jb3B5KCk7XG5cbiAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgoZXZlbnQuc3ViamVjdCA9IHMgPSBzdWJqZWN0LmFwcGx5KHRoYXQsIGFyZ3MpKSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkpIHJldHVybjtcblxuICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkXSwgLS1hY3RpdmU7IC8vIG5vYnJlYWtcbiAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgdHlwZSwgcywgaWQsIG4sIHBbMF0gKyBkeCwgcFsxXSArIGR5LCBwWzBdIC0gcDBbMF0sIHBbMV0gLSBwMFsxXSwgc3VibGlzdGVuZXJzKSwgc3VibGlzdGVuZXJzLmFwcGx5LCBzdWJsaXN0ZW5lcnMsIFt0eXBlLCB0aGF0LCBhcmdzXSk7XG4gICAgfTtcbiAgfVxuXG4gIGRyYWcuZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gIH07XG5cbiAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBjb250YWluZXI7XG4gIH07XG5cbiAgZHJhZy5zdWJqZWN0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN1YmplY3QgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gIH07XG5cbiAgZHJhZy50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgfTtcblxuICBkcmFnLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIGRyYWcpIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gZHJhZztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICAhKGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJykgOiBfcHJvZEludmFyaWFudCgnMjUnKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgLy8gQ2FzdGluZyBhcyBhbnkgc28gdGhhdCBmbG93IGlnbm9yZXMgdGhlIGFjdHVhbCBpbXBsZW1lbnRhdGlvbiBhbmQgdHJ1c3RzXG4gIC8vIGl0IHRvIG1hdGNoIHRoZSB0eXBlIHdlIGRlY2xhcmVkXG4gIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gIH1cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuICBmb3VyQXJndW1lbnRQb29sZXI6IGZvdXJBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX196b29tIHx8IGlkZW50aXR5O1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVab29tfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBab29tRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCB7VHJhbnNmb3JtLCBpZGVudGl0eX0gZnJvbSBcIi4vdHJhbnNmb3JtXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnRcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIGUgPSB0aGlzLCB3LCBoO1xuICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICB3ID0gZS53aWR0aC5iYXNlVmFsLnZhbHVlO1xuICAgIGggPSBlLmhlaWdodC5iYXNlVmFsLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHcgPSBlLmNsaWVudFdpZHRoO1xuICAgIGggPSBlLmNsaWVudEhlaWdodDtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW3csIGhdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgcmV0dXJuIHRoaXMuX196b29tIHx8IGlkZW50aXR5O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2hlZWxEZWx0YSgpIHtcbiAgcmV0dXJuIC1ldmVudC5kZWx0YVkgKiAoZXZlbnQuZGVsdGFNb2RlID8gMTIwIDogMSkgLyA1MDA7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBcIm9udG91Y2hzdGFydFwiIGluIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkge1xuICB2YXIgZHgwID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVswXSxcbiAgICAgIGR4MSA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMF0sXG4gICAgICBkeTAgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzFdLFxuICAgICAgZHkxID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVsxXTtcbiAgcmV0dXJuIHRyYW5zZm9ybS50cmFuc2xhdGUoXG4gICAgZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLFxuICAgIGR5MSA+IGR5MCA/IChkeTAgKyBkeTEpIC8gMiA6IE1hdGgubWluKDAsIGR5MCkgfHwgTWF0aC5tYXgoMCwgZHkxKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgY29uc3RyYWluID0gZGVmYXVsdENvbnN0cmFpbixcbiAgICAgIHdoZWVsRGVsdGEgPSBkZWZhdWx0V2hlZWxEZWx0YSxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGdlc3R1cmVzID0gW10sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKVxuICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxuICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuem9vbSB0b3VjaGNhbmNlbC56b29tXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGNvbGxlY3Rpb24uc2VsZWN0aW9uID8gY29sbGVjdGlvbi5zZWxlY3Rpb24oKSA6IGNvbGxlY3Rpb247XG4gICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHNjaGVkdWxlKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGspIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0pO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaykge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBjZW50cm9pZChlKSxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAgPSBjZW50cm9pZChlKTtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkudHJhbnNsYXRlKHBbMF0sIHBbMV0pLnNjYWxlKHQuaykudHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15XG4gICAgICApLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xuICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIGspKTtcbiAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtLCBwMCwgcDEpIHtcbiAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtLnggJiYgeSA9PT0gdHJhbnNmb3JtLnkgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybS5rLCB4LCB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgIHJldHVybiBbKCtleHRlbnRbMF1bMF0gKyArZXh0ZW50WzFdWzBdKSAvIDIsICgrZXh0ZW50WzBdWzFdICsgK2V4dGVudFsxXVsxXSkgLyAyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgY2VudGVyKSB7XG4gICAgdHJhbnNpdGlvblxuICAgICAgICAub24oXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuc3RhcnQoKTsgfSlcbiAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBlID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBwID0gY2VudGVyIHx8IGNlbnRyb2lkKGUpLFxuICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcbiAgICAgICAgICAgICAgYSA9IHRoYXQuX196b29tLFxuICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gMSkgdCA9IGI7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yIG9uIGVuZC5cbiAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICBnLnpvb20obnVsbCwgdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXN0dXJlKHRoYXQsIGFyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdlc3R1cmVzLmxlbmd0aCwgZzsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChnID0gZ2VzdHVyZXNbaV0pLnRoYXQgPT09IHRoYXQpIHtcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgR2VzdHVyZSh0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgR2VzdHVyZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGdlc3R1cmVzLnB1c2godGhpcykgLSAxO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgZ2VzdHVyZXMuc3BsaWNlKHRoaXMuaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IFpvb21FdmVudCh6b29tLCB0eXBlLCB0aGlzLnRoYXQuX196b29tKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB3aGVlbGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCB0LmsgKiBNYXRoLnBvdygyLCB3aGVlbERlbHRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSksXG4gICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgIC8vIElmIHRoZXJlIHdlcmUgcmVjZW50IHdoZWVsIGV2ZW50cywgcmVzZXQgdGhlIHdoZWVsIGlkbGUgdGltZW91dC5cbiAgICBpZiAoZy53aGVlbCkge1xuICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICBnLm1vdXNlWzFdID0gdC5pbnZlcnQoZy5tb3VzZVswXSA9IHApO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgIGVsc2Uge1xuICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbm9ldmVudCgpO1xuICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG5cbiAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdiA9IHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gbW91c2UodGhpcyksXG4gICAgICAgIHgwID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTAgPSBldmVudC5jbGllbnRZO1xuXG4gICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIGlmICghZy5tb3ZlZCkge1xuICAgICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0geDAsIGR5ID0gZXZlbnQuY2xpZW50WSAtIHkwO1xuICAgICAgICBnLm1vdmVkID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IG1vdXNlKGcudGhhdCksIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuXG4gICAgbm9ldmVudCgpO1xuICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCk7XG4gICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBzdGFydGVkLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHAsIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgZWxzZSBpZiAoIWcudG91Y2gxKSBnLnRvdWNoMSA9IHA7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIGRibHRhcCwgcmVyb3V0ZSB0byB0aGUgKG9wdGlvbmFsKSBkYmxjbGljay56b29tIGhhbmRsZXIuXG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHtcbiAgICAgIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgICBpZiAoIWcudG91Y2gxKSB7XG4gICAgICAgIGcuZW5kKCk7XG4gICAgICAgIHAgPSBzZWxlY3QodGhpcykub24oXCJkYmxjbGljay56b29tXCIpO1xuICAgICAgICBpZiAocCkgcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIHRvdWNoc3RhcnRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaHN0YXJ0aW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHAsIGw7XG5cbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICB9XG4gICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xuICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO1xuICAgIGVsc2UgZy5lbmQoKTtcbiAgfVxuXG4gIHpvb20ud2hlZWxEZWx0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3aGVlbERlbHRhID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHpvb20pIDogd2hlZWxEZWx0YTtcbiAgfTtcblxuICB6b29tLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogZmlsdGVyO1xuICB9O1xuXG4gIHpvb20udG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgem9vbS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGVFeHRlbnRbMF0gPSArX1swXSwgc2NhbGVFeHRlbnRbMV0gPSArX1sxXSwgem9vbSkgOiBbc2NhbGVFeHRlbnRbMF0sIHNjYWxlRXh0ZW50WzFdXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGVFeHRlbnRbMF1bMF0gPSArX1swXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzBdID0gK19bMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXSA9ICtfWzBdWzFdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV0gPSArX1sxXVsxXSwgem9vbSkgOiBbW3RyYW5zbGF0ZUV4dGVudFswXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdXSwgW3RyYW5zbGF0ZUV4dGVudFsxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgem9vbS5jb25zdHJhaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29uc3RyYWluID0gXywgem9vbSkgOiBjb25zdHJhaW47XG4gIH07XG5cbiAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICB9O1xuXG4gIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHpvb20ub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICB9O1xuXG4gIHpvb20uY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgem9vbSkgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RCYXNlQ2xhc3NlcyA9IHJlcXVpcmUoJy4vUmVhY3RCYXNlQ2xhc3NlcycpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHJlcXVpcmUoJy4vUmVhY3RET01GYWN0b3JpZXMnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnLi9jcmVhdGVDbGFzcycpO1xudmFyIG9ubHlDaGlsZCA9IHJlcXVpcmUoJy4vb25seUNoaWxkJyk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSByZXF1aXJlKCcuL2xvd1ByaW9yaXR5V2FybmluZycpO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG4gIHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xuICB2YXIgZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQgPSBmYWxzZTtcbiAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG4gIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jbG9uZUVsZW1lbnQ7XG59XG5cbnZhciBfX3NwcmVhZCA9IF9hc3NpZ247XG52YXIgY3JlYXRlTWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgcmV0dXJuIG1peGluO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5lZEZvclNwcmVhZCA9IGZhbHNlO1xuICB2YXIgd2FybmVkRm9yQ3JlYXRlTWl4aW4gPSBmYWxzZTtcbiAgX19zcHJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG93UHJpb3JpdHlXYXJuaW5nKHdhcm5lZEZvclNwcmVhZCwgJ1JlYWN0Ll9fc3ByZWFkIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gVXNlICcgKyAnT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgJyArICdzZW1hbnRpY3MuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8geW91ciBjb21waWxlci4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcHJlYWQtZGVwcmVjYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB3YXJuZWRGb3JTcHJlYWQgPSB0cnVlO1xuICAgIHJldHVybiBfYXNzaWduLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgY3JlYXRlTWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yQ3JlYXRlTWl4aW4sICdSZWFjdC5jcmVhdGVNaXhpbiBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuICcgKyAnSW4gUmVhY3QgdjE2LjAsIGl0IHdpbGwgYmUgcmVtb3ZlZC4gJyArICdZb3UgY2FuIHVzZSB0aGlzIG1peGluIGRpcmVjdGx5IGluc3RlYWQuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvY3JlYXRlbWl4aW4td2FzLW5ldmVyLWltcGxlbWVudGVkIGZvciBtb3JlIGluZm8uJyk7XG4gICAgd2FybmVkRm9yQ3JlYXRlTWl4aW4gPSB0cnVlO1xuICAgIHJldHVybiBtaXhpbjtcbiAgfTtcbn1cblxudmFyIFJlYWN0ID0ge1xuICAvLyBNb2Rlcm5cblxuICBDaGlsZHJlbjoge1xuICAgIG1hcDogUmVhY3RDaGlsZHJlbi5tYXAsXG4gICAgZm9yRWFjaDogUmVhY3RDaGlsZHJlbi5mb3JFYWNoLFxuICAgIGNvdW50OiBSZWFjdENoaWxkcmVuLmNvdW50LFxuICAgIHRvQXJyYXk6IFJlYWN0Q2hpbGRyZW4udG9BcnJheSxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcblxuICBDb21wb25lbnQ6IFJlYWN0QmFzZUNsYXNzZXMuQ29tcG9uZW50LFxuICBQdXJlQ29tcG9uZW50OiBSZWFjdEJhc2VDbGFzc2VzLlB1cmVDb21wb25lbnQsXG5cbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG4gIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG5cbiAgLy8gQ2xhc3NpY1xuXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGNyZWF0ZUNsYXNzOiBjcmVhdGVSZWFjdENsYXNzLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogY3JlYXRlTWl4aW4sXG5cbiAgLy8gVGhpcyBsb29rcyBET00gc3BlY2lmaWMgYnV0IHRoZXNlIGFyZSBhY3R1YWxseSBpc29tb3JwaGljIGhlbHBlcnNcbiAgLy8gc2luY2UgdGhleSBhcmUganVzdCBnZW5lcmF0aW5nIERPTSBzdHJpbmdzLlxuICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvLyBEZXByZWNhdGVkIGhvb2sgZm9yIEpTWCBzcHJlYWQsIGRvbid0IHVzZSB0aGlzIGZvciBhbnl0aGluZy5cbiAgX19zcHJlYWQ6IF9fc3ByZWFkXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgd2FybmVkRm9yQ3JlYXRlQ2xhc3MgPSBmYWxzZTtcbiAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LCAnUHJvcFR5cGVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhkaWRXYXJuUHJvcFR5cGVzRGVwcmVjYXRlZCwgJ0FjY2Vzc2luZyBQcm9wVHlwZXMgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwnICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluICBSZWFjdCB2MTYuMC4nICsgJyBVc2UgdGhlIGxhdGVzdCBhdmFpbGFibGUgdjE1LiogcHJvcC10eXBlcyBwYWNrYWdlIGZyb20gbnBtIGluc3RlYWQuJyArICcgRm9yIGluZm8gb24gdXNhZ2UsIGNvbXBhdGliaWxpdHksIG1pZ3JhdGlvbiBhbmQgbW9yZSwgc2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9wcm9wLXR5cGVzLWRvY3MnKTtcbiAgICAgICAgZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3QsICdjcmVhdGVDbGFzcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yQ3JlYXRlQ2xhc3MsICdBY2Nlc3NpbmcgY3JlYXRlQ2xhc3MgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwnICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IHYxNi4wLicgKyBcIiBVc2UgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzIGluc3RlYWQuIElmIHlvdSdyZSBub3QgeWV0IFwiICsgJ3JlYWR5IHRvIG1pZ3JhdGUsIGNyZWF0ZS1yZWFjdC1jbGFzcyB2MTUuKiBpcyBhdmFpbGFibGUgJyArICdvbiBucG0gYXMgYSB0ZW1wb3JhcnksIGRyb3AtaW4gcmVwbGFjZW1lbnQuICcgKyAnRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1jcmVhdGUtY2xhc3MnKTtcbiAgICAgICAgd2FybmVkRm9yQ3JlYXRlQ2xhc3MgPSB0cnVlO1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3RDbGFzcztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJlYWN0LkRPTSBmYWN0b3JpZXMgYXJlIGRlcHJlY2F0ZWQuIFdyYXAgdGhlc2UgbWV0aG9kcyBzbyB0aGF0XG4gIC8vIGludm9jYXRpb25zIG9mIHRoZSBSZWFjdC5ET00gbmFtZXNwYWNlIGFuZCBhbGVydCB1c2VycyB0byBzd2l0Y2hcbiAgLy8gdG8gdGhlIGByZWFjdC1kb20tZmFjdG9yaWVzYCBwYWNrYWdlLlxuICBSZWFjdC5ET00gPSB7fTtcbiAgdmFyIHdhcm5lZEZvckZhY3RvcmllcyA9IGZhbHNlO1xuICBPYmplY3Qua2V5cyhSZWFjdERPTUZhY3RvcmllcykuZm9yRWFjaChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIFJlYWN0LkRPTVtmYWN0b3J5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghd2FybmVkRm9yRmFjdG9yaWVzKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhmYWxzZSwgJ0FjY2Vzc2luZyBmYWN0b3JpZXMgbGlrZSBSZWFjdC5ET00uJXMgaGFzIGJlZW4gZGVwcmVjYXRlZCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LjArLiBVc2UgdGhlICcgKyAncmVhY3QtZG9tLWZhY3RvcmllcyBwYWNrYWdlIGluc3RlYWQuICcgKyAnIFZlcnNpb24gMS4wIHByb3ZpZGVzIGEgZHJvcC1pbiByZXBsYWNlbWVudC4nICsgJyBGb3IgbW9yZSBpbmZvLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1kb20tZmFjdG9yaWVzJywgZmFjdG9yeSk7XG4gICAgICAgIHdhcm5lZEZvckZhY3RvcmllcyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RET01GYWN0b3JpZXNbZmFjdG9yeV0uYXBwbHkoUmVhY3RET01GYWN0b3JpZXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRTeW1ib2wnKTtcblxudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBrZXk6IHRydWUsXG4gIHJlZjogdHJ1ZSxcbiAgX19zZWxmOiB0cnVlLFxuICBfX3NvdXJjZTogdHJ1ZVxufTtcblxudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duLCBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bjtcblxuZnVuY3Rpb24gaGFzVmFsaWRSZWYoY29uZmlnKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAncmVmJykpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ3JlZicpLmdldDtcbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaGFzVmFsaWRLZXkoY29uZmlnKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ2tleScpLmdldDtcbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCBkaXNwbGF5TmFtZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9O1xuICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdrZXknLCB7XG4gICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdLZXksXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ1JlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIHdhcm5BYm91dEFjY2Vzc2luZ1JlZi5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZixcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBubyBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIHdvcmsuIEluc3RlYWQgdGVzdCAkJHR5cGVvZiBmaWVsZCBhZ2FpbnN0IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSB0byBjaGVja1xuICogaWYgc29tZXRoaW5nIGlzIGEgUmVhY3QgRWxlbWVudC5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBzZWxmIEEgKnRlbXBvcmFyeSogaGVscGVyIHRvIGRldGVjdCBwbGFjZXMgd2hlcmUgYHRoaXNgIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlXG4gKiBjYW4gd2Fybi4gV2Ugd2FudCB0byBnZXQgcmlkIG9mIG93bmVyIGFuZCByZXBsYWNlIHN0cmluZyBgcmVmYHMgd2l0aCBhcnJvd1xuICogZnVuY3Rpb25zLCBhbmQgYXMgbG9uZyBhcyBgdGhpc2AgYW5kIG93bmVyIGFyZSB0aGUgc2FtZSwgdGhlcmUgd2lsbCBiZSBub1xuICogY2hhbmdlIGluIGJlaGF2aW9yLlxuICogQHBhcmFtIHsqfSBzb3VyY2UgQW4gYW5ub3RhdGlvbiBvYmplY3QgKGFkZGVkIGJ5IGEgdHJhbnNwaWxlciBvciBvdGhlcndpc2UpXG4gKiBpbmRpY2F0aW5nIGZpbGVuYW1lLCBsaW5lIG51bWJlciwgYW5kL29yIG90aGVyIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHsqfSBvd25lclxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHZhciBlbGVtZW50ID0ge1xuICAgIC8vIFRoaXMgdGFnIGFsbG93IHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcblxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcblxuICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gICAgX293bmVyOiBvd25lclxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG5cbiAgICAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG4gICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NlbGYnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICB9KTtcbiAgICAgIC8vIFR3byBlbGVtZW50cyBjcmVhdGVkIGluIHR3byBkaWZmZXJlbnQgcGxhY2VzIHNob3VsZCBiZSBjb25zaWRlcmVkXG4gICAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNvdXJjZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgZWxlbWVudC5fc2VsZiA9IHNlbGY7XG4gICAgICBlbGVtZW50Ll9zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IG9mIHRoZSBnaXZlbiB0eXBlLlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNyZWF0ZWVsZW1lbnRcbiAqL1xuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIgcHJvcHMgPSB7fTtcblxuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7XG4gIHZhciBzZWxmID0gbnVsbDtcbiAgdmFyIHNvdXJjZSA9IG51bGw7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgfVxuICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7XG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgc2VsZiA9IGNvbmZpZy5fX3NlbGYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zZWxmO1xuICAgIHNvdXJjZSA9IGNvbmZpZy5fX3NvdXJjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NvdXJjZTtcbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShjaGlsZEFycmF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoa2V5IHx8IHJlZikge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcy4kJHR5cGVvZiA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcHMuJCR0eXBlb2YgIT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8ICdVbmtub3duJyA6IHR5cGU7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIFJlYWN0RWxlbWVudHMgb2YgYSBnaXZlbiB0eXBlLlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNyZWF0ZWZhY3RvcnlcbiAqL1xuUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gIC8vIEV4cG9zZSB0aGUgdHlwZSBvbiB0aGUgZmFjdG9yeSBhbmQgdGhlIHByb3RvdHlwZSBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyBlYXNpbHkgYWNjZXNzZWQgb24gZWxlbWVudHMuIEUuZy4gYDxGb28gLz4udHlwZSA9PT0gRm9vYC5cbiAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuICAvLyB0aGF0IGNyZWF0ZWQgdGhlIGVsZW1lbnQsIGFuZCBpdCBtYXkgbm90IGV2ZW4gYmUgYSBjb25zdHJ1Y3Rvci5cbiAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gIGZhY3RvcnkudHlwZSA9IHR5cGU7XG4gIHJldHVybiBmYWN0b3J5O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleSA9IGZ1bmN0aW9uIChvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQob2xkRWxlbWVudC50eXBlLCBuZXdLZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBvbGRFbGVtZW50LnByb3BzKTtcblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cbi8qKlxuICogQ2xvbmUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgdXNpbmcgZWxlbWVudCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2xvbmVlbGVtZW50XG4gKi9cblJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gT3JpZ2luYWwgcHJvcHMgYXJlIGNvcGllZFxuICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAvLyBTZWxmIGlzIHByZXNlcnZlZCBzaW5jZSB0aGUgb3duZXIgaXMgcHJlc2VydmVkLlxuICB2YXIgc2VsZiA9IGVsZW1lbnQuX3NlbGY7XG4gIC8vIFNvdXJjZSBpcyBwcmVzZXJ2ZWQgc2luY2UgY2xvbmVFbGVtZW50IGlzIHVubGlrZWx5IHRvIGJlIHRhcmdldGVkIGJ5IGFcbiAgLy8gdHJhbnNwaWxlciwgYW5kIHRoZSBvcmlnaW5hbCBzb3VyY2UgaXMgcHJvYmFibHkgYSBiZXR0ZXIgaW5kaWNhdG9yIG9mIHRoZVxuICAvLyB0cnVlIG93bmVyLlxuICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlO1xuXG4gIC8vIE93bmVyIHdpbGwgYmUgcHJlc2VydmVkLCB1bmxlc3MgcmVmIGlzIG92ZXJyaWRkZW5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIC8vIFNpbGVudGx5IHN0ZWFsIHRoZSByZWYgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB9XG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBvdmVycmlkZSBleGlzdGluZyBwcm9wc1xuICAgIHZhciBkZWZhdWx0UHJvcHM7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgICBkZWZhdWx0UHJvcHMgPSBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzO1xuICAgIH1cbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBpZiAoY29uZmlnW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcyk7XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuaXN2YWxpZGVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgY29tcG9uZW50LlxuICogQGZpbmFsXG4gKi9cblJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gY2hlY2tNYXNrKHZhbHVlLCBiaXRtYXNrKSB7XG4gIHJldHVybiAodmFsdWUgJiBiaXRtYXNrKSA9PT0gYml0bWFzaztcbn1cblxudmFyIERPTVByb3BlcnR5SW5qZWN0aW9uID0ge1xuICAvKipcbiAgICogTWFwcGluZyBmcm9tIG5vcm1hbGl6ZWQsIGNhbWVsY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gYSBjb25maWd1cmF0aW9uIHRoYXRcbiAgICogc3BlY2lmaWVzIGhvdyB0aGUgYXNzb2NpYXRlZCBET00gcHJvcGVydHkgc2hvdWxkIGJlIGFjY2Vzc2VkIG9yIHJlbmRlcmVkLlxuICAgKi9cbiAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4MSxcbiAgSEFTX0JPT0xFQU5fVkFMVUU6IDB4NCxcbiAgSEFTX05VTUVSSUNfVkFMVUU6IDB4OCxcbiAgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6IDB4MTAgfCAweDgsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4MjAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NQXR0cmlidXRlTmFtZXNwYWNlczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZXNwYWNlIFVSTC4gKEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSBubyBuYW1lc3BhY2UuKVxuICAgKlxuICAgKiBET01Qcm9wZXJ0eU5hbWVzOiBzaW1pbGFyIHRvIERPTUF0dHJpYnV0ZU5hbWVzIGJ1dCBmb3IgRE9NIHByb3BlcnRpZXMuXG4gICAqIFByb3BlcnR5IG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSBub3JtYWxpemVkIG5hbWUuXG4gICAqXG4gICAqIERPTU11dGF0aW9uTWV0aG9kczogUHJvcGVydGllcyB0aGF0IHJlcXVpcmUgc3BlY2lhbCBtdXRhdGlvbiBtZXRob2RzLiBJZlxuICAgKiBgdmFsdWVgIGlzIHVuZGVmaW5lZCwgdGhlIG11dGF0aW9uIG1ldGhvZCBzaG91bGQgdW5zZXQgdGhlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9tUHJvcGVydHlDb25maWcgdGhlIGNvbmZpZyBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqL1xuICBpbmplY3RET01Qcm9wZXJ0eUNvbmZpZzogZnVuY3Rpb24gKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIEluamVjdGlvbiA9IERPTVByb3BlcnR5SW5qZWN0aW9uO1xuICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXNwYWNlcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMgfHwge307XG4gICAgdmFyIERPTUF0dHJpYnV0ZU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXMgfHwge307XG4gICAgdmFyIERPTVByb3BlcnR5TmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01Qcm9wZXJ0eU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01NdXRhdGlvbk1ldGhvZHMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHMgfHwge307XG5cbiAgICBpZiAoZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpIHtcbiAgICAgIERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5wdXNoKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKSB7XG4gICAgICAhIURPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5IFxcJyVzXFwnIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gaW5qZWN0ZWQuIFlvdSBtYXkgYmUgYWNjaWRlbnRhbGx5IGluamVjdGluZyB0aGUgc2FtZSBET00gcHJvcGVydHkgY29uZmlnIHR3aWNlLCBvciB5b3UgbWF5IGJlIGluamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJywgcHJvcE5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzQ4JywgcHJvcE5hbWUpIDogdm9pZCAwO1xuXG4gICAgICB2YXIgbG93ZXJDYXNlZCA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcHJvcENvbmZpZyA9IFByb3BlcnRpZXNbcHJvcE5hbWVdO1xuXG4gICAgICB2YXIgcHJvcGVydHlJbmZvID0ge1xuICAgICAgICBhdHRyaWJ1dGVOYW1lOiBsb3dlckNhc2VkLFxuICAgICAgICBhdHRyaWJ1dGVOYW1lc3BhY2U6IG51bGwsXG4gICAgICAgIHByb3BlcnR5TmFtZTogcHJvcE5hbWUsXG4gICAgICAgIG11dGF0aW9uTWV0aG9kOiBudWxsLFxuXG4gICAgICAgIG11c3RVc2VQcm9wZXJ0eTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSksXG4gICAgICAgIGhhc0Jvb2xlYW5WYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRSksXG4gICAgICAgIGhhc051bWVyaWNWYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSksXG4gICAgICAgIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKVxuICAgICAgfTtcbiAgICAgICEocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSArIHByb3BlcnR5SW5mby5oYXNOdW1lcmljVmFsdWUgKyBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSA8PSAxKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yIG51bWVyaWMgdmFsdWUsIGJ1dCBub3QgYSBjb21iaW5hdGlvbjogJXMnLCBwcm9wTmFtZSkgOiBfcHJvZEludmFyaWFudCgnNTAnLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2xvd2VyQ2FzZWRdID0gcHJvcE5hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChET01BdHRyaWJ1dGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBET01BdHRyaWJ1dGVOYW1lc1twcm9wTmFtZV07XG4gICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChET01BdHRyaWJ1dGVOYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZXNwYWNlID0gRE9NQXR0cmlidXRlTmFtZXNwYWNlc1twcm9wTmFtZV07XG4gICAgICB9XG5cbiAgICAgIGlmIChET01Qcm9wZXJ0eU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lID0gRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV07XG4gICAgICB9XG5cbiAgICAgIGlmIChET01NdXRhdGlvbk1ldGhvZHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZCA9IERPTU11dGF0aW9uTWV0aG9kc1twcm9wTmFtZV07XG4gICAgICB9XG5cbiAgICAgIERPTVByb3BlcnR5LnByb3BlcnRpZXNbcHJvcE5hbWVdID0gcHJvcGVydHlJbmZvO1xuICAgIH1cbiAgfVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xudmFyIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgPSAnOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuLyoqXG4gKiBET01Qcm9wZXJ0eSBleHBvcnRzIGxvb2t1cCBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgbGlrZSBmdW5jdGlvbnM6XG4gKlxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2lkJ11cbiAqICAgdHJ1ZVxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2Zvb2JhciddXG4gKiAgIHVuZGVmaW5lZFxuICpcbiAqIEFsdGhvdWdoIHRoaXMgbWF5IGJlIGNvbmZ1c2luZywgaXQgcGVyZm9ybXMgYmV0dGVyIGluIGdlbmVyYWwuXG4gKlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktZXhpc3RzXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1taXNzaW5nXG4gKi9cbnZhciBET01Qcm9wZXJ0eSA9IHtcbiAgSURfQVRUUklCVVRFX05BTUU6ICdkYXRhLXJlYWN0aWQnLFxuICBST09UX0FUVFJJQlVURV9OQU1FOiAnZGF0YS1yZWFjdHJvb3QnLFxuXG4gIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVI6IEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIsXG4gIEFUVFJJQlVURV9OQU1FX0NIQVI6IEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXFxcXC0uMC05XFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDAnLFxuXG4gIC8qKlxuICAgKiBNYXAgZnJvbSBwcm9wZXJ0eSBcInN0YW5kYXJkIG5hbWVcIiB0byBhbiBvYmplY3Qgd2l0aCBpbmZvIGFib3V0IGhvdyB0byBzZXRcbiAgICogdGhlIHByb3BlcnR5IGluIHRoZSBET00uIEVhY2ggb2JqZWN0IGNvbnRhaW5zOlxuICAgKlxuICAgKiBhdHRyaWJ1dGVOYW1lOlxuICAgKiAgIFVzZWQgd2hlbiByZW5kZXJpbmcgbWFya3VwIG9yIHdpdGggYCpBdHRyaWJ1dGUoKWAuXG4gICAqIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICAgKiBwcm9wZXJ0eU5hbWU6XG4gICAqICAgVXNlZCBvbiBET00gbm9kZSBpbnN0YW5jZXMuIChUaGlzIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBtdXRhdGUgZHVlIHRvXG4gICAqICAgZXh0ZXJuYWwgZmFjdG9ycy4pXG4gICAqIG11dGF0aW9uTWV0aG9kOlxuICAgKiAgIElmIG5vbi1udWxsLCB1c2VkIGluc3RlYWQgb2YgdGhlIHByb3BlcnR5IG9yIGBzZXRBdHRyaWJ1dGUoKWAgYWZ0ZXJcbiAgICogICBpbml0aWFsIHJlbmRlci5cbiAgICogbXVzdFVzZVByb3BlcnR5OlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgYWNjZXNzZWQgYW5kIG11dGF0ZWQgYXMgYW4gb2JqZWN0IHByb3BlcnR5LlxuICAgKiBoYXNCb29sZWFuVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIGhhc051bWVyaWNWYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBudW1lcmljIGFuZCBzaG91bGQgYmVcbiAgICogICByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIHBvc2l0aXZlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBwb3NpdGl2ZVxuICAgKiAgIG51bWVyaWMgYW5kIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS5cbiAgICogICBSZW1vdmVkIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW5cbiAgICogICBzdHJpY3RseSBlcXVhbCB0byB0cnVlOyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvdGhlcndpc2UuXG4gICAqL1xuICBwcm9wZXJ0aWVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGxvd2VyY2FzZSBwcm9wZXJ0eSBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbiwgdXNlZFxuICAgKiB0byB3YXJuIGluIHRoZSBjYXNlIG9mIG1pc3NpbmcgcHJvcGVydGllcy4gQXZhaWxhYmxlIG9ubHkgaW4gX19ERVZfXy5cbiAgICpcbiAgICogYXV0b2ZvY3VzIGlzIHByZWRlZmluZWQsIGJlY2F1c2UgYWRkaW5nIGl0IHRvIHRoZSBwcm9wZXJ0eSB3aGl0ZWxpc3RcbiAgICogY2F1c2VzIHVuaW50ZW5kZWQgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0UG9zc2libGVTdGFuZGFyZE5hbWU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7IGF1dG9mb2N1czogJ2F1dG9Gb2N1cycgfSA6IG51bGwsXG5cbiAgLyoqXG4gICAqIEFsbCBvZiB0aGUgaXNDdXN0b21BdHRyaWJ1dGUoKSBmdW5jdGlvbnMgdGhhdCBoYXZlIGJlZW4gaW5qZWN0ZWQuXG4gICAqL1xuICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIHByb3BlcnR5IG5hbWUgaXMgYSBjdXN0b20gYXR0cmlidXRlLlxuICAgKiBAbWV0aG9kXG4gICAqL1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlzQ3VzdG9tQXR0cmlidXRlRm4gPSBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07XG4gICAgICBpZiAoaXNDdXN0b21BdHRyaWJ1dGVGbihhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGluamVjdGlvbjogRE9NUHJvcGVydHlJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVmID0gcmVxdWlyZSgnLi9SZWFjdFJlZicpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gdGhlIGNvbnRhaW5pbmcgaG9zdCBjb21wb25lbnQgaW5zdGFuY2VcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBpbmZvIGFib3V0IHRoZSBob3N0IGNvbnRhaW5lclxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgcGFyZW50RGVidWdJRCkgLy8gMCBpbiBwcm9kdWN0aW9uIGFuZCBmb3Igcm9vdHNcbiAge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVNb3VudENvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCwgcGFyZW50RGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtYXJrdXAgPSBpbnRlcm5hbEluc3RhbmNlLm1vdW50Q29tcG9uZW50KHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgcGFyZW50RGVidWdJRCk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWx1ZSB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAgICogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXAuXG4gICAqL1xuICBnZXRIb3N0Tm9kZTogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZS5nZXRIb3N0Tm9kZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgc2FmZWx5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZVVubW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpO1xuICAgIGludGVybmFsSW5zdGFuY2UudW5tb3VudENvbXBvbmVudChzYWZlbHkpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIGEgY29tcG9uZW50IHVzaW5nIGEgbmV3IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IHByZXZFbGVtZW50ICYmIGNvbnRleHQgPT09IGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIHtcbiAgICAgIC8vIFNpbmNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgYWZ0ZXIgdGhlIG93bmVyIGlzIHJlbmRlcmVkLFxuICAgICAgLy8gd2UgY2FuIGRvIGEgY2hlYXAgaWRlbnRpdHkgY29tcGFyZSBoZXJlIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGFcbiAgICAgIC8vIHN1cGVyZmx1b3VzIHJlY29uY2lsZS4gSXQncyBwb3NzaWJsZSBmb3Igc3RhdGUgdG8gYmUgbXV0YWJsZSBidXQgc3VjaFxuICAgICAgLy8gY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiB0aGUgb3duZXIgd2hpY2ggd291bGQgcmVjcmVhdGVcbiAgICAgIC8vIHRoZSBlbGVtZW50LiBXZSBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIG93bmVyIHNpbmNlXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciBhbiBlbGVtZW50IGNyZWF0ZWQgb3V0c2lkZSBhIGNvbXBvc2l0ZSB0byBiZVxuICAgICAgLy8gZGVlcGx5IG11dGF0ZWQgYW5kIHJldXNlZC5cblxuICAgICAgLy8gVE9ETzogQmFpbGluZyBvdXQgZWFybHkgaXMganVzdCBhIHBlcmYgb3B0aW1pemF0aW9uIHJpZ2h0P1xuICAgICAgLy8gVE9ETzogUmVtb3ZpbmcgdGhlIHJldHVybiBzdGF0ZW1lbnQgc2hvdWxkIGFmZmVjdCBjb3JyZWN0bmVzcz9cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsIG5leHRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVmc0NoYW5nZWQgPSBSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgcHJldkVsZW1lbnQpO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgaWYgKHJlZnNDaGFuZ2VkICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyICE9PSB1cGRhdGVCYXRjaE51bWJlcikge1xuICAgICAgLy8gVGhlIGNvbXBvbmVudCdzIGVucXVldWVkIGJhdGNoIG51bWJlciBzaG91bGQgYWx3YXlzIGJlIHRoZSBjdXJyZW50XG4gICAgICAvLyBiYXRjaCBvciB0aGUgZm9sbG93aW5nIG9uZS5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwgfHwgaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgPT09IHVwZGF0ZUJhdGNoTnVtYmVyICsgMSwgJ3BlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogVW5leHBlY3RlZCBiYXRjaCBudW1iZXIgKGN1cnJlbnQgJXMsICcgKyAncGVuZGluZyAlcyknLCB1cGRhdGVCYXRjaE51bWJlciwgaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NTmFtZXNwYWNlcyA9IHJlcXVpcmUoJy4vRE9NTmFtZXNwYWNlcycpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbi8qKlxuICogSW4gSUUgKDgtMTEpIGFuZCBFZGdlLCBhcHBlbmRpbmcgbm9kZXMgd2l0aCBubyBjaGlsZHJlbiBpcyBkcmFtYXRpY2FsbHlcbiAqIGZhc3RlciB0aGFuIGFwcGVuZGluZyBhIGZ1bGwgc3VidHJlZSwgc28gd2UgZXNzZW50aWFsbHkgcXVldWUgdXAgdGhlXG4gKiAuYXBwZW5kQ2hpbGQgY2FsbHMgaGVyZSBhbmQgYXBwbHkgdGhlbSBzbyBlYWNoIG5vZGUgaXMgYWRkZWQgdG8gaXRzIHBhcmVudFxuICogYmVmb3JlIGFueSBjaGlsZHJlbiBhcmUgYWRkZWQuXG4gKlxuICogSW4gb3RoZXIgYnJvd3NlcnMsIGRvaW5nIHNvIGlzIHNsb3dlciBvciBuZXV0cmFsIGNvbXBhcmVkIHRvIHRoZSBvdGhlciBvcmRlclxuICogKGluIEZpcmVmb3gsIHR3aWNlIGFzIHNsb3cpIHNvIHdlIG9ubHkgZG8gdGhpcyBpbnZlcnNpb24gaW4gSUUuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zcGljeWovaW5uZXJodG1sLXZzLWNyZWF0ZWVsZW1lbnQtdnMtY2xvbmVub2RlLlxuICovXG52YXIgZW5hYmxlTGF6eSA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIC9cXGJFZGdlXFwvXFxkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5mdW5jdGlvbiBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSkge1xuICBpZiAoIWVuYWJsZUxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vZGUgPSB0cmVlLm5vZGU7XG4gIHZhciBjaGlsZHJlbiA9IHRyZWUuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRUcmVlQmVmb3JlKG5vZGUsIGNoaWxkcmVuW2ldLCBudWxsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHJlZS5odG1sICE9IG51bGwpIHtcbiAgICBzZXRJbm5lckhUTUwobm9kZSwgdHJlZS5odG1sKTtcbiAgfSBlbHNlIGlmICh0cmVlLnRleHQgIT0gbnVsbCkge1xuICAgIHNldFRleHRDb250ZW50KG5vZGUsIHRyZWUudGV4dCk7XG4gIH1cbn1cblxudmFyIGluc2VydFRyZWVCZWZvcmUgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChwYXJlbnROb2RlLCB0cmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gIC8vIERvY3VtZW50RnJhZ21lbnRzIGFyZW4ndCBhY3R1YWxseSBwYXJ0IG9mIHRoZSBET00gYWZ0ZXIgaW5zZXJ0aW9uIHNvXG4gIC8vIGFwcGVuZGluZyBjaGlsZHJlbiB3b24ndCB1cGRhdGUgdGhlIERPTS4gV2UgbmVlZCB0byBlbnN1cmUgdGhlIGZyYWdtZW50XG4gIC8vIGlzIHByb3Blcmx5IHBvcHVsYXRlZCBmaXJzdCwgYnJlYWtpbmcgb3V0IG9mIG91ciBsYXp5IGFwcHJvYWNoIGZvciBqdXN0XG4gIC8vIHRoaXMgbGV2ZWwuIEFsc28sIHNvbWUgPG9iamVjdD4gcGx1Z2lucyAobGlrZSBGbGFzaCBQbGF5ZXIpIHdpbGwgcmVhZFxuICAvLyA8cGFyYW0+IG5vZGVzIGltbWVkaWF0ZWx5IHVwb24gaW5zZXJ0aW9uIGludG8gdGhlIERPTSwgc28gPG9iamVjdD5cbiAgLy8gbXVzdCBhbHNvIGJlIHBvcHVsYXRlZCBwcmlvciB0byBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICBpZiAodHJlZS5ub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgfHwgdHJlZS5ub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSAmJiB0cmVlLm5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29iamVjdCcgJiYgKHRyZWUubm9kZS5uYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCB0cmVlLm5vZGUubmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpKSB7XG4gICAgaW5zZXJ0VHJlZUNoaWxkcmVuKHRyZWUpO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRyZWUubm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGROb2RlLCBuZXdUcmVlKSB7XG4gIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VHJlZS5ub2RlLCBvbGROb2RlKTtcbiAgaW5zZXJ0VHJlZUNoaWxkcmVuKG5ld1RyZWUpO1xufVxuXG5mdW5jdGlvbiBxdWV1ZUNoaWxkKHBhcmVudFRyZWUsIGNoaWxkVHJlZSkge1xuICBpZiAoZW5hYmxlTGF6eSkge1xuICAgIHBhcmVudFRyZWUuY2hpbGRyZW4ucHVzaChjaGlsZFRyZWUpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFRyZWUubm9kZS5hcHBlbmRDaGlsZChjaGlsZFRyZWUubm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVldWVIVE1MKHRyZWUsIGh0bWwpIHtcbiAgaWYgKGVuYWJsZUxhenkpIHtcbiAgICB0cmVlLmh0bWwgPSBodG1sO1xuICB9IGVsc2Uge1xuICAgIHNldElubmVySFRNTCh0cmVlLm5vZGUsIGh0bWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXVlVGV4dCh0cmVlLCB0ZXh0KSB7XG4gIGlmIChlbmFibGVMYXp5KSB7XG4gICAgdHJlZS50ZXh0ID0gdGV4dDtcbiAgfSBlbHNlIHtcbiAgICBzZXRUZXh0Q29udGVudCh0cmVlLm5vZGUsIHRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdGhpcy5ub2RlLm5vZGVOYW1lO1xufVxuXG5mdW5jdGlvbiBET01MYXp5VHJlZShub2RlKSB7XG4gIHJldHVybiB7XG4gICAgbm9kZTogbm9kZSxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgaHRtbDogbnVsbCxcbiAgICB0ZXh0OiBudWxsLFxuICAgIHRvU3RyaW5nOiB0b1N0cmluZ1xuICB9O1xufVxuXG5ET01MYXp5VHJlZS5pbnNlcnRUcmVlQmVmb3JlID0gaW5zZXJ0VHJlZUJlZm9yZTtcbkRPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlID0gcmVwbGFjZUNoaWxkV2l0aFRyZWU7XG5ET01MYXp5VHJlZS5xdWV1ZUNoaWxkID0gcXVldWVDaGlsZDtcbkRPTUxhenlUcmVlLnF1ZXVlSFRNTCA9IHF1ZXVlSFRNTDtcbkRPTUxhenlUcmVlLnF1ZXVlVGV4dCA9IHF1ZXVlVGV4dDtcblxubW9kdWxlLmV4cG9ydHMgPSBET01MYXp5VHJlZTsiLCJleHBvcnQgZnVuY3Rpb24gbGluZWFyKHQpIHtcbiAgcmV0dXJuICt0O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHF1YWRJbih0KSB7XG4gIHJldHVybiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YWRPdXQodCkge1xuICByZXR1cm4gdCAqICgyIC0gdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCA6IC0tdCAqICgyIC0gdCkgKyAxKSAvIDI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsInZhciBleHBvbmVudCA9IDM7XG5cbmV4cG9ydCB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgfVxuXG4gIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluO1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICB9XG5cbiAgcG9seU91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seU91dDtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gIH1cblxuICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbk91dDtcbn0pKGV4cG9uZW50KTtcbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luSW5PdXQodCkge1xuICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZXhwSW4odCkge1xuICByZXR1cm4gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwT3V0KHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnBvdygyLCAtMTAgKiB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cEluT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApIDogMiAtIE1hdGgucG93KDIsIDEwIC0gMTAgKiB0KSkgLyAyO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZU91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCkgOiBNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSAvIDI7XG59XG4iLCJ2YXIgYjEgPSA0IC8gMTEsXG4gICAgYjIgPSA2IC8gMTEsXG4gICAgYjMgPSA4IC8gMTEsXG4gICAgYjQgPSAzIC8gNCxcbiAgICBiNSA9IDkgLyAxMSxcbiAgICBiNiA9IDEwIC8gMTEsXG4gICAgYjcgPSAxNSAvIDE2LFxuICAgIGI4ID0gMjEgLyAyMixcbiAgICBiOSA9IDYzIC8gNjQsXG4gICAgYjAgPSAxIC8gYjEgLyBiMTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBib3VuY2VPdXQoMSAtIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgcmV0dXJuICh0ID0gK3QpIDwgYjEgPyBiMCAqIHQgKiB0IDogdCA8IGIzID8gYjAgKiAodCAtPSBiMikgKiB0ICsgYjQgOiB0IDwgYjYgPyBiMCAqICh0IC09IGI1KSAqIHQgKyBiNyA6IGIwICogKHQgLT0gYjgpICogdCArIGI5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XG59XG4iLCJ2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcblxuZXhwb3J0IHZhciBiYWNrSW4gPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gIH1cblxuICBiYWNrSW4ub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW47XG59KShvdmVyc2hvb3QpO1xuXG5leHBvcnQgdmFyIGJhY2tPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICB9XG5cbiAgYmFja091dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tPdXQ7XG59KShvdmVyc2hvb3QpO1xuXG5leHBvcnQgdmFyIGJhY2tJbk91dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDwgMSA/IHQgKiB0ICogKChzICsgMSkgKiB0IC0gcykgOiAodCAtPSAyKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDIpIC8gMjtcbiAgfVxuXG4gIGJhY2tJbk91dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbk91dDtcbn0pKG92ZXJzaG9vdCk7XG4iLCJ2YXIgdGF1ID0gMiAqIE1hdGguUEksXG4gICAgYW1wbGl0dWRlID0gMSxcbiAgICBwZXJpb2QgPSAwLjM7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAxMCAqIC0tdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW47XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCA9ICt0KSkgKiBNYXRoLnNpbigodCArIHMpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY091dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNPdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gIH1cblxuICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW5PdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBXQVJOSU5HOiBETyBOT1QgbWFudWFsbHkgcmVxdWlyZSB0aGlzIG1vZHVsZS5cbiAqIFRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgYGludmFyaWFudCguLi4pYCB1c2VkIGJ5IHRoZSBlcnJvciBjb2RlIHN5c3RlbVxuICogYW5kIHdpbGwgX29ubHlfIGJlIHJlcXVpcmVkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIGJhYmVsIHBhc3MuXG4gKiBJdCBhbHdheXMgdGhyb3dzLlxuICovXG5cbmZ1bmN0aW9uIHJlYWN0UHJvZEludmFyaWFudChjb2RlKSB7XG4gIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuXG4gIHZhciBtZXNzYWdlID0gJ01pbmlmaWVkIFJlYWN0IGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyAnaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9JyArIGNvZGU7XG5cbiAgZm9yICh2YXIgYXJnSWR4ID0gMDsgYXJnSWR4IDwgYXJnQ291bnQ7IGFyZ0lkeCsrKSB7XG4gICAgbWVzc2FnZSArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1thcmdJZHggKyAxXSk7XG4gIH1cblxuICBtZXNzYWdlICs9ICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50JyArICcgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJztcblxuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCByZWFjdFByb2RJbnZhcmlhbnQncyBvd24gZnJhbWVcblxuICB0aHJvdyBlcnJvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWFjdFByb2RJbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZSgnLi9hY2N1bXVsYXRlSW50bycpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoJy4vZm9yRWFjaEFjY3VtdWxhdGVkJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbn1cblxuLyoqXG4gKiBUYWdzIGEgYFN5bnRoZXRpY0V2ZW50YCB3aXRoIGRpc3BhdGNoZWQgbGlzdGVuZXJzLiBDcmVhdGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuICogTXV0YXRpbmcgdGhlIGV2ZW50J3MgbWVtYmVycyBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gY3JlYXRlIGEgd3JhcHBpbmdcbiAqIFwiZGlzcGF0Y2hcIiBvYmplY3QgdGhhdCBwYWlycyB0aGUgZXZlbnQgd2l0aCB0aGUgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoaW5zdCwgcGhhc2UsIGV2ZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdCwgJ0Rpc3BhdGNoaW5nIGluc3QgbXVzdCBub3QgYmUgbnVsbCcpIDogdm9pZCAwO1xuICB9XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShpbnN0LCBldmVudCwgcGhhc2UpO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW5ub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luVXRpbHMudHJhdmVyc2VUd29QaGFzZShldmVudC5fdGFyZ2V0SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZWAsIGJ1dCBza2lwcyBvdmVyIHRoZSB0YXJnZXRJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBldmVudC5fdGFyZ2V0SW5zdDtcbiAgICB2YXIgcGFyZW50SW5zdCA9IHRhcmdldEluc3QgPyBFdmVudFBsdWdpblV0aWxzLmdldFBhcmVudEluc3RhbmNlKHRhcmdldEluc3QpIDogbnVsbDtcbiAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UocGFyZW50SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgd2l0aG91dCByZWdhcmQgdG8gZGlyZWN0aW9uLCBkb2VzIG5vdCBsb29rIGZvciBwaGFzZWRcbiAqIHJlZ2lzdHJhdGlvbiBuYW1lcy4gU2FtZSBhcyBgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGVgIGJ1dCB3aXRob3V0XG4gKiByZXF1aXJpbmcgdGhhdCB0aGUgYGRpc3BhdGNoTWFya2VyYCBiZSB0aGUgc2FtZSBhcyB0aGUgZGlzcGF0Y2hlZCBJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpc3BhdGNoZXMoaW5zdCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG4gKiBgZGlzcGF0Y2hNYXJrZXJgLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5fdGFyZ2V0SW5zdCwgbnVsbCwgZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldChldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0bykge1xuICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgYWNjdW11bGF0ZURpc3BhdGNoZXMsIGxlYXZlLCBlbnRlcik7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbnQgYVxuICogc2luZ2xlIG9uZS5cbiAqXG4gKiBAY29uc3RydWN0b3IgRXZlbnRQcm9wYWdhdG9yc1xuICovXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0LFxuICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczogYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UHJvcGFnYXRvcnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblV0aWxzJyk7XG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZSgnLi9SZWFjdEVycm9yVXRpbHMnKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZSgnLi9hY2N1bXVsYXRlSW50bycpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoJy4vZm9yRWFjaEFjY3VtdWxhdGVkJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW50ZXJuYWwgc3RvcmUgZm9yIGV2ZW50IGxpc3RlbmVyc1xuICovXG52YXIgbGlzdGVuZXJCYW5rID0ge307XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24gKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCB0cnVlKTtcbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIGZhbHNlKTtcbn07XG5cbnZhciBnZXREaWN0aW9uYXJ5S2V5ID0gZnVuY3Rpb24gKGluc3QpIHtcbiAgLy8gUHJldmVudHMgVjggcGVyZm9ybWFuY2UgaXNzdWU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcyMzJcbiAgcmV0dXJuICcuJyArIGluc3QuX3Jvb3ROb2RlSUQ7XG59O1xuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KG5hbWUsIHR5cGUsIHByb3BzKSB7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ29uQ2xpY2snOlxuICAgIGNhc2UgJ29uQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZURvd24nOlxuICAgIGNhc2UgJ29uTW91c2VEb3duQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmUnOlxuICAgIGNhc2UgJ29uTW91c2VNb3ZlQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZVVwJzpcbiAgICBjYXNlICdvbk1vdXNlVXBDYXB0dXJlJzpcbiAgICAgIHJldHVybiAhIShwcm9wcy5kaXNhYmxlZCAmJiBpc0ludGVyYWN0aXZlKHR5cGUpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIHVuaWZpZWQgaW50ZXJmYWNlIGZvciBldmVudCBwbHVnaW5zIHRvIGJlIGluc3RhbGxlZCBhbmQgY29uZmlndXJlZC5cbiAqXG4gKiBFdmVudCBwbHVnaW5zIGNhbiBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgYGV4dHJhY3RFdmVudHNgIHtmdW5jdGlvbihzdHJpbmcsIERPTUV2ZW50VGFyZ2V0LCBzdHJpbmcsIG9iamVjdCk6ICp9XG4gKiAgICAgUmVxdWlyZWQuIFdoZW4gYSB0b3AtbGV2ZWwgZXZlbnQgaXMgZmlyZWQsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG4gKiAgICAgZXh0cmFjdCBzeW50aGV0aWMgZXZlbnRzIHRoYXQgd2lsbCBpbiB0dXJuIGJlIHF1ZXVlZCBhbmQgZGlzcGF0Y2hlZC5cbiAqXG4gKiAgIGBldmVudFR5cGVzYCB7b2JqZWN0fVxuICogICAgIE9wdGlvbmFsLCBwbHVnaW5zIHRoYXQgZmlyZSBldmVudHMgbXVzdCBwdWJsaXNoIGEgbWFwcGluZyBvZiByZWdpc3RyYXRpb25cbiAqICAgICBuYW1lcyB0aGF0IGFyZSB1c2VkIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy4gVmFsdWVzIG9mIHRoaXMgbWFwcGluZyBtdXN0XG4gKiAgICAgYmUgb2JqZWN0cyB0aGF0IGNvbnRhaW4gYHJlZ2lzdHJhdGlvbk5hbWVgIG9yIGBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc2AuXG4gKlxuICogICBgZXhlY3V0ZURpc3BhdGNoYCB7ZnVuY3Rpb24ob2JqZWN0LCBmdW5jdGlvbiwgc3RyaW5nKX1cbiAqICAgICBPcHRpb25hbCwgYWxsb3dzIHBsdWdpbnMgdG8gb3ZlcnJpZGUgaG93IGFuIGV2ZW50IGdldHMgZGlzcGF0Y2hlZC4gQnlcbiAqICAgICBkZWZhdWx0LCB0aGUgbGlzdGVuZXIgaXMgc2ltcGx5IGludm9rZWQuXG4gKlxuICogRWFjaCBwbHVnaW4gdGhhdCBpcyBpbmplY3RlZCBpbnRvIGBFdmVudHNQbHVnaW5IdWJgIGlzIGltbWVkaWF0ZWx5IG9wZXJhYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIEV2ZW50UGx1Z2luSHViID0ge1xuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG4gIH0sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBgbGlzdGVuZXJgIGF0IGBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1ba2V5XWAuIElzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0IFRoZSBpbnN0YW5jZSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBldmVudHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIHN0b3JlLlxuICAgKi9cbiAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uIChpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgICEodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IF9wcm9kSW52YXJpYW50KCc5NCcsIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBsaXN0ZW5lcikgOiB2b2lkIDA7XG5cbiAgICB2YXIga2V5ID0gZ2V0RGljdGlvbmFyeUtleShpbnN0KTtcbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gfHwgKGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSA9IHt9KTtcbiAgICBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtrZXldID0gbGlzdGVuZXI7XG5cbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS5kaWRQdXRMaXN0ZW5lcikge1xuICAgICAgUGx1Z2luTW9kdWxlLmRpZFB1dExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0IFRoZSBpbnN0YW5jZSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBldmVudHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICAgKi9cbiAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uIChpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgLy8gVE9ETzogc2hvdWxkUHJldmVudE1vdXNlRXZlbnQgaXMgRE9NLXNwZWNpZmljIGFuZCBkZWZpbml0ZWx5IHNob3VsZCBub3RcbiAgICAvLyBsaXZlIGhlcmU7IG5lZWRzIHRvIGJlIG1vdmVkIHRvIGEgYmV0dGVyIHBsYWNlIHNvb25cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgaWYgKHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGluc3QuX2N1cnJlbnRFbGVtZW50LnR5cGUsIGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtrZXldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbGlzdGVuZXIgZnJvbSB0aGUgcmVnaXN0cmF0aW9uIGJhbmsuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0IFRoZSBpbnN0YW5jZSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBldmVudHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICovXG4gIGRlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgLy8gVE9ETzogVGhpcyBzaG91bGQgbmV2ZXIgYmUgbnVsbCAtLSB3aGVuIGlzIGl0P1xuICAgIGlmIChiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgICBkZWxldGUgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVba2V5XTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5zdCBUaGUgaW5zdGFuY2UsIHdoaWNoIGlzIHRoZSBzb3VyY2Ugb2YgZXZlbnRzLlxuICAgKi9cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gbGlzdGVuZXJCYW5rKSB7XG4gICAgICBpZiAoIWxpc3RlbmVyQmFuay5oYXNPd25Qcm9wZXJ0eShyZWdpc3RyYXRpb25OYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1ba2V5XSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIpIHtcbiAgICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtrZXldO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWxsb3dzIHJlZ2lzdGVyZWQgcGx1Z2lucyBhbiBvcHBvcnR1bml0eSB0byBleHRyYWN0IGV2ZW50cyBmcm9tIHRvcC1sZXZlbFxuICAgKiBuYXRpdmUgYnJvd3NlciBldmVudHMuXG4gICAqXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIHBsdWdpbnMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuICAgICAgaWYgKHBvc3NpYmxlUGx1Z2luKSB7XG4gICAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgaWYgKGV4dHJhY3RlZEV2ZW50cykge1xuICAgICAgICAgIGV2ZW50cyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50cywgZXh0cmFjdGVkRXZlbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXZlbnRzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIHN5bnRoZXRpYyBldmVudCB0aGF0IHNob3VsZCBiZSBkaXNwYXRjaGVkIHdoZW5cbiAgICogYHByb2Nlc3NFdmVudFF1ZXVlYCBpcyBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50cyBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzRXZlbnRRdWV1ZTogZnVuY3Rpb24gKHNpbXVsYXRlZCkge1xuICAgIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgICAvLyBldmVudHMgZ2V0IGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcuXG4gICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICBldmVudFF1ZXVlID0gbnVsbDtcbiAgICBpZiAoc2ltdWxhdGVkKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwpO1xuICAgIH1cbiAgICAhIWV2ZW50UXVldWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nIGFuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuJykgOiBfcHJvZEludmFyaWFudCgnOTUnKSA6IHZvaWQgMDtcbiAgICAvLyBUaGlzIHdvdWxkIGJlIGEgZ29vZCB0aW1lIHRvIHJldGhyb3cgaWYgYW55IG9mIHRoZSBldmVudCBoYW5kbGVycyB0aHJldy5cbiAgICBSZWFjdEVycm9yVXRpbHMucmV0aHJvd0NhdWdodEVycm9yKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRlc3RzIG9ubHkuIERvIG5vdCB1c2UhXG4gICAqL1xuICBfX3B1cmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgbGlzdGVuZXJCYW5rID0ge307XG4gIH0sXG5cbiAgX19nZXRMaXN0ZW5lckJhbms6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luSHViOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudmlldykge1xuICAgICAgcmV0dXJuIGV2ZW50LnZpZXc7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICBpZiAodGFyZ2V0LndpbmRvdyA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyB0YXJnZXQgaXMgYSB3aW5kb3cgb2JqZWN0XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgaWYgKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgfSxcbiAgZGV0YWlsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQuZGV0YWlsIHx8IDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNVSUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1VJRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xuXG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHtcbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VNYXA7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBPQlNFUlZFRF9FUlJPUiA9IHt9O1xuXG4vKipcbiAqIGBUcmFuc2FjdGlvbmAgY3JlYXRlcyBhIGJsYWNrIGJveCB0aGF0IGlzIGFibGUgdG8gd3JhcCBhbnkgbWV0aG9kIHN1Y2ggdGhhdFxuICogY2VydGFpbiBpbnZhcmlhbnRzIGFyZSBtYWludGFpbmVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIG1ldGhvZCBpcyBpbnZva2VkXG4gKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcbiAqIGluc3RhbnRpYXRlcyBhIHRyYW5zYWN0aW9uIGNhbiBwcm92aWRlIGVuZm9yY2VycyBvZiB0aGUgaW52YXJpYW50cyBhdFxuICogY3JlYXRpb24gdGltZS4gVGhlIGBUcmFuc2FjdGlvbmAgY2xhc3MgaXRzZWxmIHdpbGwgc3VwcGx5IG9uZSBhZGRpdGlvbmFsXG4gKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG4gKiBzaG91bGQgbm90IGJlIHJ1biB3aGlsZSBpdCBpcyBhbHJlYWR5IGJlaW5nIHJ1bi4gWW91IHdvdWxkIHR5cGljYWxseSBjcmVhdGUgYVxuICogc2luZ2xlIGluc3RhbmNlIG9mIGEgYFRyYW5zYWN0aW9uYCBmb3IgcmV1c2UgbXVsdGlwbGUgdGltZXMsIHRoYXQgcG90ZW50aWFsbHlcbiAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG4gKiB0aGV5IG9ubHkgcmVxdWlyZSBpbXBsZW1lbnRpbmcgdHdvIG1ldGhvZHMuXG4gKlxuICogPHByZT5cbiAqICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVycyAoaW5qZWN0ZWQgYXQgY3JlYXRpb24gdGltZSlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB2ICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICArLS18ICAgIHdyYXBwZXIxICAgfC0tLXwtLS0tKyAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgKy0tLS0tLS0tLS0tLS0tLSsgICB2ICAgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICArLS0tLXwgICB3cmFwcGVyMiAgfC0tLS0tLS0tKyAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB2ICAgICB2ICAgICAgICAgICAgICAgICAgICAgdiAgICAgdiAgIHwgd3JhcHBlclxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHwgaW52YXJpYW50c1xuICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuICogKy0tLS0tLS0tLS0tLS0tLS0tPnwtfC0tLXwtfC0tLXwtLT58YW55TWV0aG9kfC0tLXwtLS18LXwtLS18LXwtLS0tLS0tLT5cbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIDwvcHJlPlxuICpcbiAqIFVzZSBjYXNlczpcbiAqIC0gUHJlc2VydmluZyB0aGUgaW5wdXQgc2VsZWN0aW9uIHJhbmdlcyBiZWZvcmUvYWZ0ZXIgcmVjb25jaWxpYXRpb24uXG4gKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cbiAqIC0gRGVhY3RpdmF0aW5nIGV2ZW50cyB3aGlsZSByZWFycmFuZ2luZyB0aGUgRE9NLCBwcmV2ZW50aW5nIGJsdXJzL2ZvY3VzZXMsXG4gKiAgIHdoaWxlIGd1YXJhbnRlZWluZyB0aGF0IGFmdGVyd2FyZHMsIHRoZSBldmVudCBzeXN0ZW0gaXMgcmVhY3RpdmF0ZWQuXG4gKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcbiAqICAgcmVjb25jaWxpYXRpb24gdGFrZXMgcGxhY2UgaW4gYSB3b3JrZXIgdGhyZWFkLlxuICogLSBJbnZva2luZyBhbnkgY29sbGVjdGVkIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBhZnRlciByZW5kZXJpbmcgbmV3XG4gKiAgIGNvbnRlbnQuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBXcmFwcGluZyBwYXJ0aWN1bGFyIGZsdXNoZXMgb2YgdGhlIGBSZWFjdFdvcmtlcmAgcXVldWVcbiAqICAgdG8gcHJlc2VydmUgdGhlIGBzY3JvbGxUb3BgIChhbiBhdXRvbWF0aWMgc2Nyb2xsIGF3YXJlIERPTSkuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwZGF0ZXMuXG4gKlxuICogVHJhbnNhY3Rpb25hbCBwbHVnaW4gQVBJOlxuICogLSBBIG1vZHVsZSB0aGF0IGhhcyBhbiBgaW5pdGlhbGl6ZWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbnkgcHJlY29tcHV0YXRpb24uXG4gKiAtIGFuZCBhIGBjbG9zZWAgbWV0aG9kIHRoYXQgYWNjZXB0cyB0aGUgcHJlY29tcHV0YXRpb24uIGBjbG9zZWAgaXMgaW52b2tlZFxuICogICB3aGVuIHRoZSB3cmFwcGVkIHByb2Nlc3MgaXMgY29tcGxldGVkLCBvciBoYXMgZmFpbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VHJhbnNhY3Rpb25hbFdyYXBwZXI+fSB0cmFuc2FjdGlvbldyYXBwZXIgV3JhcHBlciBtb2R1bGVzXG4gKiB0aGF0IGltcGxlbWVudCBgaW5pdGlhbGl6ZWAgYW5kIGBjbG9zZWAuXG4gKiBAcmV0dXJuIHtUcmFuc2FjdGlvbn0gU2luZ2xlIHRyYW5zYWN0aW9uIGZvciByZXVzZSBpbiB0aHJlYWQuXG4gKlxuICogQGNsYXNzIFRyYW5zYWN0aW9uXG4gKi9cbnZhciBUcmFuc2FjdGlvbkltcGwgPSB7XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBpcyBwcmVwYXJlZCBmb3IgY29sbGVjdGluZyBtZXRyaWNzLiBEb2VzXG4gICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5pdGlhbGl6ZWQsIGluIGEgd2F5IHRoYXQgZG9lcyBub3QgY29uc3VtZSBhZGRpdGlvbmFsIG1lbW9yeSB1cG9uIHJldXNlLlxuICAgKiBUaGF0IGNhbiBiZSB1c2VmdWwgaWYgeW91IGRlY2lkZSB0byBtYWtlIHlvdXIgc3ViY2xhc3Mgb2YgdGhpcyBtaXhpbiBhXG4gICAqIFwiUG9vbGVkQ2xhc3NcIi5cbiAgICovXG4gIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhKSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgfSxcblxuICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge0FycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj59IEFycmF5IG9mIHRyYW5zYWN0aW9uIHdyYXBwZXJzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblxuICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc0luVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgLyogZXNsaW50LWRpc2FibGUgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuICovXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBmdW5jdGlvbiB3aXRoaW4gYSBzYWZldHkgd2luZG93LiBVc2UgdGhpcyBmb3IgdGhlIHRvcCBsZXZlbFxuICAgKiBtZXRob2RzIHRoYXQgcmVzdWx0IGluIGxhcmdlIGFtb3VudHMgb2YgY29tcHV0YXRpb24vbXV0YXRpb25zIHRoYXQgd291bGRcbiAgICogbmVlZCB0byBiZSBzYWZldHkgY2hlY2tlZC4gVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyBoZWxwcyBwcmV2ZW50IHRoZSBuZWVkXG4gICAqIHRvIGJpbmQgaW4gbWFueSBjYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1lbWJlciBvZiBzY29wZSB0byBjYWxsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgU2NvcGUgdG8gaW52b2tlIGZyb20uXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGEgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBiIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYyBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGQgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBlIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZiBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4geyp9IFJldHVybiB2YWx1ZSBmcm9tIGBtZXRob2RgLlxuICAgKi9cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbiAqL1xuICAgICEhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSBpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLicpIDogX3Byb2RJbnZhcmlhbnQoJzI3JykgOiB2b2lkIDA7XG4gICAgdmFyIGVycm9yVGhyb3duO1xuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgLy8gb25lIG9mIHRoZXNlIGNhbGxzIHRocmV3LlxuICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdGhpcy5pbml0aWFsaXplQWxsKDApO1xuICAgICAgcmV0ID0gbWV0aG9kLmNhbGwoc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gSWYgYG1ldGhvZGAgdGhyb3dzLCBwcmVmZXIgdG8gc2hvdyB0aGF0IHN0YWNrIHRyYWNlIG92ZXIgYW55IHRocm93blxuICAgICAgICAgIC8vIGJ5IGludm9raW5nIGBjbG9zZUFsbGAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIGBtZXRob2RgIGRpZG4ndCB0aHJvdywgd2UgZG9uJ3Qgd2FudCB0byBzaWxlbmNlIHRoZSBleGNlcHRpb25cbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGluaXRpYWxpemVBbGw6IGZ1bmN0aW9uIChzdGFydEluZGV4KSB7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoIHRoZVxuICAgICAgICAvLyBPQlNFUlZFRF9FUlJPUiBzdGF0ZSBiZWZvcmUgb3ZlcndyaXRpbmcgaXQgd2l0aCB0aGUgcmVhbCByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gb2YgaW5pdGlhbGl6ZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byBPQlNFUlZFRF9FUlJPUiBpbiB0aGUgZmluYWxseVxuICAgICAgICAvLyBibG9jaywgaXQgbWVhbnMgd3JhcHBlci5pbml0aWFsaXplIHRocmV3LlxuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IE9CU0VSVkVEX0VSUk9SO1xuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/IHdyYXBwZXIuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpIDogbnVsbDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gT0JTRVJWRURfRVJST1IpIHtcbiAgICAgICAgICAvLyBUaGUgaW5pdGlhbGl6ZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAgICAvLyByZW1haW5pbmcgd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZVxuICAgICAgICAgIC8vIHRoYXQgdGhlIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBlYWNoIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuY2xvc2VbaV1gIGZ1bmN0aW9ucywgcGFzc2luZyBpbnRvXG4gICAqIHRoZW0gdGhlIHJlc3BlY3RpdmUgcmV0dXJuIHZhbHVlcyBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmluaXRbaV1gXG4gICAqIChgY2xvc2VgcnMgdGhhdCBjb3JyZXNwb25kIHRvIGluaXRpYWxpemVycyB0aGF0IGZhaWxlZCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkKS5cbiAgICovXG4gIGNsb3NlQWxsOiBmdW5jdGlvbiAoc3RhcnRJbmRleCkge1xuICAgICF0aGlzLmlzSW5UcmFuc2FjdGlvbigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyYW5zYWN0aW9uLmNsb3NlQWxsKCk6IENhbm5vdCBjbG9zZSB0cmFuc2FjdGlvbiB3aGVuIG5vbmUgYXJlIG9wZW4uJykgOiBfcHJvZEludmFyaWFudCgnMjgnKSA6IHZvaWQgMDtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHZhciBpbml0RGF0YSA9IHRoaXMud3JhcHBlckluaXREYXRhW2ldO1xuICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAgIC8vIHdyYXBwZXIuY2xvc2UgdGhyZXcuXG4gICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluaXREYXRhICE9PSBPQlNFUlZFRF9FUlJPUiAmJiB3cmFwcGVyLmNsb3NlKSB7XG4gICAgICAgICAgd3JhcHBlci5jbG9zZS5jYWxsKHRoaXMsIGluaXREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gVGhlIGNsb3NlciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBjbG9zZSB0aGUgcmVtYWluaW5nXG4gICAgICAgICAgLy8gd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZSB0aGF0IHRoZVxuICAgICAgICAgIC8vIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25JbXBsOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZSgnLi9WaWV3cG9ydE1ldHJpY3MnKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRNb2RpZmllclN0YXRlJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBXZWJraXQsIEZpcmVmb3gsIElFOStcbiAgICAvLyB3aGljaDogIDEgMiAzXG4gICAgLy8gYnV0dG9uOiAwIDEgMiAoc3RhbmRhcmQpXG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcbiAgICBpZiAoJ3doaWNoJyBpbiBldmVudCkge1xuICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9XG4gICAgLy8gSUU8OVxuICAgIC8vIHdoaWNoOiAgdW5kZWZpbmVkXG4gICAgLy8gYnV0dG9uOiAwIDAgMFxuICAgIC8vIGJ1dHRvbjogMSA0IDIgKG9ubW91c2V1cClcbiAgICByZXR1cm4gYnV0dG9uID09PSAyID8gMiA6IGJ1dHRvbiA9PT0gNCA/IDEgOiAwO1xuICB9LFxuICBidXR0b25zOiBudWxsLFxuICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnQgPyBldmVudC50b0VsZW1lbnQgOiBldmVudC5mcm9tRWxlbWVudCk7XG4gIH0sXG4gIC8vIFwiUHJvcHJpZXRhcnlcIiBJbnRlcmZhY2UuXG4gIHBhZ2VYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VYIDogZXZlbnQuY2xpZW50WCArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdDtcbiAgfSxcbiAgcGFnZVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAncGFnZVknIGluIGV2ZW50ID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBET01OYW1lc3BhY2VzID0gcmVxdWlyZSgnLi9ET01OYW1lc3BhY2VzJyk7XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG52YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG5cbi8vIFNWRyB0ZW1wIGNvbnRhaW5lciBmb3IgSUUgbGFja2luZyBpbm5lckhUTUxcbnZhciByZXVzYWJsZVNWR0NvbnRhaW5lcjtcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAvLyBJRSBkb2VzIG5vdCBoYXZlIGlubmVySFRNTCBmb3IgU1ZHIG5vZGVzLCBzbyBpbnN0ZWFkIHdlIGluamVjdCB0aGVcbiAgLy8gbmV3IG1hcmt1cCBpbiBhIHRlbXAgbm9kZSBhbmQgdGhlbiBtb3ZlIHRoZSBjaGlsZCBub2RlcyBhY3Jvc3MgaW50b1xuICAvLyB0aGUgdGFyZ2V0IG5vZGVcbiAgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLnN2ZyAmJiAhKCdpbm5lckhUTUwnIGluIG5vZGUpKSB7XG4gICAgcmV1c2FibGVTVkdDb250YWluZXIgPSByZXVzYWJsZVNWR0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lci5pbm5lckhUTUwgPSAnPHN2Zz4nICsgaHRtbCArICc8L3N2Zz4nO1xuICAgIHZhciBzdmdOb2RlID0gcmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoc3ZnTm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHN2Z05vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxufSk7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG4gIC8vIHdoaXRlc3BhY2UgaXMgcmVtb3ZlZC4gV2hlbiB1cGRhdGluZyBhbiBleGlzdGluZyBub2RlIHdpdGggaW5uZXJIVE1MXG4gIC8vIHdoaXRlc3BhY2UgaW4gcm9vdCBUZXh0Tm9kZXMgaXMgYWxzbyBjb2xsYXBzZWQuXG4gIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cbiAgLy8gRmVhdHVyZSBkZXRlY3Rpb247IG9ubHkgSUU4IGlzIGtub3duIHRvIGJlaGF2ZSBpbXByb3Blcmx5IGxpa2UgdGhpcy5cbiAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAgICAgLy8gTWFnaWMgdGhlb3J5OiBJRTggc3VwcG9zZWRseSBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFkZGVkIGFuZCB1cGRhdGVkXG4gICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG4gICAgICAvLyBmcm9tIHdvcnNlIHdoaXRlc3BhY2UgYmVoYXZpb3IuIFJlLWFkZGluZyBhIG5vZGUgbGlrZSB0aGlzIHRyaWdnZXJzXG4gICAgICAvLyB0aGUgaW5pdGlhbCBhbmQgbW9yZSBmYXZvcmFibGUgd2hpdGVzcGFjZSBiZWhhdmlvci5cbiAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBhbHNvIGltcGxlbWVudCBhIHdvcmthcm91bmQgZm9yIG5vbi12aXNpYmxlIHRhZ3MgZGlzYXBwZWFyaW5nIGludG9cbiAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG4gICAgICAvLyBpbi1mcm9udCBvZiB0aGUgbm9uLXZpc2libGUgdGFncy4gUGlnZ3liYWNrIG9uIHRoZSB3aGl0ZXNwYWNlIGZpeFxuICAgICAgLy8gYW5kIHNpbXBseSBjaGVjayBpZiBhbnkgbm9uLXZpc2libGUgdGFncyBhcHBlYXIgaW4gdGhlIHNvdXJjZS5cbiAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fCBodG1sWzBdID09PSAnPCcgJiYgTk9OVklTSUJMRV9URVNULnRlc3QoaHRtbCkpIHtcbiAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuICAgICAgICAvLyBcXHVGRUZGIGhhcyB0aGUgcG90ZW50aWFsIGFkdmFudGFnZSBvZiBiZWluZyB6ZXJvLXdpZHRoL2ludmlzaWJsZS5cbiAgICAgICAgLy8gVWdsaWZ5SlMgZHJvcHMgVStGRUZGIGNoYXJzIHdoZW4gcGFyc2luZywgc28gdXNlIFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgICAgICAgLy8gaW4gaG9wZXMgdGhhdCB0aGlzIGlzIHByZXNlcnZlZCBldmVuIGlmIFwiXFx1RkVGRlwiIGlzIHRyYW5zZm9ybWVkIHRvXG4gICAgICAgIC8vIHRoZSBhY3R1YWwgVW5pY29kZSBjaGFyYWN0ZXIgKGJ5IEJhYmVsLCBmb3IgZXhhbXBsZSkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taXNob28vVWdsaWZ5SlMyL2Jsb2IvdjIuNC4yMC9saWIvcGFyc2UuanMjTDIxNlxuICAgICAgICBub2RlLmlubmVySFRNTCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmZWZmKSArIGh0bWw7XG5cbiAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcbiAgICAgICAgLy8gY2hpbGRyZW4uIERlZmluaXRlbHkgd2FudCB0byBhdm9pZCB0aGlzLlxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRlc3RFbGVtZW50ID0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQmFzZWQgb24gdGhlIGVzY2FwZS1odG1sIGxpYnJhcnksIHdoaWNoIGlzIHVzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIGJlbG93OlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgQW5kcmVhcyBMdWJiZVxuICogQ29weXJpZ2h0IChjKSAyMDE1IFRpYW5jaGVuZyBcIlRpbW90aHlcIiBHdVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gY29kZSBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gZXNjYXBlLWh0bWxcbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIG1hdGNoSHRtbFJlZ0V4cCA9IC9bXCInJjw+XS87XG5cbi8qKlxuICogRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiB0aGUgZ2l2ZW4gc3RyaW5nIG9mIGh0bWwuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGUgZm9yIGluc2VydGluZyBpbnRvIEhUTUxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xuICB2YXIgc3RyID0gJycgKyBzdHJpbmc7XG4gIHZhciBtYXRjaCA9IG1hdGNoSHRtbFJlZ0V4cC5leGVjKHN0cik7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICB2YXIgZXNjYXBlO1xuICB2YXIgaHRtbCA9ICcnO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEluZGV4ID0gMDtcblxuICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XG4gICAgICBjYXNlIDM0OlxuICAgICAgICAvLyBcIlxuICAgICAgICBlc2NhcGUgPSAnJnF1b3Q7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICAvLyAmXG4gICAgICAgIGVzY2FwZSA9ICcmYW1wOyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOTpcbiAgICAgICAgLy8gJ1xuICAgICAgICBlc2NhcGUgPSAnJiN4Mjc7JzsgLy8gbW9kaWZpZWQgZnJvbSBlc2NhcGUtaHRtbDsgdXNlZCB0byBiZSAnJiMzOSdcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOlxuICAgICAgICAvLyA8XG4gICAgICAgIGVzY2FwZSA9ICcmbHQ7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYyOlxuICAgICAgICAvLyA+XG4gICAgICAgIGVzY2FwZSA9ICcmZ3Q7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZTtcbiAgfVxuXG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xufVxuLy8gZW5kIGNvZGUgY29waWVkIGFuZCBtb2RpZmllZCBmcm9tIGVzY2FwZS1odG1sXG5cbi8qKlxuICogRXNjYXBlcyB0ZXh0IHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB0ZXh0IFRleHQgdmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIHRleHQgPT09ICdudW1iZXInKSB7XG4gICAgLy8gdGhpcyBzaG9ydGNpcmN1aXQgaGVscHMgcGVyZiBmb3IgdHlwZXMgdGhhdCB3ZSBrbm93IHdpbGwgbmV2ZXIgaGF2ZVxuICAgIC8vIHNwZWNpYWwgY2hhcmFjdGVycywgZXNwZWNpYWxseSBnaXZlbiB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgdXNlZCBvZnRlblxuICAgIC8vIGZvciBudW1lcmljIGRvbSBpZHMuXG4gICAgcmV0dXJuICcnICsgdGV4dDtcbiAgfVxuICByZXR1cm4gZXNjYXBlSHRtbCh0ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHJlcXVpcmUoJy4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpbicpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJy4vVmlld3BvcnRNZXRyaWNzJyk7XG5cbnZhciBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSA9IHJlcXVpcmUoJy4vZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUnKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdEV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnQgcGx1Z2dhYmxlXG4gKiAgICBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW4gdGhyZWFkLlxuICpcbiAqICAtIFdlIG5vcm1hbGl6ZSBhbmQgZGUtZHVwbGljYXRlIGV2ZW50cyB0byBhY2NvdW50IGZvciBicm93c2VyIHF1aXJrcy4gVGhpc1xuICogICAgbWF5IGJlIGRvbmUgaW4gdGhlIHdvcmtlciB0aHJlYWQuXG4gKlxuICogIC0gRm9yd2FyZCB0aGVzZSBuYXRpdmUgZXZlbnRzICh3aXRoIHRoZSBhc3NvY2lhdGVkIHRvcC1sZXZlbCB0eXBlIHVzZWQgdG9cbiAqICAgIHRyYXAgaXQpIHRvIGBFdmVudFBsdWdpbkh1YmAsIHdoaWNoIGluIHR1cm4gd2lsbCBhc2sgcGx1Z2lucyBpZiB0aGV5IHdhbnRcbiAqICAgIHRvIGV4dHJhY3QgYW55IHN5bnRoZXRpYyBldmVudHMuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgd2lsbCB0aGVuIHByb2Nlc3MgZWFjaCBldmVudCBieSBhbm5vdGF0aW5nIHRoZW0gd2l0aFxuICogICAgXCJkaXNwYXRjaGVzXCIsIGEgc2VxdWVuY2Ugb2YgbGlzdGVuZXJzIGFuZCBJRHMgdGhhdCBjYXJlIGFib3V0IHRoYXQgZXZlbnQuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgdGhlbiBkaXNwYXRjaGVzIHRoZSBldmVudHMuXG4gKlxuICogT3ZlcnZpZXcgb2YgUmVhY3QgYW5kIHRoZSBldmVudCBzeXN0ZW06XG4gKlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCAgICBET00gICAgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogICAgICAgfCAgICAgICAgICAgLlxuICogICAgICAgdiAgICAgICAgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCBSZWFjdEV2ZW50IHwgICAgLlxuICogfCAgTGlzdGVuZXIgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgKy0tLS0tLS0tK3xTaW1wbGVFdmVudHxcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICB8ICAgICAgICAgfFBsdWdpbiAgICAgfFxuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgIHYgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnxFdmVudFBsdWdpbkh1YnwgICAgICAgICAgICAgICAgICAgIHwgICAgRXZlbnQgICB8XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgUHJvcGFnYXRvcnN8XG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgIHxUYXBFdmVudCAgIHwgIHwtLS0tLS0tLS0tLS18XG4gKiB8ICBFbWl0dGVyICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHw8LS0tK3xQbHVnaW4gICAgIHwgIHxvdGhlciBwbHVnaW58XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgIHV0aWxpdGllcyB8XG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnwgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLStcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgXiAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICB8ICAgICAgICB8RW50ZXIvTGVhdmV8XG4gKiAgICAgICArICAgICAgICAgICAuICAgICAgICAgICAgICAgICstLS0tLS0tK3xQbHVnaW4gICAgIHxcbiAqICstLS0tLS0tLS0tLS0tKyAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCBhcHBsaWNhdGlvbiB8ICAgLlxuICogfC0tLS0tLS0tLS0tLS18ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogKy0tLS0tLS0tLS0tLS0rICAgLlxuICogICAgICAgICAgICAgICAgICAgLlxuICogICAgUmVhY3QgQ29yZSAgICAgLiAgR2VuZXJhbCBQdXJwb3NlIEV2ZW50IFBsdWdpbiBTeXN0ZW1cbiAqL1xuXG52YXIgaGFzRXZlbnRQYWdlWFk7XG52YXIgYWxyZWFkeUxpc3RlbmluZ1RvID0ge307XG52YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbnZhciByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIgPSAwO1xuXG4vLyBGb3IgZXZlbnRzIGxpa2UgJ3N1Ym1pdCcgd2hpY2ggZG9uJ3QgY29uc2lzdGVudGx5IGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhXG4vLyBsb3dlciBub2RlIHRoYW4gYGRvY3VtZW50YCksIGJpbmRpbmcgYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGVcbi8vIGV2ZW50cyBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaGVyZVxudmFyIHRvcEV2ZW50TWFwcGluZyA9IHtcbiAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gIHRvcEFuaW1hdGlvbkVuZDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpIHx8ICdhbmltYXRpb25lbmQnLFxuICB0b3BBbmltYXRpb25JdGVyYXRpb246IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25pdGVyYXRpb24nKSB8fCAnYW5pbWF0aW9uaXRlcmF0aW9uJyxcbiAgdG9wQW5pbWF0aW9uU3RhcnQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25zdGFydCcpIHx8ICdhbmltYXRpb25zdGFydCcsXG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiAnY29tcG9zaXRpb25zdGFydCcsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgdG9wQ29weTogJ2NvcHknLFxuICB0b3BDdXQ6ICdjdXQnLFxuICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgdG9wRHJhZzogJ2RyYWcnLFxuICB0b3BEcmFnRW5kOiAnZHJhZ2VuZCcsXG4gIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gIHRvcERyYWdFeGl0OiAnZHJhZ2V4aXQnLFxuICB0b3BEcmFnTGVhdmU6ICdkcmFnbGVhdmUnLFxuICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgdG9wRHJhZ1N0YXJ0OiAnZHJhZ3N0YXJ0JyxcbiAgdG9wRHJvcDogJ2Ryb3AnLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgdG9wRW1wdGllZDogJ2VtcHRpZWQnLFxuICB0b3BFbmNyeXB0ZWQ6ICdlbmNyeXB0ZWQnLFxuICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgdG9wRXJyb3I6ICdlcnJvcicsXG4gIHRvcEZvY3VzOiAnZm9jdXMnLFxuICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgdG9wS2V5RG93bjogJ2tleWRvd24nLFxuICB0b3BLZXlQcmVzczogJ2tleXByZXNzJyxcbiAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gIHRvcExvYWRlZERhdGE6ICdsb2FkZWRkYXRhJyxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6ICdsb2FkZWRtZXRhZGF0YScsXG4gIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gIHRvcE1vdXNlRG93bjogJ21vdXNlZG93bicsXG4gIHRvcE1vdXNlTW92ZTogJ21vdXNlbW92ZScsXG4gIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICB0b3BNb3VzZU92ZXI6ICdtb3VzZW92ZXInLFxuICB0b3BNb3VzZVVwOiAnbW91c2V1cCcsXG4gIHRvcFBhc3RlOiAncGFzdGUnLFxuICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgdG9wUGxheTogJ3BsYXknLFxuICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICB0b3BSYXRlQ2hhbmdlOiAncmF0ZWNoYW5nZScsXG4gIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wU3RhbGxlZDogJ3N0YWxsZWQnLFxuICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJykgfHwgJ3RyYW5zaXRpb25lbmQnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZycsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcbiAqXG4gKiBUaGlzIHdvdWxkIGFsbG9jYXRlIGEgXCJyZWdpc3RyYXRpb25cIiBvZiBgKCdvbkNsaWNrJywgbXlGdW5jdGlvbilgIG9uICdteUlEJy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IF9hc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcbiAgLyoqXG4gICAqIEluamVjdGFibGUgZXZlbnQgYmFja2VuZFxuICAgKi9cbiAgUmVhY3RFdmVudExpc3RlbmVyOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAgICAgKi9cbiAgICBpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChSZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaGFuZGxlVG9wTGV2ZWwpO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBvciBub3QgYW55IGNyZWF0ZWQgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgVHJ1ZSBpZiBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqL1xuICBzZXRFbmFibGVkOiBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgIGlmIChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnNldEVuYWJsZWQoZW5hYmxlZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGNhbGxiYWNrcyBhcmUgZW5hYmxlZC5cbiAgICovXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIShSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyICYmIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuaXNFbmFibGVkKCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSBsaXN0ZW4gZm9yIGJ1YmJsZWQgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gICAqXG4gICAqIEZpcmVmb3ggdjguMDEgKGFuZCBwb3NzaWJseSBvdGhlcnMpIGV4aGliaXRlZCBzdHJhbmdlIGJlaGF2aW9yIHdoZW5cbiAgICogbW91bnRpbmcgYG9ubW91c2Vtb3ZlYCBldmVudHMgYXQgc29tZSBub2RlIHRoYXQgd2FzIG5vdCB0aGUgZG9jdW1lbnRcbiAgICogZWxlbWVudC4gVGhlIHN5bXB0b21zIHdlcmUgdGhhdCBpZiB5b3VyIG1vdXNlIGlzIG5vdCBtb3Zpbmcgb3ZlciBzb21ldGhpbmdcbiAgICogY29udGFpbmVkIHdpdGhpbiB0aGF0IG1vdW50IHBvaW50IChmb3IgZXhhbXBsZSBvbiB0aGUgYmFja2dyb3VuZCkgdGhlXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgZm9yIGBvbm1vdXNlbW92ZWAgd29uJ3QgYmUgY2FsbGVkLiBIb3dldmVyLCBpZiB5b3VcbiAgICogcmVnaXN0ZXIgdGhlIGBtb3VzZW1vdmVgIG9uIHRoZSBkb2N1bWVudCBvYmplY3QsIHRoZW4gaXQgd2lsbCBvZiBjb3Vyc2VcbiAgICogY2F0Y2ggYWxsIGBtb3VzZW1vdmVgcy4gVGhpcyBhbG9uZyB3aXRoIGlPUyBxdWlya3MsIGp1c3RpZmllcyByZXN0cmljdGluZ1xuICAgKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudCBvYmplY3Qgb25seSwgYXQgbGVhc3QgZm9yIHRoZXNlXG4gICAqIG1vdmVtZW50IHR5cGVzIG9mIGV2ZW50cyBhbmQgcG9zc2libHkgYWxsIGV2ZW50cy5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICAgKlxuICAgKiBBbHNvLCBga2V5dXBgL2BrZXlwcmVzc2AvYGtleWRvd25gIGRvIG5vdCBidWJibGUgdG8gdGhlIHdpbmRvdyBvbiBJRSwgYnV0XG4gICAqIHRoZXkgYnViYmxlIHRvIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZW50RG9jdW1lbnRIYW5kbGUgRG9jdW1lbnQgd2hpY2ggb3ducyB0aGUgY29udGFpbmVyXG4gICAqL1xuICBsaXN0ZW5UbzogZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICAgIHZhciBtb3VudEF0ID0gY29udGVudERvY3VtZW50SGFuZGxlO1xuICAgIHZhciBpc0xpc3RlbmluZyA9IGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09ICd0b3BXaGVlbCcpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KCd0b3BXaGVlbCcsICd3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFdoZWVsJywgJ21vdXNld2hlZWwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09ICd0b3BTY3JvbGwnKSB7XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KCd0b3BTY3JvbGwnLCAnc2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wU2Nyb2xsJywgJ3Njcm9sbCcsIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuV0lORE9XX0hBTkRMRSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09ICd0b3BGb2N1cycgfHwgZGVwZW5kZW5jeSA9PT0gJ3RvcEJsdXInKSB7XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoJ3RvcEZvY3VzJywgJ2ZvY3VzJywgbW91bnRBdCk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KCd0b3BCbHVyJywgJ2JsdXInLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzaW4nKSkge1xuICAgICAgICAgICAgLy8gSUUgaGFzIGBmb2N1c2luYCBhbmQgYGZvY3Vzb3V0YCBldmVudHMgd2hpY2ggYnViYmxlLlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAwOC8wNC9kZWxlZ2F0aW5nX3RoZS5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEZvY3VzJywgJ2ZvY3VzaW4nLCBtb3VudEF0KTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wQmx1cicsICdmb2N1c291dCcsIG1vdW50QXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBibHVyIGFuZCBmb2N1cyBldmVudCBsaXN0ZW5lcnMgYXJlIG9ubHkgYXR0YWNoZWQgb25jZVxuICAgICAgICAgIGlzTGlzdGVuaW5nLnRvcEJsdXIgPSB0cnVlO1xuICAgICAgICAgIGlzTGlzdGVuaW5nLnRvcEZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3BFdmVudE1hcHBpbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoZGVwZW5kZW5jeSwgdG9wRXZlbnRNYXBwaW5nW2RlcGVuZGVuY3ldLCBtb3VudEF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpO1xuICB9LFxuXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQcm90ZWN0IGFnYWluc3QgZG9jdW1lbnQuY3JlYXRlRXZlbnQoKSByZXR1cm5pbmcgbnVsbFxuICAgKiBTb21lIHBvcHVwIGJsb2NrZXIgZXh0ZW5zaW9ucyBhcHBlYXIgdG8gZG8gdGhpczpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82ODg3XG4gICAqL1xuICBzdXBwb3J0c0V2ZW50UGFnZVhZOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb2N1bWVudC5jcmVhdGVFdmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgIHJldHVybiBldiAhPSBudWxsICYmICdwYWdlWCcgaW4gZXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbnMgdG8gd2luZG93IHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50cy4gV2UgY2FjaGUgc2Nyb2xsIHZhbHVlcyBzbyB0aGF0XG4gICAqIGFwcGxpY2F0aW9uIGNvZGUgY2FuIGFjY2VzcyB0aGVtIHdpdGhvdXQgdHJpZ2dlcmluZyByZWZsb3dzLlxuICAgKlxuICAgKiBWaWV3cG9ydE1ldHJpY3MgaXMgb25seSB1c2VkIGJ5IFN5bnRoZXRpY01vdXNlL1RvdWNoRXZlbnQgYW5kIG9ubHkgd2hlblxuICAgKiBwYWdlWC9wYWdlWSBpc24ndCBzdXBwb3J0ZWQgKGxlZ2FjeSBicm93c2VycykuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmIChoYXNFdmVudFBhZ2VYWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNFdmVudFBhZ2VYWSA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zdXBwb3J0c0V2ZW50UGFnZVhZKCk7XG4gICAgfVxuICAgIGlmICghaGFzRXZlbnRQYWdlWFkgJiYgIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG4gICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI7IiwiZXhwb3J0IGNsYXNzIEFsbG9jYXRvciB7XG4gIGNvbnN0cnVjdG9yIChNb2R1bGUpIHtcbiAgICB0aGlzLm1vZHVsZSA9IHtcbiAgICAgIGFsbG9jOiBNb2R1bGUuY3dyYXAoJ3J1c3RfYWxsb2MnLCAnbnVtYmVyJywgWydudW1iZXInXSksXG4gICAgICBmcmVlOiBNb2R1bGUuY3dyYXAoJ3J1c3RfZnJlZScsICd2b2lkJywgWydudW1iZXInXSlcbiAgICB9XG4gIH1cblxuICBhbGxvYyAoYnl0ZXMpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuYWxsb2MoYnl0ZXMpXG4gIH1cblxuICBmcmVlIChwb2ludGVyKSB7XG4gICAgdGhpcy5tb2R1bGUuZnJlZShwb2ludGVyKVxuICB9XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgZXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghZXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYGV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IGV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAhKHBsdWdpbkluZGV4ID4gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk2JywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhcGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5NycsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBwdWJsaXNoZWRFdmVudHMpIHtcbiAgICAgICFwdWJsaXNoRXZlbnRGb3JQbHVnaW4ocHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC4nLCBldmVudE5hbWUsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk4JywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBEaXNwYXRjaCBjb25maWd1cmF0aW9uIGZvciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IHdhcyBzdWNjZXNzZnVsbHkgcHVibGlzaGVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaEV2ZW50Rm9yUGx1Z2luKGRpc3BhdGNoQ29uZmlnLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIGV2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5OScsIGV2ZW50TmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgcmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiBfcHJvZEludmFyaWFudCgnMTAwJywgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcmVnaXN0cmF0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLm9uZGJsY2xpY2sgPSByZWdpc3RyYXRpb25OYW1lO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICAgKi9cbiAgcGx1Z2luczogW10sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICAgKi9cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHJlZ2lzdHJhdGlvbiBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbixcbiAgICogdXNlZCB0byB3YXJuIGluIHRoZSBjYXNlIG9mIG1pc3NpbmcgZXZlbnQgaGFuZGxlcnMuIEF2YWlsYWJsZVxuICAgKiBvbmx5IGluIF9fREVWX18uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge30gOiBudWxsLFxuICAvLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgaW4gX19ERVZfX1xuXG4gIC8qKlxuICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gICAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICAgKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uIChpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAhIWV2ZW50UGx1Z2luT3JkZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuIG9uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMDEnKSA6IHZvaWQgMDtcbiAgICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gICAgZXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gICAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uIChpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdICE9PSBwbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgISFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyB1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzEwMicsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IHBsdWdpbk1vZHVsZTtcbiAgICAgICAgaXNPcmRlcmluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT3JkZXJpbmdEaXJ0eSkge1xuICAgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvb2tzIHVwIHRoZSBwbHVnaW4gZm9yIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEEgc3ludGhldGljIGV2ZW50LlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBUaGUgcGx1Z2luIHRoYXQgY3JlYXRlZCB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXSB8fCBudWxsO1xuICAgIH1cbiAgICBpZiAoZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcHVsbGluZyBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyBvdXQgb2YgZGlzcGF0Y2hDb25maWcgaGVscHMgRmxvdyBzZWVcbiAgICAgIC8vIHRoYXQgaXQgaXMgbm90IHVuZGVmaW5lZC5cbiAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyA9IGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO1xuXG4gICAgICBmb3IgKHZhciBwaGFzZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICBpZiAoIXBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07XG4gICAgICAgIGlmIChwbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm4gcGx1Z2luTW9kdWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uICgpIHtcbiAgICBldmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgICBmb3IgKHZhciBsb3dlckNhc2VkTmFtZSBpbiBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICAgIGlmIChwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgICAgIGRlbGV0ZSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBDb21wb25lbnRUcmVlYDogW3JlcXVpcmVkXSBNb2R1bGUgdGhhdCBjYW4gY29udmVydCBiZXR3ZWVuIFJlYWN0IGluc3RhbmNlc1xuICogICBhbmQgYWN0dWFsIG5vZGUgcmVmZXJlbmNlcy5cbiAqL1xudmFyIENvbXBvbmVudFRyZWU7XG52YXIgVHJlZVRyYXZlcnNhbDtcbnZhciBpbmplY3Rpb24gPSB7XG4gIGluamVjdENvbXBvbmVudFRyZWU6IGZ1bmN0aW9uIChJbmplY3RlZCkge1xuICAgIENvbXBvbmVudFRyZWUgPSBJbmplY3RlZDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoSW5qZWN0ZWQgJiYgSW5qZWN0ZWQuZ2V0Tm9kZUZyb21JbnN0YW5jZSAmJiBJbmplY3RlZC5nZXRJbnN0YW5jZUZyb21Ob2RlLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZSguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGdldE5vZGVGcm9tSW5zdGFuY2Ugb3IgZ2V0SW5zdGFuY2VGcm9tTm9kZS4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0sXG4gIGluamVjdFRyZWVUcmF2ZXJzYWw6IGZ1bmN0aW9uIChJbmplY3RlZCkge1xuICAgIFRyZWVUcmF2ZXJzYWwgPSBJbmplY3RlZDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoSW5qZWN0ZWQgJiYgSW5qZWN0ZWQuaXNBbmNlc3RvciAmJiBJbmplY3RlZC5nZXRMb3dlc3RDb21tb25BbmNlc3RvciwgJ0V2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdFRyZWVUcmF2ZXJzYWwoLi4uKTogSW5qZWN0ZWQgJyArICdtb2R1bGUgaXMgbWlzc2luZyBpc0FuY2VzdG9yIG9yIGdldExvd2VzdENvbW1vbkFuY2VzdG9yLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZVVwJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BUb3VjaEVuZCcgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wVG91Y2hDYW5jZWwnO1xufVxuXG5mdW5jdGlvbiBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZU1vdmUnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcFRvdWNoTW92ZSc7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VEb3duJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BUb3VjaFN0YXJ0Jztcbn1cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuXG4gICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID8gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIDogZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcblxuICAgIHZhciBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgIHZhciBpbnN0YW5jZXNMZW4gPSBpbnN0YW5jZXNJc0FyciA/IGRpc3BhdGNoSW5zdGFuY2VzLmxlbmd0aCA6IGRpc3BhdGNoSW5zdGFuY2VzID8gMSA6IDA7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpbnN0YW5jZXNJc0FyciA9PT0gbGlzdGVuZXJzSXNBcnIgJiYgaW5zdGFuY2VzTGVuID09PSBsaXN0ZW5lcnNMZW4sICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggdGhlIGV2ZW50IHRvIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IFN5bnRoZXRpY0V2ZW50IHRvIGhhbmRsZVxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBpbnN0IEludGVybmFsIGNvbXBvbmVudCBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgbGlzdGVuZXIsIGluc3QpIHtcbiAgdmFyIHR5cGUgPSBldmVudC50eXBlIHx8ICd1bmtub3duLWV2ZW50JztcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IEV2ZW50UGx1Z2luVXRpbHMuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgaWYgKHNpbXVsYXRlZCkge1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2tXaXRoQ2F0Y2godHlwZSwgbGlzdGVuZXIsIGV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrKHR5cGUsIGxpc3RlbmVyLCBldmVudCk7XG4gIH1cbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMuXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSW5zdGFuY2VzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzW2ldLCBkaXNwYXRjaEluc3RhbmNlc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaEluc3RhbmNlcyk7XG4gIH1cbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcywgYnV0IHN0b3BzXG4gKiBhdCB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHJldHVybmluZyB0cnVlLCBhbmQgcmV0dXJucyB0aGF0IGlkLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJuc1xuICogdHJ1ZSwgb3IgbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIEluc3RhbmNlcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGlmIChkaXNwYXRjaExpc3RlbmVyc1tpXShldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaEluc3RhbmNlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMoZXZlbnQsIGRpc3BhdGNoSW5zdGFuY2VzKSkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAc2VlIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUoZXZlbnQpIHtcbiAgdmFyIHJldCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KTtcbiAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBFeGVjdXRpb24gb2YgYSBcImRpcmVjdFwiIGRpc3BhdGNoIC0gdGhlcmUgbXVzdCBiZSBhdCBtb3N0IG9uZSBkaXNwYXRjaFxuICogYWNjdW11bGF0ZWQgb24gdGhlIGV2ZW50IG9yIGl0IGlzIGNvbnNpZGVyZWQgYW4gZXJyb3IuIEl0IGRvZXNuJ3QgcmVhbGx5IG1ha2VcbiAqIHNlbnNlIGZvciBhbiBldmVudCB3aXRoIG11bHRpcGxlIGRpc3BhdGNoZXMgKGJ1YmJsZWQpIHRvIGtlZXAgdHJhY2sgb2YgdGhlXG4gKiByZXR1cm4gdmFsdWVzIGF0IGVhY2ggZGlzcGF0Y2ggZXhlY3V0aW9uLCBidXQgaXQgZG9lcyB0ZW5kIHRvIG1ha2Ugc2Vuc2Ugd2hlblxuICogZGVhbGluZyB3aXRoIFwiZGlyZWN0XCIgZGlzcGF0Y2hlcy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGV4ZWN1dGluZyB0aGUgc2luZ2xlIGRpc3BhdGNoLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaEluc3RhbmNlID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICAhIUFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZXhlY3V0ZURpcmVjdERpc3BhdGNoKC4uLik6IEludmFsaWQgYGV2ZW50YC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMDMnKSA6IHZvaWQgMDtcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IGRpc3BhdGNoTGlzdGVuZXIgPyBFdmVudFBsdWdpblV0aWxzLmdldE5vZGVGcm9tSW5zdGFuY2UoZGlzcGF0Y2hJbnN0YW5jZSkgOiBudWxsO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/IGRpc3BhdGNoTGlzdGVuZXIoZXZlbnQpIDogbnVsbDtcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcixcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxcbiAgaGFzRGlzcGF0Y2hlczogaGFzRGlzcGF0Y2hlcyxcblxuICBnZXRJbnN0YW5jZUZyb21Ob2RlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBDb21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSk7XG4gIH0sXG4gIGdldE5vZGVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShub2RlKTtcbiAgfSxcbiAgaXNBbmNlc3RvcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5pc0FuY2VzdG9yKGEsIGIpO1xuICB9LFxuICBnZXRMb3dlc3RDb21tb25BbmNlc3RvcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRMb3dlc3RDb21tb25BbmNlc3RvcihhLCBiKTtcbiAgfSxcbiAgZ2V0UGFyZW50SW5zdGFuY2U6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwuZ2V0UGFyZW50SW5zdGFuY2UoaW5zdCk7XG4gIH0sXG4gIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uICh0YXJnZXQsIGZuLCBhcmcpIHtcbiAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC50cmF2ZXJzZVR3b1BoYXNlKHRhcmdldCwgZm4sIGFyZyk7XG4gIH0sXG4gIHRyYXZlcnNlRW50ZXJMZWF2ZTogZnVuY3Rpb24gKGZyb20sIHRvLCBmbiwgYXJnRnJvbSwgYXJnVG8pIHtcbiAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC50cmF2ZXJzZUVudGVyTGVhdmUoZnJvbSwgdG8sIGZuLCBhcmdGcm9tLCBhcmdUbyk7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiBpbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbi8qKlxuICogQ2FsbCBhIGZ1bmN0aW9uIHdoaWxlIGd1YXJkaW5nIGFnYWluc3QgZXJyb3JzIHRoYXQgaGFwcGVucyB3aXRoaW4gaXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBhIEZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0geyp9IGIgU2Vjb25kIGFyZ3VtZW50XG4gKi9cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhuYW1lLCBmdW5jLCBhKSB7XG4gIHRyeSB7XG4gICAgZnVuYyhhKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIGlmIChjYXVnaHRFcnJvciA9PT0gbnVsbCkge1xuICAgICAgY2F1Z2h0RXJyb3IgPSB4O1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogSW52b2tlZCBieSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSBzbyB0aGF0IGFueSBlcnJvcnMgdGhyb3duIGJ5IHRoZSBldmVudFxuICAgKiBoYW5kbGVyIGFyZSBzdXJlIHRvIGJlIHJldGhyb3duIGJ5IHJldGhyb3dDYXVnaHRFcnJvci5cbiAgICovXG4gIGludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaDogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuXG4gIC8qKlxuICAgKiBEdXJpbmcgZXhlY3V0aW9uIG9mIGd1YXJkZWQgZnVuY3Rpb25zIHdlIHdpbGwgY2FwdHVyZSB0aGUgZmlyc3QgZXJyb3Igd2hpY2hcbiAgICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICAgKi9cbiAgcmV0aHJvd0NhdWdodEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSBjYXVnaHRFcnJvcjtcbiAgICAgIGNhdWdodEVycm9yID0gbnVsbDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLyoqXG4gICAqIFRvIGhlbHAgZGV2ZWxvcG1lbnQgd2UgY2FuIGdldCBiZXR0ZXIgZGV2dG9vbHMgaW50ZWdyYXRpb24gYnkgc2ltdWxhdGluZyBhXG4gICAqIHJlYWwgYnJvd3NlciBldmVudC5cbiAgICovXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRpc3BhdGNoRXZlbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgYSkge1xuICAgICAgdmFyIGJvdW5kRnVuYyA9IGZ1bmMuYmluZChudWxsLCBhKTtcbiAgICAgIHZhciBldnRUeXBlID0gJ3JlYWN0LScgKyBuYW1lO1xuICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQoZXZ0VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRhcmdldCBub2RlIGZyb20gYSBuYXRpdmUgYnJvd3NlciBldmVudCBieSBhY2NvdW50aW5nIGZvclxuICogaW5jb25zaXN0ZW5jaWVzIGluIGJyb3dzZXIgRE9NIEFQSXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7RE9NRXZlbnRUYXJnZXR9IFRhcmdldCBub2RlLlxuICovXG5cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG5cbiAgLy8gTm9ybWFsaXplIFNWRyA8dXNlPiBlbGVtZW50IGV2ZW50cyAjNDk2M1xuICBpZiAodGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50O1xuICB9XG5cbiAgLy8gU2FmYXJpIG1heSBmaXJlIGV2ZW50cyBvbiB0ZXh0IG5vZGVzIChOb2RlLlRFWFRfTk9ERSBpcyAzKS5cbiAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcbiAgcmV0dXJuIHRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50VGFyZ2V0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHwgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gIEFsdDogJ2FsdEtleScsXG4gIENvbnRyb2w6ICdjdHJsS2V5JyxcbiAgTWV0YTogJ21ldGFLZXknLFxuICBTaGlmdDogJ3NoaWZ0S2V5J1xufTtcblxuLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBnZXRNb2RpZmllclN0YXRlIHNvIHdlIHNpbXBseSBtYXAgaXQgdG8gdGhlIG9ubHlcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQgaXRzZWxmLCBkb2VzIG5vdCBzdXBwb3J0IExvY2sta2V5cy5cbi8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICB2YXIgbmF0aXZlRXZlbnQgPSBzeW50aGV0aWNFdmVudC5uYXRpdmVFdmVudDtcbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG4gIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudE1vZGlmaWVyU3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIERhbmdlciA9IHJlcXVpcmUoJy4vRGFuZ2VyJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSByZXF1aXJlKCcuL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24nKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZSgnLi9zZXRUZXh0Q29udGVudCcpO1xuXG5mdW5jdGlvbiBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgbm9kZSkge1xuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRleHQgY29tcG9uZW50cywgd2hpY2ggcmV0dXJuIFtvcGVuLCBjbG9zZV0gY29tbWVudHNcbiAgLy8gZnJvbSBnZXRIb3N0Tm9kZS5cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICBub2RlID0gbm9kZVsxXTtcbiAgfVxuICByZXR1cm4gbm9kZSA/IG5vZGUubmV4dFNpYmxpbmcgOiBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG59XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG52YXIgaW5zZXJ0Q2hpbGRBdCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAvLyBXZSByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiAoVXNpbmcgYHVuZGVmaW5lZGAgaXMgbm90IGFsbG93ZWQgYnkgYWxsIGJyb3dzZXJzIHNvXG4gIC8vIHdlIGFyZSBjYXJlZnVsIHRvIHVzZSBgbnVsbGAuKVxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xufSk7XG5cbmZ1bmN0aW9uIGluc2VydExhenlUcmVlQ2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgRE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiBtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkTm9kZSkpIHtcbiAgICBtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGVbMF0sIGNoaWxkTm9kZVsxXSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZE5vZGUpKSB7XG4gICAgdmFyIGNsb3NpbmdDb21tZW50ID0gY2hpbGROb2RlWzFdO1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZVswXTtcbiAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgY2xvc2luZ0NvbW1lbnQpO1xuICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvc2luZ0NvbW1lbnQpO1xuICB9XG4gIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGROb2RlKTtcbn1cblxuZnVuY3Rpb24gbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgb3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50LCByZWZlcmVuY2VOb2RlKSB7XG4gIHZhciBub2RlID0gb3BlbmluZ0NvbW1lbnQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIG5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICAgIGlmIChub2RlID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIHN0YXJ0Tm9kZSwgY2xvc2luZ0NvbW1lbnQpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZS5uZXh0U2libGluZztcbiAgICBpZiAobm9kZSA9PT0gY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgIC8vIFRoZSBjbG9zaW5nIGNvbW1lbnQgaXMgcmVtb3ZlZCBieSBSZWFjdE11bHRpQ2hpbGQuXG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZURlbGltaXRlZFRleHQob3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50LCBzdHJpbmdUZXh0KSB7XG4gIHZhciBwYXJlbnROb2RlID0gb3BlbmluZ0NvbW1lbnQucGFyZW50Tm9kZTtcbiAgdmFyIG5vZGVBZnRlckNvbW1lbnQgPSBvcGVuaW5nQ29tbWVudC5uZXh0U2libGluZztcbiAgaWYgKG5vZGVBZnRlckNvbW1lbnQgPT09IGNsb3NpbmdDb21tZW50KSB7XG4gICAgLy8gVGhlcmUgYXJlIG5vIHRleHQgbm9kZXMgYmV0d2VlbiB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBjb21tZW50czsgaW5zZXJ0XG4gICAgLy8gYSBuZXcgb25lIGlmIHN0cmluZ1RleHQgaXNuJ3QgZW1wdHkuXG4gICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyaW5nVGV4dCksIG5vZGVBZnRlckNvbW1lbnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RyaW5nVGV4dCkge1xuICAgICAgLy8gU2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGZpcnN0IG5vZGUgYWZ0ZXIgdGhlIG9wZW5pbmcgY29tbWVudCwgYW5kXG4gICAgICAvLyByZW1vdmUgYWxsIGZvbGxvd2luZyBub2RlcyB1cCB1bnRpbCB0aGUgY2xvc2luZyBjb21tZW50LlxuICAgICAgc2V0VGV4dENvbnRlbnQobm9kZUFmdGVyQ29tbWVudCwgc3RyaW5nVGV4dCk7XG4gICAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG5vZGVBZnRlckNvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBvcGVuaW5nQ29tbWVudCwgY2xvc2luZ0NvbW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShvcGVuaW5nQ29tbWVudCkuX2RlYnVnSUQsXG4gICAgICB0eXBlOiAncmVwbGFjZSB0ZXh0JyxcbiAgICAgIHBheWxvYWQ6IHN0cmluZ1RleHRcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAgPSBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwLCBwcmV2SW5zdGFuY2UpIHtcbiAgICBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkQ2hpbGQsIG1hcmt1cCk7XG4gICAgaWYgKHByZXZJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IHByZXZJbnN0YW5jZS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3JlcGxhY2Ugd2l0aCcsXG4gICAgICAgIHBheWxvYWQ6IG1hcmt1cC50b1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRJbnN0YW5jZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG1hcmt1cC5ub2RlKTtcbiAgICAgIGlmIChuZXh0SW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgaW5zdGFuY2VJRDogbmV4dEluc3RhbmNlLl9kZWJ1Z0lELFxuICAgICAgICAgIHR5cGU6ICdtb3VudCcsXG4gICAgICAgICAgcGF5bG9hZDogbWFya3VwLnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIHVwZGF0aW5nIHdpdGggRE9NIGNoaWxkcmVuLlxuICovXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAsXG5cbiAgcmVwbGFjZURlbGltaXRlZFRleHQ6IHJlcGxhY2VEZWxpbWl0ZWRUZXh0LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYnkgcHJvY2Vzc2luZyBhIHNlcmllcyBvZiB1cGRhdGVzLiBUaGVcbiAgICogdXBkYXRlIGNvbmZpZ3VyYXRpb25zIGFyZSBlYWNoIGV4cGVjdGVkIHRvIGhhdmUgYSBgcGFyZW50Tm9kZWAgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24gKHBhcmVudE5vZGUsIHVwZGF0ZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBhcmVudE5vZGVEZWJ1Z0lEID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUocGFyZW50Tm9kZSkuX2RlYnVnSUQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCB1cGRhdGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICB2YXIgdXBkYXRlID0gdXBkYXRlc1trXTtcbiAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnSU5TRVJUX01BUktVUCc6XG4gICAgICAgICAgaW5zZXJ0TGF6eVRyZWVDaGlsZEF0KHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50LCBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgdXBkYXRlLmFmdGVyTm9kZSkpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgaW5zdGFuY2VJRDogcGFyZW50Tm9kZURlYnVnSUQsXG4gICAgICAgICAgICAgIHR5cGU6ICdpbnNlcnQgY2hpbGQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgdG9JbmRleDogdXBkYXRlLnRvSW5kZXgsXG4gICAgICAgICAgICAgICAgY29udGVudDogdXBkYXRlLmNvbnRlbnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ01PVkVfRVhJU1RJTkcnOlxuICAgICAgICAgIG1vdmVDaGlsZChwYXJlbnROb2RlLCB1cGRhdGUuZnJvbU5vZGUsIGdldE5vZGVBZnRlcihwYXJlbnROb2RlLCB1cGRhdGUuYWZ0ZXJOb2RlKSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ21vdmUgY2hpbGQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7IGZyb21JbmRleDogdXBkYXRlLmZyb21JbmRleCwgdG9JbmRleDogdXBkYXRlLnRvSW5kZXggfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTRVRfTUFSS1VQJzpcbiAgICAgICAgICBzZXRJbm5lckhUTUwocGFyZW50Tm9kZSwgdXBkYXRlLmNvbnRlbnQpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgaW5zdGFuY2VJRDogcGFyZW50Tm9kZURlYnVnSUQsXG4gICAgICAgICAgICAgIHR5cGU6ICdyZXBsYWNlIGNoaWxkcmVuJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogdXBkYXRlLmNvbnRlbnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdURVhUX0NPTlRFTlQnOlxuICAgICAgICAgIHNldFRleHRDb250ZW50KHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IHBhcmVudE5vZGVEZWJ1Z0lELFxuICAgICAgICAgICAgICB0eXBlOiAncmVwbGFjZSB0ZXh0JyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogdXBkYXRlLmNvbnRlbnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSRU1PVkVfTk9ERSc6XG4gICAgICAgICAgcmVtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgdXBkYXRlLmZyb21Ob2RlKTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IHBhcmVudE5vZGVEZWJ1Z0lELFxuICAgICAgICAgICAgICB0eXBlOiAncmVtb3ZlIGNoaWxkJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogeyBmcm9tSW5kZXg6IHVwZGF0ZS5mcm9tSW5kZXggfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTU5hbWVzcGFjZXMgPSB7XG4gIGh0bWw6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyxcbiAgbWF0aG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01OYW1lc3BhY2VzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4vKiBnbG9iYWxzIE1TQXBwICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCBoYXMgJ3Vuc2FmZScgcHJpdmlsZWdlcyAocmVxdWlyZWQgYnkgd2luZG93czggYXBwcylcbiAqL1xuXG52YXIgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIGlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcwLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuYztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbnZhciBwcm9wVHlwZXNGYWN0b3J5ID0gcmVxdWlyZSgncHJvcC10eXBlcy9mYWN0b3J5Jyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdCcpO1xudmFyIFByb3BUeXBlcyA9IHByb3BUeXBlc0ZhY3RvcnkoUmVhY3QuaXNWYWxpZEVsZW1lbnQpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGhhc1JlYWRPbmx5VmFsdWUgPSB7XG4gIGJ1dHRvbjogdHJ1ZSxcbiAgY2hlY2tib3g6IHRydWUsXG4gIGltYWdlOiB0cnVlLFxuICBoaWRkZW46IHRydWUsXG4gIHJhZGlvOiB0cnVlLFxuICByZXNldDogdHJ1ZSxcbiAgc3VibWl0OiB0cnVlXG59O1xuXG5mdW5jdGlvbiBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKSB7XG4gICEoaW5wdXRQcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0UHJvcHMudmFsdWVMaW5rID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nKSA6IF9wcm9kSW52YXJpYW50KCc4NycpIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0UHJvcHMpO1xuICAhKGlucHV0UHJvcHMudmFsdWUgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCB0byB1c2UgdmFsdWUgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluay4nKSA6IF9wcm9kSW52YXJpYW50KCc4OCcpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gSWYgeW91IHdhbnQgdG8gdXNlIGNoZWNrZWQgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIGNoZWNrZWRMaW5rJykgOiBfcHJvZEludmFyaWFudCgnODknKSA6IHZvaWQgMDtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgfSxcbiAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUHJvdmlkZSBhIGxpbmtlZCBgdmFsdWVgIGF0dHJpYnV0ZSBmb3IgY29udHJvbGxlZCBmb3Jtcy4gWW91IHNob3VsZCBub3QgdXNlXG4gKiB0aGlzIG91dHNpZGUgb2YgdGhlIFJlYWN0RE9NIGNvbnRyb2xsZWQgZm9ybSBjb21wb25lbnRzLlxuICovXG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHtcbiAgY2hlY2tQcm9wVHlwZXM6IGZ1bmN0aW9uICh0YWdOYW1lLCBwcm9wcywgb3duZXIpIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCB0YWdOYW1lLCAncHJvcCcsIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcik7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIGZvcm0gcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gdmFsdWUgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMudmFsdWVMaW5rKSB7XG4gICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgY2hlY2tlZCBzdGF0dXMgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIGNoZWNrZWQgcHJvcFxuICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuICAgKi9cbiAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24gKGlucHV0UHJvcHMpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gICAqL1xuICBleGVjdXRlT25DaGFuZ2U6IGZ1bmN0aW9uIChpbnB1dFByb3BzLCBldmVudCkge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9IGVsc2UgaWYgKGlucHV0UHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLm9uQ2hhbmdlLmNhbGwodW5kZWZpbmVkLCBldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBpbmplY3RlZCA9IGZhbHNlO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBzd2FwcGluZyBvdXQgbW91bnQgaW1hZ2VzIGluIHRoZSBtaWRkbGUgb2ZcbiAgICogdGhlIHRyZWUuXG4gICAqL1xuICByZXBsYWNlTm9kZVdpdGhNYXJrdXA6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcbiAgICAgICEhaW5qZWN0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBfcHJvZEludmFyaWFudCgnMTA0JykgOiB2b2lkIDA7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9IGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQ7IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGBwcmV2RWxlbWVudGAgYW5kIGBuZXh0RWxlbWVudGAsIGRldGVybWluZXMgaWYgdGhlIGV4aXN0aW5nXG4gKiBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZCBhcyBvcHBvc2VkIHRvIGJlaW5nIGRlc3Ryb3llZCBvciByZXBsYWNlZCBieSBhIG5ld1xuICogaW5zdGFuY2UuIEJvdGggYXJndW1lbnRzIGFyZSBlbGVtZW50cy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhpcyBsb2dpYyBjYW5cbiAqIG9wZXJhdGUgb24gc3RhdGVsZXNzIHRyZWVzIHdpdGhvdXQgYW55IGJhY2tpbmcgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2RWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0RWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQuXG4gKiBAcHJvdGVjdGVkXG4gKi9cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG4gIHZhciBwcmV2RW1wdHkgPSBwcmV2RWxlbWVudCA9PT0gbnVsbCB8fCBwcmV2RWxlbWVudCA9PT0gZmFsc2U7XG4gIHZhciBuZXh0RW1wdHkgPSBuZXh0RWxlbWVudCA9PT0gbnVsbCB8fCBuZXh0RWxlbWVudCA9PT0gZmFsc2U7XG4gIGlmIChwcmV2RW1wdHkgfHwgbmV4dEVtcHR5KSB7XG4gICAgcmV0dXJuIHByZXZFbXB0eSA9PT0gbmV4dEVtcHR5O1xuICB9XG5cbiAgdmFyIHByZXZUeXBlID0gdHlwZW9mIHByZXZFbGVtZW50O1xuICB2YXIgbmV4dFR5cGUgPSB0eXBlb2YgbmV4dEVsZW1lbnQ7XG4gIGlmIChwcmV2VHlwZSA9PT0gJ3N0cmluZycgfHwgcHJldlR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5leHRUeXBlID09PSAnc3RyaW5nJyB8fCBuZXh0VHlwZSA9PT0gJ251bWJlcic7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5leHRUeXBlID09PSAnb2JqZWN0JyAmJiBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmIHByZXZFbGVtZW50LmtleSA9PT0gbmV4dEVsZW1lbnQua2V5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVzY2FwZSBhbmQgd3JhcCBrZXkgc28gaXQgaXMgc2FmZSB0byB1c2UgYXMgYSByZWFjdGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFVuZXNjYXBlIGFuZCB1bndyYXAga2V5IGZvciBodW1hbi1yZWFkYWJsZSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byB1bmVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHVuZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICB2YXIgdW5lc2NhcGVSZWdleCA9IC8oPTB8PTIpL2c7XG4gIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0wJzogJz0nLFxuICAgICc9Mic6ICc6J1xuICB9O1xuICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcblxuICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbn1cblxudmFyIEtleUVzY2FwZVV0aWxzID0ge1xuICBlc2NhcGU6IGVzY2FwZSxcbiAgdW5lc2NhcGU6IHVuZXNjYXBlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUVzY2FwZVV0aWxzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoYXJnKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGFyZztcbiAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgdmFyIGRpc3BsYXlOYW1lID0gYXJnLmNvbnN0cnVjdG9yICYmIGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8IHR5cGU7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXJnKTtcbiAgaWYgKGtleXMubGVuZ3RoID4gMCAmJiBrZXlzLmxlbmd0aCA8IDIwKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lICsgJyAoa2V5czogJyArIGtleXMuam9pbignLCAnKSArICcpJztcbiAgfVxuICByZXR1cm4gZGlzcGxheU5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHB1YmxpY0luc3RhbmNlKTtcbiAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgICAvLyBPbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgY2FsbGVyTmFtZS4gT3RoZXJ3aXNlIHdlIHNob3VsZCBiZSBzaWxlbnQuXG4gICAgICAvLyBXZSdyZSBwcm9iYWJseSBjYWxsaW5nIGZyb20gZW5xdWV1ZUNhbGxiYWNrLiBXZSBkb24ndCB3YW50IHRvIHdhcm5cbiAgICAgIC8vIHRoZXJlIGJlY2F1c2Ugd2UgYWxyZWFkeSB3YXJuZWQgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGxpZmVjeWNsZSBtZXRob2QuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY2FsbGVyTmFtZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBjdG9yICYmIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCwgJyVzKC4uLik6IENhbm5vdCB1cGRhdGUgZHVyaW5nIGFuIGV4aXN0aW5nIHN0YXRlIHRyYW5zaXRpb24gKHN1Y2ggYXMgJyArIFwid2l0aGluIGByZW5kZXJgIG9yIGFub3RoZXIgY29tcG9uZW50J3MgY29uc3RydWN0b3IpLiBSZW5kZXIgbWV0aG9kcyBcIiArICdzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgY29uc3RydWN0b3IgJyArICdzaWRlLWVmZmVjdHMgYXJlIGFuIGFudGktcGF0dGVybiwgYnV0IGNhbiBiZSBtb3ZlZCB0byAnICsgJ2Bjb21wb25lbnRXaWxsTW91bnRgLicsIGNhbGxlck5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGludGVybmFsSW5zdGFuY2U7XG59XG5cbi8qKlxuICogUmVhY3RVcGRhdGVRdWV1ZSBhbGxvd3MgZm9yIHN0YXRlIHVwZGF0ZXMgdG8gYmUgc2NoZWR1bGVkIGludG8gYSBsYXRlclxuICogcmVjb25jaWxpYXRpb24gc3RlcC5cbiAqL1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSB7XG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBpc01vdW50ZWQgaW5zaWRlIGl0cyByZW5kZXIoKSBmdW5jdGlvbi4gJyArICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgKyAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIC8vIER1cmluZyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlciB0aGlzIHdpbGwgc3RpbGwgYmUgbnVsbCBidXQgYWZ0ZXJcbiAgICAgIC8vIHRoYXQgd2lsbCBhbHdheXMgcmVuZGVyIHRvIHNvbWV0aGluZy4gQXQgbGVhc3QgZm9yIG5vdy4gU28gd2UgY2FuIHVzZVxuICAgICAgLy8gdGhpcyBoYWNrLlxuICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIHVwZGF0ZXNcbiAgICogaGF2ZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHVzZSBhcyBgdGhpc2AgY29udGV4dC5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGVyTmFtZSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVDYWxsYmFjazogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgY2FsbGVyTmFtZSk7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50LiBFaXRoZXIgZml4IGl0IG9yIGRpc2FsbG93IGRvaW5nIHNvIGNvbXBsZXRlbHkgaW5cbiAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuIEFsdGVybmF0aXZlbHksIHdlIGNhbiBkaXNhbGxvd1xuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBkdXJpbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gdHJ1ZTtcblxuICAgIC8vIEZ1dHVyZS1wcm9vZiAxNS41XG4gICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgJ3JlcGxhY2VTdGF0ZScpO1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldFN0YXRlKCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBxdWV1ZSA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8IChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHBhcnRpYWxTdGF0ZSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIGVucXVldWVFbGVtZW50SW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgbmV4dENvbnRleHQpIHtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIC8vIFRPRE86IGludHJvZHVjZSBfcGVuZGluZ0NvbnRleHQgaW5zdGVhZCBvZiBzZXR0aW5nIGl0IGRpcmVjdGx5LlxuICAgIGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIHZhbGlkYXRlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgICEoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjYWxsZXJOYW1lLCBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoY2FsbGJhY2spKSA6IF9wcm9kSW52YXJpYW50KCcxMjInLCBjYWxsZXJOYW1lLCBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoY2FsbGJhY2spKSA6IHZvaWQgMDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZVF1ZXVlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNzcGVjaWFsXG4gIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICB2YXIgaW5TY29wZVRhZ3MgPSBbJ2FwcGxldCcsICdjYXB0aW9uJywgJ2h0bWwnLCAndGFibGUnLCAndGQnLCAndGgnLCAnbWFycXVlZScsICdvYmplY3QnLCAndGVtcGxhdGUnLFxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2h0bWwtaW50ZWdyYXRpb24tcG9pbnRcbiAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYnkgbmFtZXNwYWNlIGhlcmUgLS0gZm9yIDx0aXRsZT4sIGluY2x1ZGluZyBpdCBoZXJlXG4gIC8vIGVycnMgb24gdGhlIHNpZGUgb2YgZmV3ZXIgd2FybmluZ3NcbiAgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuICB2YXIgYnV0dG9uU2NvcGVUYWdzID0gaW5TY29wZVRhZ3MuY29uY2F0KFsnYnV0dG9uJ10pO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcbiAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuXG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBjdXJyZW50OiBudWxsLFxuXG4gICAgZm9ybVRhZzogbnVsbCxcbiAgICBhVGFnSW5TY29wZTogbnVsbCxcbiAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgIG5vYnJUYWdJblNjb3BlOiBudWxsLFxuICAgIHBUYWdJbkJ1dHRvblNjb3BlOiBudWxsLFxuXG4gICAgbGlzdEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbCxcbiAgICBkbEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbFxuICB9O1xuXG4gIHZhciB1cGRhdGVkQW5jZXN0b3JJbmZvID0gZnVuY3Rpb24gKG9sZEluZm8sIHRhZywgaW5zdGFuY2UpIHtcbiAgICB2YXIgYW5jZXN0b3JJbmZvID0gX2Fzc2lnbih7fSwgb2xkSW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbyk7XG4gICAgdmFyIGluZm8gPSB7IHRhZzogdGFnLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcblxuICAgIGlmIChpblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGUgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGUgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGJ1dHRvblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlZSBydWxlcyBmb3IgJ2xpJywgJ2RkJywgJ2R0JyBzdGFydCB0YWdzIGluXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIGlmIChzcGVjaWFsVGFncy5pbmRleE9mKHRhZykgIT09IC0xICYmIHRhZyAhPT0gJ2FkZHJlc3MnICYmIHRhZyAhPT0gJ2RpdicgJiYgdGFnICE9PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgfVxuXG4gICAgYW5jZXN0b3JJbmZvLmN1cnJlbnQgPSBpbmZvO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2Zvcm0nKSB7XG4gICAgICBhbmNlc3RvckluZm8uZm9ybVRhZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdhJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ25vYnInKSB7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2RkJyB8fCB0YWcgPT09ICdkdCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuY2VzdG9ySW5mbztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgaXNUYWdWYWxpZFdpdGhQYXJlbnQgPSBmdW5jdGlvbiAodGFnLCBwYXJlbnRUYWcpIHtcbiAgICAvLyBGaXJzdCwgbGV0J3MgY2hlY2sgaWYgd2UncmUgaW4gYW4gdW51c3VhbCBwYXJzaW5nIG1vZGUuLi5cbiAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluc2VsZWN0XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICdvcHRncm91cCcgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgY2FzZSAnb3B0Z3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBTdHJpY3RseSBzcGVha2luZywgc2VlaW5nIGFuIDxvcHRpb24+IGRvZXNuJ3QgbWVhbiB3ZSdyZSBpbiBhIDxzZWxlY3Q+XG4gICAgICAvLyBidXRcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50ZFxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY2FwdGlvblxuICAgICAgLy8gTm8gc3BlY2lhbCBiZWhhdmlvciBzaW5jZSB0aGVzZSBydWxlcyBmYWxsIGJhY2sgdG8gXCJpbiBib2R5XCIgbW9kZSBmb3JcbiAgICAgIC8vIGFsbCBleGNlcHQgc3BlY2lhbCB0YWJsZSBub2RlcyB3aGljaCBjYXVzZSBiYWQgcGFyc2luZyBiZWhhdmlvciBhbnl3YXkuXG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRyXG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRib2R5XG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0cicgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY29sZ3JvdXBcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NvbCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGFibGVcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NhcHRpb24nIHx8IHRhZyA9PT0gJ2NvbGdyb3VwJyB8fCB0YWcgPT09ICd0Ym9keScgfHwgdGFnID09PSAndGZvb3QnIHx8IHRhZyA9PT0gJ3RoZWFkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5oZWFkXG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2Jhc2UnIHx8IHRhZyA9PT0gJ2Jhc2Vmb250JyB8fCB0YWcgPT09ICdiZ3NvdW5kJyB8fCB0YWcgPT09ICdsaW5rJyB8fCB0YWcgPT09ICdtZXRhJyB8fCB0YWcgPT09ICd0aXRsZScgfHwgdGFnID09PSAnbm9zY3JpcHQnIHx8IHRhZyA9PT0gJ25vZnJhbWVzJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCN0aGUtaHRtbC1lbGVtZW50XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2h0bWwnO1xuICAgIH1cblxuICAgIC8vIFByb2JhYmx5IGluIHRoZSBcImluIGJvZHlcIiBwYXJzaW5nIG1vZGUsIHNvIHdlIG91dGxhdyBvbmx5IHRhZyBjb21ib3NcbiAgICAvLyB3aGVyZSB0aGUgcGFyc2luZyBydWxlcyBjYXVzZSBpbXBsaWNpdCBvcGVucyBvciBjbG9zZXMgdG8gYmUgYWRkZWQuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgIT09ICdoMScgJiYgcGFyZW50VGFnICE9PSAnaDInICYmIHBhcmVudFRhZyAhPT0gJ2gzJyAmJiBwYXJlbnRUYWcgIT09ICdoNCcgJiYgcGFyZW50VGFnICE9PSAnaDUnICYmIHBhcmVudFRhZyAhPT0gJ2g2JztcblxuICAgICAgY2FzZSAncnAnOlxuICAgICAgY2FzZSAncnQnOlxuICAgICAgICByZXR1cm4gaW1wbGllZEVuZFRhZ3MuaW5kZXhPZihwYXJlbnRUYWcpID09PSAtMTtcblxuICAgICAgY2FzZSAnYm9keSc6XG4gICAgICBjYXNlICdjYXB0aW9uJzpcbiAgICAgIGNhc2UgJ2NvbCc6XG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgY2FzZSAndGgnOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndHInOlxuICAgICAgICAvLyBUaGVzZSB0YWdzIGFyZSBvbmx5IHZhbGlkIHdpdGggYSBmZXcgcGFyZW50cyB0aGF0IGhhdmUgc3BlY2lhbCBjaGlsZFxuICAgICAgICAvLyBwYXJzaW5nIHJ1bGVzIC0tIGlmIHdlJ3JlIGRvd24gaGVyZSwgdGhlbiBub25lIG9mIHRob3NlIG1hdGNoZWQgYW5kXG4gICAgICAgIC8vIHNvIHdlIGFsbG93IGl0IG9ubHkgaWYgd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSBwYXJlbnQgaXMsIGFzIGFsbCBvdGhlclxuICAgICAgICAvLyBjYXNlcyBhcmUgaW52YWxpZC5cbiAgICAgICAgcmV0dXJuIHBhcmVudFRhZyA9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXJcbiAgICovXG4gIHZhciBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnID0gZnVuY3Rpb24gKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgY2FzZSAnYXJ0aWNsZSc6XG4gICAgICBjYXNlICdhc2lkZSc6XG4gICAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIGNhc2UgJ2RpYWxvZyc6XG4gICAgICBjYXNlICdkaXInOlxuICAgICAgY2FzZSAnZGl2JzpcbiAgICAgIGNhc2UgJ2RsJzpcbiAgICAgIGNhc2UgJ2ZpZWxkc2V0JzpcbiAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgY2FzZSAnZmlndXJlJzpcbiAgICAgIGNhc2UgJ2Zvb3Rlcic6XG4gICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgY2FzZSAnaGdyb3VwJzpcbiAgICAgIGNhc2UgJ21haW4nOlxuICAgICAgY2FzZSAnbWVudSc6XG4gICAgICBjYXNlICduYXYnOlxuICAgICAgY2FzZSAnb2wnOlxuICAgICAgY2FzZSAncCc6XG4gICAgICBjYXNlICdzZWN0aW9uJzpcbiAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgY2FzZSAndWwnOlxuICAgICAgY2FzZSAncHJlJzpcbiAgICAgIGNhc2UgJ2xpc3RpbmcnOlxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgY2FzZSAnaHInOlxuICAgICAgY2FzZSAneG1wJzpcbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2xpJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdkZCc6XG4gICAgICBjYXNlICdkdCc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIC8vIFNwZWMgc2F5cyBzb21ldGhpbmcgYWJvdXQgc3RvcmluZyBhIGxpc3Qgb2YgbWFya2VycywgYnV0IGl0IHNvdW5kc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIHRoaXMgY2hlY2suXG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHaXZlbiBhIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IGluc3RhbmNlLCByZXR1cm4gYSBsaXN0IG9mIGl0cyByZWN1cnNpdmVcbiAgICogb3duZXJzLCBzdGFydGluZyBhdCB0aGUgcm9vdCBhbmQgZW5kaW5nIHdpdGggdGhlIGluc3RhbmNlIGl0c2VsZi5cbiAgICovXG4gIHZhciBmaW5kT3duZXJTdGFjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICBkbyB7XG4gICAgICBzdGFjay5wdXNoKGluc3RhbmNlKTtcbiAgICB9IHdoaWxlIChpbnN0YW5jZSA9IGluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIHN0YWNrLnJldmVyc2UoKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgdmFyIGRpZFdhcm4gPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkVGV4dCwgY2hpbGRJbnN0YW5jZSwgYW5jZXN0b3JJbmZvKSB7XG4gICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLmN1cnJlbnQ7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICBpZiAoY2hpbGRUZXh0ICE9IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNoaWxkVGFnID09IG51bGwsICd2YWxpZGF0ZURPTU5lc3Rpbmc6IHdoZW4gY2hpbGRUZXh0IGlzIHBhc3NlZCwgY2hpbGRUYWcgc2hvdWxkIGJlIG51bGwnKSA6IHZvaWQgMDtcbiAgICAgIGNoaWxkVGFnID0gJyN0ZXh0JztcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZFBhcmVudCA9IGlzVGFnVmFsaWRXaXRoUGFyZW50KGNoaWxkVGFnLCBwYXJlbnRUYWcpID8gbnVsbCA6IHBhcmVudEluZm87XG4gICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgcHJvYmxlbWF0aWMgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcblxuICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgdmFyIGFuY2VzdG9yVGFnID0gcHJvYmxlbWF0aWMudGFnO1xuICAgICAgdmFyIGFuY2VzdG9ySW5zdGFuY2UgPSBwcm9ibGVtYXRpYy5pbnN0YW5jZTtcblxuICAgICAgdmFyIGNoaWxkT3duZXIgPSBjaGlsZEluc3RhbmNlICYmIGNoaWxkSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVyID0gYW5jZXN0b3JJbnN0YW5jZSAmJiBhbmNlc3Rvckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG5cbiAgICAgIHZhciBjaGlsZE93bmVycyA9IGZpbmRPd25lclN0YWNrKGNoaWxkT3duZXIpO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJzID0gZmluZE93bmVyU3RhY2soYW5jZXN0b3JPd25lcik7XG5cbiAgICAgIHZhciBtaW5TdGFja0xlbiA9IE1hdGgubWluKGNoaWxkT3duZXJzLmxlbmd0aCwgYW5jZXN0b3JPd25lcnMubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuXG4gICAgICB2YXIgZGVlcGVzdENvbW1vbiA9IC0xO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1pblN0YWNrTGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkT3duZXJzW2ldID09PSBhbmNlc3Rvck93bmVyc1tpXSkge1xuICAgICAgICAgIGRlZXBlc3RDb21tb24gPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBVTktOT1dOID0gJyh1bmtub3duKSc7XG4gICAgICB2YXIgY2hpbGRPd25lck5hbWVzID0gY2hpbGRPd25lcnMuc2xpY2UoZGVlcGVzdENvbW1vbiArIDEpLm1hcChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJOYW1lcyA9IGFuY2VzdG9yT3duZXJzLnNsaWNlKGRlZXBlc3RDb21tb24gKyAxKS5tYXAoZnVuY3Rpb24gKGluc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuZ2V0TmFtZSgpIHx8IFVOS05PV047XG4gICAgICB9KTtcbiAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoXG4gICAgICAvLyBJZiB0aGUgcGFyZW50IGFuZCBjaGlsZCBpbnN0YW5jZXMgaGF2ZSBhIGNvbW1vbiBvd25lciBhbmNlc3Rvciwgc3RhcnRcbiAgICAgIC8vIHdpdGggdGhhdCAtLSBvdGhlcndpc2Ugd2UganVzdCBzdGFydCB3aXRoIHRoZSBwYXJlbnQncyBvd25lcnMuXG4gICAgICBkZWVwZXN0Q29tbW9uICE9PSAtMSA/IGNoaWxkT3duZXJzW2RlZXBlc3RDb21tb25dLmdldE5hbWUoKSB8fCBVTktOT1dOIDogW10sIGFuY2VzdG9yT3duZXJOYW1lcywgYW5jZXN0b3JUYWcsXG4gICAgICAvLyBJZiB3ZSdyZSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgKG5vbi1wYXJlbnQpIGFuY2VzdHJ5LCBhZGQgJy4uLidcbiAgICAgIGludmFsaWRBbmNlc3RvciA/IFsnLi4uJ10gOiBbXSwgY2hpbGRPd25lck5hbWVzLCBjaGlsZFRhZykuam9pbignID4gJyk7XG5cbiAgICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIG93bmVySW5mbztcbiAgICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICAgIHZhciB3aGl0ZXNwYWNlSW5mbyA9ICcnO1xuICAgICAgaWYgKGNoaWxkVGFnID09PSAnI3RleHQnKSB7XG4gICAgICAgIGlmICgvXFxTLy50ZXN0KGNoaWxkVGV4dCkpIHtcbiAgICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdUZXh0IG5vZGVzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdXaGl0ZXNwYWNlIHRleHQgbm9kZXMnO1xuICAgICAgICAgIHdoaXRlc3BhY2VJbmZvID0gXCIgTWFrZSBzdXJlIHlvdSBkb24ndCBoYXZlIGFueSBleHRyYSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBvbiBcIiArICdlYWNoIGxpbmUgb2YgeW91ciBzb3VyY2UgY29kZS4nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICc8JyArIGNoaWxkVGFnICsgJz4nO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uJXMgJyArICdTZWUgJXMuJXMnLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcsIHdoaXRlc3BhY2VJbmZvLCBvd25lckluZm8sIGluZm8pIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGRlc2NlbmRhbnQgb2YgJyArICc8JXM+LiBTZWUgJXMuJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCBvd25lckluZm8pIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm87XG5cbiAgLy8gRm9yIHRlc3RpbmdcbiAgdmFsaWRhdGVET01OZXN0aW5nLmlzVGFnVmFsaWRJbkNvbnRleHQgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcbiAgICByZXR1cm4gaXNUYWdWYWxpZFdpdGhQYXJlbnQodGFnLCBwYXJlbnRUYWcpICYmICFmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKHRhZywgYW5jZXN0b3JJbmZvKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0ZURPTU5lc3Rpbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgY2hhckNvZGVgIHJlcHJlc2VudHMgdGhlIGFjdHVhbCBcImNoYXJhY3RlciBjb2RlXCIgYW5kIGlzIHNhZmUgdG8gdXNlIHdpdGhcbiAqIGBTdHJpbmcuZnJvbUNoYXJDb2RlYC4gQXMgc3VjaCwgb25seSBrZXlzIHRoYXQgY29ycmVzcG9uZCB0byBwcmludGFibGVcbiAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuICogVGhlIFRhYi1rZXkgaXMgY29uc2lkZXJlZCBub24tcHJpbnRhYmxlIGFuZCBkb2VzIG5vdCBoYXZlIGEgYGNoYXJDb2RlYCxcbiAqIHByZXN1bWFibHkgYmVjYXVzZSBpdCBkb2VzIG5vdCBwcm9kdWNlIGEgdGFiLWNoYXJhY3RlciBpbiBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE5vcm1hbGl6ZWQgYGNoYXJDb2RlYCBwcm9wZXJ0eS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IHJlcXVpcmUoJy4vbG93UHJpb3JpdHlXYXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IF9wcm9kSW52YXJpYW50KCc4NScpIDogdm9pZCAwO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG4vKipcbiAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICpcbiAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICpcbiAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xuICB9XG59O1xuXG4vKipcbiAqIERlcHJlY2F0ZWQgQVBJcy4gVGhlc2UgQVBJcyB1c2VkIHRvIGV4aXN0IG9uIGNsYXNzaWMgUmVhY3QgY2xhc3NlcyBidXQgc2luY2VcbiAqIHdlIHdvdWxkIGxpa2UgdG8gZGVwcmVjYXRlIHRoZW0sIHdlJ3JlIG5vdCBnb2luZyB0byBtb3ZlIHRoZW0gb3ZlciB0byB0aGlzXG4gKiBtb2Rlcm4gYmFzZSBjbGFzcy4gSW5zdGVhZCwgd2UgZGVmaW5lIGEgZ2V0dGVyIHRoYXQgd2FybnMgaWYgaXQncyBhY2Nlc3NlZC5cbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIG1ldGhvZE5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcoZm5OYW1lLCBkZXByZWNhdGVkQVBJc1tmbk5hbWVdKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGhlbHBlcnMgZm9yIHRoZSB1cGRhdGluZyBzdGF0ZSBvZiBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVhY3RQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIC8vIER1cGxpY2F0ZWQgZnJvbSBSZWFjdENvbXBvbmVudC5cbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cbkNvbXBvbmVudER1bW15LnByb3RvdHlwZSA9IFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWFjdFB1cmVDb21wb25lbnQ7XG4vLyBBdm9pZCBhbiBleHRyYSBwcm90b3R5cGUganVtcCBmb3IgdGhlc2UgbWV0aG9kcy5cbl9hc3NpZ24oUmVhY3RQdXJlQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDb21wb25lbnQucHJvdG90eXBlKTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgUHVyZUNvbXBvbmVudDogUmVhY3RQdXJlQ29tcG9uZW50XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIGNvbnN0cnVjdG9yICYmIChjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBjb25zdHJ1Y3Rvci5uYW1lKSB8fCAnUmVhY3RDbGFzcycpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdHJ5IHtcbiAgICAvLyAkRmxvd0ZpeE1lIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHt9IH0pO1xuICAgIGNhbkRlZmluZVByb3BlcnR5ID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FuRGVmaW5lUHJvcGVydHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQgdHlwZS4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG5cbm1vZHVsZS5leHBvcnRzID0gUkVBQ1RfRUxFTUVOVF9UWVBFOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gUmVhY3QgMTUuNSByZWZlcmVuY2VzIHRoaXMgbW9kdWxlLCBhbmQgYXNzdW1lcyBQcm9wVHlwZXMgYXJlIHN0aWxsIGNhbGxhYmxlIGluIHByb2R1Y3Rpb24uXG4vLyBUaGVyZWZvcmUgd2UgcmUtZXhwb3J0IGRldmVsb3BtZW50LW9ubHkgdmVyc2lvbiB3aXRoIGFsbCB0aGUgUHJvcFR5cGVzIGNoZWNrcyBoZXJlLlxuLy8gSG93ZXZlciBpZiBvbmUgaXMgbWlncmF0aW5nIHRvIHRoZSBgcHJvcC10eXBlc2AgbnBtIGxpYnJhcnksIHRoZXkgd2lsbCBnbyB0aHJvdWdoIHRoZVxuLy8gYGluZGV4LmpzYCBlbnRyeSBwb2ludCwgYW5kIGl0IHdpbGwgYnJhbmNoIGRlcGVuZGluZyBvbiB0aGUgZW52aXJvbm1lbnQuXG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQpIHtcbiAgLy8gSXQgaXMgc3RpbGwgYWxsb3dlZCBpbiAxNS41LlxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IGZhbHNlO1xuICByZXR1cm4gZmFjdG9yeShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRGbGFncyA9IHtcbiAgaGFzQ2FjaGVkQ2hpbGROb2RlczogMSA8PCAwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgaXRlbXMgdGhhdCBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBpbnRvIHRoZSBmaXJzdCBvbmUuIFRoaXNcbiAqIGlzIHVzZWQgdG8gY29uc2VydmUgbWVtb3J5IGJ5IGF2b2lkaW5nIGFycmF5IGFsbG9jYXRpb25zLCBhbmQgdGh1cyBzYWNyaWZpY2VzXG4gKiBBUEkgY2xlYW5uZXNzLiBTaW5jZSBgY3VycmVudGAgY2FuIGJlIG51bGwgYmVmb3JlIGJlaW5nIHBhc3NlZCBpbiBhbmQgbm90XG4gKiBudWxsIGFmdGVyIHRoaXMgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBhc3NpZ24gaXQgYmFjayB0byBgY3VycmVudGA6XG4gKlxuICogYGEgPSBhY2N1bXVsYXRlSW50byhhLCBiKTtgXG4gKlxuICogVGhpcyBBUEkgc2hvdWxkIGJlIHNwYXJpbmdseSB1c2VkLiBUcnkgYGFjY3VtdWxhdGVgIGZvciBzb21ldGhpbmcgY2xlYW5lci5cbiAqXG4gKiBAcmV0dXJuIHsqfGFycmF5PCo+fSBBbiBhY2N1bXVsYXRpb24gb2YgaXRlbXMuXG4gKi9cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCwgbmV4dCkge1xuICAhKG5leHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJykgOiBfcHJvZEludmFyaWFudCgnMzAnKSA6IHZvaWQgMDtcblxuICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICAvLyBCb3RoIGFyZSBub3QgZW1wdHkuIFdhcm5pbmc6IE5ldmVyIGNhbGwgeC5jb25jYXQoeSkgd2hlbiB5b3UgYXJlIG5vdFxuICAvLyBjZXJ0YWluIHRoYXQgeCBpcyBhbiBBcnJheSAoeCBjb3VsZCBiZSBhIHN0cmluZyB3aXRoIGNvbmNhdCBtZXRob2QpLlxuICBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50KSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5leHQpKSB7XG4gICAgICBjdXJyZW50LnB1c2guYXBwbHkoY3VycmVudCwgbmV4dCk7XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAvLyBBIGJpdCB0b28gZGFuZ2Vyb3VzIHRvIG11dGF0ZSBgbmV4dGAuXG4gICAgcmV0dXJuIFtjdXJyZW50XS5jb25jYXQobmV4dCk7XG4gIH1cblxuICByZXR1cm4gW2N1cnJlbnQsIG5leHRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFjY3VtdWxhdGVJbnRvOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xuXG5mdW5jdGlvbiBmb3JFYWNoQWNjdW11bGF0ZWQoYXJyLCBjYiwgc2NvcGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY29udGVudEtleSA9IG51bGw7XG5cbi8qKlxuICogR2V0cyB0aGUga2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudCBvbiBhIERPTSBub2RlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IEtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpIHtcbiAgaWYgKCFjb250ZW50S2V5ICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIC8vIFByZWZlciB0ZXh0Q29udGVudCB0byBpbm5lclRleHQgYmVjYXVzZSBtYW55IGJyb3dzZXJzIHN1cHBvcnQgYm90aCBidXRcbiAgICAvLyBTVkcgPHRleHQ+IGVsZW1lbnRzIGRvbid0IHN1cHBvcnQgaW5uZXJUZXh0IGV2ZW4gd2hlbiA8ZGl2PiBkb2VzLlxuICAgIGNvbnRlbnRLZXkgPSAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cblxudmFyIENhbGxiYWNrUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhbGxiYWNrUXVldWUoYXJnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGxiYWNrUXVldWUpO1xuXG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgdGhpcy5fYXJnID0gYXJnO1xuICB9XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uIGVucXVldWUoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMuX2NvbnRleHRzID0gdGhpcy5fY29udGV4dHMgfHwgW107XG4gICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfTtcblxuICAvKipcbiAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcbiAgICogdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIGNvbXBvbmVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLm5vdGlmeUFsbCA9IGZ1bmN0aW9uIG5vdGlmeUFsbCgpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICAgIHZhciBjb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzO1xuICAgIHZhciBhcmcgPSB0aGlzLl9hcmc7XG4gICAgaWYgKGNhbGxiYWNrcyAmJiBjb250ZXh0cykge1xuICAgICAgIShjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZScpIDogX3Byb2RJbnZhcmlhbnQoJzI0JykgOiB2b2lkIDA7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwoY29udGV4dHNbaV0sIGFyZyk7XG4gICAgICB9XG4gICAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9O1xuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLmNoZWNrcG9pbnQgPSBmdW5jdGlvbiBjaGVja3BvaW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPyB0aGlzLl9jYWxsYmFja3MubGVuZ3RoIDogMDtcbiAgfTtcblxuICBDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5yb2xsYmFjayA9IGZ1bmN0aW9uIHJvbGxiYWNrKGxlbikge1xuICAgIGlmICh0aGlzLl9jYWxsYmFja3MgJiYgdGhpcy5fY29udGV4dHMpIHtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcy5sZW5ndGggPSBsZW47XG4gICAgICB0aGlzLl9jb250ZXh0cy5sZW5ndGggPSBsZW47XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGludGVybmFsIHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLlxuICAgKi9cblxuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiBkZXN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfTtcblxuICByZXR1cm4gQ2FsbGJhY2tRdWV1ZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2FsbGJhY2tRdWV1ZSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RGZWF0dXJlRmxhZ3MgPSB7XG4gIC8vIFdoZW4gdHJ1ZSwgY2FsbCBjb25zb2xlLnRpbWUoKSBiZWZvcmUgYW5kIC50aW1lRW5kKCkgYWZ0ZXIgZWFjaCB0b3AtbGV2ZWxcbiAgLy8gcmVuZGVyIChib3RoIGluaXRpYWwgcmVuZGVycyBhbmQgdXBkYXRlcykuIFVzZWZ1bCB3aGVuIGxvb2tpbmcgYXQgcHJvZC1tb2RlXG4gIC8vIHRpbWVsaW5lIHByb2ZpbGVzIGluIENocm9tZSwgZm9yIGV4YW1wbGUuXG4gIGxvZ1RvcExldmVsUmVuZGVyczogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RGZWF0dXJlRmxhZ3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbmZ1bmN0aW9uIGlzQ2hlY2thYmxlKGVsZW0pIHtcbiAgdmFyIHR5cGUgPSBlbGVtLnR5cGU7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWU7XG4gIHJldHVybiBub2RlTmFtZSAmJiBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmICh0eXBlID09PSAnY2hlY2tib3gnIHx8IHR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFja2VyKGluc3QpIHtcbiAgcmV0dXJuIGluc3QuX3dyYXBwZXJTdGF0ZS52YWx1ZVRyYWNrZXI7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRyYWNrZXIoaW5zdCwgdHJhY2tlcikge1xuICBpbnN0Ll93cmFwcGVyU3RhdGUudmFsdWVUcmFja2VyID0gdHJhY2tlcjtcbn1cblxuZnVuY3Rpb24gZGV0YWNoVHJhY2tlcihpbnN0KSB7XG4gIGRlbGV0ZSBpbnN0Ll93cmFwcGVyU3RhdGUudmFsdWVUcmFja2VyO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZUZyb21Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlO1xuICBpZiAobm9kZSkge1xuICAgIHZhbHVlID0gaXNDaGVja2FibGUobm9kZSkgPyAnJyArIG5vZGUuY2hlY2tlZCA6IG5vZGUudmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgaW5wdXRWYWx1ZVRyYWNraW5nID0ge1xuICAvLyBleHBvc2VkIGZvciB0ZXN0aW5nXG4gIF9nZXRUcmFja2VyRnJvbU5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGdldFRyYWNrZXIoUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkpO1xuICB9LFxuXG5cbiAgdHJhY2s6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgaWYgKGdldFRyYWNrZXIoaW5zdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgIHZhciB2YWx1ZUZpZWxkID0gaXNDaGVja2FibGUobm9kZSkgPyAnY2hlY2tlZCcgOiAndmFsdWUnO1xuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgdmFsdWVGaWVsZCk7XG5cbiAgICB2YXIgY3VycmVudFZhbHVlID0gJycgKyBub2RlW3ZhbHVlRmllbGRdO1xuXG4gICAgLy8gaWYgc29tZW9uZSBoYXMgYWxyZWFkeSBkZWZpbmVkIGEgdmFsdWUgb3IgU2FmYXJpLCB0aGVuIGJhaWxcbiAgICAvLyBhbmQgZG9uJ3QgdHJhY2sgdmFsdWUgd2lsbCBjYXVzZSBvdmVyIHJlcG9ydGluZyBvZiBjaGFuZ2VzLFxuICAgIC8vIGJ1dCBpdCdzIGJldHRlciB0aGVuIGEgaGFyZCBmYWlsdXJlXG4gICAgLy8gKG5lZWRlZCBmb3IgY2VydGFpbiB0ZXN0cyB0aGF0IHNweU9uIGlucHV0IHZhbHVlcyBhbmQgU2FmYXJpKVxuICAgIGlmIChub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpIHx8IHR5cGVvZiBkZXNjcmlwdG9yLmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZGVzY3JpcHRvci5zZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXR0YWNoVHJhY2tlcihpbnN0LCB7XG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzdG9wVHJhY2tpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoVHJhY2tlcihpbnN0KTtcbiAgICAgICAgZGVsZXRlIG5vZGVbdmFsdWVGaWVsZF07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlVmFsdWVJZkNoYW5nZWQ6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgaWYgKCFpbnN0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0cmFja2VyID0gZ2V0VHJhY2tlcihpbnN0KTtcblxuICAgIGlmICghdHJhY2tlcikge1xuICAgICAgaW5wdXRWYWx1ZVRyYWNraW5nLnRyYWNrKGluc3QpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGxhc3RWYWx1ZSA9IHRyYWNrZXIuZ2V0VmFsdWUoKTtcbiAgICB2YXIgbmV4dFZhbHVlID0gZ2V0VmFsdWVGcm9tTm9kZShSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KSk7XG5cbiAgICBpZiAobmV4dFZhbHVlICE9PSBsYXN0VmFsdWUpIHtcbiAgICAgIHRyYWNrZXIuc2V0VmFsdWUobmV4dFZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciB0cmFja2VyID0gZ2V0VHJhY2tlcihpbnN0KTtcbiAgICBpZiAodHJhY2tlcikge1xuICAgICAgdHJhY2tlci5zdG9wVHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW5wdXRWYWx1ZVRyYWNraW5nOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1pbnB1dC1lbGVtZW50Lmh0bWwjaW5wdXQtdHlwZS1hdHRyLXN1bW1hcnlcbiAqL1xuXG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgY29sb3I6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIHJhbmdlOiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgdGV4dDogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB3ZWVrOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgIHJldHVybiAhIXN1cHBvcnRlZElucHV0VHlwZXNbZWxlbS50eXBlXTtcbiAgfVxuXG4gIGlmIChub2RlTmFtZSA9PT0gJ3RleHRhcmVhJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uIChzY3JvbGxQb3NpdGlvbikge1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQb3NpdGlvbi55O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguIGlubmVyVGV4dCBpcyBhIHBvb3Igc3Vic3RpdHV0ZSBmb3IgdGV4dENvbnRlbnQgYW5kLCBhbW9uZyBtYW55XG4gKiBpc3N1ZXMsIGluc2VydHMgPGJyPiBpbnN0ZWFkIG9mIHRoZSBsaXRlcmFsIG5ld2xpbmUgY2hhcnMuIGlubmVySFRNTCBiZWhhdmVzXG4gKiBhcyBpdCBzaG91bGQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uIChub2RlLCB0ZXh0KSB7XG4gIGlmICh0ZXh0KSB7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cbiAgICBpZiAoZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJiBmaXJzdENoaWxkLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBpZiAoISgndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpIHtcbiAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uIChub2RlLCB0ZXh0KSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldElubmVySFRNTChub2RlLCBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUZXh0Q29udGVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGdyaWRSb3c6IHRydWUsXG4gIGdyaWRSb3dFbmQ6IHRydWUsXG4gIGdyaWRSb3dTcGFuOiB0cnVlLFxuICBncmlkUm93U3RhcnQ6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGdyaWRDb2x1bW5FbmQ6IHRydWUsXG4gIGdyaWRDb2x1bW5TcGFuOiB0cnVlLFxuICBncmlkQ29sdW1uU3RhcnQ6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIGZsb29kT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IHRydWUsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0cnVlLFxuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZVxuICB9LFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IHtcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgb3V0bGluZVdpZHRoOiB0cnVlLFxuICAgIG91dGxpbmVTdHlsZTogdHJ1ZSxcbiAgICBvdXRsaW5lQ29sb3I6IHRydWVcbiAgfVxufTtcblxudmFyIENTU1Byb3BlcnR5ID0ge1xuICBpc1VuaXRsZXNzTnVtYmVyOiBpc1VuaXRsZXNzTnVtYmVyLFxuICBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6IHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoJ15bJyArIERPTVByb3BlcnR5LkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbnZhciBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG52YXIgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoYXR0cmlidXRlTmFtZSkge1xuICBpZiAodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWU6IGAlc2AnLCBhdHRyaWJ1dGVOYW1lKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgJiYgIXZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNOdW1lcmljVmFsdWUgJiYgaXNOYU4odmFsdWUpIHx8IHByb3BlcnR5SW5mby5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSAmJiB2YWx1ZSA8IDEgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IGZhbHNlO1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgSUQgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBVbmVzY2FwZWQgSUQuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZy5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcihpZCk7XG4gIH0sXG5cbiAgc2V0QXR0cmlidXRlRm9ySUQ6IGZ1bmN0aW9uIChub2RlLCBpZCkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FLCBpZCk7XG4gIH0sXG5cbiAgY3JlYXRlTWFya3VwRm9yUm9vdDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBET01Qcm9wZXJ0eS5ST09UX0FUVFJJQlVURV9OQU1FICsgJz1cIlwiJztcbiAgfSxcblxuICBzZXRBdHRyaWJ1dGVGb3JSb290OiBmdW5jdGlvbiAobm9kZSkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUsICcnKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7P3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgbnVsbCBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbiAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz1cIlwiJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgY3VzdG9tIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgZW1wdHkgc3RyaW5nIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkpIHtcbiAgICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuICAgICAgICAvLyBgdG9TdHJpbmdgZWQgYnkgSUU4LzkuXG4gICAgICAgIG5vZGVbcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZXNwYWNlO1xuICAgICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG4gICAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBhdHRyaWJ1dGVOYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBheWxvYWQgPSB7fTtcbiAgICAgIHBheWxvYWRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0VmFsdWVGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uIChub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsICcnICsgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgICAgcGF5bG9hZFtuYW1lXSA9IHZhbHVlO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpLl9kZWJ1Z0lELFxuICAgICAgICB0eXBlOiAndXBkYXRlIGF0dHJpYnV0ZScsXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBhdHRyaWJ1dGVzIGZyb20gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGRlbGV0ZVZhbHVlRm9yQXR0cmlidXRlOiBmdW5jdGlvbiAobm9kZSwgbmFtZSkge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5zdGFuY2VJRDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICdyZW1vdmUgYXR0cmlidXRlJyxcbiAgICAgICAgcGF5bG9hZDogbmFtZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZDtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlKSB7XG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3JlbW92ZSBhdHRyaWJ1dGUnLFxuICAgICAgICBwYXlsb2FkOiBuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCAmJiB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSkge1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcblxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgdmFsdWVQcm9wTmFtZXMgPSBbJ3ZhbHVlJywgJ2RlZmF1bHRWYWx1ZSddO1xuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tTZWxlY3RQcm9wVHlwZXMoaW5zdCwgcHJvcHMpIHtcbiAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCdzZWxlY3QnLCBwcm9wcywgb3duZXIpO1xuXG4gIGlmIChwcm9wcy52YWx1ZUxpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlTGluaykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlTGlua2AgcHJvcCBvbiBgc2VsZWN0YCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgIGRpZFdhcm5WYWx1ZUxpbmsgPSB0cnVlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZVByb3BOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wTmFtZSA9IHZhbHVlUHJvcE5hbWVzW2ldO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pO1xuICAgIGlmIChwcm9wcy5tdWx0aXBsZSAmJiAhaXNBcnJheSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgfSBlbHNlIGlmICghcHJvcHMubXVsdGlwbGUgJiYgaXNBcnJheSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgJyArICd2YWx1ZSBpZiBgbXVsdGlwbGVgIGlzIGZhbHNlLiVzJywgcHJvcE5hbWUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGluc3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbXVsdGlwbGVcbiAqIEBwYXJhbSB7Kn0gcHJvcFZhbHVlIEEgc3RyaW5nYWJsZSAod2l0aCBgbXVsdGlwbGVgLCBhIGxpc3Qgb2Ygc3RyaW5nYWJsZXMpLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhpbnN0LCBtdWx0aXBsZSwgcHJvcFZhbHVlKSB7XG4gIHZhciBzZWxlY3RlZFZhbHVlLCBpO1xuICB2YXIgb3B0aW9ucyA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLm9wdGlvbnM7XG5cbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkob3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICBpZiAob3B0aW9uc1tpXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBEbyBub3Qgc2V0IGBzZWxlY3QudmFsdWVgIGFzIGV4YWN0IGJlaGF2aW9yIGlzbid0IGNvbnNpc3RlbnQgYWNyb3NzIGFsbFxuICAgIC8vIGJyb3dzZXJzIGZvciBhbGwgY2FzZXMuXG4gICAgc2VsZWN0ZWRWYWx1ZSA9ICcnICsgcHJvcFZhbHVlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBvcHRpb25hbGx5IHNldHRpbmcgdGhlXG4gKiBwcm9wcyBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC4gSWYgYG11bHRpcGxlYCBpcyBmYWxzZSwgdGhlIHByb3AgbXVzdCBiZSBhXG4gKiBzdHJpbmdhYmxlLiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIHRoZSBwcm9wIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nYWJsZXMuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgY2hhbmdlIHRoZVxuICogc2VsZWN0ZWQgb3B0aW9uIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICpcbiAqIElmIGl0IGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIG9wdGlvbnMgd2lsbCBub3RcbiAqIHVwZGF0ZSBpbiByZXNwb25zZSB0byB1c2VyIGFjdGlvbnMuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgb3B0aW9ucyB0byB1cGRhdGUuXG4gKlxuICogSWYgYGRlZmF1bHRWYWx1ZWAgaXMgcHJvdmlkZWQsIGFueSBvcHRpb25zIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlcyB3aWxsIGJlXG4gKiBzZWxlY3RlZC5cbiAqL1xudmFyIFJlYWN0RE9NU2VsZWN0ID0ge1xuICBnZXRIb3N0UHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIHJldHVybiBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZSxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgcGVuZGluZ1VwZGF0ZTogZmFsc2UsXG4gICAgICBpbml0aWFsVmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGxpc3RlbmVyczogbnVsbCxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdCksXG4gICAgICB3YXNNdWx0aXBsZTogQm9vbGVhbihwcm9wcy5tdWx0aXBsZSlcbiAgICB9O1xuXG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdTZWxlY3QgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHNlbGVjdCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycpIDogdm9pZCAwO1xuICAgICAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U2VsZWN0VmFsdWVDb250ZXh0OiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIC8vIFJlYWN0RE9NT3B0aW9uIGxvb2tzIGF0IHRoaXMgaW5pdGlhbCB2YWx1ZSBzbyB0aGUgaW5pdGlhbCBnZW5lcmF0ZWRcbiAgICAvLyBtYXJrdXAgaGFzIGNvcnJlY3QgYHNlbGVjdGVkYCBhdHRyaWJ1dGVzXG4gICAgcmV0dXJuIGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7XG4gIH0sXG5cbiAgcG9zdFVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICAvLyBBZnRlciB0aGUgaW5pdGlhbCBtb3VudCwgd2UgY29udHJvbCBzZWxlY3RlZC1uZXNzIG1hbnVhbGx5IHNvIGRvbid0IHBhc3NcbiAgICAvLyB0aGlzIHZhbHVlIGRvd25cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHdhc011bHRpcGxlID0gaW5zdC5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSA9IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpO1xuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG4gICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh3YXNNdWx0aXBsZSAhPT0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSkpIHtcbiAgICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICAgIGlmIChwcm9wcy5kZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCBwcm9wcy5tdWx0aXBsZSA/IFtdIDogJycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShldmVudCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gdHJ1ZTtcbiAgfVxuICBSZWFjdFVwZGF0ZXMuYXNhcCh1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCwgdGhpcyk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RIb3N0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEhvc3RDb21wb25lbnQnKTtcblxudmFyIGdldE5leHREZWJ1Z0lEID0gcmVxdWlyZSgncmVhY3QvbGliL2dldE5leHREZWJ1Z0lEJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLy8gVG8gYXZvaWQgYSBjeWNsaWMgZGVwZW5kZW5jeSwgd2UgY3JlYXRlIHRoZSBmaW5hbCBjbGFzcyBpbiB0aGlzIG1vZHVsZVxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIHRoaXMuY29uc3RydWN0KGVsZW1lbnQpO1xufTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHR5cGUgcmVmZXJlbmNlIGlzIGEga25vd24gaW50ZXJuYWwgdHlwZS4gSS5lLiBub3QgYSB1c2VyXG4gKiBwcm92aWRlZCBjb21wb3NpdGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhpcyBpcyBhIHZhbGlkIGludGVybmFsIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVhY3ROb2RlLCBjcmVhdGUgYW4gaW5zdGFuY2UgdGhhdCB3aWxsIGFjdHVhbGx5IGJlIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkSGF2ZURlYnVnSURcbiAqIEByZXR1cm4ge29iamVjdH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGVsZW1lbnQncyBjb25zdHJ1Y3Rvci5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChub2RlLCBzaG91bGRIYXZlRGVidWdJRCkge1xuICB2YXIgaW5zdGFuY2U7XG5cbiAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gZmFsc2UpIHtcbiAgICBpbnN0YW5jZSA9IFJlYWN0RW1wdHlDb21wb25lbnQuY3JlYXRlKGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBlbGVtZW50ID0gbm9kZTtcbiAgICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLlwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlbGVtZW50Ll9vd25lcik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCB0eXBlIGlzIGludmFsaWQ6IGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGUgPT0gbnVsbCA/IHR5cGUgOiB0eXBlb2YgdHlwZSwgaW5mbykgOiBfcHJvZEludmFyaWFudCgnMTMwJywgdHlwZSA9PSBudWxsID8gdHlwZSA6IHR5cGVvZiB0eXBlLCBpbmZvKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2Ugc3RyaW5nIHZhbHVlc1xuICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgaW5zdGFuY2UgPSBSZWFjdEhvc3RDb21wb25lbnQuY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmIChpc0ludGVybmFsQ29tcG9uZW50VHlwZShlbGVtZW50LnR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIHRlbXBvcmFyaWx5IGF2YWlsYWJsZSBmb3IgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW50YXRpb25zLiBJLmUuIEFSVC4gT25jZSB0aG9zZSBhcmUgdXBkYXRlZCB0byB1c2UgdGhlIHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW50YXRpb24sIHdlIGNhbiBkcm9wIHRoaXMgY29kZSBwYXRoLlxuICAgICAgaW5zdGFuY2UgPSBuZXcgZWxlbWVudC50eXBlKGVsZW1lbnQpO1xuXG4gICAgICAvLyBXZSByZW5hbWVkIHRoaXMuIEFsbG93IHRoZSBvbGQgbmFtZSBmb3IgY29tcGF0LiA6KFxuICAgICAgaWYgKCFpbnN0YW5jZS5nZXRIb3N0Tm9kZSkge1xuICAgICAgICBpbnN0YW5jZS5nZXRIb3N0Tm9kZSA9IGluc3RhbmNlLmdldE5hdGl2ZU5vZGU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcihlbGVtZW50KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJykge1xuICAgIGluc3RhbmNlID0gUmVhY3RIb3N0Q29tcG9uZW50LmNyZWF0ZUluc3RhbmNlRm9yVGV4dChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRW5jb3VudGVyZWQgaW52YWxpZCBSZWFjdCBub2RlIG9mIHR5cGUgJXMnLCB0eXBlb2Ygbm9kZSkgOiBfcHJvZEludmFyaWFudCgnMTMxJywgdHlwZW9mIG5vZGUpIDogdm9pZCAwO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdGFuY2UubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLmdldEhvc3ROb2RlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nLCAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLicpIDogdm9pZCAwO1xuICB9XG5cbiAgLy8gVGhlc2UgdHdvIGZpZWxkcyBhcmUgdXNlZCBieSB0aGUgRE9NIGFuZCBBUlQgZGlmZmluZyBhbGdvcml0aG1zXG4gIC8vIHJlc3BlY3RpdmVseS4gSW5zdGVhZCBvZiB1c2luZyBleHBhbmRvcyBvbiBjb21wb25lbnRzLCB3ZSBzaG91bGQgYmVcbiAgLy8gc3RvcmluZyB0aGUgc3RhdGUgbmVlZGVkIGJ5IHRoZSBkaWZmaW5nIGFsZ29yaXRobXMgZWxzZXdoZXJlLlxuICBpbnN0YW5jZS5fbW91bnRJbmRleCA9IDA7XG4gIGluc3RhbmNlLl9tb3VudEltYWdlID0gbnVsbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGluc3RhbmNlLl9kZWJ1Z0lEID0gc2hvdWxkSGF2ZURlYnVnSUQgPyBnZXROZXh0RGVidWdJRCgpIDogMDtcbiAgfVxuXG4gIC8vIEludGVybmFsIGluc3RhbmNlcyBzaG91bGQgZnVsbHkgY29uc3RydWN0ZWQgYXQgdGhpcyBwb2ludCwgc28gdGhleSBzaG91bGRcbiAgLy8gbm90IGdldCBhbnkgbmV3IGZpZWxkcyBhZGRlZCB0byB0aGVtIGF0IHRoaXMgcG9pbnQuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbl9hc3NpZ24oUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSwgUmVhY3RDb21wb3NpdGVDb21wb25lbnQsIHtcbiAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgUmVhY3ROb2RlVHlwZXMgPSB7XG4gIEhPU1Q6IDAsXG4gIENPTVBPU0lURTogMSxcbiAgRU1QVFk6IDIsXG5cbiAgZ2V0VHlwZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLkVNUFRZO1xuICAgIH0gZWxzZSBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZS50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBSZWFjdE5vZGVUeXBlcy5DT01QT1NJVEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUmVhY3ROb2RlVHlwZXMuSE9TVDtcbiAgICAgIH1cbiAgICB9XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgbm9kZTogJXMnLCBub2RlKSA6IF9wcm9kSW52YXJpYW50KCcyNicsIG5vZGUpIDogdm9pZCAwO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9kZVR5cGVzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5Q29tcG9uZW50RmFjdG9yeTtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIGluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeTogZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBlbXB0eUNvbXBvbmVudEZhY3RvcnkgPSBmYWN0b3J5O1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgICByZXR1cm4gZW1wdHlDb21wb25lbnRGYWN0b3J5KGluc3RhbnRpYXRlKTtcbiAgfVxufTtcblxuUmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24gPSBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3RIb3N0Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICAvLyBUaGlzIGFjY2VwdHMgYSBjbGFzcyB0aGF0IHJlY2VpdmVzIHRoZSB0YWcgc3RyaW5nLiBUaGlzIGlzIGEgY2F0Y2ggYWxsXG4gIC8vIHRoYXQgY2FuIHJlbmRlciBhbnkga2luZCBvZiB0YWcuXG4gIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIGhvc3QgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICFnZW5lcmljQ29tcG9uZW50Q2xhc3MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLCBlbGVtZW50LnR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzExMScsIGVsZW1lbnQudHlwZSkgOiB2b2lkIDA7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgcmV0dXJuIG5ldyB0ZXh0Q29tcG9uZW50Q2xhc3ModGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiB0ZXh0Q29tcG9uZW50Q2xhc3M7XG59XG5cbnZhciBSZWFjdEhvc3RDb21wb25lbnQgPSB7XG4gIGNyZWF0ZUludGVybmFsQ29tcG9uZW50OiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudCxcbiAgY3JlYXRlSW5zdGFuY2VGb3JUZXh0OiBjcmVhdGVJbnN0YW5jZUZvclRleHQsXG4gIGlzVGV4dENvbXBvbmVudDogaXNUZXh0Q29tcG9uZW50LFxuICBpbmplY3Rpb246IFJlYWN0SG9zdENvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEhvc3RDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRTeW1ib2wnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUaGlzIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQgc2luY2UgdGhpcyBmaWxlIGlzIHNoYXJlZCBiZXR3ZWVuXG4gKiBpc29tb3JwaGljIGFuZCByZW5kZXJlcnMuIFdlIGNvdWxkIGV4dHJhY3QgdGhpcyB0byBhXG4gKlxuICovXG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIEtleUVzY2FwZVV0aWxzLmVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgLy8gVGhlIGZvbGxvd2luZyBpcyBpbmxpbmVkIGZyb20gUmVhY3RFbGVtZW50LiBUaGlzIG1lYW5zIHdlIGNhbiBvcHRpbWl6ZVxuICAvLyBzb21lIGNoZWNrcy4gUmVhY3QgRmliZXIgYWxzbyBpbmxpbmVzIHRoaXMgbG9naWMgZm9yIHNpbWlsYXIgcHVycG9zZXMuXG4gIHR5cGUgPT09ICdvYmplY3QnICYmIGNoaWxkcmVuLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLFxuICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQ7XG4gIHZhciBuZXh0TmFtZTtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0gPSAnJztcbiAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBpZiAobWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSArICdgLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXMnLCBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIEtleUVzY2FwZVV0aWxzLmVzY2FwZShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9IFwiIEl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIGFuIGVsZW1lbnQgY3JlYXRlZCBieSBhIGRpZmZlcmVudCBcIiArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IF9wcm9kSW52YXJpYW50KCczMScsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGlzTmF0aXZlKGZuKSB7XG4gIC8vIEJhc2VkIG9uIGlzTmF0aXZlKCkgZnJvbSBMb2Rhc2hcbiAgdmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICsgZnVuY1RvU3RyaW5nXG4gIC8vIFRha2UgYW4gZXhhbXBsZSBuYXRpdmUgZnVuY3Rpb24gc291cmNlIGZvciBjb21wYXJpc29uXG4gIC5jYWxsKGhhc093blByb3BlcnR5XG4gIC8vIFN0cmlwIHJlZ2V4IGNoYXJhY3RlcnMgc28gd2UgY2FuIHVzZSBpdCBmb3IgcmVnZXhcbiAgKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZywgJ1xcXFwkJidcbiAgLy8gUmVtb3ZlIGhhc093blByb3BlcnR5IGZyb20gdGhlIHRlbXBsYXRlIHRvIG1ha2UgaXQgZ2VuZXJpY1xuICApLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnKTtcbiAgdHJ5IHtcbiAgICB2YXIgc291cmNlID0gZnVuY1RvU3RyaW5nLmNhbGwoZm4pO1xuICAgIHJldHVybiByZUlzTmF0aXZlLnRlc3Qoc291cmNlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbnZhciBjYW5Vc2VDb2xsZWN0aW9ucyA9XG4vLyBBcnJheS5mcm9tXG50eXBlb2YgQXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJyAmJlxuLy8gTWFwXG50eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKE1hcCkgJiZcbi8vIE1hcC5wcm90b3R5cGUua2V5c1xuTWFwLnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoTWFwLnByb3RvdHlwZS5rZXlzKSAmJlxuLy8gU2V0XG50eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKFNldCkgJiZcbi8vIFNldC5wcm90b3R5cGUua2V5c1xuU2V0LnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoU2V0LnByb3RvdHlwZS5rZXlzKTtcblxudmFyIHNldEl0ZW07XG52YXIgZ2V0SXRlbTtcbnZhciByZW1vdmVJdGVtO1xudmFyIGdldEl0ZW1JRHM7XG52YXIgYWRkUm9vdDtcbnZhciByZW1vdmVSb290O1xudmFyIGdldFJvb3RJRHM7XG5cbmlmIChjYW5Vc2VDb2xsZWN0aW9ucykge1xuICB2YXIgaXRlbU1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHJvb3RJRFNldCA9IG5ldyBTZXQoKTtcblxuICBzZXRJdGVtID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XG4gICAgaXRlbU1hcC5zZXQoaWQsIGl0ZW0pO1xuICB9O1xuICBnZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGl0ZW1NYXAuZ2V0KGlkKTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGl0ZW1NYXBbJ2RlbGV0ZSddKGlkKTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVtTWFwLmtleXMoKSk7XG4gIH07XG5cbiAgYWRkUm9vdCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJvb3RJRFNldC5hZGQoaWQpO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcm9vdElEU2V0WydkZWxldGUnXShpZCk7XG4gIH07XG4gIGdldFJvb3RJRHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdElEU2V0LmtleXMoKSk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgaXRlbUJ5S2V5ID0ge307XG4gIHZhciByb290QnlLZXkgPSB7fTtcblxuICAvLyBVc2Ugbm9uLW51bWVyaWMga2V5cyB0byBwcmV2ZW50IFY4IHBlcmZvcm1hbmNlIGlzc3VlczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICB2YXIgZ2V0S2V5RnJvbUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuICcuJyArIGlkO1xuICB9O1xuICB2YXIgZ2V0SURGcm9tS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBwYXJzZUludChrZXkuc3Vic3RyKDEpLCAxMCk7XG4gIH07XG5cbiAgc2V0SXRlbSA9IGZ1bmN0aW9uIChpZCwgaXRlbSkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGl0ZW1CeUtleVtrZXldID0gaXRlbTtcbiAgfTtcbiAgZ2V0SXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIHJldHVybiBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGRlbGV0ZSBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbUJ5S2V5KS5tYXAoZ2V0SURGcm9tS2V5KTtcbiAgfTtcblxuICBhZGRSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgcm9vdEJ5S2V5W2tleV0gPSB0cnVlO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgZGVsZXRlIHJvb3RCeUtleVtrZXldO1xuICB9O1xuICBnZXRSb290SURzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyb290QnlLZXkpLm1hcChnZXRJREZyb21LZXkpO1xuICB9O1xufVxuXG52YXIgdW5tb3VudGVkSURzID0gW107XG5cbmZ1bmN0aW9uIHB1cmdlRGVlcChpZCkge1xuICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICBpZiAoaXRlbSkge1xuICAgIHZhciBjaGlsZElEcyA9IGl0ZW0uY2hpbGRJRHM7XG5cbiAgICByZW1vdmVJdGVtKGlkKTtcbiAgICBjaGlsZElEcy5mb3JFYWNoKHB1cmdlRGVlcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICByZXR1cm4gJ1xcbiAgICBpbiAnICsgKG5hbWUgfHwgJ1Vua25vd24nKSArIChzb3VyY2UgPyAnIChhdCAnICsgc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknIDogb3duZXJOYW1lID8gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknIDogJycpO1xufVxuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gJyNlbXB0eSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbGVtZW50ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnI3RleHQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lIHx8IGVsZW1lbnQudHlwZS5uYW1lIHx8ICdVbmtub3duJztcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXNjcmliZUlEKGlkKSB7XG4gIHZhciBuYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShpZCk7XG4gIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICB2YXIgb3duZXJOYW1lO1xuICBpZiAob3duZXJJRCkge1xuICAgIG93bmVyTmFtZSA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCk7XG4gIH1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCwgJ1JlYWN0Q29tcG9uZW50VHJlZUhvb2s6IE1pc3NpbmcgUmVhY3QgZWxlbWVudCBmb3IgZGVidWdJRCAlcyB3aGVuICcgKyAnYnVpbGRpbmcgc3RhY2snLCBpZCkgOiB2b2lkIDA7XG4gIHJldHVybiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIGVsZW1lbnQgJiYgZWxlbWVudC5fc291cmNlLCBvd25lck5hbWUpO1xufVxuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHtcbiAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24gKGlkLCBuZXh0Q2hpbGRJRHMpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5jaGlsZElEcyA9IG5leHRDaGlsZElEcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dENoaWxkSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dENoaWxkSUQgPSBuZXh0Q2hpbGRJRHNbaV07XG4gICAgICB2YXIgbmV4dENoaWxkID0gZ2V0SXRlbShuZXh0Q2hpbGRJRCk7XG4gICAgICAhbmV4dENoaWxkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGhvb2sgZXZlbnRzIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBfcHJvZEludmFyaWFudCgnMTQwJykgOiB2b2lkIDA7XG4gICAgICAhKG5leHRDaGlsZC5jaGlsZElEcyAhPSBudWxsIHx8IHR5cGVvZiBuZXh0Q2hpbGQuZWxlbWVudCAhPT0gJ29iamVjdCcgfHwgbmV4dENoaWxkLmVsZW1lbnQgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25TZXRDaGlsZHJlbigpIHRvIGZpcmUgZm9yIGEgY29udGFpbmVyIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDEnKSA6IHZvaWQgMDtcbiAgICAgICFuZXh0Q2hpbGQuaXNNb3VudGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uTW91bnRDb21wb25lbnQoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogX3Byb2RJbnZhcmlhbnQoJzcxJykgOiB2b2lkIDA7XG4gICAgICBpZiAobmV4dENoaWxkLnBhcmVudElEID09IG51bGwpIHtcbiAgICAgICAgbmV4dENoaWxkLnBhcmVudElEID0gaWQ7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSBidXQgbW91bnRpbmcgYSBuZXcgcm9vdCBkdXJpbmcgaW5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGN1cnJlbnRseSBjYXVzZXMgbm90LXlldC1tb3VudGVkIGNvbXBvbmVudHMgdG9cbiAgICAgICAgLy8gYmUgcHVyZ2VkIGZyb20gb3VyIHRyZWUgZGF0YSBzbyB0aGVpciBwYXJlbnQgaWQgaXMgbWlzc2luZy5cbiAgICAgIH1cbiAgICAgICEobmV4dENoaWxkLnBhcmVudElEID09PSBpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25CZWZvcmVNb3VudENvbXBvbmVudCgpIHBhcmVudCBhbmQgb25TZXRDaGlsZHJlbigpIHRvIGJlIGNvbnNpc3RlbnQgKCVzIGhhcyBwYXJlbnRzICVzIGFuZCAlcykuJywgbmV4dENoaWxkSUQsIG5leHRDaGlsZC5wYXJlbnRJRCwgaWQpIDogX3Byb2RJbnZhcmlhbnQoJzE0MicsIG5leHRDaGlsZElELCBuZXh0Q2hpbGQucGFyZW50SUQsIGlkKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0sXG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCwgcGFyZW50SUQpIHtcbiAgICB2YXIgaXRlbSA9IHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgICB0ZXh0OiBudWxsLFxuICAgICAgY2hpbGRJRHM6IFtdLFxuICAgICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAgIHVwZGF0ZUNvdW50OiAwXG4gICAgfTtcbiAgICBzZXRJdGVtKGlkLCBpdGVtKTtcbiAgfSxcbiAgb25CZWZvcmVVcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLmVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5pc01vdW50ZWQgPSB0cnVlO1xuICAgIHZhciBpc1Jvb3QgPSBpdGVtLnBhcmVudElEID09PSAwO1xuICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgIGFkZFJvb3QoaWQpO1xuICAgIH1cbiAgfSxcbiAgb25VcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLnVwZGF0ZUNvdW50Kys7XG4gIH0sXG4gIG9uVW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiBpdCBleGlzdHMuXG4gICAgICAvLyBgaXRlbWAgbWlnaHQgbm90IGV4aXN0IGlmIGl0IGlzIGluc2lkZSBhbiBlcnJvciBib3VuZGFyeSwgYW5kIGEgc2libGluZ1xuICAgICAgLy8gZXJyb3IgYm91bmRhcnkgY2hpbGQgdGhyZXcgd2hpbGUgbW91bnRpbmcuIFRoZW4gdGhpcyBpbnN0YW5jZSBuZXZlclxuICAgICAgLy8gZ290IGEgY2hhbmNlIHRvIG1vdW50LCBidXQgaXQgc3RpbGwgZ2V0cyBhbiB1bm1vdW50aW5nIGV2ZW50IGR1cmluZ1xuICAgICAgLy8gdGhlIGVycm9yIGJvdW5kYXJ5IGNsZWFudXAuXG4gICAgICBpdGVtLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdmFyIGlzUm9vdCA9IGl0ZW0ucGFyZW50SUQgPT09IDA7XG4gICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgIHJlbW92ZVJvb3QoaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50ZWRJRHMucHVzaChpZCk7XG4gIH0sXG4gIHB1cmdlVW5tb3VudGVkQ29tcG9uZW50czogZnVuY3Rpb24gKCkge1xuICAgIGlmIChSZWFjdENvbXBvbmVudFRyZWVIb29rLl9wcmV2ZW50UHVyZ2luZykge1xuICAgICAgLy8gU2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVubW91bnRlZElEcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdW5tb3VudGVkSURzW2ldO1xuICAgICAgcHVyZ2VEZWVwKGlkKTtcbiAgICB9XG4gICAgdW5tb3VudGVkSURzLmxlbmd0aCA9IDA7XG4gIH0sXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uaXNNb3VudGVkIDogZmFsc2U7XG4gIH0sXG4gIGdldEN1cnJlbnRTdGFja0FkZGVuZHVtOiBmdW5jdGlvbiAodG9wRWxlbWVudCkge1xuICAgIHZhciBpbmZvID0gJyc7XG4gICAgaWYgKHRvcEVsZW1lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0RGlzcGxheU5hbWUodG9wRWxlbWVudCk7XG4gICAgICB2YXIgb3duZXIgPSB0b3BFbGVtZW50Ll9vd25lcjtcbiAgICAgIGluZm8gKz0gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCB0b3BFbGVtZW50Ll9zb3VyY2UsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSk7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRPd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgdmFyIGlkID0gY3VycmVudE93bmVyICYmIGN1cnJlbnRPd25lci5fZGVidWdJRDtcblxuICAgIGluZm8gKz0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChpZCk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0sXG4gIGdldFN0YWNrQWRkZW5kdW1CeUlEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuICAgIHdoaWxlIChpZCkge1xuICAgICAgaW5mbyArPSBkZXNjcmliZUlEKGlkKTtcbiAgICAgIGlkID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRQYXJlbnRJRChpZCk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xuICB9LFxuICBnZXRDaGlsZElEczogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uY2hpbGRJRHMgOiBbXTtcbiAgfSxcbiAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RGlzcGxheU5hbWUoZWxlbWVudCk7XG4gIH0sXG4gIGdldEVsZW1lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmVsZW1lbnQgOiBudWxsO1xuICB9LFxuICBnZXRPd25lcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RWxlbWVudChpZCk7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Ll9vd25lcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50Ll9vd25lci5fZGVidWdJRDtcbiAgfSxcbiAgZ2V0UGFyZW50SUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnBhcmVudElEIDogbnVsbDtcbiAgfSxcbiAgZ2V0U291cmNlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHZhciBlbGVtZW50ID0gaXRlbSA/IGl0ZW0uZWxlbWVudCA6IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQuX3NvdXJjZSA6IG51bGw7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcbiAgZ2V0VGV4dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJycgKyBlbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG4gIGdldFVwZGF0ZUNvdW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS51cGRhdGVDb3VudCA6IDA7XG4gIH0sXG5cblxuICBnZXRSb290SURzOiBnZXRSb290SURzLFxuICBnZXRSZWdpc3RlcmVkSURzOiBnZXRJdGVtSURzLFxuXG4gIHB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKGlzQ3JlYXRpbmdFbGVtZW50LCBjdXJyZW50U291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgY3VycmVudE93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB2YXIgaWQgPSBjdXJyZW50T3duZXIgJiYgY3VycmVudE93bmVyLl9kZWJ1Z0lEO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0NyZWF0aW5nRWxlbWVudCkge1xuICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBpZCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUoaWQpIDogbnVsbCxcbiAgICAgICAgICBmaWxlTmFtZTogY3VycmVudFNvdXJjZSA/IGN1cnJlbnRTb3VyY2UuZmlsZU5hbWUgOiBudWxsLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IGN1cnJlbnRTb3VyY2UgPyBjdXJyZW50U291cmNlLmxpbmVOdW1iZXIgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaWQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKGlkKTtcbiAgICAgICAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXJJRCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCkgOiBudWxsO1xuICAgICAgICB2YXIgc291cmNlID0gZWxlbWVudCAmJiBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgIG5hbWU6IG93bmVyTmFtZSxcbiAgICAgICAgICBmaWxlTmFtZTogc291cmNlID8gc291cmNlLmZpbGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiBzb3VyY2UgPyBzb3VyY2UubGluZU51bWJlciA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGlkID0gcGFyZW50SUQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBJbnRlcm5hbCBzdGF0ZSBpcyBtZXNzZWQgdXAuXG4gICAgICAvLyBTdG9wIGJ1aWxkaW5nIHRoZSBzdGFjayAoaXQncyBqdXN0IGEgbmljZSB0byBoYXZlKS5cbiAgICB9XG5cbiAgICBjb25zb2xlLnJlYWN0U3RhY2soc3RhY2spO1xuICB9LFxuICBwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrRW5kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUucmVhY3RTdGFja0VuZCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3Rpb24nKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NvbnRhaW5zTm9kZScpO1xudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgICBzZWxlY3Rpb25SYW5nZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZm9jdXNlZEVsZW0pID8gUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXN0b3JlU2VsZWN0aW9uOiBJZiBhbnkgc2VsZWN0aW9uIGluZm9ybWF0aW9uIHdhcyBwb3RlbnRpYWxseSBsb3N0LFxuICAgKiByZXN0b3JlIGl0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyB0aGF0IGNvdWxkIHJlbW92ZSBkb21cbiAgICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gICAqL1xuICByZXN0b3JlU2VsZWN0aW9uOiBmdW5jdGlvbiAocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJiBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAgICogLUBpbnB1dDogTG9vayB1cCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXRcbiAgICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gICAqL1xuICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICAvLyBJRTggaW5wdXQuXG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBzZWxlY3Rpb24gcGVyIGRvY3VtZW50IGluIElFLCBzbyBpdCBtdXN0XG4gICAgICAvLyBiZSBpbiBvdXIgZWxlbWVudC5cbiAgICAgIGlmIChyYW5nZS5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XG4gICAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgICBzdGFydDogLXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgZW5kOiAtcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudCBlZGl0YWJsZSBvciBvbGQgSUUgdGV4dGFyZWEuXG4gICAgICBzZWxlY3Rpb24gPSBSZWFjdERPTVNlbGVjdGlvbi5nZXRPZmZzZXRzKGlucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uIHx8IHsgc3RhcnQ6IDAsIGVuZDogMCB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc2V0U2VsZWN0aW9uOiBTZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgdGV4dGFyZWEgb3IgaW5wdXQgYW5kIGZvY3VzZXNcbiAgICogdGhlIGlucHV0LlxuICAgKiAtQGlucHV0ICAgICBTZXQgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0IG9yIHRleHRhcmVhXG4gICAqIC1Ab2Zmc2V0cyAgIE9iamVjdCBvZiBzYW1lIGZvcm0gdGhhdCBpcyByZXR1cm5lZCBmcm9tIGdldCpcbiAgICovXG4gIHNldFNlbGVjdGlvbjogZnVuY3Rpb24gKGlucHV0LCBvZmZzZXRzKSB7XG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKGVuZCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdCcpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NQ29udGFpbmVySW5mbyA9IHJlcXVpcmUoJy4vUmVhY3RET01Db250YWluZXJJbmZvJyk7XG52YXIgUmVhY3RET01GZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RE9NRmVhdHVyZUZsYWdzJyk7XG52YXIgUmVhY3RGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RmVhdHVyZUZsYWdzJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBBVFRSX05BTUUgPSBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRTtcbnZhciBST09UX0FUVFJfTkFNRSA9IERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUU7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbnZhciBpbnN0YW5jZXNCeVJlYWN0Um9vdElEID0ge307XG5cbi8qKlxuICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXJcbiAqIHRoYXQncyBub3QgY29tbW9uIGJldHdlZW4gdGhlIHR3byBnaXZlbiBzdHJpbmdzLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGluZGV4IG9mIHRoZSBjaGFyYWN0ZXIgd2hlcmUgdGhlIHN0cmluZ3MgZGl2ZXJnZVxuICovXG5mdW5jdGlvbiBmaXJzdERpZmZlcmVuY2VJbmRleChzdHJpbmcxLCBzdHJpbmcyKSB7XG4gIHZhciBtaW5MZW4gPSBNYXRoLm1pbihzdHJpbmcxLmxlbmd0aCwgc3RyaW5nMi5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbkxlbjsgaSsrKSB7XG4gICAgaWYgKHN0cmluZzEuY2hhckF0KGkpICE9PSBzdHJpbmcyLmNoYXJBdChpKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJpbmcxLmxlbmd0aCA9PT0gc3RyaW5nMi5sZW5ndGggPyAtMSA6IG1pbkxlbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NRG9jdW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluXG4gKiBhIFJlYWN0IGNvbXBvbmVudFxuICogQHJldHVybiB7Pyp9IERPTSBlbGVtZW50IHRoYXQgbWF5IGhhdmUgdGhlIHJlYWN0Um9vdCBJRCwgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcbiAgLy8gSWYgbm9kZSBpcyBzb21ldGhpbmcgbGlrZSBhIHdpbmRvdywgZG9jdW1lbnQsIG9yIHRleHQgbm9kZSwgbm9uZSBvZlxuICAvLyB3aGljaCBzdXBwb3J0IGF0dHJpYnV0ZXMgb3IgYSAuZ2V0QXR0cmlidXRlIG1ldGhvZCwgZ3JhY2VmdWxseSByZXR1cm5cbiAgLy8gdGhlIGVtcHR5IHN0cmluZywgYXMgaWYgdGhlIGF0dHJpYnV0ZSB3ZXJlIG1pc3NpbmcuXG4gIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpIHx8ICcnO1xufVxuXG4vKipcbiAqIE1vdW50cyB0aGlzIGNvbXBvbmVudCBhbmQgaW5zZXJ0cyBpdCBpbnRvIHRoZSBET00uXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50SW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIG1vdW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gbW91bnRDb21wb25lbnRJbnRvTm9kZSh3cmFwcGVySW5zdGFuY2UsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIHZhciBtYXJrZXJOYW1lO1xuICBpZiAoUmVhY3RGZWF0dXJlRmxhZ3MubG9nVG9wTGV2ZWxSZW5kZXJzKSB7XG4gICAgdmFyIHdyYXBwZWRFbGVtZW50ID0gd3JhcHBlckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5wcm9wcy5jaGlsZDtcbiAgICB2YXIgdHlwZSA9IHdyYXBwZWRFbGVtZW50LnR5cGU7XG4gICAgbWFya2VyTmFtZSA9ICdSZWFjdCBtb3VudDogJyArICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB0eXBlIDogdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUpO1xuICAgIGNvbnNvbGUudGltZShtYXJrZXJOYW1lKTtcbiAgfVxuXG4gIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQod3JhcHBlckluc3RhbmNlLCB0cmFuc2FjdGlvbiwgbnVsbCwgUmVhY3RET01Db250YWluZXJJbmZvKHdyYXBwZXJJbnN0YW5jZSwgY29udGFpbmVyKSwgY29udGV4dCwgMCAvKiBwYXJlbnREZWJ1Z0lEICovXG4gICk7XG5cbiAgaWYgKG1hcmtlck5hbWUpIHtcbiAgICBjb25zb2xlLnRpbWVFbmQobWFya2VyTmFtZSk7XG4gIH1cblxuICB3cmFwcGVySW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50Ll90b3BMZXZlbFdyYXBwZXIgPSB3cmFwcGVySW5zdGFuY2U7XG4gIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgd3JhcHBlckluc3RhbmNlLCBzaG91bGRSZXVzZU1hcmt1cCwgdHJhbnNhY3Rpb24pO1xufVxuXG4vKipcbiAqIEJhdGNoZWQgbW91bnQuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50SW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIG1vdW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUoY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKFxuICAvKiB1c2VDcmVhdGVFbGVtZW50ICovXG4gICFzaG91bGRSZXVzZU1hcmt1cCAmJiBSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KTtcbiAgdHJhbnNhY3Rpb24ucGVyZm9ybShtb3VudENvbXBvbmVudEludG9Ob2RlLCBudWxsLCBjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCB0cmFuc2FjdGlvbiwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpO1xuICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBVbm1vdW50cyBhIGNvbXBvbmVudCBhbmQgcmVtb3ZlcyBpdCBmcm9tIHRoZSBET00uXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5zdGFuY2UgUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gdW5tb3VudCBmcm9tLlxuICogQGZpbmFsXG4gKiBAaW50ZXJuYWxcbiAqIEBzZWUge1JlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gdW5tb3VudENvbXBvbmVudEZyb21Ob2RlKGluc3RhbmNlLCBjb250YWluZXIsIHNhZmVseSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luRmx1c2goKTtcbiAgfVxuICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSwgc2FmZWx5KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaCgpO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lci5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbXB0eWluZy1hLW5vZGVcbiAgd2hpbGUgKGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBoYXMgYSBkaXJlY3QgUmVhY3QtcmVuZGVyZWQgY2hpbGQgdGhhdCBpc1xuICogbm90IGEgUmVhY3Qgcm9vdCBlbGVtZW50LiBVc2VmdWwgZm9yIHdhcm5pbmcgaW4gYHJlbmRlcmAsXG4gKiBgdW5tb3VudENvbXBvbmVudEF0Tm9kZWAsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gZWxlbWVudCBjb250YWlucyBhIGRpcmVjdCBjaGlsZCB0aGF0IHdhc1xuICogcmVuZGVyZWQgYnkgUmVhY3QgYnV0IGlzIG5vdCBhIHJvb3QgZWxlbWVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpIHtcbiAgdmFyIHJvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICBpZiAocm9vdEVsKSB7XG4gICAgdmFyIGluc3QgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShyb290RWwpO1xuICAgIHJldHVybiAhIShpbnN0ICYmIGluc3QuX2hvc3RQYXJlbnQpO1xuICB9XG59XG5cbi8qKlxuICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgRE9NIG5vZGUgaXMgYSBSZWFjdCBET00gZWxlbWVudCBhbmRcbiAqIGl0IGhhcyBiZWVuIHJlbmRlcmVkIGJ5IGFub3RoZXIgY29weSBvZiBSZWFjdC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gaGFzIGJlZW4gcmVuZGVyZWQgYnkgYW5vdGhlciBjb3B5IG9mIFJlYWN0XG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbm9kZUlzUmVuZGVyZWRCeU90aGVySW5zdGFuY2UoY29udGFpbmVyKSB7XG4gIHZhciByb290RWwgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgcmV0dXJuICEhKHJvb3RFbCAmJiBpc1JlYWN0Tm9kZShyb290RWwpICYmICFSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShyb290RWwpKTtcbn1cblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBpcyBhIHZhbGlkIG5vZGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gaXMgYSB2YWxpZCBET00gbm9kZS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSk7XG59XG5cbi8qKlxuICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgRE9NIG5vZGUgaXMgYSB2YWxpZCBSZWFjdCBub2RlIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZSBUaGUgY2FuZGlkYXRlIERPTSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgRE9NIGlzIGEgdmFsaWQgUmVhY3QgRE9NIG5vZGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNSZWFjdE5vZGUobm9kZSkge1xuICByZXR1cm4gaXNWYWxpZENvbnRhaW5lcihub2RlKSAmJiAobm9kZS5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSX05BTUUpIHx8IG5vZGUuaGFzQXR0cmlidXRlKEFUVFJfTkFNRSkpO1xufVxuXG5mdW5jdGlvbiBnZXRIb3N0Um9vdEluc3RhbmNlSW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gIHZhciByb290RWwgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgdmFyIHByZXZIb3N0SW5zdGFuY2UgPSByb290RWwgJiYgUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUocm9vdEVsKTtcbiAgcmV0dXJuIHByZXZIb3N0SW5zdGFuY2UgJiYgIXByZXZIb3N0SW5zdGFuY2UuX2hvc3RQYXJlbnQgPyBwcmV2SG9zdEluc3RhbmNlIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VG9wTGV2ZWxXcmFwcGVySW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gIHZhciByb290ID0gZ2V0SG9zdFJvb3RJbnN0YW5jZUluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gIHJldHVybiByb290ID8gcm9vdC5faG9zdENvbnRhaW5lckluZm8uX3RvcExldmVsV3JhcHBlciA6IG51bGw7XG59XG5cbi8qKlxuICogVGVtcG9yYXJ5ICg/KSBoYWNrIHNvIHRoYXQgd2UgY2FuIHN0b3JlIGFsbCB0b3AtbGV2ZWwgcGVuZGluZyB1cGRhdGVzIG9uXG4gKiBjb21wb3NpdGVzIGluc3RlYWQgb2YgaGF2aW5nIHRvIHdvcnJ5IGFib3V0IGRpZmZlcmVudCB0eXBlcyBvZiBjb21wb25lbnRzXG4gKiBoZXJlLlxuICovXG52YXIgdG9wTGV2ZWxSb290Q291bnRlciA9IDE7XG52YXIgVG9wTGV2ZWxXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJvb3RJRCA9IHRvcExldmVsUm9vdENvdW50ZXIrKztcbn07XG5Ub3BMZXZlbFdyYXBwZXIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRvcExldmVsV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdUb3BMZXZlbFdyYXBwZXInO1xufVxuVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnByb3BzLmNoaWxkO1xufTtcblRvcExldmVsV3JhcHBlci5pc1JlYWN0VG9wTGV2ZWxXcmFwcGVyID0gdHJ1ZTtcblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuICBUb3BMZXZlbFdyYXBwZXI6IFRvcExldmVsV3JhcHBlcixcblxuICAvKipcbiAgICogVXNlZCBieSBkZXZ0b29scy4gVGhlIGtleXMgYXJlIG5vdCBpbXBvcnRhbnQuXG4gICAqL1xuICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgcHJvdmlkZWQgdG8gc3VwcG9ydCByZW5kZXJpbmcgUmVhY3QgY29tcG9uZW50cyB3aGlsZVxuICAgKiBlbnN1cmluZyB0aGF0IHRoZSBhcHBhcmVudCBzY3JvbGwgcG9zaXRpb24gb2YgaXRzIGBjb250YWluZXJgIGRvZXMgbm90XG4gICAqIGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgVGhlIGBjb250YWluZXJgIGJlaW5nIHJlbmRlcmVkIGludG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlbmRlckNhbGxiYWNrIFRoaXMgbXVzdCBiZSBjYWxsZWQgb25jZSB0byBkbyB0aGUgcmVuZGVyLlxuICAgKi9cbiAgc2Nyb2xsTW9uaXRvcjogZnVuY3Rpb24gKGNvbnRhaW5lciwgcmVuZGVyQ2FsbGJhY2spIHtcbiAgICByZW5kZXJDYWxsYmFjaygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUYWtlIGEgY29tcG9uZW50IHRoYXQncyBhbHJlYWR5IG1vdW50ZWQgaW50byB0aGUgRE9NIGFuZCByZXBsYWNlIGl0cyBwcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBwcmV2Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSBhbHJlYWR5IGluIHRoZSBET01cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0cmlnZ2VyZWQgb24gY29tcGxldGlvblxuICAgKi9cbiAgX3VwZGF0ZVJvb3RDb21wb25lbnQ6IGZ1bmN0aW9uIChwcmV2Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgbmV4dENvbnRleHQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBSZWFjdE1vdW50LnNjcm9sbE1vbml0b3IoY29udGFpbmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVFbGVtZW50SW50ZXJuYWwocHJldkNvbXBvbmVudCwgbmV4dEVsZW1lbnQsIG5leHRDb250ZXh0KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBuZXcgY29tcG9uZW50IGludG8gdGhlIERPTS4gSG9va2VkIGJ5IGhvb2tzIVxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICsgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuXG4gICAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdfcmVnaXN0ZXJDb21wb25lbnQoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczNycpIDogdm9pZCAwO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIGZhbHNlKTtcblxuICAgIC8vIFRoZSBpbml0aWFsIHJlbmRlciBpcyBzeW5jaHJvbm91cyBidXQgYW55IHVwZGF0ZXMgdGhhdCBoYXBwZW4gZHVyaW5nXG4gICAgLy8gcmVuZGVyaW5nLCBpbiBjb21wb25lbnRXaWxsTW91bnQgb3IgY29tcG9uZW50RGlkTW91bnQsIHdpbGwgYmUgYmF0Y2hlZFxuICAgIC8vIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBiYXRjaGluZyBzdHJhdGVneS5cblxuICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSwgY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpO1xuXG4gICAgdmFyIHdyYXBwZXJJRCA9IGNvbXBvbmVudEluc3RhbmNlLl9pbnN0YW5jZS5yb290SUQ7XG4gICAgaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFt3cmFwcGVySURdID0gY29tcG9uZW50SW5zdGFuY2U7XG5cbiAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBSZWFjdCBjb21wb25lbnQgaW50byB0aGUgRE9NIGluIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcbiAgICogcGVyZm9ybSBhbiB1cGRhdGUgb24gaXQgYW5kIG9ubHkgbXV0YXRlIHRoZSBET00gYXMgbmVjZXNzYXJ5IHRvIHJlZmxlY3QgdGhlXG4gICAqIGxhdGVzdCBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHBhcmVudENvbXBvbmVudCBUaGUgY29uY2VwdHVhbCBwYXJlbnQgb2YgdGhpcyByZW5kZXIgdHJlZS5cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IENvbXBvbmVudCBlbGVtZW50IHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0cmlnZ2VyZWQgb24gY29tcGxldGlvblxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuICAgKi9cbiAgcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IGZ1bmN0aW9uIChwYXJlbnRDb21wb25lbnQsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgIShwYXJlbnRDb21wb25lbnQgIT0gbnVsbCAmJiBSZWFjdEluc3RhbmNlTWFwLmhhcyhwYXJlbnRDb21wb25lbnQpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwYXJlbnRDb21wb25lbnQgbXVzdCBiZSBhIHZhbGlkIFJlYWN0IENvbXBvbmVudCcpIDogX3Byb2RJbnZhcmlhbnQoJzM4JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICB9LFxuXG4gIF9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLnZhbGlkYXRlQ2FsbGJhY2soY2FsbGJhY2ssICdSZWFjdERPTS5yZW5kZXInKTtcbiAgICAhUmVhY3QuaXNWYWxpZEVsZW1lbnQobmV4dEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NLnJlbmRlcigpOiBJbnZhbGlkIGNvbXBvbmVudCBlbGVtZW50LiVzJywgdHlwZW9mIG5leHRFbGVtZW50ID09PSAnc3RyaW5nJyA/IFwiIEluc3RlYWQgb2YgcGFzc2luZyBhIHN0cmluZyBsaWtlICdkaXYnLCBwYXNzIFwiICsgXCJSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnKSBvciA8ZGl2IC8+LlwiIDogdHlwZW9mIG5leHRFbGVtZW50ID09PSAnZnVuY3Rpb24nID8gJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjbGFzcyBsaWtlIEZvbywgcGFzcyAnICsgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9vKSBvciA8Rm9vIC8+LicgOiAvLyBDaGVjayBpZiBpdCBxdWFja3MgbGlrZSBhbiBlbGVtZW50XG4gICAgbmV4dEVsZW1lbnQgIT0gbnVsbCAmJiBuZXh0RWxlbWVudC5wcm9wcyAhPT0gdW5kZWZpbmVkID8gJyBUaGlzIG1heSBiZSBjYXVzZWQgYnkgdW5pbnRlbnRpb25hbGx5IGxvYWRpbmcgdHdvIGluZGVwZW5kZW50ICcgKyAnY29waWVzIG9mIFJlYWN0LicgOiAnJykgOiBfcHJvZEludmFyaWFudCgnMzknLCB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID8gXCIgSW5zdGVhZCBvZiBwYXNzaW5nIGEgc3RyaW5nIGxpa2UgJ2RpdicsIHBhc3MgXCIgKyBcIlJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIG9yIDxkaXYgLz4uXCIgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNsYXNzIGxpa2UgRm9vLCBwYXNzICcgKyAnUmVhY3QuY3JlYXRlRWxlbWVudChGb28pIG9yIDxGb28gLz4uJyA6IG5leHRFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQucHJvcHMgIT09IHVuZGVmaW5lZCA/ICcgVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHVuaW50ZW50aW9uYWxseSBsb2FkaW5nIHR3byBpbmRlcGVuZGVudCAnICsgJ2NvcGllcyBvZiBSZWFjdC4nIDogJycpIDogdm9pZCAwO1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lciB8fCAhY29udGFpbmVyLnRhZ05hbWUgfHwgY29udGFpbmVyLnRhZ05hbWUudG9VcHBlckNhc2UoKSAhPT0gJ0JPRFknLCAncmVuZGVyKCk6IFJlbmRlcmluZyBjb21wb25lbnRzIGRpcmVjdGx5IGludG8gZG9jdW1lbnQuYm9keSBpcyAnICsgJ2Rpc2NvdXJhZ2VkLCBzaW5jZSBpdHMgY2hpbGRyZW4gYXJlIG9mdGVuIG1hbmlwdWxhdGVkIGJ5IHRoaXJkLXBhcnR5ICcgKyAnc2NyaXB0cyBhbmQgYnJvd3NlciBleHRlbnNpb25zLiBUaGlzIG1heSBsZWFkIHRvIHN1YnRsZSAnICsgJ3JlY29uY2lsaWF0aW9uIGlzc3Vlcy4gVHJ5IHJlbmRlcmluZyBpbnRvIGEgY29udGFpbmVyIGVsZW1lbnQgY3JlYXRlZCAnICsgJ2ZvciB5b3VyIGFwcC4nKSA6IHZvaWQgMDtcblxuICAgIHZhciBuZXh0V3JhcHBlZEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRvcExldmVsV3JhcHBlciwge1xuICAgICAgY2hpbGQ6IG5leHRFbGVtZW50XG4gICAgfSk7XG5cbiAgICB2YXIgbmV4dENvbnRleHQ7XG4gICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xuICAgICAgdmFyIHBhcmVudEluc3QgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwYXJlbnRDb21wb25lbnQpO1xuICAgICAgbmV4dENvbnRleHQgPSBwYXJlbnRJbnN0Ll9wcm9jZXNzQ2hpbGRDb250ZXh0KHBhcmVudEluc3QuX2NvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Q29udGV4dCA9IGVtcHR5T2JqZWN0O1xuICAgIH1cblxuICAgIHZhciBwcmV2Q29tcG9uZW50ID0gZ2V0VG9wTGV2ZWxXcmFwcGVySW5Db250YWluZXIoY29udGFpbmVyKTtcblxuICAgIGlmIChwcmV2Q29tcG9uZW50KSB7XG4gICAgICB2YXIgcHJldldyYXBwZWRFbGVtZW50ID0gcHJldkNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2V3JhcHBlZEVsZW1lbnQucHJvcHMuY2hpbGQ7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSkge1xuICAgICAgICB2YXIgcHVibGljSW5zdCA9IHByZXZDb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgICAgIHZhciB1cGRhdGVkQ2FsbGJhY2sgPSBjYWxsYmFjayAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbChwdWJsaWNJbnN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVhY3RNb3VudC5fdXBkYXRlUm9vdENvbXBvbmVudChwcmV2Q29tcG9uZW50LCBuZXh0V3JhcHBlZEVsZW1lbnQsIG5leHRDb250ZXh0LCBjb250YWluZXIsIHVwZGF0ZWRDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwdWJsaWNJbnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPSByZWFjdFJvb3RFbGVtZW50ICYmICEhaW50ZXJuYWxHZXRJRChyZWFjdFJvb3RFbGVtZW50KTtcbiAgICB2YXIgY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCwgJ3JlbmRlciguLi4pOiBSZXBsYWNpbmcgUmVhY3QtcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG5ldyByb290ICcgKyAnY29tcG9uZW50LiBJZiB5b3UgaW50ZW5kZWQgdG8gdXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsICcgKyAneW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSAnICsgJ2FuZCByZW5kZXIgdGhlIG5ldyBjb21wb25lbnRzIGluc3RlYWQgb2YgY2FsbGluZyBSZWFjdERPTS5yZW5kZXIuJykgOiB2b2lkIDA7XG5cbiAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnRTaWJsaW5nID0gcmVhY3RSb290RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHJvb3RFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICsgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICsgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvb3RFbGVtZW50U2libGluZyA9IHJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50ICYmICFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZDtcbiAgICB2YXIgY29tcG9uZW50ID0gUmVhY3RNb3VudC5fcmVuZGVyTmV3Um9vdENvbXBvbmVudChuZXh0V3JhcHBlZEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIG5leHRDb250ZXh0KS5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwoY29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogUmVuZGVycyBhIFJlYWN0IGNvbXBvbmVudCBpbnRvIHRoZSBET00gaW4gdGhlIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3Rkb20ucmVuZGVyXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSZWFjdE1vdW50Ll9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGFuZCBkZXN0cm95cyB0aGUgUmVhY3QgY29tcG9uZW50IHJlbmRlcmVkIGluIHRoZSBgY29udGFpbmVyYC5cbiAgICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0ZG9tLnVubW91bnRjb21wb25lbnRhdG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgY29udGFpbmluZyBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIGNvbXBvbmVudCB3YXMgZm91bmQgaW4gYW5kIHVubW91bnRlZCBmcm9tXG4gICAqICAgICAgICAgICAgICAgICAgIGBjb250YWluZXJgXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gICAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gICAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoU3RyaWN0bHkgc3BlYWtpbmcsIHVubW91bnRpbmcgd29uJ3QgY2F1c2UgYVxuICAgIC8vIHJlbmRlciBidXQgd2Ugc3RpbGwgZG9uJ3QgZXhwZWN0IHRvIGJlIGluIGEgcmVuZGVyIGNhbGwgaGVyZS4pXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciAnICsgJ2lzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArICdjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG5cbiAgICAhaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCc0MCcpIDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFub2RlSXNSZW5kZXJlZEJ5T3RoZXJJbnN0YW5jZShjb250YWluZXIpLCBcInVubW91bnRDb21wb25lbnRBdE5vZGUoKTogVGhlIG5vZGUgeW91J3JlIGF0dGVtcHRpbmcgdG8gdW5tb3VudCBcIiArICd3YXMgcmVuZGVyZWQgYnkgYW5vdGhlciBjb3B5IG9mIFJlYWN0LicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBwcmV2Q29tcG9uZW50ID0gZ2V0VG9wTGV2ZWxXcmFwcGVySW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICBpZiAoIXByZXZDb21wb25lbnQpIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBub2RlIGJlaW5nIHVubW91bnRlZCB3YXMgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCBpc24ndCBhXG4gICAgICAvLyByb290IG5vZGUuXG4gICAgICB2YXIgY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgY29udGFpbmVyIGl0c2VsZiBpcyBhIFJlYWN0IHJvb3Qgbm9kZS5cbiAgICAgIHZhciBpc0NvbnRhaW5lclJlYWN0Um9vdCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBjb250YWluZXIuaGFzQXR0cmlidXRlKFJPT1RfQVRUUl9OQU1FKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkLCBcInVubW91bnRDb21wb25lbnRBdE5vZGUoKTogVGhlIG5vZGUgeW91J3JlIGF0dGVtcHRpbmcgdG8gdW5tb3VudCBcIiArICd3YXMgcmVuZGVyZWQgYnkgUmVhY3QgYW5kIGlzIG5vdCBhIHRvcC1sZXZlbCBjb250YWluZXIuICVzJywgaXNDb250YWluZXJSZWFjdFJvb3QgPyAnWW91IG1heSBoYXZlIGFjY2lkZW50YWxseSBwYXNzZWQgaW4gYSBSZWFjdCByb290IG5vZGUgaW5zdGVhZCAnICsgJ29mIGl0cyBjb250YWluZXIuJyA6ICdJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kICcgKyAncmVyZW5kZXIgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3ByZXZDb21wb25lbnQuX2luc3RhbmNlLnJvb3RJRF07XG4gICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHVubW91bnRDb21wb25lbnRGcm9tTm9kZSwgcHJldkNvbXBvbmVudCwgY29udGFpbmVyLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgX21vdW50SW1hZ2VJbnRvTm9kZTogZnVuY3Rpb24gKG1hcmt1cCwgY29udGFpbmVyLCBpbnN0YW5jZSwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKSB7XG4gICAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtb3VudENvbXBvbmVudEludG9Ob2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IHZhbGlkLicpIDogX3Byb2RJbnZhcmlhbnQoJzQxJykgOiB2b2lkIDA7XG5cbiAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgaWYgKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAobWFya3VwLCByb290RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZShpbnN0YW5jZSwgcm9vdEVsZW1lbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSByb290RWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgICAgICByb290RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuXG4gICAgICAgIHZhciByb290TWFya3VwID0gcm9vdEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICByb290RWxlbWVudC5zZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUsIGNoZWNrc3VtKTtcblxuICAgICAgICB2YXIgbm9ybWFsaXplZE1hcmt1cCA9IG1hcmt1cDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAvLyBiZWNhdXNlIHJvb3RNYXJrdXAgaXMgcmV0cmlldmVkIGZyb20gdGhlIERPTSwgdmFyaW91cyBub3JtYWxpemF0aW9uc1xuICAgICAgICAgIC8vIHdpbGwgaGF2ZSBvY2N1cnJlZCB3aGljaCB3aWxsIG5vdCBiZSBwcmVzZW50IGluIGBtYXJrdXBgLiBIZXJlLFxuICAgICAgICAgIC8vIGluc2VydCBtYXJrdXAgaW50byBhIDxkaXY+IG9yIDxpZnJhbWU+IGRlcGVuZGluZyBvbiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgLy8gdHlwZSB0byBwZXJmb3JtIHRoZSBzYW1lIG5vcm1hbGl6YXRpb25zIGJlZm9yZSBjb21wYXJpbmcuXG4gICAgICAgICAgdmFyIG5vcm1hbGl6ZXI7XG4gICAgICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIuaW5uZXJIVE1MID0gbWFya3VwO1xuICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuaW5uZXJIVE1MO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgICAgbm9ybWFsaXplci5jb250ZW50RG9jdW1lbnQud3JpdGUobWFya3VwKTtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRNYXJrdXAgPSBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChub3JtYWxpemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlmZkluZGV4ID0gZmlyc3REaWZmZXJlbmNlSW5kZXgobm9ybWFsaXplZE1hcmt1cCwgcm9vdE1hcmt1cCk7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gJyAoY2xpZW50KSAnICsgbm9ybWFsaXplZE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKSArICdcXG4gKHNlcnZlcikgJyArIHJvb3RNYXJrdXAuc3Vic3RyaW5nKGRpZmZJbmRleCAtIDIwLCBkaWZmSW5kZXggKyAyMCk7XG5cbiAgICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nIHNlcnZlciByZW5kZXJpbmcgYnV0IHRoZSBjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiB0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpIG1ldGhvZHMgYXJlIGltcHVyZS4gUmVhY3QgY2Fubm90IGhhbmRsZSB0aGlzIGNhc2UgZHVlIHRvIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91IHNob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgYW5kIGVuc3VyZSB0aGUgcHJvcHMgYXJlIHRoZSBzYW1lIGNsaWVudCBhbmQgc2VydmVyIHNpZGU6XFxuJXMnLCBkaWZmZXJlbmNlKSA6IF9wcm9kSW52YXJpYW50KCc0MicsIGRpZmZlcmVuY2UpIDogdm9pZCAwO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgJyArICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgKyAndXNpbmcgc2VydmVyIHJlbmRlcmluZyBhbmQgdGhlIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlICcgKyAnc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkICcgKyAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArICdvZiB0aGUgYmVuZWZpdHMgb2Ygc2VydmVyIHJlbmRlcmluZy4gSW5zdGVhZCwgZmlndXJlIG91dCAnICsgJ3doeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCAnICsgJ29yIHNlcnZlcjpcXG4lcycsIGRpZmZlcmVuY2UpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCB5b3UgZGlkblxcJ3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFdlIGNhblxcJ3QgZG8gdGhpcyB3aXRob3V0IHVzaW5nIHNlcnZlciByZW5kZXJpbmcgZHVlIHRvIGNyb3NzLWJyb3dzZXIgcXVpcmtzLiBTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IF9wcm9kSW52YXJpYW50KCc0MycpIDogdm9pZCAwO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIERPTUxhenlUcmVlLmluc2VydFRyZWVCZWZvcmUoY29udGFpbmVyLCBtYXJrdXAsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbm5lckhUTUwoY29udGFpbmVyLCBtYXJrdXApO1xuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZShpbnN0YW5jZSwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaG9zdE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICBpZiAoaG9zdE5vZGUuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgaW5zdGFuY2VJRDogaG9zdE5vZGUuX2RlYnVnSUQsXG4gICAgICAgICAgdHlwZTogJ21vdW50JyxcbiAgICAgICAgICBwYXlsb2FkOiBtYXJrdXAudG9TdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNb3VudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3ROb2RlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0Tm9kZVR5cGVzJyk7XG5cbmZ1bmN0aW9uIGdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpIHtcbiAgdmFyIHR5cGU7XG5cbiAgd2hpbGUgKCh0eXBlID0gaW5zdC5fcmVuZGVyZWROb2RlVHlwZSkgPT09IFJlYWN0Tm9kZVR5cGVzLkNPTVBPU0lURSkge1xuICAgIGluc3QgPSBpbnN0Ll9yZW5kZXJlZENvbXBvbmVudDtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBSZWFjdE5vZGVUeXBlcy5IT1NUKSB7XG4gICAgcmV0dXJuIGluc3QuX3JlbmRlcmVkQ29tcG9uZW50O1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFJlYWN0Tm9kZVR5cGVzLkVNUFRZKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbXV0YWJsZS1ncmFwaCcpXG4iLCJjb25zdCBhY2Nlc3NvciA9IChzZWxmLCBwcml2YXRlcywga2V5LCBhcmdzKSA9PiB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBwcml2YXRlcy5nZXQoc2VsZilba2V5XVxuICB9XG4gIHByaXZhdGVzLmdldChzZWxmKVtrZXldID0gYXJnc1swXVxuICByZXR1cm4gc2VsZlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFjY2Vzc29yXG4iLCJjb25zdCBsb25nZXN0UGF0aCA9IChnKSA9PiB7XG4gIGNvbnN0IHZpc2l0ZWQgPSB7fVxuICBjb25zdCBsYXllcnMgPSB7fVxuXG4gIGNvbnN0IGRmcyA9ICh1KSA9PiB7XG4gICAgaWYgKHZpc2l0ZWRbdV0pIHtcbiAgICAgIHJldHVybiBsYXllcnNbdV1cbiAgICB9XG4gICAgdmlzaXRlZFt1XSA9IHRydWVcblxuICAgIGxldCBsYXllciA9IEluZmluaXR5XG4gICAgZm9yIChjb25zdCB2IG9mIGcub3V0VmVydGljZXModSkpIHtcbiAgICAgIGxheWVyID0gTWF0aC5taW4obGF5ZXIsIGRmcyh2KSAtIDEpXG4gICAgfVxuICAgIGlmIChsYXllciA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGxheWVyID0gMFxuICAgIH1cbiAgICBsYXllcnNbdV0gPSBsYXllclxuICAgIHJldHVybiBsYXllclxuICB9XG5cbiAgZm9yIChjb25zdCB1IG9mIGcudmVydGljZXMoKSkge1xuICAgIGlmIChnLmluRGVncmVlKHUpID09PSAwKSB7XG4gICAgICBkZnModSlcbiAgICB9XG4gIH1cblxuICBsZXQgbWluTGF5ZXIgPSBJbmZpbml0eVxuICBmb3IgKGNvbnN0IHUgb2YgZy52ZXJ0aWNlcygpKSB7XG4gICAgbWluTGF5ZXIgPSBNYXRoLm1pbihtaW5MYXllciwgbGF5ZXJzW3VdKVxuICB9XG4gIGZvciAoY29uc3QgdSBvZiBnLnZlcnRpY2VzKCkpIHtcbiAgICBsYXllcnNbdV0gLT0gbWluTGF5ZXJcbiAgfVxuXG4gIHJldHVybiBsYXllcnNcbn1cblxuY2xhc3MgTG9uZ2VzdFBhdGgge1xuICBjYWxsIChnKSB7XG4gICAgcmV0dXJuIGxvbmdlc3RQYXRoKGcpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMb25nZXN0UGF0aFxuIiwiZXhwb3J0IHZhciBuYW1lID0gXCJkM1wiO1xuZXhwb3J0IHZhciB2ZXJzaW9uID0gXCI1LjcuMFwiO1xuZXhwb3J0IHZhciBkZXNjcmlwdGlvbiA9IFwiRGF0YS1Ecml2ZW4gRG9jdW1lbnRzXCI7XG5leHBvcnQgdmFyIGtleXdvcmRzID0gW1wiZG9tXCIsXCJ2aXN1YWxpemF0aW9uXCIsXCJzdmdcIixcImFuaW1hdGlvblwiLFwiY2FudmFzXCJdO1xuZXhwb3J0IHZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9kM2pzLm9yZ1wiO1xuZXhwb3J0IHZhciBsaWNlbnNlID0gXCJCU0QtMy1DbGF1c2VcIjtcbmV4cG9ydCB2YXIgYXV0aG9yID0ge1wibmFtZVwiOlwiTWlrZSBCb3N0b2NrXCIsXCJ1cmxcIjpcImh0dHBzOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9O1xuZXhwb3J0IHZhciBtYWluID0gXCJkaXN0L2QzLm5vZGUuanNcIjtcbmV4cG9ydCB2YXIgdW5wa2cgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIGpzZGVsaXZyID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBtb2R1bGUgPSBcImluZGV4LmpzXCI7XG5leHBvcnQgdmFyIHJlcG9zaXRvcnkgPSB7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLmdpdFwifTtcbmV4cG9ydCB2YXIgc2NyaXB0cyA9IHtcInByZXRlc3RcIjpcInJpbXJhZiBkaXN0ICYmIG1rZGlyIGRpc3QgJiYganNvbjJtb2R1bGUgcGFja2FnZS5qc29uID4gZGlzdC9wYWNrYWdlLmpzICYmIG5vZGUgcm9sbHVwLm5vZGVcIixcInRlc3RcIjpcInRhcGUgJ3Rlc3QvKiovKi10ZXN0LmpzJ1wiLFwicHJlcHVibGlzaE9ubHlcIjpcInlhcm4gdGVzdCAmJiByb2xsdXAgLWNcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInJpbXJhZlwiOlwiMlwiLFwicm9sbHVwXCI6XCIwLjY0XCIsXCJyb2xsdXAtcGx1Z2luLWFzY2lpXCI6XCIwLjBcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCIzXCIsXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiOlwiMVwiLFwidGFwZVwiOlwiNFwifTtcbmV4cG9ydCB2YXIgZGVwZW5kZW5jaWVzID0ge1wiZDMtYXJyYXlcIjpcIjFcIixcImQzLWF4aXNcIjpcIjFcIixcImQzLWJydXNoXCI6XCIxXCIsXCJkMy1jaG9yZFwiOlwiMVwiLFwiZDMtY29sbGVjdGlvblwiOlwiMVwiLFwiZDMtY29sb3JcIjpcIjFcIixcImQzLWNvbnRvdXJcIjpcIjFcIixcImQzLWRpc3BhdGNoXCI6XCIxXCIsXCJkMy1kcmFnXCI6XCIxXCIsXCJkMy1kc3ZcIjpcIjFcIixcImQzLWVhc2VcIjpcIjFcIixcImQzLWZldGNoXCI6XCIxXCIsXCJkMy1mb3JjZVwiOlwiMVwiLFwiZDMtZm9ybWF0XCI6XCIxXCIsXCJkMy1nZW9cIjpcIjFcIixcImQzLWhpZXJhcmNoeVwiOlwiMVwiLFwiZDMtaW50ZXJwb2xhdGVcIjpcIjFcIixcImQzLXBhdGhcIjpcIjFcIixcImQzLXBvbHlnb25cIjpcIjFcIixcImQzLXF1YWR0cmVlXCI6XCIxXCIsXCJkMy1yYW5kb21cIjpcIjFcIixcImQzLXNjYWxlXCI6XCIyXCIsXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjpcIjFcIixcImQzLXNlbGVjdGlvblwiOlwiMVwiLFwiZDMtc2hhcGVcIjpcIjFcIixcImQzLXRpbWVcIjpcIjFcIixcImQzLXRpbWUtZm9ybWF0XCI6XCIyXCIsXCJkMy10aW1lclwiOlwiMVwiLFwiZDMtdHJhbnNpdGlvblwiOlwiMVwiLFwiZDMtdm9yb25vaVwiOlwiMVwiLFwiZDMtem9vbVwiOlwiMVwifTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcCA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IGYocCwgcCA9IGFycmF5WysraV0pO1xuICByZXR1cm4gcGFpcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWlyKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXTtcbn1cbiIsImltcG9ydCB7cGFpcn0gZnJvbSBcIi4vcGFpcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzMCwgdmFsdWVzMSwgcmVkdWNlKSB7XG4gIHZhciBuMCA9IHZhbHVlczAubGVuZ3RoLFxuICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuMCAqIG4xKSxcbiAgICAgIGkwLFxuICAgICAgaTEsXG4gICAgICBpLFxuICAgICAgdmFsdWUwO1xuXG4gIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICBmb3IgKGkwID0gaSA9IDA7IGkwIDwgbjA7ICsraTApIHtcbiAgICBmb3IgKHZhbHVlMCA9IHZhbHVlczBbaTBdLCBpMSA9IDA7IGkxIDwgbjE7ICsraTEsICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiaW1wb3J0IHZhcmlhbmNlIGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGJpc2VjdCBmcm9tIFwiLi9iaXNlY3RcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGV4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuaW1wb3J0IHJhbmdlIGZyb20gXCIuL3JhbmdlXCI7XG5pbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiLi90aWNrc1wiO1xuaW1wb3J0IHN0dXJnZXMgZnJvbSBcIi4vdGhyZXNob2xkL3N0dXJnZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCB4MSwgdHopOyAvLyBleGNsdXNpdmVcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xuICAgIHdoaWxlICh0elttIC0gMV0gPiB4MSkgdHoucG9wKCksIC0tbTtcblxuICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgYmluO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxuICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xuICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBkYXRhIHRvIGJpbnMgYnkgdmFsdWUsIGlnbm9yaW5nIGFueSBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgYmluc1tiaXNlY3QodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiaW5zO1xuICB9XG5cbiAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgcmV0dXJuIGhpc3RvZ3JhbTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuLi9hcnJheVwiO1xuaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBtaW4sIG1heCkge1xuICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAocXVhbnRpbGUodmFsdWVzLCAwLjc1KSAtIHF1YW50aWxlKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufVxuIiwiaW1wb3J0IGRldmlhdGlvbiBmcm9tIFwiLi4vZGV2aWF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkgcGVybXV0ZXNbaV0gPSBhcnJheVtpbmRleGVzW2ldXTtcbiAgcmV0dXJuIHBlcm11dGVzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGkwLCBpMSkge1xuICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W20gKyBpMF07XG4gICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuIiwiaW1wb3J0IG1pbiBmcm9tIFwiLi9taW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBuLCByb3cgPSB0cmFuc3Bvc2VbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47KSB7XG4gICAgICByb3dbal0gPSBtYXRyaXhbal1baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFuc3Bvc2U7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aChkKSB7XG4gIHJldHVybiBkLmxlbmd0aDtcbn1cbiIsImltcG9ydCB0cmFuc3Bvc2UgZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgbW91c2UsIHNlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBCcnVzaEV2ZW50IGZyb20gXCIuL2V2ZW50XCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnRcIjtcblxudmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn0sXG4gICAgTU9ERV9TUEFDRSA9IHtuYW1lOiBcInNwYWNlXCJ9LFxuICAgIE1PREVfSEFORExFID0ge25hbWU6IFwiaGFuZGxlXCJ9LFxuICAgIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcImVcIiwgXCJ3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggJiYgW1t4WzBdLCBlWzBdWzFdXSwgW3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSAmJiBbW2VbMF1bMF0sIHlbMF1dLCBbZVsxXVswXSwgeVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxufTtcblxudmFyIFhZID0ge1xuICBuYW1lOiBcInh5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKGJydXNoLCBcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoIHRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZCk7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICYmIHNlbGVjdGlvbjEgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHsgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCgpOyB9XG4gICAgZWxzZSBpZiAodG91Y2hlbmRpbmcpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCxcbiAgICAgICAgZHksXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludDAgPSBtb3VzZSh0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1xuICAgICAgICBbdzAgPSBkaW0gPT09IFkgPyBXIDogcG9pbnQwWzBdLCBuMCA9IGRpbSA9PT0gWCA/IE4gOiBwb2ludDBbMV1dLFxuICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICBuMCA9IHNlbGVjdGlvblswXVsxXTtcbiAgICAgIGUwID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgfVxuXG4gICAgdzEgPSB3MDtcbiAgICBuMSA9IG4wO1xuICAgIGUxID0gZTA7XG4gICAgczEgPSBzMDtcblxuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcblxuICAgIHZhciBvdmVybGF5ID0gZ3JvdXAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IHNlbGVjdChldmVudC52aWV3KVxuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBtb3VzZSh0aGF0KTtcbiAgICAgIGlmIChzaGlmdGluZyAmJiAhbG9ja1ggJiYgIWxvY2tZKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBsb2NrWCA9IHRydWU7XG4gICAgICB9XG4gICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgIHZhciB0O1xuXG4gICAgICBkeCA9IHBvaW50WzBdIC0gcG9pbnQwWzBdO1xuICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgTU9ERV9TUEFDRTpcbiAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgbjAgLSBkeSAqIHNpZ25ZKSksIHMxID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kZWQoKSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSBwaSAqIDI7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuIiwiaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge21heCwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgIGdyb3VwSW5kZXggPSByYW5nZShuKSxcbiAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgayxcbiAgICAgICAgeCxcbiAgICAgICAgeDAsXG4gICAgICAgIGR4LFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4ID0gMCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcbiAgICAgIGsgKz0geDtcbiAgICB9XG5cbiAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAvLyBUT0RPIEFsbG93IHN0YXJ0IGFuZCBlbmQgYW5nbGUgdG8gYmUgc3BlY2lmaWVkP1xuICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICBrID0gbWF4KDAsIHRhdSAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgIGR4ID0gayA/IHBhZEFuZ2xlIDogdGF1IC8gbjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgeCA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSxcbiAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgIGExID0geCArPSB2ICogaztcbiAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICB9O1xuICAgICAgeCArPSBkeDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XG4gICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgfVxuXG4gIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4KDAsIF8pLCBjaG9yZCkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRHcm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0R3JvdXBzO1xuICB9O1xuXG4gIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFN1Ymdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRTdWJncm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydENob3JkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBzb3J0Q2hvcmRzID0gbnVsbCA6IChzb3J0Q2hvcmRzID0gY29tcGFyZVZhbHVlKF8pKS5fID0gXywgY2hvcmQpIDogc29ydENob3JkcyAmJiBzb3J0Q2hvcmRzLl87XG4gIH07XG5cbiAgcmV0dXJuIGNob3JkO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHtjb3MsIGhhbGZQaSwgc2lufSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMoZCkge1xuICByZXR1cm4gZC5yYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEVuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc291cmNlID0gZGVmYXVsdFNvdXJjZSxcbiAgICAgIHRhcmdldCA9IGRlZmF1bHRUYXJnZXQsXG4gICAgICByYWRpdXMgPSBkZWZhdWx0UmFkaXVzLFxuICAgICAgc3RhcnRBbmdsZSA9IGRlZmF1bHRTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBkZWZhdWx0RW5kQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiByaWJib24oKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgYXJndiA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgcyA9IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgdCA9IHRhcmdldC5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgc3IgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLFxuICAgICAgICBzYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICBzYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSxcbiAgICAgICAgc3gwID0gc3IgKiBjb3Moc2EwKSxcbiAgICAgICAgc3kwID0gc3IgKiBzaW4oc2EwKSxcbiAgICAgICAgdHIgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxuICAgICAgICB0YTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICB0YTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaTtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIGNvbnRleHQubW92ZVRvKHN4MCwgc3kwKTtcbiAgICBjb250ZXh0LmFyYygwLCAwLCBzciwgc2EwLCBzYTEpO1xuICAgIGlmIChzYTAgIT09IHRhMCB8fCBzYTEgIT09IHRhMSkgeyAvLyBUT0RPIHNyICE9PSB0cj9cbiAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0ciAqIGNvcyh0YTApLCB0ciAqIHNpbih0YTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHRyLCB0YTAsIHRhMSk7XG4gICAgfVxuICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCBzeDAsIHN5MCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgcmliYm9uLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHJhZGl1cztcbiAgfTtcblxuICByaWJib24uc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHJpYmJvbi5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCByaWJib24pIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgcmliYm9uLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCByaWJib24pIDogc291cmNlO1xuICB9O1xuXG4gIHJpYmJvbi50YXJnZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGFyZ2V0ID0gXywgcmliYm9uKSA6IHRhcmdldDtcbiAgfTtcblxuICByaWJib24uY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgcmliYm9uKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIHJpYmJvbjtcbn1cbiIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiBtYXBba2V5XX0pO1xuICByZXR1cm4gZW50cmllcztcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyaW5nKSB7XG4gIHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBhcmVhID0gcmluZ1tuIC0gMV1bMV0gKiByaW5nWzBdWzBdIC0gcmluZ1tuIC0gMV1bMF0gKiByaW5nWzBdWzFdO1xuICB3aGlsZSAoKytpIDwgbikgYXJlYSArPSByaW5nW2kgLSAxXVsxXSAqIHJpbmdbaV1bMF0gLSByaW5nW2kgLSAxXVswXSAqIHJpbmdbaV1bMV07XG4gIHJldHVybiBhcmVhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyaW5nLCBob2xlKSB7XG4gIHZhciBpID0gLTEsIG4gPSBob2xlLmxlbmd0aCwgYztcbiAgd2hpbGUgKCsraSA8IG4pIGlmIChjID0gcmluZ0NvbnRhaW5zKHJpbmcsIGhvbGVbaV0pKSByZXR1cm4gYztcbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIHJpbmdDb250YWlucyhyaW5nLCBwb2ludCkge1xuICB2YXIgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sIGNvbnRhaW5zID0gLTE7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gcmluZy5sZW5ndGgsIGogPSBuIC0gMTsgaSA8IG47IGogPSBpKyspIHtcbiAgICB2YXIgcGkgPSByaW5nW2ldLCB4aSA9IHBpWzBdLCB5aSA9IHBpWzFdLCBwaiA9IHJpbmdbal0sIHhqID0gcGpbMF0sIHlqID0gcGpbMV07XG4gICAgaWYgKHNlZ21lbnRDb250YWlucyhwaSwgcGosIHBvaW50KSkgcmV0dXJuIDA7XG4gICAgaWYgKCgoeWkgPiB5KSAhPT0gKHlqID4geSkpICYmICgoeCA8ICh4aiAtIHhpKSAqICh5IC0geWkpIC8gKHlqIC0geWkpICsgeGkpKSkgY29udGFpbnMgPSAtY29udGFpbnM7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5zO1xufVxuXG5mdW5jdGlvbiBzZWdtZW50Q29udGFpbnMoYSwgYiwgYykge1xuICB2YXIgaTsgcmV0dXJuIGNvbGxpbmVhcihhLCBiLCBjKSAmJiB3aXRoaW4oYVtpID0gKyhhWzBdID09PSBiWzBdKV0sIGNbaV0sIGJbaV0pO1xufVxuXG5mdW5jdGlvbiBjb2xsaW5lYXIoYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgPT09IChjWzBdIC0gYVswXSkgKiAoYlsxXSAtIGFbMV0pO1xufVxuXG5mdW5jdGlvbiB3aXRoaW4ocCwgcSwgcikge1xuICByZXR1cm4gcCA8PSBxICYmIHEgPD0gciB8fCByIDw9IHEgJiYgcSA8PSBwO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7fVxuIiwiaW1wb3J0IHtleHRlbnQsIHRocmVzaG9sZFN0dXJnZXMsIHRpY2tTdGVwLCByYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBhcmVhIGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5cbnZhciBjYXNlcyA9IFtcbiAgW10sXG4gIFtbWzEuMCwgMS41XSwgWzAuNSwgMS4wXV1dLFxuICBbW1sxLjUsIDEuMF0sIFsxLjAsIDEuNV1dXSxcbiAgW1tbMS41LCAxLjBdLCBbMC41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzEuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDEuNV0sIFswLjUsIDEuMF1dLCBbWzEuMCwgMC41XSwgWzEuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDAuNV0sIFsxLjAsIDEuNV1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMC41LCAxLjBdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMC41XV1dLFxuICBbW1sxLjAsIDEuNV0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS4wLCAwLjVdXSwgW1sxLjUsIDEuMF0sIFsxLjAsIDEuNV1dXSxcbiAgW1tbMS41LCAxLjBdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDEuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtdXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHRocmVzaG9sZCA9IHRocmVzaG9sZFN0dXJnZXMsXG4gICAgICBzbW9vdGggPSBzbW9vdGhMaW5lYXI7XG5cbiAgZnVuY3Rpb24gY29udG91cnModmFsdWVzKSB7XG4gICAgdmFyIHR6ID0gdGhyZXNob2xkKHZhbHVlcyk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHZhciBkb21haW4gPSBleHRlbnQodmFsdWVzKSwgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bMV07XG4gICAgICB0eiA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguZmxvb3Ioc3RhcnQgLyB0eikgKiB0eiwgTWF0aC5mbG9vcihzdG9wIC8gdHopICogdHosIHR6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHogPSB0ei5zbGljZSgpLnNvcnQoYXNjZW5kaW5nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHoubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29udG91cih2YWx1ZXMsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFjY3VtdWxhdGUsIHNtb290aCBjb250b3VyIHJpbmdzLCBhc3NpZ24gaG9sZXMgdG8gZXh0ZXJpb3IgcmluZ3MuXG4gIC8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tYm9zdG9jay9zaGFwZWZpbGUvYmxvYi92MC42LjIvc2hwL3BvbHlnb24uanNcbiAgZnVuY3Rpb24gY29udG91cih2YWx1ZXMsIHZhbHVlKSB7XG4gICAgdmFyIHBvbHlnb25zID0gW10sXG4gICAgICAgIGhvbGVzID0gW107XG5cbiAgICBpc29yaW5ncyh2YWx1ZXMsIHZhbHVlLCBmdW5jdGlvbihyaW5nKSB7XG4gICAgICBzbW9vdGgocmluZywgdmFsdWVzLCB2YWx1ZSk7XG4gICAgICBpZiAoYXJlYShyaW5nKSA+IDApIHBvbHlnb25zLnB1c2goW3JpbmddKTtcbiAgICAgIGVsc2UgaG9sZXMucHVzaChyaW5nKTtcbiAgICB9KTtcblxuICAgIGhvbGVzLmZvckVhY2goZnVuY3Rpb24oaG9sZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29ucy5sZW5ndGgsIHBvbHlnb247IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zKChwb2x5Z29uID0gcG9seWdvbnNbaV0pWzBdLCBob2xlKSAhPT0gLTEpIHtcbiAgICAgICAgICBwb2x5Z29uLnB1c2goaG9sZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJNdWx0aVBvbHlnb25cIixcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGNvb3JkaW5hdGVzOiBwb2x5Z29uc1xuICAgIH07XG4gIH1cblxuICAvLyBNYXJjaGluZyBzcXVhcmVzIHdpdGggaXNvbGluZXMgc3RpdGNoZWQgaW50byByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RvcG9qc29uL3RvcG9qc29uLWNsaWVudC9ibG9iL3YzLjAuMC9zcmMvc3RpdGNoLmpzXG4gIGZ1bmN0aW9uIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZyYWdtZW50QnlTdGFydCA9IG5ldyBBcnJheSxcbiAgICAgICAgZnJhZ21lbnRCeUVuZCA9IG5ldyBBcnJheSxcbiAgICAgICAgeCwgeSwgdDAsIHQxLCB0MiwgdDM7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRoZSBmaXJzdCByb3cgKHkgPSAtMSwgdDIgPSB0MyA9IDApLlxuICAgIHggPSB5ID0gLTE7XG4gICAgdDEgPSB2YWx1ZXNbMF0gPj0gdmFsdWU7XG4gICAgY2FzZXNbdDEgPDwgMV0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgIHQwID0gdDEsIHQxID0gdmFsdWVzW3ggKyAxXSA+PSB2YWx1ZTtcbiAgICAgIGNhc2VzW3QwIHwgdDEgPDwgMV0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cbiAgICBjYXNlc1t0MSA8PCAwXS5mb3JFYWNoKHN0aXRjaCk7XG5cbiAgICAvLyBHZW5lcmFsIGNhc2UgZm9yIHRoZSBpbnRlcm1lZGlhdGUgcm93cy5cbiAgICB3aGlsZSAoKyt5IDwgZHkgLSAxKSB7XG4gICAgICB4ID0gLTE7XG4gICAgICB0MSA9IHZhbHVlc1t5ICogZHggKyBkeF0gPj0gdmFsdWU7XG4gICAgICB0MiA9IHZhbHVlc1t5ICogZHhdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDEgPDwgMSB8IHQyIDw8IDJdLmZvckVhY2goc3RpdGNoKTtcbiAgICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgICAgdDAgPSB0MSwgdDEgPSB2YWx1ZXNbeSAqIGR4ICsgZHggKyB4ICsgMV0gPj0gdmFsdWU7XG4gICAgICAgIHQzID0gdDIsIHQyID0gdmFsdWVzW3kgKiBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxIHwgdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICAgIH1cbiAgICAgIGNhc2VzW3QxIHwgdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGxhc3Qgcm93ICh5ID0gZHkgLSAxLCB0MCA9IHQxID0gMCkuXG4gICAgeCA9IC0xO1xuICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgY2FzZXNbdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgIHQzID0gdDIsIHQyID0gdmFsdWVzW3kgKiBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgIGNhc2VzW3QyIDw8IDIgfCB0MyA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuICAgIGNhc2VzW3QyIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcblxuICAgIGZ1bmN0aW9uIHN0aXRjaChsaW5lKSB7XG4gICAgICB2YXIgc3RhcnQgPSBbbGluZVswXVswXSArIHgsIGxpbmVbMF1bMV0gKyB5XSxcbiAgICAgICAgICBlbmQgPSBbbGluZVsxXVswXSArIHgsIGxpbmVbMV1bMV0gKyB5XSxcbiAgICAgICAgICBzdGFydEluZGV4ID0gaW5kZXgoc3RhcnQpLFxuICAgICAgICAgIGVuZEluZGV4ID0gaW5kZXgoZW5kKSxcbiAgICAgICAgICBmLCBnO1xuICAgICAgaWYgKGYgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgIGlmIChnID0gZnJhZ21lbnRCeVN0YXJ0W2VuZEluZGV4XSkge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5RW5kW2YuZW5kXTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeVN0YXJ0W2cuc3RhcnRdO1xuICAgICAgICAgIGlmIChmID09PSBnKSB7XG4gICAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgICAgY2FsbGJhY2soZi5yaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnRdID0gZnJhZ21lbnRCeUVuZFtnLmVuZF0gPSB7c3RhcnQ6IGYuc3RhcnQsIGVuZDogZy5lbmQsIHJpbmc6IGYucmluZy5jb25jYXQoZy5yaW5nKX07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5RW5kW2YuZW5kXTtcbiAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgIGZyYWdtZW50QnlFbmRbZi5lbmQgPSBlbmRJbmRleF0gPSBmO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGYgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgIGlmIChnID0gZnJhZ21lbnRCeUVuZFtzdGFydEluZGV4XSkge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF07XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZy5lbmRdO1xuICAgICAgICAgIGlmIChmID09PSBnKSB7XG4gICAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgICAgY2FsbGJhY2soZi5yaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2cuc3RhcnRdID0gZnJhZ21lbnRCeUVuZFtmLmVuZF0gPSB7c3RhcnQ6IGcuc3RhcnQsIGVuZDogZi5lbmQsIHJpbmc6IGcucmluZy5jb25jYXQoZi5yaW5nKX07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF07XG4gICAgICAgICAgZi5yaW5nLnVuc2hpZnQoc3RhcnQpO1xuICAgICAgICAgIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0ID0gc3RhcnRJbmRleF0gPSBmO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFnbWVudEJ5U3RhcnRbc3RhcnRJbmRleF0gPSBmcmFnbWVudEJ5RW5kW2VuZEluZGV4XSA9IHtzdGFydDogc3RhcnRJbmRleCwgZW5kOiBlbmRJbmRleCwgcmluZzogW3N0YXJ0LCBlbmRdfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleChwb2ludCkge1xuICAgIHJldHVybiBwb2ludFswXSAqIDIgKyBwb2ludFsxXSAqIChkeCArIDEpICogNDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNtb290aExpbmVhcihyaW5nLCB2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmluZy5mb3JFYWNoKGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICB2YXIgeCA9IHBvaW50WzBdLFxuICAgICAgICAgIHkgPSBwb2ludFsxXSxcbiAgICAgICAgICB4dCA9IHggfCAwLFxuICAgICAgICAgIHl0ID0geSB8IDAsXG4gICAgICAgICAgdjAsXG4gICAgICAgICAgdjEgPSB2YWx1ZXNbeXQgKiBkeCArIHh0XTtcbiAgICAgIGlmICh4ID4gMCAmJiB4IDwgZHggJiYgeHQgPT09IHgpIHtcbiAgICAgICAgdjAgPSB2YWx1ZXNbeXQgKiBkeCArIHh0IC0gMV07XG4gICAgICAgIHBvaW50WzBdID0geCArICh2YWx1ZSAtIHYwKSAvICh2MSAtIHYwKSAtIDAuNTtcbiAgICAgIH1cbiAgICAgIGlmICh5ID4gMCAmJiB5IDwgZHkgJiYgeXQgPT09IHkpIHtcbiAgICAgICAgdjAgPSB2YWx1ZXNbKHl0IC0gMSkgKiBkeCArIHh0XTtcbiAgICAgICAgcG9pbnRbMV0gPSB5ICsgKHZhbHVlIC0gdjApIC8gKHYxIC0gdjApIC0gMC41O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29udG91cnMuY29udG91ciA9IGNvbnRvdXI7XG5cbiAgY29udG91cnMuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID4gMCkgfHwgIShfMSA+IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIGNvbnRvdXJzO1xuICB9O1xuXG4gIGNvbnRvdXJzLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgY29udG91cnMpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGNvbnRvdXJzLnNtb290aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzbW9vdGggPSBfID8gc21vb3RoTGluZWFyIDogbm9vcCwgY29udG91cnMpIDogc21vb3RoID09PSBzbW9vdGhMaW5lYXI7XG4gIH07XG5cbiAgcmV0dXJuIGNvbnRvdXJzO1xufVxuIiwiLy8gVE9ETyBPcHRpbWl6ZSBlZGdlIGNhc2VzLlxuLy8gVE9ETyBPcHRpbWl6ZSBpbmRleCBjYWxjdWxhdGlvbi5cbi8vIFRPRE8gT3B0aW1pemUgYXJndW1lbnRzLlxuZXhwb3J0IGZ1bmN0aW9uIGJsdXJYKHNvdXJjZSwgdGFyZ2V0LCByKSB7XG4gIHZhciBuID0gc291cmNlLndpZHRoLFxuICAgICAgbSA9IHNvdXJjZS5oZWlnaHQsXG4gICAgICB3ID0gKHIgPDwgMSkgKyAxO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzciA9IDA7IGkgPCBuICsgcjsgKytpKSB7XG4gICAgICBpZiAoaSA8IG4pIHtcbiAgICAgICAgc3IgKz0gc291cmNlLmRhdGFbaSArIGogKiBuXTtcbiAgICAgIH1cbiAgICAgIGlmIChpID49IHIpIHtcbiAgICAgICAgaWYgKGkgPj0gdykge1xuICAgICAgICAgIHNyIC09IHNvdXJjZS5kYXRhW2kgLSB3ICsgaiAqIG5dO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5kYXRhW2kgLSByICsgaiAqIG5dID0gc3IgLyBNYXRoLm1pbihpICsgMSwgbiAtIDEgKyB3IC0gaSwgdyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFRPRE8gT3B0aW1pemUgZWRnZSBjYXNlcy5cbi8vIFRPRE8gT3B0aW1pemUgaW5kZXggY2FsY3VsYXRpb24uXG4vLyBUT0RPIE9wdGltaXplIGFyZ3VtZW50cy5cbmV4cG9ydCBmdW5jdGlvbiBibHVyWShzb3VyY2UsIHRhcmdldCwgcikge1xuICB2YXIgbiA9IHNvdXJjZS53aWR0aCxcbiAgICAgIG0gPSBzb3VyY2UuaGVpZ2h0LFxuICAgICAgdyA9IChyIDw8IDEpICsgMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBmb3IgKHZhciBqID0gMCwgc3IgPSAwOyBqIDwgbSArIHI7ICsraikge1xuICAgICAgaWYgKGogPCBtKSB7XG4gICAgICAgIHNyICs9IHNvdXJjZS5kYXRhW2kgKyBqICogbl07XG4gICAgICB9XG4gICAgICBpZiAoaiA+PSByKSB7XG4gICAgICAgIGlmIChqID49IHcpIHtcbiAgICAgICAgICBzciAtPSBzb3VyY2UuZGF0YVtpICsgKGogLSB3KSAqIG5dO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5kYXRhW2kgKyAoaiAtIHIpICogbl0gPSBzciAvIE1hdGgubWluKGogKyAxLCBtIC0gMSArIHcgLSBqLCB3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7bWF4LCByYW5nZSwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7Ymx1clgsIGJsdXJZfSBmcm9tIFwiLi9ibHVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjb250b3VycyBmcm9tIFwiLi9jb250b3Vyc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2VpZ2h0KCkge1xuICByZXR1cm4gMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gZGVmYXVsdFgsXG4gICAgICB5ID0gZGVmYXVsdFksXG4gICAgICB3ZWlnaHQgPSBkZWZhdWx0V2VpZ2h0LFxuICAgICAgZHggPSA5NjAsXG4gICAgICBkeSA9IDUwMCxcbiAgICAgIHIgPSAyMCwgLy8gYmx1ciByYWRpdXNcbiAgICAgIGsgPSAyLCAvLyBsb2cyKGdyaWQgY2VsbCBzaXplKVxuICAgICAgbyA9IHIgKiAzLCAvLyBncmlkIG9mZnNldCwgdG8gcGFkIGZvciBibHVyXG4gICAgICBuID0gKGR4ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgd2lkdGhcbiAgICAgIG0gPSAoZHkgKyBvICogMikgPj4gaywgLy8gZ3JpZCBoZWlnaHRcbiAgICAgIHRocmVzaG9sZCA9IGNvbnN0YW50KDIwKTtcblxuICBmdW5jdGlvbiBkZW5zaXR5KGRhdGEpIHtcbiAgICB2YXIgdmFsdWVzMCA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pLFxuICAgICAgICB2YWx1ZXMxID0gbmV3IEZsb2F0MzJBcnJheShuICogbSk7XG5cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZCwgaSwgZGF0YSkge1xuICAgICAgdmFyIHhpID0gKCt4KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB5aSA9ICgreShkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgd2kgPSArd2VpZ2h0KGQsIGksIGRhdGEpO1xuICAgICAgaWYgKHhpID49IDAgJiYgeGkgPCBuICYmIHlpID49IDAgJiYgeWkgPCBtKSB7XG4gICAgICAgIHZhbHVlczBbeGkgKyB5aSAqIG5dICs9IHdpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcblxuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMwKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIHN0b3AgPSBtYXgodmFsdWVzMCk7XG4gICAgICB0eiA9IHRpY2tTdGVwKDAsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoMCwgTWF0aC5mbG9vcihzdG9wIC8gdHopICogdHosIHR6KTtcbiAgICAgIHR6LnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRvdXJzKClcbiAgICAgICAgLnRocmVzaG9sZHModHopXG4gICAgICAgIC5zaXplKFtuLCBtXSlcbiAgICAgICh2YWx1ZXMwKVxuICAgICAgICAubWFwKHRyYW5zZm9ybSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0oZ2VvbWV0cnkpIHtcbiAgICBnZW9tZXRyeS52YWx1ZSAqPSBNYXRoLnBvdygyLCAtMiAqIGspOyAvLyBEZW5zaXR5IGluIHBvaW50cyBwZXIgc3F1YXJlIHBpeGVsLlxuICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9seWdvbik7XG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9seWdvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1SaW5nKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2ludCk7XG4gIH1cblxuICAvLyBUT0RPIE9wdGltaXplLlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzWzBdID0gY29vcmRpbmF0ZXNbMF0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gICAgY29vcmRpbmF0ZXNbMV0gPSBjb29yZGluYXRlc1sxXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICBvID0gciAqIDM7XG4gICAgbiA9IChkeCArIG8gKiAyKSA+PiBrO1xuICAgIG0gPSAoZHkgKyBvICogMikgPj4gaztcbiAgICByZXR1cm4gZGVuc2l0eTtcbiAgfVxuXG4gIGRlbnNpdHkueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeDtcbiAgfTtcblxuICBkZW5zaXR5LnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHk7XG4gIH07XG5cbiAgZGVuc2l0eS53ZWlnaHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2VpZ2h0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogd2VpZ2h0O1xuICB9O1xuXG4gIGRlbnNpdHkuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID49IDApICYmICEoXzAgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS5jZWxsU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAxIDw8IGs7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2VsbCBzaXplXCIpO1xuICAgIHJldHVybiBrID0gTWF0aC5mbG9vcihNYXRoLmxvZyhfKSAvIE1hdGguTE4yKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGRlbnNpdHkpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGRlbnNpdHkuYmFuZHdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChyICogKHIgKyAxKSk7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmFuZHdpZHRoXCIpO1xuICAgIHJldHVybiByID0gTWF0aC5yb3VuZCgoTWF0aC5zcXJ0KDQgKiBfICogXyArIDEpIC0gMSkgLyAyKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbnNpdHk7XG59XG4iLCJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZUJsb2IocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5ibG9iKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUJsb2IpO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VBcnJheUJ1ZmZlcihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUFycmF5QnVmZmVyKTtcbn1cbiIsImZ1bmN0aW9uIHJlc3BvbnNlVGV4dChyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlVGV4dCk7XG59XG4iLCJpbXBvcnQge2NzdlBhcnNlLCBkc3ZGb3JtYXQsIHRzdlBhcnNlfSBmcm9tIFwiZDMtZHN2XCI7XG5pbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIGRzdlBhcnNlKHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCwgcm93KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkc3YoZGVsaW1pdGVyLCBpbnB1dCwgaW5pdCwgcm93KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gIHZhciBmb3JtYXQgPSBkc3ZGb3JtYXQoZGVsaW1pdGVyKTtcbiAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZm9ybWF0LnBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBjc3YgPSBkc3ZQYXJzZShjc3ZQYXJzZSk7XG5leHBvcnQgdmFyIHRzdiA9IGRzdlBhcnNlKHRzdlBhcnNlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2U7XG4gICAgZm9yICh2YXIga2V5IGluIGluaXQpIGltYWdlW2tleV0gPSBpbml0W2tleV07XG4gICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHsgcmVzb2x2ZShpbWFnZSk7IH07XG4gICAgaW1hZ2Uuc3JjID0gaW5wdXQ7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VKc29uKTtcbn1cbiIsImltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gcGFyc2VyKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0KSAge1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHJldHVybiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHRleHQsIHR5cGUpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZXIoXCJhcHBsaWNhdGlvbi94bWxcIik7XG5cbmV4cG9ydCB2YXIgaHRtbCA9IHBhcnNlcihcInRleHQvaHRtbFwiKTtcblxuZXhwb3J0IHZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbm9kZXM7XG5cbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBub2RlLFxuICAgICAgICBzeCA9IDAsXG4gICAgICAgIHN5ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgc3ggKz0gbm9kZS54LCBzeSArPSBub2RlLnk7XG4gICAgfVxuXG4gICAgZm9yIChzeCA9IHN4IC8gbiAtIHgsIHN5ID0gc3kgLyBuIC0geSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54IC09IHN4LCBub2RlLnkgLT0gc3k7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHZhciB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xufVxuXG5mdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgeDAgPSB0cmVlLl94MCxcbiAgICAgIHkwID0gdHJlZS5feTAsXG4gICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgeTEgPSB0cmVlLl95MSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICB4cCxcbiAgICAgIHlwLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKHBhcmVudCA9IG5vZGUsICEobm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgeHAgPSArdHJlZS5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBzcGxpdCB0aGUgbGVhZiBub2RlIHVudGlsIHRoZSBvbGQgYW5kIG5ldyBwb2ludCBhcmUgc2VwYXJhdGVkLlxuICBkbyB7XG4gICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gIHJldHVybiBwYXJlbnRbal0gPSBub2RlLCBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgeHpbaV0gPSB4O1xuICAgIHl6W2ldID0geTtcbiAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBpbmhlcml0IHRoZSBleGlzdGluZyBleHRlbnQuXG4gIGlmICh4MSA8IHgwKSB4MCA9IHRoaXMuX3gwLCB4MSA9IHRoaXMuX3gxO1xuICBpZiAoeTEgPCB5MCkgeTAgPSB0aGlzLl95MCwgeTEgPSB0aGlzLl95MTtcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSBpZiAoeDAgPiB4IHx8IHggPiB4MSB8fCB5MCA+IHkgfHwgeSA+IHkxKSB7XG4gICAgdmFyIHogPSB4MSAtIHgwLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgc3dpdGNoIChpID0gKHkgPCAoeTAgKyB5MSkgLyAyKSA8PCAxIHwgKHggPCAoeDAgKyB4MSkgLyAyKSkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIGRvIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUgKHogKj0gMiwgeDEgPSB4MCArIHosIHkxID0geTAgKyB6LCB4ID4geDEgfHwgeSA+IHkxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICB3aGlsZSAoeiAqPSAyLCB4MCA9IHgxIC0geiwgeTEgPSB5MCArIHosIHgwID4geCB8fCB5ID4geTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MCA9IHkxIC0geiwgeCA+IHgxIHx8IHkwID4geSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIGRvIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUgKHogKj0gMiwgeDAgPSB4MSAtIHosIHkwID0geTEgLSB6LCB4MCA+IHggfHwgeTAgPiB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGNvdmVycyB0aGUgcG9pbnQgYWxyZWFkeSwganVzdCByZXR1cm4uXG4gIGVsc2UgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLm5vZGUgPSBub2RlO1xuICB0aGlzLngwID0geDA7XG4gIHRoaXMueTAgPSB5MDtcbiAgdGhpcy54MSA9IHgxO1xuICB0aGlzLnkxID0geTE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feSA9IF8sIHRoaXMpIDogdGhpcy5feTtcbn1cbiIsImltcG9ydCB0cmVlX2FkZCwge2FkZEFsbCBhcyB0cmVlX2FkZEFsbH0gZnJvbSBcIi4vYWRkXCI7XG5pbXBvcnQgdHJlZV9jb3ZlciBmcm9tIFwiLi9jb3ZlclwiO1xuaW1wb3J0IHRyZWVfZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgdHJlZV9leHRlbnQgZnJvbSBcIi4vZXh0ZW50XCI7XG5pbXBvcnQgdHJlZV9maW5kIGZyb20gXCIuL2ZpbmRcIjtcbmltcG9ydCB0cmVlX3JlbW92ZSwge3JlbW92ZUFsbCBhcyB0cmVlX3JlbW92ZUFsbH0gZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJlZV9yb290IGZyb20gXCIuL3Jvb3RcIjtcbmltcG9ydCB0cmVlX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHRyZWVfdmlzaXQgZnJvbSBcIi4vdmlzaXRcIjtcbmltcG9ydCB0cmVlX3Zpc2l0QWZ0ZXIgZnJvbSBcIi4vdmlzaXRBZnRlclwiO1xuaW1wb3J0IHRyZWVfeCwge2RlZmF1bHRYfSBmcm9tIFwiLi94XCI7XG5pbXBvcnQgdHJlZV95LCB7ZGVmYXVsdFl9IGZyb20gXCIuL3lcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gdHJlZV9hZGRBbGw7XG50cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xudHJlZVByb3RvLmRhdGEgPSB0cmVlX2RhdGE7XG50cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG50cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbnRyZWVQcm90by5yZW1vdmUgPSB0cmVlX3JlbW92ZTtcbnRyZWVQcm90by5yZW1vdmVBbGwgPSB0cmVlX3JlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZVwiO1xuaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5cbmZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54ICsgZC52eDtcbn1cblxuZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnkgKyBkLnZ5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudChyYWRpdXMgPT0gbnVsbCA/IDEgOiArcmFkaXVzKTtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgdHJlZSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgeGksXG4gICAgICAgIHlpLFxuICAgICAgICByaSxcbiAgICAgICAgcmkyO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihwcmVwYXJlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICByaSA9IHJhZGlpW25vZGUuaW5kZXhdLCByaTIgPSByaSAqIHJpO1xuICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgIHlpID0gbm9kZS55ICsgbm9kZS52eTtcbiAgICAgICAgdHJlZS52aXNpdChhcHBseSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5pbmRleCA+IG5vZGUuaW5kZXgpIHtcbiAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG4gICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgbm9kZS52eSArPSAoeSAqPSBsKSAqIHI7XG4gICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICBmb3IgKHZhciBpID0gcXVhZC5yID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHJhZGlpW25vZGUuaW5kZXhdID0gK3JhZGl1cyhub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICByZXRhaW5lcixcbiAgICAgIHByZXZpb3VzLFxuICAgICAgbmV4dCxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKCEocGFyZW50ID0gbm9kZSwgbm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcblxuICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pXG4gICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBxLCBub2RlID0gdGhpcy5fcm9vdCwgY2hpbGQsIHgwLCB5MCwgeDEsIHkxO1xuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgaWYgKCFjYWxsYmFjayhub2RlID0gcS5ub2RlLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEpICYmIG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlXCI7XG5pbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcblxuZnVuY3Rpb24gaW5kZXgoZCkge1xuICByZXR1cm4gZC5pbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZChub2RlQnlJZCwgbm9kZUlkKSB7XG4gIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQoMzApLFxuICAgICAgZGlzdGFuY2VzLFxuICAgICAgbm9kZXMsXG4gICAgICBjb3VudCxcbiAgICAgIGJpYXMsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKCk7XG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgIG5vZGVCeUlkID0gbWFwKG5vZGVzLCBpZCksXG4gICAgICAgIGxpbms7XG5cbiAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBsaW5rLmluZGV4ID0gaTtcbiAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnRhcmdldCk7XG4gICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSA9IChjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICB9O1xuXG4gIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gXywgZm9yY2UpIDogaWQ7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVEaXN0YW5jZSgpLCBmb3JjZSkgOiBkaXN0YW5jZTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKCkge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICBmb3JjZShhbHBoYSk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZVwiO1xuaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5pbXBvcnQge3gsIHl9IGZyb20gXCIuL3NpbXVsYXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyxcbiAgICAgIG5vZGUsXG4gICAgICBhbHBoYSxcbiAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQoLTMwKSxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlTWluMiA9IDEsXG4gICAgICBkaXN0YW5jZU1heDIgPSBJbmZpbml0eSxcbiAgICAgIHRoZXRhMiA9IDAuODE7XG5cbiAgZnVuY3Rpb24gZm9yY2UoXykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgsIHkpLnZpc2l0QWZ0ZXIoYWNjdW11bGF0ZSk7XG4gICAgZm9yIChhbHBoYSA9IF8sIGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHRyZWUudmlzaXQoYXBwbHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgc3RyZW5ndGhzW25vZGUuaW5kZXhdID0gK3N0cmVuZ3RoKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFjY3VtdWxhdGUocXVhZCkge1xuICAgIHZhciBzdHJlbmd0aCA9IDAsIHEsIGMsIHdlaWdodCA9IDAsIHgsIHksIGk7XG5cbiAgICAvLyBGb3IgaW50ZXJuYWwgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY2hpbGQgcXVhZHJhbnRzLlxuICAgIGlmIChxdWFkLmxlbmd0aCkge1xuICAgICAgZm9yICh4ID0geSA9IGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmICgocSA9IHF1YWRbaV0pICYmIChjID0gTWF0aC5hYnMocS52YWx1ZSkpKSB7XG4gICAgICAgICAgc3RyZW5ndGggKz0gcS52YWx1ZSwgd2VpZ2h0ICs9IGMsIHggKz0gYyAqIHEueCwgeSArPSBjICogcS55O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBxdWFkLnggPSB4IC8gd2VpZ2h0O1xuICAgICAgcXVhZC55ID0geSAvIHdlaWdodDtcbiAgICB9XG5cbiAgICAvLyBGb3IgbGVhZiBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjb2luY2lkZW50IHF1YWRyYW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHEgPSBxdWFkO1xuICAgICAgcS54ID0gcS5kYXRhLng7XG4gICAgICBxLnkgPSBxLmRhdGEueTtcbiAgICAgIGRvIHN0cmVuZ3RoICs9IHN0cmVuZ3Roc1txLmRhdGEuaW5kZXhdO1xuICAgICAgd2hpbGUgKHEgPSBxLm5leHQpO1xuICAgIH1cblxuICAgIHF1YWQudmFsdWUgPSBzdHJlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgxLCBfLCB4Mikge1xuICAgIGlmICghcXVhZC52YWx1ZSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgeCA9IHF1YWQueCAtIG5vZGUueCxcbiAgICAgICAgeSA9IHF1YWQueSAtIG5vZGUueSxcbiAgICAgICAgdyA9IHgyIC0geDEsXG4gICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgLy8gQXBwbHkgdGhlIEJhcm5lcy1IdXQgYXBwcm94aW1hdGlvbiBpZiBwb3NzaWJsZS5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAodyAqIHcgLyB0aGV0YTIgPCBsKSB7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWF4Mikge1xuICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICAgICAgbm9kZS52eCArPSB4ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgICAgbm9kZS52eSArPSB5ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgcHJvY2VzcyBwb2ludHMgZGlyZWN0bHkuXG4gICAgZWxzZSBpZiAocXVhZC5sZW5ndGggfHwgbCA+PSBkaXN0YW5jZU1heDIpIHJldHVybjtcblxuICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgIGlmIChxdWFkLmRhdGEgIT09IG5vZGUgfHwgcXVhZC5uZXh0KSB7XG4gICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgIH1cblxuICAgIGRvIGlmIChxdWFkLmRhdGEgIT09IG5vZGUpIHtcbiAgICAgIHcgPSBzdHJlbmd0aHNbcXVhZC5kYXRhLmluZGV4XSAqIGFscGhhIC8gbDtcbiAgICAgIG5vZGUudnggKz0geCAqIHc7XG4gICAgICBub2RlLnZ5ICs9IHkgKiB3O1xuICAgIH0gd2hpbGUgKHF1YWQgPSBxdWFkLm5leHQpO1xuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWF4ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgfTtcblxuICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cywgeCwgeSkge1xuICB2YXIgbm9kZXMsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KDAuMSksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICByYWRpdXNlcztcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCgrcmFkaXVzKTtcbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV0sXG4gICAgICAgICAgZHggPSBub2RlLnggLSB4IHx8IDFlLTYsXG4gICAgICAgICAgZHkgPSBub2RlLnkgLSB5IHx8IDFlLTYsXG4gICAgICAgICAgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSksXG4gICAgICAgICAgayA9IChyYWRpdXNlc1tpXSAtIHIpICogc3RyZW5ndGhzW2ldICogYWxwaGEgLyByO1xuICAgICAgbm9kZS52eCArPSBkeCAqIGs7XG4gICAgICBub2RlLnZ5ICs9IGR5ICogaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgcmFkaXVzZXMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgcmFkaXVzZXNbaV0gPSArcmFkaXVzKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTihyYWRpdXNlc1tpXSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF8sIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeHo7XG5cbiAgaWYgKHR5cGVvZiB4ICE9PSBcImZ1bmN0aW9uXCIpIHggPSBjb25zdGFudCh4ID09IG51bGwgPyAwIDogK3gpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eCArPSAoeHpbaV0gLSBub2RlLngpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHh6ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHh6W2ldID0gK3gobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeDtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeSkge1xuICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB5ejtcblxuICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50KHkgPT0gbnVsbCA/IDAgOiAreSk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgeXogPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeXpbaV0gPSAreShub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsIi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHRoaXMuZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiO1xuICB0aGlzLmFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCI7XG4gIHRoaXMuc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiO1xuICB0aGlzLnN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCI7XG4gIHRoaXMuemVybyA9ICEhbWF0Y2hbNV07XG4gIHRoaXMud2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl07XG4gIHRoaXMuY29tbWEgPSAhIW1hdGNoWzddO1xuICB0aGlzLnByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKTtcbiAgdGhpcy50cmltID0gISFtYXRjaFs5XTtcbiAgdGhpcy50eXBlID0gbWF0Y2hbMTBdIHx8IFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmIChpMCA+IDApIHsgaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpMCA9IDA7IH0gYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRlY2ltYWw6IFwiLlwiLFxuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXBcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFsc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXJcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW1cIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSxcbiAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPyBmb3JtYXROdW1lcmFscyhsb2NhbGUubnVtZXJhbHMpIDogaWRlbnRpdHksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgfHwgXCIlXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT0gbnVsbCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwO1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBkdXJpbmcgZm9ybWF0dGluZywgdHJlYXQgYXMgcG9zaXRpdmUuXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCIvLyBBZGRzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgd2l0aCB0d2ljZSB0aGUgbm9ybWFsIHByZWNpc2lvbi5cbi8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuLy8gMzA14oCTMzYzICgxOTk3KS5cbi8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4vLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFkZGVyO1xufVxuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XG4gIH0sXG4gIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnM7XG4gIH1cbn07XG5cbnZhciB0ZW1wID0gbmV3IEFkZGVyO1xuXG5mdW5jdGlvbiBhZGQoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJmdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcbiAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn1cblxudmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn07XG5cbnZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uc3BoZXJlKCk7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHN0cmVhbSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIHN0cmVhbSwgY2xvc2VkKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICBzdHJlYW0ubGluZUVuZCgpO1xufVxuXG5mdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgaWYgKG9iamVjdCAmJiBzdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QsIHN0cmVhbSk7XG4gIH1cbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHthdGFuMiwgY29zLCBxdWFydGVyUGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG5leHBvcnQgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAwLFxuICAgIHBoaTAwLFxuICAgIGxhbWJkYTAsXG4gICAgY29zUGhpMCxcbiAgICBzaW5QaGkwO1xuXG5leHBvcnQgdmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUgKyBhcmVhUmluZyA6IGFyZWFSaW5nKTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdW0uYWRkKHRhdSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyhwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbihwaGkpO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpLFxuICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zKGFkTGFtYmRhKSxcbiAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4oYWRMYW1iZGEpO1xuICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGFyZWFTdW0ucmVzZXQoKTtcbiAgc3RyZWFtKG9iamVjdCwgYXJlYVN0cmVhbSk7XG4gIHJldHVybiBhcmVhU3VtICogMjtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luKGNhcnRlc2lhblsyXSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuKHNwaGVyaWNhbCkge1xuICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyhwaGkpO1xuICByZXR1cm4gW2Nvc1BoaSAqIGNvcyhsYW1iZGEpLCBjb3NQaGkgKiBzaW4obGFtYmRhKSwgc2luKHBoaSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuRG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gYVxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkFkZEluUGxhY2UoYSwgYikge1xuICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG59XG5cbi8vIFRPRE8gcmV0dXJuIGRcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGQpIHtcbiAgdmFyIGwgPSBzcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG4gIGRbMF0gLz0gbCwgZFsxXSAvPSBsLCBkWzJdIC89IGw7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXJlYVN0cmVhbSwgYXJlYVJpbmdTdW19IGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG52YXIgbGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSwgLy8gYm91bmRzXG4gICAgbGFtYmRhMiwgLy8gcHJldmlvdXMgbGFtYmRhLWNvb3JkaW5hdGVcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIGVwc2lsb24yLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBXMCwgVzEsXG4gICAgWDAsIFkwLCBaMCxcbiAgICBYMSwgWTEsIFoxLFxuICAgIFgyLCBZMiwgWjIsXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHgwLCB5MCwgejA7IC8vIHByZXZpb3VzIHBvaW50XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wLFxuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gIH1cbn07XG5cbi8vIEFyaXRobWV0aWMgbWVhbiBvZiBDYXJ0ZXNpYW4gdmVjdG9ycy5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeCwgeSwgeikge1xuICArK1cwO1xuICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICBZMCArPSAoeSAtIFkwKSAvIFcwO1xuICBaMCArPSAoeiAtIFowKSAvIFcwO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbihsYW1iZGEpO1xuICB6MCA9IHNpbihwaGkpO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4obGFtYmRhKSxcbiAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgIHcgPSBhdGFuMihzcXJ0KCh3ID0geTAgKiB6IC0gejAgKiB5KSAqIHcgKyAodyA9IHowICogeCAtIHgwICogeikgKiB3ICsgKHcgPSB4MCAqIHkgLSB5MCAqIHgpICogdyksIHgwICogeCArIHkwICogeSArIHowICogeik7XG4gIFcxICs9IHc7XG4gIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG4vLyBTZWUgSi4gRS4gQnJvY2ssIFRoZSBJbmVydGlhIFRlbnNvciBmb3IgYSBTcGhlcmljYWwgVHJpYW5nbGUsXG4vLyBKLiBBcHBsaWVkIE1lY2hhbmljcyA0MiwgMjM5ICgxOTc1KS5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ0VuZCgpIHtcbiAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50O1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luKGxhbWJkYSk7XG4gIHowID0gc2luKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbihsYW1iZGEpLFxuICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgY3ggPSB5MCAqIHogLSB6MCAqIHksXG4gICAgICBjeSA9IHowICogeCAtIHgwICogeixcbiAgICAgIGN6ID0geDAgKiB5IC0geTAgKiB4LFxuICAgICAgbSA9IHNxcnQoY3ggKiBjeCArIGN5ICogY3kgKyBjeiAqIGN6KSxcbiAgICAgIHcgPSBhc2luKG0pLCAvLyBsaW5lIHdlaWdodCA9IGFuZ2xlXG4gICAgICB2ID0gbSAmJiAtdyAvIG07IC8vIGFyZWEgd2VpZ2h0IG11bHRpcGxpZXJcbiAgWDIgKz0gdiAqIGN4O1xuICBZMiArPSB2ICogY3k7XG4gIFoyICs9IHYgKiBjejtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIFcwID0gVzEgPVxuICBYMCA9IFkwID0gWjAgPVxuICBYMSA9IFkxID0gWjEgPVxuICBYMiA9IFkyID0gWjIgPSAwO1xuICBzdHJlYW0ob2JqZWN0LCBjZW50cm9pZFN0cmVhbSk7XG5cbiAgdmFyIHggPSBYMixcbiAgICAgIHkgPSBZMixcbiAgICAgIHogPSBaMixcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgLy8gSWYgdGhlIGFyZWEtd2VpZ2h0ZWQgY2NlbnRyb2lkIGlzIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIGxlbmd0aC13ZWlnaHRlZCBjY2VudHJvaWQuXG4gIGlmIChtIDwgZXBzaWxvbjIpIHtcbiAgICB4ID0gWDEsIHkgPSBZMSwgeiA9IFoxO1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIGhhcyB6ZXJvIGxlbmd0aCwgZmFsbCBiYWNrIHRvIGFyaXRobWV0aWMgbWVhbiBvZiBwb2ludCB2ZWN0b3JzLlxuICAgIGlmIChXMSA8IGVwc2lsb24pIHggPSBYMCwgeSA9IFkwLCB6ID0gWjA7XG4gICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgaWYgKG0gPCBlcHNpbG9uMikgcmV0dXJuIFtOYU4sIE5hTl07XG4gIH1cblxuICByZXR1cm4gW2F0YW4yKHksIHgpICogZGVncmVlcywgYXNpbih6IC8gc3FydChtKSkgKiBkZWdyZWVzXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgfVxuXG4gIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcbiAgfTtcblxuICByZXR1cm4gY29tcG9zZTtcbn1cbiIsImltcG9ydCBjb21wb3NlIGZyb20gXCIuL2NvbXBvc2VcIjtcbmltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgcGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbn1cblxucm90YXRpb25JZGVudGl0eS5pbnZlcnQgPSByb3RhdGlvbklkZW50aXR5O1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgcmV0dXJuIChkZWx0YUxhbWJkYSAlPSB0YXUpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXG4gICAgOiByb3RhdGlvbklkZW50aXR5KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICB2YXIgY29zRGVsdGFQaGkgPSBjb3MoZGVsdGFQaGkpLFxuICAgICAgc2luRGVsdGFQaGkgPSBzaW4oZGVsdGFQaGkpLFxuICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyhkZWx0YUdhbW1hKSxcbiAgICAgIHNpbkRlbHRhR2FtbWEgPSBzaW4oZGVsdGFHYW1tYSk7XG5cbiAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXG4gICAgXTtcbiAgfVxuXG4gIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhR2FtbWEgLSB5ICogc2luRGVsdGFHYW1tYTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgKyB6ICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpICsgayAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgIF07XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3RhdGUpIHtcbiAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlLCBzcGhlcmljYWx9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2Fjb3MsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4vcm90YXRpb25cIjtcblxuLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIHQwLCB0MSkge1xuICBpZiAoIWRlbHRhKSByZXR1cm47XG4gIHZhciBjb3NSYWRpdXMgPSBjb3MocmFkaXVzKSxcbiAgICAgIHNpblJhZGl1cyA9IHNpbihyYWRpdXMpLFxuICAgICAgc3RlcCA9IGRpcmVjdGlvbiAqIGRlbHRhO1xuICBpZiAodDAgPT0gbnVsbCkge1xuICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1O1xuICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gIH0gZWxzZSB7XG4gICAgdDAgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MCk7XG4gICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgaWYgKGRpcmVjdGlvbiA+IDAgPyB0MCA8IHQxIDogdDAgPiB0MSkgdDAgKz0gZGlyZWN0aW9uICogdGF1O1xuICB9XG4gIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgIHBvaW50ID0gc3BoZXJpY2FsKFtjb3NSYWRpdXMsIC1zaW5SYWRpdXMgKiBjb3ModCksIC1zaW5SYWRpdXMgKiBzaW4odCldKTtcbiAgICBzdHJlYW0ucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgfVxufVxuXG4vLyBSZXR1cm5zIHRoZSBzaWduZWQgYW5nbGUgb2YgYSBjYXJ0ZXNpYW4gcG9pbnQgcmVsYXRpdmUgdG8gW2Nvc1JhZGl1cywgMCwgMF0uXG5mdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICBwb2ludCA9IGNhcnRlc2lhbihwb2ludCksIHBvaW50WzBdIC09IGNvc1JhZGl1cztcbiAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShwb2ludCk7XG4gIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gIHJldHVybiAoKC1wb2ludFsyXSA8IDAgPyAtcmFkaXVzIDogcmFkaXVzKSArIHRhdSAtIGVwc2lsb24pICUgdGF1O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNlbnRlciA9IGNvbnN0YW50KFswLCAwXSksXG4gICAgICByYWRpdXMgPSBjb25zdGFudCg5MCksXG4gICAgICBwcmVjaXNpb24gPSBjb25zdGFudCg2KSxcbiAgICAgIHJpbmcsXG4gICAgICByb3RhdGUsXG4gICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgIHhbMF0gKj0gZGVncmVlcywgeFsxXSAqPSBkZWdyZWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjID0gY2VudGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgcmluZyA9IFtdO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICBjID0ge3R5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddfTtcbiAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gIH07XG5cbiAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHJhZGl1cztcbiAgfTtcblxuICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICB9O1xuXG4gIHJldHVybiBjaXJjbGU7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24gJiYgYWJzKGFbMV0gLSBiWzFdKSA8IGVwc2lsb247XG59XG4iLCJpbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbFwiO1xuXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gIHRoaXMueCA9IHBvaW50O1xuICB0aGlzLnogPSBwb2ludHM7XG4gIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICB0aGlzLmUgPSBlbnRyeTsgLy8gaXMgYW4gZW50cnk/XG4gIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXG4gIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xufVxuXG4vLyBBIGdlbmVyYWxpemVkIHBvbHlnb24gY2xpcHBpbmcgYWxnb3JpdGhtOiBnaXZlbiBhIHBvbHlnb24gdGhhdCBoYXMgYmVlbiBjdXRcbi8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbi8vIGFsb25nIHRoZSBjbGlwIGVkZ2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pIHtcbiAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgIGNsaXAgPSBbXSxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgIC8vIElmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgb2YgYSBzZWdtZW50IGFyZSBjb2luY2lkZW50LCB0aGVuIHRyZWF0IGFzIGFcbiAgICAvLyBjbG9zZWQgcmluZy4gVE9ETyBpZiBhbGwgcmluZ3MgYXJlIGNsb3NlZCwgdGhlbiB0aGUgd2luZGluZyBvcmRlciBvZiB0aGVcbiAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIHNlZ21lbnQsIG51bGwsIHRydWUpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMCwgbnVsbCwgeCwgZmFsc2UpKTtcbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIG51bGwsIHgsIHRydWUpKTtcbiAgfSk7XG5cbiAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGNsaXAuc29ydChjb21wYXJlSW50ZXJzZWN0aW9uKTtcbiAgbGluayhzdWJqZWN0KTtcbiAgbGluayhjbGlwKTtcblxuICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcbiAgfVxuXG4gIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICBwb2ludHMsXG4gICAgICBwb2ludDtcblxuICB3aGlsZSAoMSkge1xuICAgIC8vIEZpbmQgZmlyc3QgdW52aXNpdGVkIGludGVyc2VjdGlvbi5cbiAgICB2YXIgY3VycmVudCA9IHN0YXJ0LFxuICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG4gICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnA7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxpbmsoYXJyYXkpIHtcbiAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgdmFyIG4sXG4gICAgICBpID0gMCxcbiAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgIGI7XG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgIGIucCA9IGE7XG4gICAgYSA9IGI7XG4gIH1cbiAgYS5uID0gYiA9IGFycmF5WzBdO1xuICBiLnAgPSBhO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2V9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgbm9ybWFsID0gW3NpbihsYW1iZGEpLCAtY29zKGxhbWJkYSksIDBdLFxuICAgICAgYW5nbGUgPSAwLFxuICAgICAgd2luZGluZyA9IDA7XG5cbiAgc3VtLnJlc2V0KCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IHBvaW50MFswXSxcbiAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgIHNpblBoaTAgPSBzaW4ocGhpMCksXG4gICAgICAgIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraiwgbGFtYmRhMCA9IGxhbWJkYTEsIHNpblBoaTAgPSBzaW5QaGkxLCBjb3NQaGkwID0gY29zUGhpMSwgcG9pbnQwID0gcG9pbnQxKSB7XG4gICAgICB2YXIgcG9pbnQxID0gcmluZ1tqXSxcbiAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luXCI7XG5pbXBvcnQge2Vwc2lsb24sIGhhbGZQaX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBwb2x5Z29uQ29udGFpbnMgZnJvbSBcIi4uL3BvbHlnb25Db250YWluc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGJbMV0pO1xufVxuIiwiaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7YWJzLCBhdGFuLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgcGksIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xpcChcbiAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICBbLXBpLCAtaGFsZlBpXVxuKTtcblxuLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgcGhpMCA9IE5hTixcbiAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICByZXR1cm4ge1xuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBjbGVhbiA9IDE7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSA6IC1waSxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbikgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpIDogLWhhbGZQaSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24pIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uOyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24pIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uXG4gICAgICA/IGF0YW4oKHNpbihwaGkwKSAqIChjb3NQaGkxID0gY29zKHBoaTEpKSAqIHNpbihsYW1iZGExKVxuICAgICAgICAgIC0gc2luKHBoaTEpICogKGNvc1BoaTAgPSBjb3MocGhpMCkpICogc2luKGxhbWJkYTApKVxuICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICB2YXIgcGhpO1xuICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24pIHtcbiAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkgOiAtcGk7XG4gICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICB9XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQWRkSW5QbGFjZSwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbkRvdCwgY2FydGVzaWFuU2NhbGUsIHNwaGVyaWNhbH0gZnJvbSBcIi4uL2NhcnRlc2lhblwiO1xuaW1wb3J0IHtjaXJjbGVTdHJlYW19IGZyb20gXCIuLi9jaXJjbGVcIjtcbmltcG9ydCB7YWJzLCBjb3MsIGVwc2lsb24sIHBpLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWxcIjtcbmltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgY3IgPSBjb3MocmFkaXVzKSxcbiAgICAgIGRlbHRhID0gNiAqIHJhZGlhbnMsXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbjsgLy8gVE9ETyBvcHRpbWlzZSBmb3IgdGhpcyBjb21tb24gY2FzZVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBjb3MobGFtYmRhKSAqIGNvcyhwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkgOiAtcGkpLCBwaGkpIDogMDtcbiAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgLy8gSGFuZGxlIGRlZ2VuZXJhY2llcy5cbiAgICAgICAgLy8gVE9ETyBpZ25vcmUgaWYgbm90IGNsaXBwaW5nIHBvbHlnb25zLlxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgIGlmICghcG9pbnQyIHx8IHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICBwb2ludDFbMF0gKz0gZXBzaWxvbjtcbiAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uO1xuICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnNpZGUgZ29pbmcgb3V0XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MjtcbiAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAvLyBJZiB0aGUgY29kZXMgZm9yIHR3byBwb2ludHMgYXJlIGRpZmZlcmVudCwgb3IgYXJlIGJvdGggemVybyxcbiAgICAgICAgICAvLyBhbmQgdGhlcmUgdGhpcyBzZWdtZW50IGludGVyc2VjdHMgd2l0aCB0aGUgc21hbGwgY2lyY2xlLlxuICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICB9LFxuICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICB2YXIgcGEgPSBjYXJ0ZXNpYW4oYSksXG4gICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cbiAgICAvLyBGaW5kIGludGVyc2VjdGlvbiBsaW5lIHAodCkgPSBjMSBuMSArIGMyIG4yICsgdCAobjEg4qivIG4yKS5cbiAgICB2YXIgbjEgPSBbMSwgMCwgMF0sIC8vIG5vcm1hbFxuICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgIG4ybjIgPSBjYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgbjFuMiA9IG4yWzBdLCAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cbiAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cbiAgICB2YXIgYzEgPSAgY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIGMyID0gLWNyICogbjFuMiAvIGRldGVybWluYW50LFxuICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICBCID0gY2FydGVzaWFuU2NhbGUobjIsIGMyKTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xuXG4gICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgIHcgPSBjYXJ0ZXNpYW5Eb3QoQSwgdSksXG4gICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICB0MiA9IHcgKiB3IC0gdXUgKiAoY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cbiAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cbiAgICB2YXIgdCA9IHNxcnQodDIpLFxuICAgICAgICBxID0gY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShxLCBBKTtcbiAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgaWYgKCF0d28pIHJldHVybiBxO1xuXG4gICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICBsYW1iZGExID0gYlswXSxcbiAgICAgICAgcGhpMCA9IGFbMV0sXG4gICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICB6O1xuXG4gICAgaWYgKGxhbWJkYTEgPCBsYW1iZGEwKSB6ID0gbGFtYmRhMCwgbGFtYmRhMCA9IGxhbWJkYTEsIGxhbWJkYTEgPSB6O1xuXG4gICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb247XG5cbiAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgZmlyc3QgcG9pbnQgaXMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGlmIChtZXJpZGlhblxuICAgICAgICA/IHBvbGFyXG4gICAgICAgICAgPyBwaGkwICsgcGhpMSA+IDAgXiBxWzFdIDwgKGFicyhxWzBdIC0gbGFtYmRhMCkgPCBlcHNpbG9uID8gcGhpMCA6IHBoaTEpXG4gICAgICAgICAgOiBwaGkwIDw9IHFbMV0gJiYgcVsxXSA8PSBwaGkxXG4gICAgICAgIDogZGVsdGEgPiBwaSBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpIC0gcmFkaXVzLFxuICAgICAgICBjb2RlID0gMDtcbiAgICBpZiAobGFtYmRhIDwgLXIpIGNvZGUgfD0gMTsgLy8gbGVmdFxuICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcbiAgICBlbHNlIGlmIChwaGkgPiByKSBjb2RlIHw9IDg7IC8vIGFib3ZlXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSwgcmFkaXVzIC0gcGldKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICBpZiAodDEgPCAxKSBiWzBdID0gYXggKyB0MSAqIGR4LCBiWzFdID0gYXkgKyB0MSAqIGR5O1xuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyXCI7XG5pbXBvcnQgY2xpcExpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxudmFyIGNsaXBNYXggPSAxZTksIGNsaXBNaW4gPSAtY2xpcE1heDtcblxuLy8gVE9ETyBVc2UgZDMtcG9seWdvbuKAmXMgcG9seWdvbkNvbnRhaW5zIGhlcmUgZm9yIHRoZSByaW5nIGNoZWNrP1xuLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICBmaXJzdCA9IHRydWU7XG4gICAgICB2XyA9IGZhbHNlO1xuICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgLy8gSWRlYWxseSwgY29pbmNpZGVudCBpbnRlcnNlY3Rpb24gcG9pbnRzIHNob3VsZCBiZSBqaXR0ZXJlZCB0byBhdm9pZFxuICAgIC8vIGNsaXBwaW5nIGlzc3Vlcy5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG4gICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJTdHJlYW0ucmVzdWx0KCkpO1xuICAgICAgfVxuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgaWYgKHZfKSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgdiA9IHZpc2libGUoeCwgeSk7XG4gICAgICBpZiAocG9seWdvbikgcmluZy5wdXNoKFt4LCB5XSk7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodiAmJiB2XykgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYSA9IFt4XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHhfKSksIHlfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeV8pKV0sXG4gICAgICAgICAgICAgIGIgPSBbeCA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHgpKSwgeSA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHkpKV07XG4gICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChiWzBdLCBiWzFdKTtcbiAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcFN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuL3JlY3RhbmdsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHkwID0gMCxcbiAgICAgIHgxID0gOTYwLFxuICAgICAgeTEgPSA1MDAsXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgY2xpcDtcblxuICByZXR1cm4gY2xpcCA9IHtcbiAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkoY2FjaGVTdHJlYW0gPSBzdHJlYW0pO1xuICAgIH0sXG4gICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdLCBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbCwgY2xpcCkgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAsXG4gICAgc2luUGhpMCxcbiAgICBjb3NQaGkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wXG59O1xuXG5mdW5jdGlvbiBsZW5ndGhMaW5lU3RhcnQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpbihwaGkpLCBjb3NQaGkwID0gY29zKHBoaSk7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgZGVsdGEgPSBhYnMobGFtYmRhIC0gbGFtYmRhMCksXG4gICAgICBjb3NEZWx0YSA9IGNvcyhkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbihkZWx0YSksXG4gICAgICB4ID0gY29zUGhpICogc2luRGVsdGEsXG4gICAgICB5ID0gY29zUGhpMCAqIHNpblBoaSAtIHNpblBoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwICogc2luUGhpICsgY29zUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhO1xuICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQoeCAqIHggKyB5ICogeSksIHopKTtcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpblBoaSwgY29zUGhpMCA9IGNvc1BoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGxlbmd0aFN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xuICByZXR1cm4gK2xlbmd0aFN1bTtcbn1cbiIsImltcG9ydCBsZW5ndGggZnJvbSBcIi4vbGVuZ3RoXCI7XG5cbnZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXSxcbiAgICBvYmplY3QgPSB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICBjb29yZGluYXRlc1sxXSA9IGI7XG4gIHJldHVybiBsZW5ndGgob2JqZWN0KTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uQ29udGFpbnN9IGZyb20gXCIuL3BvbHlnb25Db250YWluc1wiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGRpc3RhbmNlfSBmcm9tIFwiLi9kaXN0YW5jZVwiO1xuaW1wb3J0IHtlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBjb250YWluc09iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHBvaW50KTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgY29udGFpbnNHZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9pbnQob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0xpbmUoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cnksIHBvaW50KSB7XG4gIHJldHVybiBnZW9tZXRyeSAmJiBjb250YWluc0dlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKVxuICAgICAgPyBjb250YWluc0dlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgcG9pbnQpXG4gICAgICA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvaW50KGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICByZXR1cm4gZGlzdGFuY2UoY29vcmRpbmF0ZXMsIHBvaW50KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICB2YXIgYWIgPSBkaXN0YW5jZShjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0pLFxuICAgICAgYW8gPSBkaXN0YW5jZShjb29yZGluYXRlc1swXSwgcG9pbnQpLFxuICAgICAgb2IgPSBkaXN0YW5jZShwb2ludCwgY29vcmRpbmF0ZXNbMV0pO1xuICByZXR1cm4gYW8gKyBvYiA8PSBhYiArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuICEhcG9seWdvbkNvbnRhaW5zKGNvb3JkaW5hdGVzLm1hcChyaW5nUmFkaWFucyksIHBvaW50UmFkaWFucyhwb2ludCkpO1xufVxuXG5mdW5jdGlvbiByaW5nUmFkaWFucyhyaW5nKSB7XG4gIHJldHVybiByaW5nID0gcmluZy5tYXAocG9pbnRSYWRpYW5zKSwgcmluZy5wb3AoKSwgcmluZztcbn1cblxuZnVuY3Rpb24gcG9pbnRSYWRpYW5zKHBvaW50KSB7XG4gIHJldHVybiBbcG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnNdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gIHJldHVybiAob2JqZWN0ICYmIGNvbnRhaW5zT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSlcbiAgICAgID8gY29udGFpbnNPYmplY3RUeXBlW29iamVjdC50eXBlXVxuICAgICAgOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbn1cbiIsImltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHthYnMsIGNlaWwsIGVwc2lsb259IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gIHZhciB5ID0gcmFuZ2UoeTAsIHkxIC0gZXBzaWxvbiwgZHkpLmNvbmNhdCh5MSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5mdW5jdGlvbiBncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcbiAgdmFyIHggPSByYW5nZSh4MCwgeDEgLSBlcHNpbG9uLCBkeCkuY29uY2F0KHgxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHkpIHsgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIFt4LCB5XTsgfSk7IH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgdmFyIHgxLCB4MCwgWDEsIFgwLFxuICAgICAgeTEsIHkwLCBZMSwgWTAsXG4gICAgICBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCxcbiAgICAgIHgsIHksIFgsIFksXG4gICAgICBwcmVjaXNpb24gPSAyLjU7XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICAgIHJldHVybiB7dHlwZTogXCJNdWx0aUxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGxpbmVzKCl9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgcmV0dXJuIHJhbmdlKGNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWClcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4gYWJzKHggJSBEWCkgPiBlcHNpbG9uOyB9KS5tYXAoeCkpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7IHJldHVybiBhYnMoeSAlIERZKSA+IGVwc2lsb247IH0pLm1hcCh5KSk7XG4gIH1cblxuICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHsgcmV0dXJuIHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTsgfSk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICBjb29yZGluYXRlczogW1xuICAgICAgICBYKFgwKS5jb25jYXQoXG4gICAgICAgIFkoWTEpLnNsaWNlKDEpLFxuICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXG4gICAgICAgIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSlcbiAgICAgIF1cbiAgICB9O1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1tYMCwgWTBdLCBbWDEsIFkxXV07XG4gICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcbiAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDAgPSArX1swXVswXSwgeDEgPSArX1sxXVswXTtcbiAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICBpZiAoeTAgPiB5MSkgXyA9IHkwLCB5MCA9IHkxLCB5MSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuc3RlcE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWFqb3IoXykuc3RlcE1pbm9yKF8pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgIHByZWNpc2lvbiA9ICtfO1xuICAgIHggPSBncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICBYID0gZ3JhdGljdWxlWChZMCwgWTEsIDkwKTtcbiAgICBZID0gZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICByZXR1cm4gZ3JhdGljdWxlXG4gICAgICAuZXh0ZW50TWFqb3IoW1stMTgwLCAtOTAgKyBlcHNpbG9uXSwgWzE4MCwgOTAgLSBlcHNpbG9uXV0pXG4gICAgICAuZXh0ZW50TWlub3IoW1stMTgwLCAtODAgLSBlcHNpbG9uXSwgWzE4MCwgODAgKyBlcHNpbG9uXV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JhdGljdWxlMTAoKSB7XG4gIHJldHVybiBncmF0aWN1bGUoKSgpO1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBoYXZlcnNpbiwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcbiAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICBjeTAgPSBjb3MoeTApLFxuICAgICAgc3kwID0gc2luKHkwKSxcbiAgICAgIGN5MSA9IGNvcyh5MSksXG4gICAgICBzeTEgPSBzaW4oeTEpLFxuICAgICAga3gwID0gY3kwICogY29zKHgwKSxcbiAgICAgIGt5MCA9IGN5MCAqIHNpbih4MCksXG4gICAgICBreDEgPSBjeTEgKiBjb3MoeDEpLFxuICAgICAga3kxID0gY3kxICogc2luKHgxKSxcbiAgICAgIGQgPSAyICogYXNpbihzcXJ0KGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgIGsgPSBzaW4oZCk7XG5cbiAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgQiA9IHNpbih0ICo9IGQpIC8gayxcbiAgICAgICAgQSA9IHNpbihkIC0gdCkgLyBrLFxuICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5LCB4KSAqIGRlZ3JlZXMsXG4gICAgICBhdGFuMih6LCBzcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXNcbiAgICBdO1xuICB9IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMsIHkwICogZGVncmVlc107XG4gIH07XG5cbiAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gIHJldHVybiBpbnRlcnBvbGF0ZTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGFyZWFSaW5nU3VtID0gYWRkZXIoKSxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVN0cmVhbS5wb2ludCA9IG5vb3A7XG4gICAgYXJlYVN1bS5hZGQoYWJzKGFyZWFSaW5nU3VtKSk7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYSA9IGFyZWFTdW0gLyAyO1xuICAgIGFyZWFTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQoeCwgeSkge1xuICBhcmVhUmluZ1N1bS5hZGQoeTAgKiB4IC0geDAgKiB5KTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQoeDAwLCB5MDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcmVhU3RyZWFtO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbnZhciB4MCA9IEluZmluaXR5LFxuICAgIHkwID0geDAsXG4gICAgeDEgPSAteDAsXG4gICAgeTEgPSB4MTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcCxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm91bmRzID0gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDEgPSB5MSA9IC0oeTAgPSB4MCA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCh4LCB5KSB7XG4gIGlmICh4IDwgeDApIHgwID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gIGlmICh5ID4geTEpIHkxID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYm91bmRzU3RyZWFtO1xuIiwiaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG4vLyBUT0RPIEVuZm9yY2UgcG9zaXRpdmUgYXJlYSBmb3IgZXh0ZXJpb3IsIG5lZ2F0aXZlIGFyZWEgZm9yIGludGVyaW9yP1xuXG52YXIgWDAgPSAwLFxuICAgIFkwID0gMCxcbiAgICBaMCA9IDAsXG4gICAgWDEgPSAwLFxuICAgIFkxID0gMCxcbiAgICBaMSA9IDAsXG4gICAgWDIgPSAwLFxuICAgIFkyID0gMCxcbiAgICBaMiA9IDAsXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjZW50cm9pZCA9IFoyID8gW1gyIC8gWjIsIFkyIC8gWjJdXG4gICAgICAgIDogWjEgPyBbWDEgLyBaMSwgWTEgLyBaMV1cbiAgICAgICAgOiBaMCA/IFtYMCAvIFowLCBZMCAvIFowXVxuICAgICAgICA6IFtOYU4sIE5hTl07XG4gICAgWDAgPSBZMCA9IFowID1cbiAgICBYMSA9IFkxID0gWjEgPVxuICAgIFgyID0gWTIgPSBaMiA9IDA7XG4gICAgcmV0dXJuIGNlbnRyb2lkO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KHgsIHkpIHtcbiAgWDAgKz0geDtcbiAgWTAgKz0geTtcbiAgKytaMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0TGluZSh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludExpbmU7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50TGluZSh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCwgZHkgPSB5IC0geTAsIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgWjEgKz0gejtcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RSaW5nO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCwgeTAwKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0UmluZyh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludFJpbmc7XG4gIGNlbnRyb2lkUG9pbnQoeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50UmluZyh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCxcbiAgICAgIGR5ID0geSAtIHkwLFxuICAgICAgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG5cbiAgeiA9IHkwICogeCAtIHgwICogeTtcbiAgWDIgKz0geiAqICh4MCArIHgpO1xuICBZMiArPSB6ICogKHkwICsgeSk7XG4gIFoyICs9IHogKiAzO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2VudHJvaWRTdHJlYW07XG4iLCJpbXBvcnQge3RhdX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblBhdGhDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgX3JhZGl1czogNC41LFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCArIHRoaXMuX3JhZGl1cywgeSk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuYXJjKHgsIHksIHRoaXMuX3JhZGl1cywgMCwgdGF1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IG5vb3Bcbn07XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4uL2FkZGVyXCI7XG5pbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgbGVuZ3RoU3VtID0gYWRkZXIoKSxcbiAgICBsZW5ndGhSaW5nLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBsZW5ndGhTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChsZW5ndGhSaW5nKSBsZW5ndGhQb2ludCh4MDAsIHkwMCk7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gdHJ1ZTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IG51bGw7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9ICtsZW5ndGhTdW07XG4gICAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQoeCwgeSkge1xuICB4MCAtPSB4LCB5MCAtPSB5O1xuICBsZW5ndGhTdW0uYWRkKHNxcnQoeDAgKiB4MCArIHkwICogeTApKTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxlbmd0aFN0cmVhbTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGhTdHJpbmcoKSB7XG4gIHRoaXMuX3N0cmluZyA9IFtdO1xufVxuXG5QYXRoU3RyaW5nLnByb3RvdHlwZSA9IHtcbiAgX3JhZGl1czogNC41LFxuICBfY2lyY2xlOiBjaXJjbGUoNC41KSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoKF8gPSArXykgIT09IHRoaXMuX3JhZGl1cykgdGhpcy5fcmFkaXVzID0gXywgdGhpcy5fY2lyY2xlID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9zdHJpbmcucHVzaChcIlpcIik7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl9jaXJjbGUgPT0gbnVsbCkgdGhpcy5fY2lyY2xlID0gY2lyY2xlKHRoaXMuX3JhZGl1cyk7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSwgdGhpcy5fY2lyY2xlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zdHJpbmcubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB0aGlzLl9zdHJpbmcgPSBbXTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2lyY2xlKHJhZGl1cykge1xuICByZXR1cm4gXCJtMCxcIiArIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIC0yICogcmFkaXVzXG4gICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1c1xuICAgICAgKyBcInpcIjtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHlcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4uL3N0cmVhbVwiO1xuaW1wb3J0IHBhdGhBcmVhIGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCBwYXRoQm91bmRzIGZyb20gXCIuL2JvdW5kc1wiO1xuaW1wb3J0IHBhdGhDZW50cm9pZCBmcm9tIFwiLi9jZW50cm9pZFwiO1xuaW1wb3J0IFBhdGhDb250ZXh0IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCBwYXRoTWVhc3VyZSBmcm9tIFwiLi9tZWFzdXJlXCI7XG5pbXBvcnQgUGF0aFN0cmluZyBmcm9tIFwiLi9zdHJpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdGlvbiwgY29udGV4dCkge1xuICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsXG4gICAgICBwcm9qZWN0aW9uU3RyZWFtLFxuICAgICAgY29udGV4dFN0cmVhbTtcblxuICBmdW5jdGlvbiBwYXRoKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGNvbnRleHRTdHJlYW0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gIH1cblxuICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhBcmVhKSk7XG4gICAgcmV0dXJuIHBhdGhBcmVhLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgubWVhc3VyZSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aE1lYXN1cmUpKTtcbiAgICByZXR1cm4gcGF0aE1lYXN1cmUucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5ib3VuZHMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhCb3VuZHMpKTtcbiAgICByZXR1cm4gcGF0aEJvdW5kcy5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQ2VudHJvaWQpKTtcbiAgICByZXR1cm4gcGF0aENlbnRyb2lkLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSkgOiAocHJvamVjdGlvbiA9IF8pLnN0cmVhbSwgcGF0aCkgOiBwcm9qZWN0aW9uO1xuICB9O1xuXG4gIHBhdGguY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuICAgIGNvbnRleHRTdHJlYW0gPSBfID09IG51bGwgPyAoY29udGV4dCA9IG51bGwsIG5ldyBQYXRoU3RyaW5nKSA6IG5ldyBQYXRoQ29udGV4dChjb250ZXh0ID0gXyk7XG4gICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgIHBvaW50UmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiAoY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrXyksICtfKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICByZXR1cm4gcGF0aC5wcm9qZWN0aW9uKHByb2plY3Rpb24pLmNvbnRleHQoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtZXRob2RzKSB7XG4gIHJldHVybiB7XG4gICAgc3RyZWFtOiB0cmFuc2Zvcm1lcihtZXRob2RzKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIobWV0aG9kcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSBzW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cblRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm1TdHJlYW0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG59O1xuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIGdlb1N0cmVhbX0gZnJvbSBcIi4uL3N0cmVhbVwiO1xuaW1wb3J0IGJvdW5kc1N0cmVhbSBmcm9tIFwiLi4vcGF0aC9ib3VuZHNcIjtcblxuZnVuY3Rpb24gZml0KHByb2plY3Rpb24sIGZpdEJvdW5kcywgb2JqZWN0KSB7XG4gIHZhciBjbGlwID0gcHJvamVjdGlvbi5jbGlwRXh0ZW50ICYmIHByb2plY3Rpb24uY2xpcEV4dGVudCgpO1xuICBwcm9qZWN0aW9uLnNjYWxlKDE1MCkudHJhbnNsYXRlKFswLCAwXSk7XG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChudWxsKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvbi5zdHJlYW0oYm91bmRzU3RyZWFtKSk7XG4gIGZpdEJvdW5kcyhib3VuZHNTdHJlYW0ucmVzdWx0KCkpO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoY2xpcCk7XG4gIHJldHVybiBwcm9qZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgICAgeCA9ICtleHRlbnRbMF1bMF0gKyAodyAtIGsgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsXG4gICAgICAgIHkgPSArZXh0ZW50WzBdWzFdICsgKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCkge1xuICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIFtbMCwgMF0sIHNpemVdLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9ICt3aWR0aCxcbiAgICAgICAgayA9IHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLFxuICAgICAgICB4ID0gKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gLWsgKiBiWzBdWzFdO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIGggPSAraGVpZ2h0LFxuICAgICAgICBrID0gaCAvIChiWzFdWzFdIC0gYlswXVsxXSksXG4gICAgICAgIHggPSAtayAqIGJbMF1bMF0sXG4gICAgICAgIHkgPSAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFufSBmcm9tIFwiLi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcblxudmFyIG1heERlcHRoID0gMTYsIC8vIG1heGltdW0gZGVwdGggb2Ygc3ViZGl2aXNpb25cbiAgICBjb3NNaW5EaXN0YW5jZSA9IGNvcygzMCAqIHJhZGlhbnMpOyAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0LCBkZWx0YTIpIHtcbiAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIDogcmVzYW1wbGVOb25lKHByb2plY3QpO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgcGhpMiA9IGFzaW4oYyAvPSBtKSxcbiAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHgwID0gTmFOO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICBsaW5lRW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICB9O1xufVxuIiwiaW1wb3J0IGNsaXBBbnRpbWVyaWRpYW4gZnJvbSBcIi4uL2NsaXAvYW50aW1lcmlkaWFuXCI7XG5pbXBvcnQgY2xpcENpcmNsZSBmcm9tIFwiLi4vY2xpcC9jaXJjbGVcIjtcbmltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuLi9jbGlwL3JlY3RhbmdsZVwiO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4uL2NvbXBvc2VcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHlcIjtcbmltcG9ydCB7Y29zLCBkZWdyZWVzLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuLi9yb3RhdGlvblwiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybVwiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdFwiO1xuaW1wb3J0IHJlc2FtcGxlIGZyb20gXCIuL3Jlc2FtcGxlXCI7XG5cbnZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtZXIoe1xuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciByID0gcm90YXRlKHgsIHkpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBvaW50KHJbMF0sIHJbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGssIGR4LCBkeSkge1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHJldHVybiBbZHggKyBrICogeCwgZHkgLSBrICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyh4IC0gZHgpIC8gaywgKGR5IC0geSkgLyBrXTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgZHgsIGR5LCBhbHBoYSkge1xuICB2YXIgY29zQWxwaGEgPSBjb3MoYWxwaGEpLFxuICAgICAgc2luQWxwaGEgPSBzaW4oYWxwaGEpLFxuICAgICAgYSA9IGNvc0FscGhhICogayxcbiAgICAgIGIgPSBzaW5BbHBoYSAqIGssXG4gICAgICBhaSA9IGNvc0FscGhhIC8gayxcbiAgICAgIGJpID0gc2luQWxwaGEgLyBrLFxuICAgICAgY2kgPSAoc2luQWxwaGEgKiBkeSAtIGNvc0FscGhhICogZHgpIC8gayxcbiAgICAgIGZpID0gKHNpbkFscGhhICogZHggKyBjb3NBbHBoYSAqIGR5KSAvIGs7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh4LCB5KSB7XG4gICAgcmV0dXJuIFthICogeCAtIGIgKiB5ICsgZHgsIGR5IC0gYiAqIHggLSBhICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW2FpICogeCAtIGJpICogeSArIGNpLCBmaSAtIGJpICogeCAtIGFpICogeV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gIHZhciBwcm9qZWN0LFxuICAgICAgayA9IDE1MCwgLy8gc2NhbGVcbiAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxuICAgICAgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgLy8gcHJlLXJvdGF0ZVxuICAgICAgYWxwaGEgPSAwLCAvLyBwb3N0LXJvdGF0ZVxuICAgICAgdGhldGEgPSBudWxsLCBwcmVjbGlwID0gY2xpcEFudGltZXJpZGlhbiwgLy8gcHJlLWNsaXAgYW5nbGVcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgcG9zdGNsaXAgPSBpZGVudGl0eSwgLy8gcG9zdC1jbGlwIGV4dGVudFxuICAgICAgZGVsdGEyID0gMC41LCAvLyBwcmVjaXNpb25cbiAgICAgIHByb2plY3RSZXNhbXBsZSxcbiAgICAgIHByb2plY3RUcmFuc2Zvcm0sXG4gICAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0ocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLmludmVydChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzLCBwb2ludFsxXSAqIGRlZ3JlZXNdO1xuICB9XG5cbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpKHByZWNsaXAocHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKGNhY2hlU3RyZWFtID0gc3RyZWFtKSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSBfLCB0aGV0YSA9IHVuZGVmaW5lZCwgcmVzZXQoKSkgOiBwcmVjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucG9zdGNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfLCB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIHJlc2V0KCkpIDogcG9zdGNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzLCBwaGkgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMsIGRlbHRhUGhpICogZGVncmVlcywgZGVsdGFHYW1tYSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBhbHBoYSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQoZGVsdGEyKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgdmFyIGNlbnRlciA9IHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIDAsIDAsIGFscGhhKS5hcHBseShudWxsLCBwcm9qZWN0KGxhbWJkYSwgcGhpKSksXG4gICAgICAgIHRyYW5zZm9ybSA9IChhbHBoYSA/IHNjYWxlVHJhbnNsYXRlUm90YXRlIDogc2NhbGVUcmFuc2xhdGUpKGssIHggLSBjZW50ZXJbMF0sIHkgLSBjZW50ZXJbMV0sIGFscGhhKTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSk7XG4gICAgcHJvamVjdFRyYW5zZm9ybSA9IGNvbXBvc2UocHJvamVjdCwgdHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtID0gY29tcG9zZShyb3RhdGUsIHByb2plY3RUcmFuc2Zvcm0pO1xuICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMik7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gIH07XG59XG4iLCJpbXBvcnQge2RlZ3JlZXMsIHBpLCByYWRpYW5zfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtwcm9qZWN0aW9uTXV0YXRvcn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgdmFyIHBoaTAgPSAwLFxuICAgICAgcGhpMSA9IHBpIC8gMyxcbiAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcywgcGhpMSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHJldHVybiBwO1xufVxuIiwiaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHNpZ24sIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Y29uaWNQcm9qZWN0aW9ufSBmcm9tIFwiLi9jb25pY1wiO1xuaW1wb3J0IHtjeWxpbmRyaWNhbEVxdWFsQXJlYVJhd30gZnJvbSBcIi4vY3lsaW5kcmljYWxFcXVhbEFyZWFcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhUmF3KHkwLCB5MSkge1xuICB2YXIgc3kwID0gc2luKHkwKSwgbiA9IChzeTAgKyBzaW4oeTEpKSAvIDI7XG5cbiAgLy8gQXJlIHRoZSBwYXJhbGxlbHMgc3ltbWV0cmljYWwgYXJvdW5kIHRoZSBFcXVhdG9yP1xuICBpZiAoYWJzKG4pIDwgZXBzaWxvbikgcmV0dXJuIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHkwKTtcblxuICB2YXIgYyA9IDEgKyBzeTAgKiAoMiAqIG4gLSBzeTApLCByMCA9IHNxcnQoYykgLyBuO1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciByID0gc3FydChjIC0gMiAqIG4gKiBzaW4oeSkpIC8gbjtcbiAgICByZXR1cm4gW3IgKiBzaW4oeCAqPSBuKSwgcjAgLSByICogY29zKHgpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciByMHkgPSByMCAtIHk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMocjB5KSkgLyBuICogc2lnbihyMHkpLCBhc2luKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTU1LjQyNClcbiAgICAgIC5jZW50ZXIoWzAsIDMzLjY0NDJdKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyhwaGkwKSB7XG4gIHZhciBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSAqIGNvc1BoaTAsIHNpbihwaGkpIC8gY29zUGhpMF07XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3ggLyBjb3NQaGkwLCBhc2luKHkgKiBjb3NQaGkwKV07XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJpbXBvcnQgY29uaWNFcXVhbEFyZWEgZnJvbSBcIi4vY29uaWNFcXVhbEFyZWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY0VxdWFsQXJlYSgpXG4gICAgICAucGFyYWxsZWxzKFsyOS41LCA0NS41XSlcbiAgICAgIC5zY2FsZSgxMDcwKVxuICAgICAgLnRyYW5zbGF0ZShbNDgwLCAyNTBdKVxuICAgICAgLnJvdGF0ZShbOTYsIDBdKVxuICAgICAgLmNlbnRlcihbLTAuNiwgMzguN10pO1xufVxuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IGFsYmVycyBmcm9tIFwiLi9hbGJlcnNcIjtcbmltcG9ydCBjb25pY0VxdWFsQXJlYSBmcm9tIFwiLi9jb25pY0VxdWFsQXJlYVwiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdFwiO1xuXG4vLyBUaGUgcHJvamVjdGlvbnMgbXVzdCBoYXZlIG11dHVhbGx5IGV4Y2x1c2l2ZSBjbGlwIHJlZ2lvbnMgb24gdGhlIHNwaGVyZSxcbi8vIGFzIHRoaXMgd2lsbCBhdm9pZCBlbWl0dGluZyBpbnRlcmxlYXZpbmcgbGluZXMgYW5kIHBvbHlnb25zLlxuZnVuY3Rpb24gbXVsdGlwbGV4KHN0cmVhbXMpIHtcbiAgdmFyIG4gPSBzdHJlYW1zLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2ludCh4LCB5KTsgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5zcGhlcmUoKTsgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lU3RhcnQoKTsgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZUVuZCgpOyB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25TdGFydCgpOyB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7IH1cbiAgfTtcbn1cblxuLy8gQSBjb21wb3NpdGUgcHJvamVjdGlvbiBmb3IgdGhlIFVuaXRlZCBTdGF0ZXMsIGNvbmZpZ3VyZWQgYnkgZGVmYXVsdCBmb3Jcbi8vIDk2MMOXNTAwLiBUaGUgcHJvamVjdGlvbiBhbHNvIHdvcmtzIHF1aXRlIHdlbGwgYXQgOTYww5c2MDAgaWYgeW91IGNoYW5nZSB0aGVcbi8vIHNjYWxlIHRvIDEyODUgYW5kIGFkanVzdCB0aGUgdHJhbnNsYXRlIGFjY29yZGluZ2x5LiBUaGUgc2V0IG9mIHN0YW5kYXJkXG4vLyBwYXJhbGxlbHMgZm9yIGVhY2ggcmVnaW9uIGNvbWVzIGZyb20gVVNHUywgd2hpY2ggaXMgcHVibGlzaGVkIGhlcmU6XG4vLyBodHRwOi8vZWdzYy51c2dzLmdvdi9pc2IvcHVicy9NYXBQcm9qZWN0aW9ucy9wcm9qZWN0aW9ucy5odG1sI2FsYmVyc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgfVxuXG4gIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiwgeSArIDAuMTIwICogayArIGVwc2lsb25dLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24sIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgaGF3YWlpUG9pbnQgPSBoYXdhaWlcbiAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMjA1ICogaywgeSArIDAuMjEyICoga10pXG4gICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuMjE0ICogayArIGVwc2lsb24sIHkgKyAwLjE2NiAqIGsgKyBlcHNpbG9uXSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uLCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbl1dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQoYWxiZXJzVXNhLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShhbGJlcnNVc2EsIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChhbGJlcnNVc2EsIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQoYWxiZXJzVXNhLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgfVxuXG4gIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBjeCA9IGNvcyh4KSxcbiAgICAgICAgY3kgPSBjb3MoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICByZXR1cm4gW1xuICAgICAgayAqIGN5ICogc2luKHgpLFxuICAgICAgayAqIHNpbih5KVxuICAgIF07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICBzYyA9IHNpbihjKSxcbiAgICAgICAgY2MgPSBjb3MoYyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgIGFzaW4oeiAmJiB5ICogc2MgLyB6KVxuICAgIF07XG4gIH1cbn1cbiIsImltcG9ydCB7YXNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oY3hjeSkge1xuICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG59KTtcblxuYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXNpbih6IC8gMik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxMjQuNzUpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHthY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbFJhdywgYXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCB2YXIgYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oYykge1xuICByZXR1cm4gKGMgPSBhY29zKGMpKSAmJiBjIC8gc2luKGMpO1xufSk7XG5cbmF6aW11dGhhbEVxdWlkaXN0YW50UmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiB6O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSg3OS40MTg4KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgcGksIHRhbiwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHJvdGF0aW9uIGZyb20gXCIuLi9yb3RhdGlvblwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAuc2NhbGUoOTYxIC8gdGF1KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIHJlY2xpcCgpKSA6IHNjYWxlKCk7XG4gIH07XG5cbiAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgfTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIoXyksIHJlY2xpcCgpKSA6IGNlbnRlcigpO1xuICB9O1xuXG4gIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoXyA9PSBudWxsID8geDAgPSB5MCA9IHgxID0geTEgPSBudWxsIDogKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNsaXAoKSB7XG4gICAgdmFyIGsgPSBwaSAqIHNjYWxlKCksXG4gICAgICAgIHQgPSBtKHJvdGF0aW9uKG0ucm90YXRlKCkpLmludmVydChbMCwgMF0pKTtcbiAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsXG4gICAgICAgID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhd1xuICAgICAgICA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXVxuICAgICAgICA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gIH1cblxuICByZXR1cm4gcmVjbGlwKCk7XG59XG4iLCJpbXBvcnQge2FicywgYXRhbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBsb2csIHBvdywgc2lnbiwgc2luLCBzcXJ0LCB0YW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7bWVyY2F0b3JSYXd9IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmZ1bmN0aW9uIHRhbnkoeSkge1xuICByZXR1cm4gdGFuKChoYWxmUGkgKyB5KSAvIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiBsb2coY3kwIC8gY29zKHkxKSkgLyBsb2codGFueSh5MSkgLyB0YW55KHkwKSksXG4gICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgaWYgKCFuKSByZXR1cm4gbWVyY2F0b3JSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSArIGVwc2lsb24pIHkgPSAtaGFsZlBpICsgZXBzaWxvbjsgfVxuICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSAtIGVwc2lsb24pIHkgPSBoYWxmUGkgLSBlcHNpbG9uOyB9XG4gICAgdmFyIHIgPSBmIC8gcG93KHRhbnkoeSksIG4pO1xuICAgIHJldHVybiBbciAqIHNpbihuICogeCksIGYgLSByICogY29zKG4gKiB4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZnkpKSAvIG4gKiBzaWduKGZ5KSwgMiAqIGF0YW4ocG93KGYgLyByLCAxIC8gbikpIC0gaGFsZlBpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNDb25mb3JtYWxSYXcpXG4gICAgICAuc2NhbGUoMTA5LjUpXG4gICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXJSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG59XG5cbmVxdWlyZWN0YW5ndWxhclJhdy5pbnZlcnQgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cbiIsImltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7ZXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9lcXVpcmVjdGFuZ3VsYXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiAoY3kwIC0gY29zKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LCBueCA9IG4gKiB4O1xuICAgIHJldHVybiBbZ3kgKiBzaW4obngpLCBnIC0gZ3kgKiBjb3MobngpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKGd5KSkgLyBuICogc2lnbihneSksIGcgLSBzaWduKG4pICogc3FydCh4ICogeCArIGd5ICogZ3kpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgLmNlbnRlcihbMCwgMTMuOTM4OV0pO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBjb3MsIGVwc2lsb24yLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbnZhciBBMSA9IDEuMzQwMjY0LFxuICAgIEEyID0gLTAuMDgxMTA2LFxuICAgIEEzID0gMC4wMDA4OTMsXG4gICAgQTQgPSAwLjAwMzc5NixcbiAgICBNID0gc3FydCgzKSAvIDIsXG4gICAgaXRlcmF0aW9ucyA9IDEyO1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxFYXJ0aFJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgbCA9IGFzaW4oTSAqIHNpbihwaGkpKSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogY29zKGwpIC8gKE0gKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkpLFxuICAgIGwgKiAoQTEgKyBBMiAqIGwyICsgbDYgKiAoQTMgKyBBNCAqIGwyKSlcbiAgXTtcbn1cblxuZXF1YWxFYXJ0aFJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBsID0geSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIGZvciAodmFyIGkgPSAwLCBkZWx0YSwgZnksIGZweTsgaSA8IGl0ZXJhdGlvbnM7ICsraSkge1xuICAgIGZ5ID0gbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKSAtIHk7XG4gICAgZnB5ID0gQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKTtcbiAgICBsIC09IGRlbHRhID0gZnkgLyBmcHksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICAgIGlmIChhYnMoZGVsdGEpIDwgZXBzaWxvbjIpIGJyZWFrO1xuICB9XG4gIHJldHVybiBbXG4gICAgTSAqIHggKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkgLyBjb3MobCksXG4gICAgYXNpbihzaW4obCkgLyBNKVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWFsRWFydGhSYXcpXG4gICAgICAuc2NhbGUoMTc3LjE1OCk7XG59XG4iLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAuc2NhbGUoMTQ0LjA0OSlcbiAgICAgIC5jbGlwQW5nbGUoNjApO1xufVxuIiwiaW1wb3J0IGNsaXBSZWN0YW5nbGUgZnJvbSBcIi4uL2NsaXAvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0XCI7XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGt4LCBreSwgdHgsIHR5KSB7XG4gIHJldHVybiBreCA9PT0gMSAmJiBreSA9PT0gMSAmJiB0eCA9PT0gMCAmJiB0eSA9PT0gMCA/IGlkZW50aXR5IDogdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICoga3ggKyB0eCwgeSAqIGt5ICsgdHkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgayA9IDEsIHR4ID0gMCwgdHkgPSAwLCBzeCA9IDEsIHN5ID0gMSwgdHJhbnNmb3JtID0gaWRlbnRpdHksIC8vIHNjYWxlLCB0cmFuc2xhdGUgYW5kIHJlZmxlY3RcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgLy8gY2xpcCBleHRlbnRcbiAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHksXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgcHJvamVjdGlvbjtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBwcm9qZWN0aW9uID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm0ocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKTtcbiAgICB9LFxuICAgIHBvc3RjbGlwOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgICB9LFxuICAgIGNsaXBFeHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH0sXG4gICAgc2NhbGU6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSA9IHNjYWxlVHJhbnNsYXRlKChrID0gK18pICogc3gsIGsgKiBzeSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBrO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZShrICogc3gsIGsgKiBzeSwgdHggPSArX1swXSwgdHkgPSArX1sxXSksIHJlc2V0KCkpIDogW3R4LCB0eV07XG4gICAgfSxcbiAgICByZWZsZWN0WDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNmb3JtID0gc2NhbGVUcmFuc2xhdGUoayAqIChzeCA9IF8gPyAtMSA6IDEpLCBrICogc3ksIHR4LCB0eSksIHJlc2V0KCkpIDogc3ggPCAwO1xuICAgIH0sXG4gICAgcmVmbGVjdFk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSA9IHNjYWxlVHJhbnNsYXRlKGsgKiBzeCwgayAqIChzeSA9IF8gPyAtMSA6IDEpLCB0eCwgdHkpLCByZXNldCgpKSA6IHN5IDwgMDtcbiAgICB9LFxuICAgIGZpdEV4dGVudDogZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0U2l6ZTogZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGZpdEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdHVyYWxFYXJ0aDFSYXcobGFtYmRhLCBwaGkpIHtcbiAgdmFyIHBoaTIgPSBwaGkgKiBwaGksIHBoaTQgPSBwaGkyICogcGhpMjtcbiAgcmV0dXJuIFtcbiAgICBsYW1iZGEgKiAoMC44NzA3IC0gMC4xMzE5NzkgKiBwaGkyICsgcGhpNCAqICgtMC4wMTM3OTEgKyBwaGk0ICogKDAuMDAzOTcxICogcGhpMiAtIDAuMDAxNTI5ICogcGhpNCkpKSxcbiAgICBwaGkgKiAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICsgcGhpNCAqICgtMC4wNDQ0NzUgKyAwLjAyODg3NCAqIHBoaTIgLSAwLjAwNTkxNiAqIHBoaTQpKSlcbiAgXTtcbn1cblxubmF0dXJhbEVhcnRoMVJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBwaGkgPSB5LCBpID0gMjUsIGRlbHRhO1xuICBkbyB7XG4gICAgdmFyIHBoaTIgPSBwaGkgKiBwaGksIHBoaTQgPSBwaGkyICogcGhpMjtcbiAgICBwaGkgLT0gZGVsdGEgPSAocGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpIC0geSkgL1xuICAgICAgICAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICogMyArIHBoaTQgKiAoLTAuMDQ0NDc1ICogNyArIDAuMDI4ODc0ICogOSAqIHBoaTIgLSAwLjAwNTkxNiAqIDExICogcGhpNCkpKTtcbiAgfSB3aGlsZSAoYWJzKGRlbHRhKSA+IGVwc2lsb24gJiYgLS1pID4gMCk7XG4gIHJldHVybiBbXG4gICAgeCAvICgwLjg3MDcgKyAocGhpMiA9IHBoaSAqIHBoaSkgKiAoLTAuMTMxOTc5ICsgcGhpMiAqICgtMC4wMTM3OTEgKyBwaGkyICogcGhpMiAqIHBoaTIgKiAoMC4wMDM5NzEgLSAwLjAwMTUyOSAqIHBoaTIpKSkpLFxuICAgIHBoaVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG5hdHVyYWxFYXJ0aDFSYXcpXG4gICAgICAuc2NhbGUoMTc1LjI5NSk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGNvcywgZXBzaWxvbiwgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHJldHVybiBbY29zKHkpICogc2luKHgpLCBzaW4oeSldO1xufVxuXG5vcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24ob3J0aG9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI0OS41KVxuICAgICAgLmNsaXBBbmdsZSg5MCArIGVwc2lsb24pO1xufVxuIiwiaW1wb3J0IHthdGFuLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVyZW9ncmFwaGljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gMSArIGNvcyh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luKHgpIC8gaywgc2luKHkpIC8ga107XG59XG5cbnN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhdGFuKHopO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihzdGVyZW9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI1MClcbiAgICAgIC5jbGlwQW5nbGUoMTQyKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgdGFufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHttZXJjYXRvclByb2plY3Rpb259IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpLCAtbGFtYmRhXTtcbn1cblxudHJhbnN2ZXJzZU1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgcm90YXRlID0gbS5yb3RhdGU7XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgfTtcblxuICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRlKFswLCAwLCA5MF0pXG4gICAgICAuc2NhbGUoMTU5LjE1NSk7XG59XG4iLCJmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbihhLCBiKSB7XG4gIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbn1cblxuZnVuY3Rpb24gbWVhblgoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1lYW5YUmVkdWNlKHgsIGMpIHtcbiAgcmV0dXJuIHggKyBjLng7XG59XG5cbmZ1bmN0aW9uIG1heFkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG59XG5cbmZ1bmN0aW9uIG1heFlSZWR1Y2UoeSwgYykge1xuICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbn1cblxuZnVuY3Rpb24gbGVhZkxlZnQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlblswXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gIHZhciBjaGlsZHJlbjtcbiAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgIHggPSAwO1xuXG4gICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUueCA9IG1lYW5YKGNoaWxkcmVuKTtcbiAgICAgICAgbm9kZS55ID0gbWF4WShjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgIG5vZGUueSA9IDA7XG4gICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcbiAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgIC8vIFNlY29uZCB3YWxrLCBub3JtYWxpemluZyB4ICYgeSB0byB0aGUgZGVzaXJlZCBzaXplLlxuICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIGR5O1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgY2x1c3RlcikgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gY2x1c3Rlcjtcbn1cbiIsImZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgdmFyIHN1bSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAoIWkpIHN1bSA9IDE7XG4gIGVsc2Ugd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gIG5vZGUudmFsdWUgPSBzdW07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoY291bnQpO1xufVxuIiwiaW1wb3J0IG5vZGVfY291bnQgZnJvbSBcIi4vY291bnRcIjtcbmltcG9ydCBub2RlX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IG5vZGVfZWFjaEJlZm9yZSBmcm9tIFwiLi9lYWNoQmVmb3JlXCI7XG5pbXBvcnQgbm9kZV9lYWNoQWZ0ZXIgZnJvbSBcIi4vZWFjaEFmdGVyXCI7XG5pbXBvcnQgbm9kZV9zdW0gZnJvbSBcIi4vc3VtXCI7XG5pbXBvcnQgbm9kZV9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBub2RlX3BhdGggZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IG5vZGVfYW5jZXN0b3JzIGZyb20gXCIuL2FuY2VzdG9yc1wiO1xuaW1wb3J0IG5vZGVfZGVzY2VuZGFudHMgZnJvbSBcIi4vZGVzY2VuZGFudHNcIjtcbmltcG9ydCBub2RlX2xlYXZlcyBmcm9tIFwiLi9sZWF2ZXNcIjtcbmltcG9ydCBub2RlX2xpbmtzIGZyb20gXCIuL2xpbmtzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZXJhcmNoeShkYXRhLCBjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIGNoaWxkcmVuID0gZGVmYXVsdENoaWxkcmVuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gIHJldHVybiBkLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIHN1bTogbm9kZV9zdW0sXG4gIHNvcnQ6IG5vZGVfc29ydCxcbiAgcGF0aDogbm9kZV9wYXRoLFxuICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgbGlua3M6IG5vZGVfbGlua3MsXG4gIGNvcHk6IG5vZGVfY29weVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XG4gIGRvIHtcbiAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgbmV4dC5wdXNoKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbi5zb3J0KGNvbXBhcmUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXTtcbiAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudCkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IFtdO1xuICB0aGlzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XG4gIHZhciBtID0gYXJyYXkubGVuZ3RoLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W21dO1xuICAgIGFycmF5W21dID0gYXJyYXlbaV07XG4gICAgYXJyYXlbaV0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IHtzaHVmZmxlLCBzbGljZX0gZnJvbSBcIi4uL2FycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgdmFyIGkgPSAwLCBuID0gKGNpcmNsZXMgPSBzaHVmZmxlKHNsaWNlLmNhbGwoY2lyY2xlcykpKS5sZW5ndGgsIEIgPSBbXSwgcCwgZTtcblxuICB3aGlsZSAoaSA8IG4pIHtcbiAgICBwID0gY2lyY2xlc1tpXTtcbiAgICBpZiAoZSAmJiBlbmNsb3Nlc1dlYWsoZSwgcCkpICsraTtcbiAgICBlbHNlIGUgPSBlbmNsb3NlQmFzaXMoQiA9IGV4dGVuZEJhc2lzKEIsIHApKSwgaSA9IDA7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kQmFzaXMoQiwgcCkge1xuICB2YXIgaSwgajtcblxuICBpZiAoZW5jbG9zZXNXZWFrQWxsKHAsIEIpKSByZXR1cm4gW3BdO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGVsZW1lbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGVuY2xvc2VzTm90KHAsIEJbaV0pXG4gICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCKSkge1xuICAgICAgcmV0dXJuIFtCW2ldLCBwXTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IHR3byBlbGVtZW50cy5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgZm9yIChqID0gaSArIDE7IGogPCBCLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBCW2pdKSwgcClcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCW2pdKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltqXSwgcCksIEJbaV0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczMoQltpXSwgQltqXSwgcCksIEIpKSB7XG4gICAgICAgIHJldHVybiBbQltpXSwgQltqXSwgcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBzb21ldGhpbmcgaXMgdmVyeSB3cm9uZy5cbiAgdGhyb3cgbmV3IEVycm9yO1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc05vdChhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPCAwIHx8IGRyICogZHIgPCBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yICsgMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrQWxsKGEsIEIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCFlbmNsb3Nlc1dlYWsoYSwgQltpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpcyhCKSB7XG4gIHN3aXRjaCAoQi5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBlbmNsb3NlQmFzaXMxKEJbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGVuY2xvc2VCYXNpczIoQlswXSwgQlsxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZW5jbG9zZUJhc2lzMyhCWzBdLCBCWzFdLCBCWzJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMxKGEpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBhLngsXG4gICAgeTogYS55LFxuICAgIHI6IGEuclxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMyKGEsIGIpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDIxID0geDIgLSB4MSwgeTIxID0geTIgLSB5MSwgcjIxID0gcjIgLSByMSxcbiAgICAgIGwgPSBNYXRoLnNxcnQoeDIxICogeDIxICsgeTIxICogeTIxKTtcbiAgcmV0dXJuIHtcbiAgICB4OiAoeDEgKyB4MiArIHgyMSAvIGwgKiByMjEpIC8gMixcbiAgICB5OiAoeTEgKyB5MiArIHkyMSAvIGwgKiByMjEpIC8gMixcbiAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMzKGEsIGIsIGMpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDMgPSBjLngsIHkzID0gYy55LCByMyA9IGMucixcbiAgICAgIGEyID0geDEgLSB4MixcbiAgICAgIGEzID0geDEgLSB4MyxcbiAgICAgIGIyID0geTEgLSB5MixcbiAgICAgIGIzID0geTEgLSB5MyxcbiAgICAgIGMyID0gcjIgLSByMSxcbiAgICAgIGMzID0gcjMgLSByMSxcbiAgICAgIGQxID0geDEgKiB4MSArIHkxICogeTEgLSByMSAqIHIxLFxuICAgICAgZDIgPSBkMSAtIHgyICogeDIgLSB5MiAqIHkyICsgcjIgKiByMixcbiAgICAgIGQzID0gZDEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXG4gICAgICBhYiA9IGEzICogYjIgLSBhMiAqIGIzLFxuICAgICAgeGEgPSAoYjIgKiBkMyAtIGIzICogZDIpIC8gKGFiICogMikgLSB4MSxcbiAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxuICAgICAgeWEgPSAoYTMgKiBkMiAtIGEyICogZDMpIC8gKGFiICogMikgLSB5MSxcbiAgICAgIHliID0gKGEyICogYzMgLSBhMyAqIGMyKSAvIGFiLFxuICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcbiAgICAgIEIgPSAyICogKHIxICsgeGEgKiB4YiArIHlhICogeWIpLFxuICAgICAgQyA9IHhhICogeGEgKyB5YSAqIHlhIC0gcjEgKiByMSxcbiAgICAgIHIgPSAtKEEgPyAoQiArIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKSA6IEMgLyBCKTtcbiAgcmV0dXJuIHtcbiAgICB4OiB4MSArIHhhICsgeGIgKiByLFxuICAgIHk6IHkxICsgeWEgKyB5YiAqIHIsXG4gICAgcjogclxuICB9O1xufVxuIiwiaW1wb3J0IGVuY2xvc2UgZnJvbSBcIi4vZW5jbG9zZVwiO1xuXG5mdW5jdGlvbiBwbGFjZShiLCBhLCBjKSB7XG4gIHZhciBkeCA9IGIueCAtIGEueCwgeCwgYTIsXG4gICAgICBkeSA9IGIueSAtIGEueSwgeSwgYjIsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICBpZiAoZDIpIHtcbiAgICBhMiA9IGEuciArIGMuciwgYTIgKj0gYTI7XG4gICAgYjIgPSBiLnIgKyBjLnIsIGIyICo9IGIyO1xuICAgIGlmIChhMiA+IGIyKSB7XG4gICAgICB4ID0gKGQyICsgYjIgLSBhMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYjIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBiLnggLSB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBiLnkgLSB4ICogZHkgKyB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSAoZDIgKyBhMiAtIGIyKSAvICgyICogZDIpO1xuICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCBhMiAvIGQyIC0geCAqIHgpKTtcbiAgICAgIGMueCA9IGEueCArIHggKiBkeCAtIHkgKiBkeTtcbiAgICAgIGMueSA9IGEueSArIHggKiBkeSArIHkgKiBkeDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYy54ID0gYS54ICsgYy5yO1xuICAgIGMueSA9IGEueTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yICsgYi5yIC0gMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gc2NvcmUobm9kZSkge1xuICB2YXIgYSA9IG5vZGUuXyxcbiAgICAgIGIgPSBub2RlLm5leHQuXyxcbiAgICAgIGFiID0gYS5yICsgYi5yLFxuICAgICAgZHggPSAoYS54ICogYi5yICsgYi54ICogYS5yKSAvIGFiLFxuICAgICAgZHkgPSAoYS55ICogYi5yICsgYi55ICogYS5yKSAvIGFiO1xuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIE5vZGUoY2lyY2xlKSB7XG4gIHRoaXMuXyA9IGNpcmNsZTtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZShhKSwgYiA9IG5ldyBOb2RlKGIpLCBjID0gbmV3IE5vZGUoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZShjKTtcblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAvLyDigJxDbG9zZW5lc3PigJ0gaXMgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UgYWxvbmcgdGhlIGZyb250LWNoYWluLlxuICAgIC8vIOKAnEFoZWFk4oCdIG9yIOKAnGJlaGluZOKAnSBpcyBsaWtld2lzZSBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZS5cbiAgICBqID0gYi5uZXh0LCBrID0gYS5wcmV2aW91cywgc2ogPSBiLl8uciwgc2sgPSBhLl8ucjtcbiAgICBkbyB7XG4gICAgICBpZiAoc2ogPD0gc2spIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzaiArPSBqLl8uciwgaiA9IGoubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xuICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2sgKz0gay5fLnIsIGsgPSBrLnByZXZpb3VzO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XG5cbiAgICAvLyBTdWNjZXNzISBJbnNlcnQgdGhlIG5ldyBjaXJjbGUgYyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyBjbG9zZXN0IGNpcmNsZSBwYWlyIHRvIHRoZSBjZW50cm9pZC5cbiAgICBhYSA9IHNjb3JlKGEpO1xuICAgIHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgIGlmICgoY2EgPSBzY29yZShjKSkgPCBhYSkge1xuICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IGEubmV4dDtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICBhID0gW2IuX10sIGMgPSBiOyB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSBhLnB1c2goYy5fKTsgYyA9IGVuY2xvc2UoYSk7XG5cbiAgLy8gVHJhbnNsYXRlIHRoZSBjaXJjbGVzIHRvIHB1dCB0aGUgZW5jbG9zaW5nIGNpcmNsZSBhcm91bmQgdGhlIG9yaWdpbi5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgcmV0dXJuIGMucjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2lyY2xlcykge1xuICBwYWNrRW5jbG9zZShjaXJjbGVzKTtcbiAgcmV0dXJuIGNpcmNsZXM7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZWQoZikge1xuICBpZiAodHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7cGFja0VuY2xvc2V9IGZyb20gXCIuL3NpYmxpbmdzXCI7XG5pbXBvcnQge29wdGlvbmFsfSBmcm9tIFwiLi4vYWNjZXNzb3JzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIHJvb3QuciAvIE1hdGgubWluKGR4LCBkeSkpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYWNrO1xufVxuXG5mdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tDaGlsZHJlbihwYWRkaW5nLCBrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICByID0gcGFkZGluZyhub2RlKSAqIGsgfHwgMCxcbiAgICAgICAgICBlO1xuXG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xuICAgICAgZSA9IHBhY2tFbmNsb3NlKGNoaWxkcmVuKTtcbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICBub2RlLnIgPSBlICsgcjtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZS54ID0gcGFyZW50LnggKyBrICogbm9kZS54O1xuICAgICAgbm9kZS55ID0gcGFyZW50LnkgKyBrICogbm9kZS55O1xuICAgIH1cbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gIG5vZGUueTAgPSBNYXRoLnJvdW5kKG5vZGUueTApO1xuICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkxO1xuICAgIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3RyZWVtYXAvcm91bmRcIjtcbmltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi90cmVlbWFwL2RpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nID0gMCxcbiAgICAgIHJvdW5kID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKHJvb3QpIHtcbiAgICB2YXIgbiA9IHJvb3QuaGVpZ2h0ICsgMTtcbiAgICByb290LngwID1cbiAgICByb290LnkwID0gcGFkZGluZztcbiAgICByb290LngxID0gZHg7XG4gICAgcm9vdC55MSA9IGR5IC8gbjtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShkeSwgbikge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICB0cmVlbWFwRGljZShub2RlLCBub2RlLngwLCBkeSAqIChub2RlLmRlcHRoICsgMSkgLyBuLCBub2RlLngxLCBkeSAqIChub2RlLmRlcHRoICsgMikgLyBuKTtcbiAgICAgIH1cbiAgICAgIHZhciB4MCA9IG5vZGUueDAsXG4gICAgICAgICAgeTAgPSBub2RlLnkwLFxuICAgICAgICAgIHgxID0gbm9kZS54MSAtIHBhZGRpbmcsXG4gICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTEgPSB5MTtcbiAgICB9O1xuICB9XG5cbiAgcGFydGl0aW9uLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCBwYXJ0aXRpb24pIDogcm91bmQ7XG4gIH07XG5cbiAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFydGl0aW9uKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSAreCwgcGFydGl0aW9uKSA6IHBhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIHBhcnRpdGlvbjtcbn1cbiIsImltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuL2FjY2Vzc29yc1wiO1xuaW1wb3J0IHtOb2RlLCBjb21wdXRlSGVpZ2h0fSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXhcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiLCAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cbiAgICBwcmVyb290ID0ge2RlcHRoOiAtMX0sXG4gICAgYW1iaWd1b3VzID0ge307XG5cbmZ1bmN0aW9uIGRlZmF1bHRJZChkKSB7XG4gIHJldHVybiBkLmlkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGFyZW50SWQoZCkge1xuICByZXR1cm4gZC5wYXJlbnRJZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpZCA9IGRlZmF1bHRJZCxcbiAgICAgIHBhcmVudElkID0gZGVmYXVsdFBhcmVudElkO1xuXG4gIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICB2YXIgZCxcbiAgICAgICAgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICByb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGVzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBub2RlSWQsXG4gICAgICAgIG5vZGVLZXksXG4gICAgICAgIG5vZGVCeUtleSA9IHt9O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZCA9IGRhdGFbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgaWYgKChub2RlSWQgPSBpZChkLCBpLCBkYXRhKSkgIT0gbnVsbCAmJiAobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIG5vZGVLZXkgPSBrZXlQcmVmaXggKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgIG5vZGVCeUtleVtub2RlS2V5XSA9IG5vZGVLZXkgaW4gbm9kZUJ5S2V5ID8gYW1iaWd1b3VzIDogbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGVJZCA9IHBhcmVudElkKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIGlmIChyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSByb290c1wiKTtcbiAgICAgICAgcm9vdCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBub2RlQnlLZXlba2V5UHJlZml4ICsgbm9kZUlkXTtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gYW1iaWd1b3VzKSB0aHJvdyBuZXcgRXJyb3IoXCJhbWJpZ3VvdXM6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudC5jaGlsZHJlbikgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGVsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJvb3QpIHRocm93IG5ldyBFcnJvcihcIm5vIHJvb3RcIik7XG4gICAgcm9vdC5wYXJlbnQgPSBwcmVyb290O1xuICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7IG5vZGUuZGVwdGggPSBub2RlLnBhcmVudC5kZXB0aCArIDE7IC0tbjsgfSkuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgICByb290LnBhcmVudCA9IG51bGw7XG4gICAgaWYgKG4gPiAwKSB0aHJvdyBuZXcgRXJyb3IoXCJjeWNsZVwiKTtcblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgc3RyYXRpZnkuaWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogaWQ7XG4gIH07XG5cbiAgc3RyYXRpZnkucGFyZW50SWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0cmF0aWZ5O1xufVxuIiwiaW1wb3J0IHtOb2RlfSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXhcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbi8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4vLyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3Jcbi8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbi8vIGVpdGhlciBnaXZlbiBieSB0aGUgbGVmdG1vc3QgY2hpbGQgb2YgdiBvciBieSB0aGUgdGhyZWFkIG9mIHYuIFRoZSBmdW5jdGlvblxuLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG5mdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxuZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XG59XG5cbi8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbi8vIHByZWxpbSh3KykgYW5kIG1vZCh3KykgYnkgc2hpZnQuXG5mdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gIHdwLmMgLT0gY2hhbmdlO1xuICB3cC5zICs9IHNoaWZ0O1xuICB3bS5jICs9IGNoYW5nZTtcbiAgd3AueiArPSBzaGlmdDtcbiAgd3AubSArPSBzaGlmdDtcbn1cblxuLy8gQWxsIG90aGVyIHNoaWZ0cywgYXBwbGllZCB0byB0aGUgc21hbGxlciBzdWJ0cmVlcyBiZXR3ZWVuIHctIGFuZCB3KywgYXJlXG4vLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGlmdHModikge1xuICB2YXIgc2hpZnQgPSAwLFxuICAgICAgY2hhbmdlID0gMCxcbiAgICAgIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICB3O1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgdy56ICs9IHNoaWZ0O1xuICAgIHcubSArPSBzaGlmdDtcbiAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gIH1cbn1cblxuLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4vLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xufVxuXG5mdW5jdGlvbiBUcmVlTm9kZShub2RlLCBpKSB7XG4gIHRoaXMuXyA9IG5vZGU7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgdGhpcy56ID0gMDsgLy8gcHJlbGltXG4gIHRoaXMubSA9IDA7IC8vIG1vZFxuICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgdGhpcy5zID0gMDsgLy8gc2hpZnRcbiAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gIHRoaXMuaSA9IGk7IC8vIG51bWJlclxufVxuXG5UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4gPSBjaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbi8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICBmdW5jdGlvbiB0cmVlKHJvb3QpIHtcbiAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xuICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICBpZiAobm9kZVNpemUpIHJvb3QuZWFjaEJlZm9yZShzaXplTm9kZSk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICBib3R0b20gPSByb290O1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgfSk7XG4gICAgICB2YXIgcyA9IGxlZnQgPT09IHJpZ2h0ID8gMSA6IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICBreSA9IGR5IC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgLy8gYXBwbGllZCByZWN1cnNpdmVseSB0byB0aGUgY2hpbGRyZW4gb2YgdiwgYXMgd2VsbCBhcyB0aGUgZnVuY3Rpb25cbiAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgfVxuICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhbGwgcmVhbCB4LWNvb3JkaW5hdGVzIGJ5IHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyByZWN1cnNpdmVseS5cbiAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgIHYubSArPSB2LnBhcmVudC5tO1xuICB9XG5cbiAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXG4gIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcbiAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxuICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXG4gIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgIGlmICh3KSB7XG4gICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgdm9wLmEgPSB2O1xuICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgIH1cbiAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XG4gICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICB9XG4gICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgIG5vZGUueCAqPSBkeDtcbiAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gIH1cblxuICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZVwiO1xuXG5leHBvcnQgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciByb3dzID0gW10sXG4gICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIHJvdyxcbiAgICAgIG5vZGVWYWx1ZSxcbiAgICAgIGkwID0gMCxcbiAgICAgIGkxID0gMCxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBkeCwgZHksXG4gICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgIHN1bVZhbHVlLFxuICAgICAgbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZSxcbiAgICAgIG5ld1JhdGlvLFxuICAgICAgbWluUmF0aW8sXG4gICAgICBhbHBoYSxcbiAgICAgIGJldGE7XG5cbiAgd2hpbGUgKGkwIDwgbikge1xuICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub24tZW1wdHkgbm9kZS5cbiAgICBkbyBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlOyB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlO1xuICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG5ld1JhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHZhbHVlID8geTAgKz0gZHkgKiBzdW1WYWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gIH1cblxuICByZXR1cm4gcm93cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiBzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3JvdW5kXCI7XG5pbXBvcnQgc3F1YXJpZnkgZnJvbSBcIi4vc3F1YXJpZnlcIjtcbmltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuLi9hY2Nlc3NvcnNcIjtcbmltcG9ydCBjb25zdGFudCwge2NvbnN0YW50WmVyb30gZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IDA7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeTtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICBwYWRkaW5nU3RhY2sgPSBbMF07XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgIHgwID0gbm9kZS54MCArIHAsXG4gICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgIHkxID0gbm9kZS55MSAtIHA7XG4gICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICBub2RlLngwID0geDA7XG4gICAgbm9kZS55MCA9IHkwO1xuICAgIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkxID0geTE7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcbiAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgfVxuICB9XG5cbiAgdHJlZW1hcC5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgfTtcblxuICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgfTtcblxuICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdUb3A7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nUmlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1JpZ2h0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0xlZnQ7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWVtYXA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIGksIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xuXG4gIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgc3Vtc1tpICsgMV0gPSBzdW0gKz0gbm9kZXNbaV0udmFsdWU7XG4gIH1cblxuICBwYXJ0aXRpb24oMCwgbiwgcGFyZW50LnZhbHVlLCB4MCwgeTAsIHgxLCB5MSk7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKGksIGosIHZhbHVlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmIChpID49IGogLSAxKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgbm9kZS54MCA9IHgwLCBub2RlLnkwID0geTA7XG4gICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVPZmZzZXQgPSBzdW1zW2ldLFxuICAgICAgICB2YWx1ZVRhcmdldCA9ICh2YWx1ZSAvIDIpICsgdmFsdWVPZmZzZXQsXG4gICAgICAgIGsgPSBpICsgMSxcbiAgICAgICAgaGkgPSBqIC0gMTtcblxuICAgIHdoaWxlIChrIDwgaGkpIHtcbiAgICAgIHZhciBtaWQgPSBrICsgaGkgPj4+IDE7XG4gICAgICBpZiAoc3Vtc1ttaWRdIDwgdmFsdWVUYXJnZXQpIGsgPSBtaWQgKyAxO1xuICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICB9XG5cbiAgICBpZiAoKHZhbHVlVGFyZ2V0IC0gc3Vtc1trIC0gMV0pIDwgKHN1bXNba10gLSB2YWx1ZVRhcmdldCkgJiYgaSArIDEgPCBrKSAtLWs7XG5cbiAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxuICAgICAgICB2YWx1ZVJpZ2h0ID0gdmFsdWUgLSB2YWx1ZUxlZnQ7XG5cbiAgICBpZiAoKHgxIC0geDApID4gKHkxIC0geTApKSB7XG4gICAgICB2YXIgeGsgPSAoeDAgKiB2YWx1ZVJpZ2h0ICsgeDEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHhrLCB5MSk7XG4gICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeGssIHkwLCB4MSwgeTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeWsgPSAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHgxLCB5ayk7XG4gICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeDAsIHlrLCB4MSwgeTEpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGRpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHNsaWNlIGZyb20gXCIuL3NsaWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgKHBhcmVudC5kZXB0aCAmIDEgPyBzbGljZSA6IGRpY2UpKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcbmltcG9ydCB7cGhpLCBzcXVhcmlmeVJhdGlvfSBmcm9tIFwiLi9zcXVhcmlmeVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gcmVzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlO1xuXG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gcm93LnZhbHVlID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkgcm93LnZhbHVlICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgeDAgKz0gKHgxIC0geDApICogcm93LnZhbHVlIC8gdmFsdWUsIHkxKTtcbiAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgYSxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIGFyZWEgPSAwO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYSA9IGI7XG4gICAgYiA9IHBvbHlnb25baV07XG4gICAgYXJlYSArPSBhWzFdICogYlswXSAtIGFbMF0gKiBiWzFdO1xuICB9XG5cbiAgcmV0dXJuIGFyZWEgLyAyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBjLFxuICAgICAgayA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBrICs9IGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgfVxuXG4gIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xufVxuIiwiLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4vLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcbi8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbn1cbiIsImltcG9ydCBjcm9zcyBmcm9tIFwiLi9jcm9zc1wiO1xuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG59XG5cbi8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbi8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbmZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBpbmRleGVzID0gWzAsIDFdLFxuICAgICAgc2l6ZSA9IDI7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICB3aGlsZSAoc2l6ZSA+IDEgJiYgY3Jvc3MocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLXNpemU7XG4gICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludHMpIHtcbiAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSxcbiAgICAgIG4sXG4gICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNvcnRlZFBvaW50c1tpXSA9IFsrcG9pbnRzW2ldWzBdLCArcG9pbnRzW2ldWzFdLCBpXTtcbiAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gIHZhciB1cHBlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhzb3J0ZWRQb2ludHMpLFxuICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxuICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgIGh1bGwgPSBbXTtcblxuICAvLyBBZGQgdXBwZXIgaHVsbCBpbiByaWdodC10by1sIG9yZGVyLlxuICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcblxuICByZXR1cm4gaHVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvbHlnb24sIHBvaW50KSB7XG4gIHZhciBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBwID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSxcbiAgICAgIHgwID0gcFswXSwgeTAgPSBwWzFdLFxuICAgICAgeDEsIHkxLFxuICAgICAgaW5zaWRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBwID0gcG9seWdvbltpXSwgeDEgPSBwWzBdLCB5MSA9IHBbMV07XG4gICAgaWYgKCgoeTEgPiB5KSAhPT0gKHkwID4geSkpICYmICh4IDwgKHgwIC0geDEpICogKHkgLSB5MSkgLyAoeTAgLSB5MSkgKyB4MSkpIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgeDAgPSB4MSwgeTAgPSB5MTtcbiAgfVxuXG4gIHJldHVybiBpbnNpZGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4YSxcbiAgICAgIHlhLFxuICAgICAgeGIgPSBiWzBdLFxuICAgICAgeWIgPSBiWzFdLFxuICAgICAgcGVyaW1ldGVyID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHhhID0geGI7XG4gICAgeWEgPSB5YjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICB4YiA9IGJbMF07XG4gICAgeWIgPSBiWzFdO1xuICAgIHhhIC09IHhiO1xuICAgIHlhIC09IHliO1xuICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoeGEgKiB4YSArIHlhICogeWEpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmltZXRlcjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbVVuaWZvcm0oc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbVVuaWZvcm0obWluLCBtYXgpIHtcbiAgICBtaW4gPSBtaW4gPT0gbnVsbCA/IDAgOiArbWluO1xuICAgIG1heCA9IG1heCA9PSBudWxsID8gMSA6ICttYXg7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIG1heCA9IG1pbiwgbWluID0gMDtcbiAgICBlbHNlIG1heCAtPSBtaW47XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNvdXJjZSgpICogbWF4ICsgbWluO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Vbmlmb3JtLnNvdXJjZSA9IHNvdXJjZVJhbmRvbVVuaWZvcm07XG5cbiAgcmV0dXJuIHJhbmRvbVVuaWZvcm07XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbU5vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbU5vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Ob3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IG5vcm1hbCBmcm9tIFwiLi9ub3JtYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgaXJ3aW5IYWxsIGZyb20gXCIuL2lyd2luSGFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tQmF0ZXMoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUJhdGVzKG4pIHtcbiAgICB2YXIgcmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsLnNvdXJjZShzb3VyY2UpKG4pO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByYW5kb21JcndpbkhhbGwoKSAvIG47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUJhdGVzLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUJhdGVzO1xuXG4gIHJldHVybiByYW5kb21CYXRlcztcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tRXhwb25lbnRpYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUV4cG9uZW50aWFsKGxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHNvdXJjZSgpKSAvIGxhbWJkYTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tRXhwb25lbnRpYWwuc291cmNlID0gc291cmNlUmFuZG9tRXhwb25lbnRpYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUV4cG9uZW50aWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwocmFuZ2UpO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZCgpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWludGVycG9sYXRlTGluZWFyKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChiKTtcbn1cblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHIgPSByZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBkZWludGVycG9sYXRlKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSk7XG59XG5cbi8vIGRlaW50ZXJwb2xhdGUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIHJlaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkb21haW4gdmFsdWUgeCBpbiBbYSxiXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSA6IGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSkpKCt4KTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlTGluZWFyLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCByZXNjYWxlKCkpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciBhcyByZWludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBjb250aW51b3VzLCBjb3B5LCBkZWludGVycG9sYXRlTGluZWFyIGFzIGRlaW50ZXJwb2xhdGV9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRvbWFpbigpLCBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIGkwID0gMCxcbiAgICAgICAgaTEgPSBkLmxlbmd0aCAtIDEsXG4gICAgICAgIHN0YXJ0ID0gZFtpMF0sXG4gICAgICAgIHN0b3AgPSBkW2kxXSxcbiAgICAgICAgc3RlcDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cblxuICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlkZW50aXR5KCkge1xuICB2YXIgZG9tYWluID0gWzAsIDFdO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gK3g7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5KCkuZG9tYWluKGRvbWFpbik7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgY29udGludW91cywgY29weX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlKGEsIGIpIHtcbiAgcmV0dXJuIChiID0gTWF0aC5sb2coYiAvIGEpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4IC8gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGIpO1xufVxuXG5mdW5jdGlvbiByZWludGVycG9sYXRlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCAwXG4gICAgICA/IGZ1bmN0aW9uKHQpIHsgcmV0dXJuIC1NYXRoLnBvdygtYiwgdCkgKiBNYXRoLnBvdygtYSwgMSAtIHQpOyB9XG4gICAgICA6IGZ1bmN0aW9uKHQpIHsgcmV0dXJuIE1hdGgucG93KGIsIHQpICogTWF0aC5wb3coYSwgMSAtIHQpOyB9O1xufVxuXG5mdW5jdGlvbiBwb3cxMCh4KSB7XG4gIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xufVxuXG5mdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gcG93MTBcbiAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG59XG5cbmZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgIDogYmFzZSA9PT0gMTAgJiYgTWF0aC5sb2cxMFxuICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAtZigteCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZygpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKS5kb21haW4oWzEsIDEwXSksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBiYXNlID0gMTAsXG4gICAgICBsb2dzID0gbG9ncCgxMCksXG4gICAgICBwb3dzID0gcG93cCgxMCk7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIHNjYWxlLmJhc2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYmFzZSA9ICtfLCByZXNjYWxlKCkpIDogYmFzZTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHUgPSBkWzBdLFxuICAgICAgICB2ID0gZFtkLmxlbmd0aCAtIDFdLFxuICAgICAgICByO1xuXG4gICAgaWYgKHIgPSB2IDwgdSkgaSA9IHUsIHUgPSB2LCB2ID0gaTtcblxuICAgIHZhciBpID0gbG9ncyh1KSxcbiAgICAgICAgaiA9IGxvZ3ModiksXG4gICAgICAgIHAsXG4gICAgICAgIGssXG4gICAgICAgIHQsXG4gICAgICAgIG4gPSBjb3VudCA9PSBudWxsID8gMTAgOiArY291bnQsXG4gICAgICAgIHogPSBbXTtcblxuICAgIGlmICghKGJhc2UgJSAxKSAmJiBqIC0gaSA8IG4pIHtcbiAgICAgIGkgPSBNYXRoLnJvdW5kKGkpIC0gMSwgaiA9IE1hdGgucm91bmQoaikgKyAxO1xuICAgICAgaWYgKHUgPiAwKSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICBmb3IgKGsgPSAxLCBwID0gcG93cyhpKTsgayA8IGJhc2U7ICsraykge1xuICAgICAgICAgIHQgPSBwICogaztcbiAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgZm9yIChrID0gYmFzZSAtIDEsIHAgPSBwb3dzKGkpOyBrID49IDE7IC0taykge1xuICAgICAgICAgIHQgPSBwICogaztcbiAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSB0aWNrcyhpLCBqLCBNYXRoLm1pbihqIC0gaSwgbikpLm1hcChwb3dzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gciA/IHoucmV2ZXJzZSgpIDogejtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIGlmIChzcGVjaWZpZXIgPT0gbnVsbCkgc3BlY2lmaWVyID0gYmFzZSA9PT0gMTAgPyBcIi4wZVwiIDogXCIsXCI7XG4gICAgaWYgKHR5cGVvZiBzcGVjaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgc3BlY2lmaWVyID0gZm9ybWF0KHNwZWNpZmllcik7XG4gICAgaWYgKGNvdW50ID09PSBJbmZpbml0eSkgcmV0dXJuIHNwZWNpZmllcjtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcbiAgICB2YXIgayA9IE1hdGgubWF4KDEsIGJhc2UgKiBjb3VudCAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKTsgLy8gVE9ETyBmYXN0IGVzdGltYXRlP1xuICAgIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgaSA9IGQgLyBwb3dzKE1hdGgucm91bmQobG9ncyhkKSkpO1xuICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIDAuNSkgaSAqPSBiYXNlO1xuICAgICAgcmV0dXJuIGkgPD0gayA/IHNwZWNpZmllcihkKSA6IFwiXCI7XG4gICAgfTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvbWFpbihuaWNlKGRvbWFpbigpLCB7XG4gICAgICBmbG9vcjogZnVuY3Rpb24oeCkgeyByZXR1cm4gcG93cyhNYXRoLmZsb29yKGxvZ3MoeCkpKTsgfSxcbiAgICAgIGNlaWw6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5jZWlsKGxvZ3MoeCkpKTsgfVxuICAgIH0pKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZygpLmJhc2UoYmFzZSkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGNvbnRpbnVvdXMsIGNvcHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcblxuZnVuY3Rpb24gcmFpc2UoeCwgZXhwb25lbnQpIHtcbiAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBleHBvbmVudCkgOiBNYXRoLnBvdyh4LCBleHBvbmVudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdygpIHtcbiAgdmFyIGV4cG9uZW50ID0gMSxcbiAgICAgIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICByZXR1cm4gKGIgPSByYWlzZShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlKGEsIGV4cG9uZW50KSkpXG4gICAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHJhaXNlKHgsIGV4cG9uZW50KSAtIGEpIC8gYjsgfVxuICAgICAgICA6IGNvbnN0YW50KGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgYiA9IHJhaXNlKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UoYSwgZXhwb25lbnQpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gcmFpc2UoYSArIGIgKiB0LCAxIC8gZXhwb25lbnQpOyB9O1xuICB9XG5cbiAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgZG9tYWluKGRvbWFpbigpKSkgOiBleHBvbmVudDtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHBvdygpLmV4cG9uZW50KGV4cG9uZW50KSk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93KCkuZXhwb25lbnQoMC41KTtcbn1cbiIsImltcG9ydCB7YXNjZW5kaW5nLCBiaXNlY3QsIHF1YW50aWxlIGFzIHRocmVzaG9sZH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFudGlsZSgpIHtcbiAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHRocmVzaG9sZHMgPSBbXTtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBpID0gMCwgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XG4gICAgdGhyZXNob2xkcyA9IG5ldyBBcnJheShuIC0gMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtiaXNlY3QodGhyZXNob2xkcywgeCldO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dIDogW1xuICAgICAgaSA+IDAgPyB0aHJlc2hvbGRzW2kgLSAxXSA6IGRvbWFpblswXSxcbiAgICAgIGkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbaV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdXG4gICAgXTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfLmxlbmd0aCwgZDsgaSA8IG47ICsraSkgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGRzLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBxdWFudGlsZSgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aXplKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IC0xO1xuICAgIGRvbWFpbiA9IG5ldyBBcnJheShuKTtcbiAgICB3aGlsZSAoKytpIDwgbikgZG9tYWluW2ldID0gKChpICsgMSkgKiB4MSAtIChpIC0gbikgKiB4MCkgLyAobiArIDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCByZXNjYWxlKCkpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobiA9IChyYW5nZSA9IHNsaWNlLmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXVxuICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgIDogaSA+PSBuID8gW2RvbWFpbltuIC0gMV0sIHgxXVxuICAgICAgICA6IFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpemUoKVxuICAgICAgICAuZG9tYWluKFt4MCwgeDFdKVxuICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIG4gPSAxO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvblNlY29uZCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbk1pbnV0ZSkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiBkdXJhdGlvbk1pbnV0ZSAlIGR1cmF0aW9uSG91cjtcbiAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXI7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKCgrZGF0ZSAtIG9mZnNldCkgLyBkdXJhdGlvbkhvdXIpICogZHVyYXRpb25Ib3VyICsgb2Zmc2V0KTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIG5ld0RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbmV3RGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgbG9jYWxEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdFwiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyIGFzIHJlaW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHt0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZH0gZnJvbSBcImQzLXRpbWVcIjtcbmltcG9ydCB7dGltZUZvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQge21hcH0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBjb250aW51b3VzLCBjb3B5LCBkZWludGVycG9sYXRlTGluZWFyIGFzIGRlaW50ZXJwb2xhdGV9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcbiAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICBmb3JtYXRTZWNvbmQgPSBmb3JtYXQoXCI6JVNcIiksXG4gICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgIGZvcm1hdERheSA9IGZvcm1hdChcIiVhICVkXCIpLFxuICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgIGZvcm1hdFllYXIgPSBmb3JtYXQoXCIlWVwiKTtcblxuICB2YXIgdGlja0ludGVydmFscyA9IFtcbiAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGVdLFxuICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkgICBdLFxuICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayAgXSxcbiAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyBtb250aCwgIDMsICAzICogZHVyYXRpb25Nb250aCBdLFxuICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICBdO1xuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXG4gICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcbiAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcblxuICAgIC8vIElmIGEgZGVzaXJlZCB0aWNrIGNvdW50IGlzIHNwZWNpZmllZCwgcGljayBhIHJlYXNvbmFibGUgdGljayBpbnRlcnZhbFxuICAgIC8vIGJhc2VkIG9uIHRoZSBleHRlbnQgb2YgdGhlIGRvbWFpbiBhbmQgYSByb3VnaCBlc3RpbWF0ZSBvZiB0aWNrIHNpemUuXG4gICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICBpZiAodHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIGludGVydmFsLFxuICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbihpKSB7IHJldHVybiBpWzJdOyB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgaW50ZXJ2YWwpO1xuICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgaSA9IHRpY2tJbnRlcnZhbHNbdGFyZ2V0IC8gdGlja0ludGVydmFsc1tpIC0gMV1bMl0gPCB0aWNrSW50ZXJ2YWxzW2ldWzJdIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpLCAxKTtcbiAgICAgICAgaW50ZXJ2YWwgPSBtaWxsaXNlY29uZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RlcCA9PSBudWxsID8gaW50ZXJ2YWwgOiBpbnRlcnZhbC5ldmVyeShzdGVwKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4obWFwLmNhbGwoXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHIgPSB0MSA8IHQwLFxuICAgICAgICB0O1xuICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICB0ID0gdGlja0ludGVydmFsKGludGVydmFsLCB0MCwgdDEsIHN0ZXApO1xuICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIChpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBzdGVwKSlcbiAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKTtcbn1cbiIsImltcG9ydCB7Y2FsZW5kYXJ9IGZyb20gXCIuL3RpbWVcIjtcbmltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7dXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y01pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNhbGVuZGFyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgdXRjU2Vjb25kLCB1dGNNaWxsaXNlY29uZCwgdXRjRm9ybWF0KS5kb21haW4oW0RhdGUuVVRDKDIwMDAsIDAsIDEpLCBEYXRlLlVUQygyMDAwLCAwLCAyKV0pO1xufVxuIiwiaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgazEwID0gMSxcbiAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB0ID0gKHggLSB4MCkgKiBrMTA7XG4gICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIGsxMCA9IHgwID09PSB4MSA/IDAgOiAxIC8gKHgxIC0geDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlcXVlbnRpYWwoaW50ZXJwb2xhdG9yKS5kb21haW4oW3gwLCB4MV0pLmNsYW1wKGNsYW1wKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGl2ZXJnaW5nKGludGVycG9sYXRvcikge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAwLjUsXG4gICAgICB4MiA9IDEsXG4gICAgICBrMTAgPSAxLFxuICAgICAgazIxID0gMSxcbiAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB0ID0gMC41ICsgKCh4ID0gK3gpIC0geDEpICogKHggPCB4MSA/IGsxMCA6IGsyMSk7XG4gICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHgyID0gK19bMl0sIGsxMCA9IHgwID09PSB4MSA/IDAgOiAwLjUgLyAoeDEgLSB4MCksIGsyMSA9IHgxID09PSB4MiA/IDAgOiAwLjUgLyAoeDIgLSB4MSksIHNjYWxlKSA6IFt4MCwgeDEsIHgyXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpdmVyZ2luZyhpbnRlcnBvbGF0b3IpLmRvbWFpbihbeDAsIHgxLCB4Ml0pLmNsYW1wKGNsYW1wKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICB2YXIgbiA9IHNwZWNpZmllci5sZW5ndGggLyA2IHwgMCwgY29sb3JzID0gbmV3IEFycmF5KG4pLCBpID0gMDtcbiAgd2hpbGUgKGkgPCBuKSBjb2xvcnNbaV0gPSBcIiNcIiArIHNwZWNpZmllci5zbGljZShpICogNiwgKytpICogNik7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCB7cmdifSBmcm9tIFwiZDMtY29sb3JcIjtcblxudmFyIGMgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdmFyIHg7XG4gIHQgPSAoMC41IC0gdCkgKiBNYXRoLlBJO1xuICBjLnIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQpKSAqIHg7XG4gIGMuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYy5iID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMl8zKSkgKiB4O1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCByYW1wKGNvbG9ycyhcIjQ0MDE1NDQ0MDI1NjQ1MDQ1NzQ1MDU1OTQ2MDc1YTQ2MDg1YzQ2MGE1ZDQ2MGI1ZTQ3MGQ2MDQ3MGU2MTQ3MTA2MzQ3MTE2NDQ3MTM2NTQ4MTQ2NzQ4MTY2ODQ4MTc2OTQ4MTg2YTQ4MWE2YzQ4MWI2ZDQ4MWM2ZTQ4MWQ2ZjQ4MWY3MDQ4MjA3MTQ4MjE3MzQ4MjM3NDQ4MjQ3NTQ4MjU3NjQ4MjY3NzQ4Mjg3ODQ4Mjk3OTQ3MmE3YTQ3MmM3YTQ3MmQ3YjQ3MmU3YzQ3MmY3ZDQ2MzA3ZTQ2MzI3ZTQ2MzM3ZjQ2MzQ4MDQ1MzU4MTQ1Mzc4MTQ1Mzg4MjQ0Mzk4MzQ0M2E4MzQ0M2I4NDQzM2Q4NDQzM2U4NTQyM2Y4NTQyNDA4NjQyNDE4NjQxNDI4NzQxNDQ4NzQwNDU4ODQwNDY4ODNmNDc4ODNmNDg4OTNlNDk4OTNlNGE4OTNlNGM4YTNkNGQ4YTNkNGU4YTNjNGY4YTNjNTA4YjNiNTE4YjNiNTI4YjNhNTM4YjNhNTQ4YzM5NTU4YzM5NTY4YzM4NTg4YzM4NTk4YzM3NWE4YzM3NWI4ZDM2NWM4ZDM2NWQ4ZDM1NWU4ZDM1NWY4ZDM0NjA4ZDM0NjE4ZDMzNjI4ZDMzNjM4ZDMyNjQ4ZTMyNjU4ZTMxNjY4ZTMxNjc4ZTMxNjg4ZTMwNjk4ZTMwNmE4ZTJmNmI4ZTJmNmM4ZTJlNmQ4ZTJlNmU4ZTJlNmY4ZTJkNzA4ZTJkNzE4ZTJjNzE4ZTJjNzI4ZTJjNzM4ZTJiNzQ4ZTJiNzU4ZTJhNzY4ZTJhNzc4ZTJhNzg4ZTI5Nzk4ZTI5N2E4ZTI5N2I4ZTI4N2M4ZTI4N2Q4ZTI3N2U4ZTI3N2Y4ZTI3ODA4ZTI2ODE4ZTI2ODI4ZTI2ODI4ZTI1ODM4ZTI1ODQ4ZTI1ODU4ZTI0ODY4ZTI0ODc4ZTIzODg4ZTIzODk4ZTIzOGE4ZDIyOGI4ZDIyOGM4ZDIyOGQ4ZDIxOGU4ZDIxOGY4ZDIxOTA4ZDIxOTE4YzIwOTI4YzIwOTI4YzIwOTM4YzFmOTQ4YzFmOTU4YjFmOTY4YjFmOTc4YjFmOTg4YjFmOTk4YTFmOWE4YTFlOWI4YTFlOWM4OTFlOWQ4OTFmOWU4OTFmOWY4ODFmYTA4ODFmYTE4ODFmYTE4NzFmYTI4NzIwYTM4NjIwYTQ4NjIxYTU4NTIxYTY4NTIyYTc4NTIyYTg4NDIzYTk4MzI0YWE4MzI1YWI4MjI1YWM4MjI2YWQ4MTI3YWQ4MTI4YWU4MDI5YWY3ZjJhYjA3ZjJjYjE3ZTJkYjI3ZDJlYjM3YzJmYjQ3YzMxYjU3YjMyYjY3YTM0YjY3OTM1Yjc3OTM3Yjg3ODM4Yjk3NzNhYmE3NjNiYmI3NTNkYmM3NDNmYmM3MzQwYmQ3MjQyYmU3MTQ0YmY3MDQ2YzA2ZjQ4YzE2ZTRhYzE2ZDRjYzI2YzRlYzM2YjUwYzQ2YTUyYzU2OTU0YzU2ODU2YzY2NzU4Yzc2NTVhYzg2NDVjYzg2MzVlYzk2MjYwY2E2MDYzY2I1ZjY1Y2I1ZTY3Y2M1YzY5Y2Q1YjZjY2Q1YTZlY2U1ODcwY2Y1NzczZDA1Njc1ZDA1NDc3ZDE1MzdhZDE1MTdjZDI1MDdmZDM0ZTgxZDM0ZDg0ZDQ0Yjg2ZDU0OTg5ZDU0ODhiZDY0NjhlZDY0NTkwZDc0MzkzZDc0MTk1ZDg0MDk4ZDgzZTliZDkzYzlkZDkzYmEwZGEzOWEyZGEzN2E1ZGIzNmE4ZGIzNGFhZGMzMmFkZGMzMGIwZGQyZmIyZGQyZGI1ZGUyYmI4ZGUyOWJhZGUyOGJkZGYyNmMwZGYyNWMyZGYyM2M1ZTAyMWM4ZTAyMGNhZTExZmNkZTExZGQwZTExY2QyZTIxYmQ1ZTIxYWQ4ZTIxOWRhZTMxOWRkZTMxOGRmZTMxOGUyZTQxOGU1ZTQxOWU3ZTQxOWVhZTUxYWVjZTUxYmVmZTUxY2YxZTUxZGY0ZTYxZWY2ZTYyMGY4ZTYyMWZiZTcyM2ZkZTcyNVwiKSk7XG5cbmV4cG9ydCB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbmV4cG9ydCB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxuZXhwb3J0IHZhciBwbGFzbWEgPSByYW1wKGNvbG9ycyhcIjBkMDg4NzEwMDc4ODEzMDc4OTE2MDc4YTE5MDY4YzFiMDY4ZDFkMDY4ZTIwMDY4ZjIyMDY5MDI0MDY5MTI2MDU5MTI4MDU5MjJhMDU5MzJjMDU5NDJlMDU5NTJmMDU5NjMxMDU5NzMzMDU5NzM1MDQ5ODM3MDQ5OTM4MDQ5YTNhMDQ5YTNjMDQ5YjNlMDQ5YzNmMDQ5YzQxMDQ5ZDQzMDM5ZTQ0MDM5ZTQ2MDM5ZjQ4MDM5ZjQ5MDNhMDRiMDNhMTRjMDJhMTRlMDJhMjUwMDJhMjUxMDJhMzUzMDJhMzU1MDJhNDU2MDFhNDU4MDFhNDU5MDFhNTViMDFhNTVjMDFhNjVlMDFhNjYwMDFhNjYxMDBhNzYzMDBhNzY0MDBhNzY2MDBhNzY3MDBhODY5MDBhODZhMDBhODZjMDBhODZlMDBhODZmMDBhODcxMDBhODcyMDFhODc0MDFhODc1MDFhODc3MDFhODc4MDFhODdhMDJhODdiMDJhODdkMDNhODdlMDNhODgwMDRhODgxMDRhNzgzMDVhNzg0MDVhNzg2MDZhNjg3MDdhNjg4MDhhNjhhMDlhNThiMGFhNThkMGJhNThlMGNhNDhmMGRhNDkxMGVhMzkyMGZhMzk0MTBhMjk1MTFhMTk2MTNhMTk4MTRhMDk5MTU5ZjlhMTY5ZjljMTc5ZTlkMTg5ZDllMTk5ZGEwMWE5Y2ExMWI5YmEyMWQ5YWEzMWU5YWE1MWY5OWE2MjA5OGE3MjE5N2E4MjI5NmFhMjM5NWFiMjQ5NGFjMjY5NGFkMjc5M2FlMjg5MmIwMjk5MWIxMmE5MGIyMmI4ZmIzMmM4ZWI0MmU4ZGI1MmY4Y2I2MzA4YmI3MzE4YWI4MzI4OWJhMzM4OGJiMzQ4OGJjMzU4N2JkMzc4NmJlMzg4NWJmMzk4NGMwM2E4M2MxM2I4MmMyM2M4MWMzM2Q4MGM0M2U3ZmM1NDA3ZWM2NDE3ZGM3NDI3Y2M4NDM3YmM5NDQ3YWNhNDU3YWNiNDY3OWNjNDc3OGNjNDk3N2NkNGE3NmNlNGI3NWNmNGM3NGQwNGQ3M2QxNGU3MmQyNGY3MWQzNTE3MWQ0NTI3MGQ1NTM2ZmQ1NTQ2ZWQ2NTU2ZGQ3NTY2Y2Q4NTc2YmQ5NTg2YWRhNWE2YWRhNWI2OWRiNWM2OGRjNWQ2N2RkNWU2NmRlNWY2NWRlNjE2NGRmNjI2M2UwNjM2M2UxNjQ2MmUyNjU2MWUyNjY2MGUzNjg1ZmU0Njk1ZWU1NmE1ZGU1NmI1ZGU2NmM1Y2U3NmU1YmU3NmY1YWU4NzA1OWU5NzE1OGU5NzI1N2VhNzQ1N2ViNzU1NmViNzY1NWVjNzc1NGVkNzk1M2VkN2E1MmVlN2I1MWVmN2M1MWVmN2U1MGYwN2Y0ZmYwODA0ZWYxODE0ZGYxODM0Y2YyODQ0YmYzODU0YmYzODc0YWY0ODg0OWY0ODk0OGY1OGI0N2Y1OGM0NmY2OGQ0NWY2OGY0NGY3OTA0NGY3OTE0M2Y3OTM0MmY4OTQ0MWY4OTU0MGY5OTczZmY5OTgzZWY5OWEzZWZhOWIzZGZhOWMzY2ZhOWUzYmZiOWYzYWZiYTEzOWZiYTIzOGZjYTMzOGZjYTUzN2ZjYTYzNmZjYTgzNWZjYTkzNGZkYWIzM2ZkYWMzM2ZkYWUzMmZkYWYzMWZkYjEzMGZkYjIyZmZkYjQyZmZkYjUyZWZlYjcyZGZlYjgyY2ZlYmEyY2ZlYmIyYmZlYmQyYWZlYmUyYWZlYzAyOWZkYzIyOWZkYzMyOGZkYzUyN2ZkYzYyN2ZkYzgyN2ZkY2EyNmZkY2IyNmZjY2QyNWZjY2UyNWZjZDAyNWZjZDIyNWZiZDMyNGZiZDUyNGZiZDcyNGZhZDgyNGZhZGEyNGY5ZGMyNGY5ZGQyNWY4ZGYyNWY4ZTEyNWY3ZTIyNWY3ZTQyNWY2ZTYyNmY2ZTgyNmY1ZTkyNmY1ZWIyN2Y0ZWQyN2YzZWUyN2YzZjAyN2YyZjIyN2YxZjQyNmYxZjUyNWYwZjcyNGYwZjkyMVwiKSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7YWJzLCBhY29zLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIG1heCwgbWluLCBwaSwgc2luLCBzcXJ0LCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgIG94ID0gbG8gKiB5MDEsXG4gICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICB5MTEgPSB5MCArIG95LFxuICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXG4gICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgIGR5ID0geTEwIC0geTExLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcbiAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIHNxcnQobWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQoMCksXG4gICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGFyY0VuZEFuZ2xlLFxuICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICByLFxuICAgICAgICByMCA9ICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBkYSA9IGFicyhhMSAtIGEwKSxcbiAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAvLyBJcyBpdCBhIHBvaW50P1xuICAgIGlmICghKHIxID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSAtIGVwc2lsb24pIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIxICogY29zKGEwKSwgcjEgKiBzaW4oYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogY29zKGExKSwgcjAgKiBzaW4oYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24pICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4oYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICB0MCxcbiAgICAgICAgICB0MTtcblxuICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICBpZiAocnAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIHNpbihhcCkpLFxuICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBzaW4oYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24pIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIGlmICgoZGExIC09IHAxICogMikgPiBlcHNpbG9uKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbihhMDEpLFxuICAgICAgICAgIHgxMCA9IHIwICogY29zKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4oYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgeDExID0gcjEgKiBjb3MoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyhhMDApLFxuICAgICAgICAgICAgeTAwID0gcjAgKiBzaW4oYTAwKTtcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkpIHtcbiAgICAgICAgICB2YXIgb2MgPSBkYTAgPiBlcHNpbG9uID8gaW50ZXJzZWN0KHgwMSwgeTAxLCB4MDAsIHkwMCwgeDExLCB5MTEsIHgxMCwgeTEwKSA6IFt4MTAsIHkxMF0sXG4gICAgICAgICAgICAgIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGJ4ID0geDExIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGtjID0gMSAvIHNpbihhY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBzcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgcmMxID0gbWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShwKSB7XG4gIHJldHVybiBwWzFdO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IHBvaW50WCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICByZXR1cm4gZDtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGRlc2NlbmRpbmcgZnJvbSBcIi4vZGVzY2VuZGluZ1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5pbXBvcnQge3RhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gaWRlbnRpdHksXG4gICAgICBzb3J0VmFsdWVzID0gZGVzY2VuZGluZyxcbiAgICAgIHNvcnQgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGNvbnN0YW50KDApLFxuICAgICAgZW5kQW5nbGUgPSBjb25zdGFudCh0YXUpLFxuICAgICAgcGFkQW5nbGUgPSBjb25zdGFudCgwKTtcblxuICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIHN1bSA9IDAsXG4gICAgICAgIGluZGV4ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhcmNzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhMCA9ICtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGRhID0gTWF0aC5taW4odGF1LCBNYXRoLm1heCgtdGF1LCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcbiAgICAgICAgYTEsXG4gICAgICAgIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXG4gICAgICAgIHY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHYgPSBhcmNzW2luZGV4W2ldID0gaV0gPSArdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSkpID4gMCkge1xuICAgICAgICBzdW0gKz0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnRWYWx1ZXMoYXJjc1tpXSwgYXJjc1tqXSk7IH0pO1xuICAgIGVsc2UgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pOyB9KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgIGZvciAoaSA9IDAsIGsgPSBzdW0gPyAoZGEgLSBuICogcGEpIC8gc3VtIDogMDsgaSA8IG47ICsraSwgYTAgPSBhMSkge1xuICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcbiAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJjcztcbiAgfVxuXG4gIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogdmFsdWU7XG4gIH07XG5cbiAgcGllLnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgfTtcblxuICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0ID0gXywgc29ydFZhbHVlcyA9IG51bGwsIHBpZSkgOiBzb3J0O1xuICB9O1xuXG4gIHBpZS5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIHJldHVybiBwaWU7XG59XG4iLCJpbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vbGluZWFyXCI7XG5cbmV4cG9ydCB2YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbmZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xufVxuXG5SYWRpYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKGEsIHIpIHtcbiAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSYWRpYWwoY3VydmUoY29udGV4dCkpO1xuICB9XG5cbiAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gIHJldHVybiByYWRpYWw7XG59XG4iLCJpbXBvcnQgY3VydmVSYWRpYWwsIHtjdXJ2ZVJhZGlhbExpbmVhcn0gZnJvbSBcIi4vY3VydmUvcmFkaWFsXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lUmFkaWFsKGwpIHtcbiAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuXG4gIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbGluZVJhZGlhbChsaW5lKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpKTtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWxcIjtcbmltcG9ydCBhcmVhIGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCB7bGluZVJhZGlhbH0gZnJvbSBcIi4vbGluZVJhZGlhbFwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgYSA9IGFyZWEoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhciksXG4gICAgICBjID0gYS5jdXJ2ZSxcbiAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICB4MSA9IGEubGluZVgxLFxuICAgICAgeTAgPSBhLmxpbmVZMCxcbiAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcbiAgYS5zdGFydEFuZ2xlID0gYS54MCwgZGVsZXRlIGEueDA7XG4gIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XG4gIGEuaW5uZXJSYWRpdXMgPSBhLnkwLCBkZWxldGUgYS55MDtcbiAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgwKCkpOyB9LCBkZWxldGUgYS5saW5lWDA7XG4gIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgxKCkpOyB9LCBkZWxldGUgYS5saW5lWDE7XG4gIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkxKCkpOyB9LCBkZWxldGUgYS5saW5lWTE7XG5cbiAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuLi9wb2ludFwiO1xuaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbFwiO1xuXG5mdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0hvcml6b250YWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlVmVydGljYWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyksXG4gICAgdGFuMzBfMiA9IHRhbjMwICogMjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgIHkgPSBreSAqIHI7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICB2YXIgYSA9IHRhdSAqIGkgLyA1LFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHcgPSBNYXRoLnNxcnQoc2l6ZSksXG4gICAgICAgIHggPSAtdyAvIDI7XG4gICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICB9XG59O1xuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY2lyY2xlIGZyb20gXCIuL3N5bWJvbC9jaXJjbGVcIjtcbmltcG9ydCBjcm9zcyBmcm9tIFwiLi9zeW1ib2wvY3Jvc3NcIjtcbmltcG9ydCBkaWFtb25kIGZyb20gXCIuL3N5bWJvbC9kaWFtb25kXCI7XG5pbXBvcnQgc3RhciBmcm9tIFwiLi9zeW1ib2wvc3RhclwiO1xuaW1wb3J0IHNxdWFyZSBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlXCI7XG5pbXBvcnQgdHJpYW5nbGUgZnJvbSBcIi4vc3ltYm9sL3RyaWFuZ2xlXCI7XG5pbXBvcnQgd3llIGZyb20gXCIuL3N5bWJvbC93eWVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgdmFyIHN5bWJvbHMgPSBbXG4gIGNpcmNsZSxcbiAgY3Jvc3MsXG4gIGRpYW1vbmQsXG4gIHNxdWFyZSxcbiAgc3RhcixcbiAgdHJpYW5nbGUsXG4gIHd5ZVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB0eXBlID0gY29uc3RhbnQoY2lyY2xlKSxcbiAgICAgIHNpemUgPSBjb25zdGFudCg2NCksXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzeW1ib2woKSB7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG4gICAgdHlwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmRyYXcoY29udGV4dCwgK3NpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBzeW1ib2wudHlwZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0eXBlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgc3ltYm9sKSA6IHR5cGU7XG4gIH07XG5cbiAgc3ltYm9sLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBzeW1ib2wpIDogc2l6ZTtcbiAgfTtcblxuICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8sIHN5bWJvbCkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBzeW1ib2w7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9jb250ZXh0LmxpbmVUbygoNSAqIHRoaXMuX3gwICsgdGhpcy5feDEpIC8gNiwgKDUgKiB0aGlzLl95MCArIHRoaXMuX3kxKSAvIDYpOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MCwgeTApIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeDAsIHkwKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtCYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Q2FyZGluYWx9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbENsb3NlZH0gZnJvbSBcIi4vY2FyZGluYWxDbG9zZWRcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbE9wZW59IGZyb20gXCIuL2NhcmRpbmFsT3BlblwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbVwiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5mdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZWxzZSB0aGlzLl9wb2ludCA9IDEsIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5OYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XG4gICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG5mdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgdmFyIGksXG4gICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgbSxcbiAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gIGFbbiAtIDFdID0gMiwgYltuIC0gMV0gPSA3LCByW24gLSAxXSA9IDggKiB4W24gLSAxXSArIHhbbl07XG4gIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSBhW2ldID0gKHJbaV0gLSBhW2kgKyAxXSkgLyBiW2ldO1xuICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX3QgPSB0O1xufVxuXG5TdGVwLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGlmICh0aGlzLl9saW5lID49IDApIHRoaXMuX3QgPSAxIC0gdGhpcy5fdCwgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fdCA8PSAwKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDEsIGosIHMwLCBzMSA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgcmV0dXJuIG87XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgb2Zmc2V0Tm9uZSBmcm9tIFwiLi9vZmZzZXQvbm9uZVwiO1xuaW1wb3J0IG9yZGVyTm9uZSBmcm9tIFwiLi9vcmRlci9ub25lXCI7XG5cbmZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gIHJldHVybiBkW2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IGNvbnN0YW50KFtdKSxcbiAgICAgIG9yZGVyID0gb3JkZXJOb25lLFxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0Tm9uZSxcbiAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgdmFyIGt6ID0ga2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBpLFxuICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIG4gPSBrei5sZW5ndGgsXG4gICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBvejtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcbiAgICAgIH1cbiAgICAgIHNpLmtleSA9IGtpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIG9mZnNldChzeiwgb3opO1xuICAgIHJldHVybiBzejtcbiAgfVxuXG4gIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gIH07XG5cbiAgc3RhY2sudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3RhY2spIDogdmFsdWU7XG4gIH07XG5cbiAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBvcmRlck5vbmUgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgfTtcblxuICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gb2Zmc2V0Tm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gc3RhY2s7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIG4sIGogPSAwLCBtID0gc2VyaWVzWzBdLmxlbmd0aCwgeTsgaiA8IG07ICsraikge1xuICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSwgaiA9IDAsIGQsIGR5LCB5cCwgeW4sIG4sIG0gPSBzZXJpZXNbb3JkZXJbMF1dLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAoeXAgPSB5biA9IDAsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGR5ID0gKGQgPSBzZXJpZXNbb3JkZXJbaV1dW2pdKVsxXSAtIGRbMF0pID49IDApIHtcbiAgICAgICAgZFswXSA9IHlwLCBkWzFdID0geXAgKz0gZHk7XG4gICAgICB9IGVsc2UgaWYgKGR5IDwgMCkge1xuICAgICAgICBkWzFdID0geW4sIGRbMF0gPSB5biArPSBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbMF0gPSB5cDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaiA9IDAsIHMwID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMwLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBzMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgczEgPSAwLCBzMiA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgc2lqMSA9IHNpW2ogLSAxXVsxXSB8fCAwLFxuICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICB2YXIgc2sgPSBzZXJpZXNbb3JkZXJba11dLFxuICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgIHMzICs9IHNrajAgLSBza2oxO1xuICAgICAgfVxuICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgfVxuICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBzdW1zID0gc2VyaWVzLm1hcChzdW0pO1xuICByZXR1cm4gbm9uZShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1thXSAtIHN1bXNbYl07IH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VtKHNlcmllcykge1xuICB2YXIgcyA9IDAsIGkgPSAtMSwgbiA9IHNlcmllcy5sZW5ndGgsIHY7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgcmV0dXJuIHM7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgcmV0dXJuIGFzY2VuZGluZyhzZXJpZXMpLnJldmVyc2UoKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmVcIjtcbmltcG9ydCB7c3VtfSBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgc3VtcyA9IHNlcmllcy5tYXAoc3VtKSxcbiAgICAgIG9yZGVyID0gbm9uZShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1tiXSAtIHN1bXNbYV07IH0pLFxuICAgICAgdG9wID0gMCxcbiAgICAgIGJvdHRvbSA9IDAsXG4gICAgICB0b3BzID0gW10sXG4gICAgICBib3R0b21zID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGogPSBvcmRlcltpXTtcbiAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgIHRvcHMucHVzaChqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICBib3R0b21zLnB1c2goaik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBub25lKHNlcmllcykucmV2ZXJzZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuIiwiZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbn1cblxuUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgYWZ0ZXIgPSBub2RlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICB9XG4gICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgc2libGluZyxcbiAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHJlZDtcblxuICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl8gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICByZWQgPSBuZXh0LkM7XG4gICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgbGVmdC5VID0gbmV4dDtcbiAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgIG5leHQuVSA9IG5vZGUuVTtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICBuZXh0LlIgPSByaWdodDtcbiAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICBkbyB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLkwgfHwgIXNpYmxpbmcuTC5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5VO1xuICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLlIgPSBxLkw7XG4gIGlmIChwLlIpIHAuUi5VID0gcDtcbiAgcS5MID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuTCA9IHEuUjtcbiAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICBxLlIgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZEJsYWNrVHJlZTtcbiIsImltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvcmRlckVkZ2UobGVmdCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW3YwLCB2MV07XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdmVydGV4KSB7XG4gIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIH0gZWxzZSBpZiAoZWRnZS5sZWZ0ID09PSByaWdodCkge1xuICAgIGVkZ2VbMV0gPSB2ZXJ0ZXg7XG4gIH0gZWxzZSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgfVxufVxuXG4vLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxuZnVuY3Rpb24gY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgYiA9IGVkZ2VbMV0sXG4gICAgICBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xuICBpZiAodDEgPCAxKSBlZGdlWzFdID0gW2F4ICsgdDEgKiBkeCwgYXkgKyB0MSAqIGR5XTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3RFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciB2MSA9IGVkZ2VbMV07XG4gIGlmICh2MSkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHYwID0gZWRnZVswXSxcbiAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICByaWdodCA9IGVkZ2UucmlnaHQsXG4gICAgICBseCA9IGxlZnRbMF0sXG4gICAgICBseSA9IGxlZnRbMV0sXG4gICAgICByeCA9IHJpZ2h0WzBdLFxuICAgICAgcnkgPSByaWdodFsxXSxcbiAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgIGZ5ID0gKGx5ICsgcnkpIC8gMixcbiAgICAgIGZtLFxuICAgICAgZmI7XG5cbiAgaWYgKHJ5ID09PSBseSkge1xuICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG4gICAgaWYgKGx4ID4gcngpIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XG4gICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkxXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdIDwgeDApIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWRnZVswXSA9IHYwO1xuICBlZGdlWzFdID0gdjE7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvblxuICAgICAgICAgICAgfHwgTWF0aC5hYnMoZWRnZVswXVsxXSAtIGVkZ2VbMV1bMV0pID4gZXBzaWxvbikpIHtcbiAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Y3JlYXRlQm9yZGVyRWRnZX0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICBpQ2VsbCxcbiAgICAgIGNlbGwsXG4gICAgICBzaXRlLFxuICAgICAgaUhhbGZlZGdlLFxuICAgICAgaGFsZmVkZ2VzLFxuICAgICAgbkhhbGZlZGdlcyxcbiAgICAgIHN0YXJ0LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZW5kLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICBjb3ZlciA9IHRydWU7XG5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICBoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcztcbiAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UtLSkge1xuICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24gJiYgeTEgLSBlbmRZID4gZXBzaWxvbiA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uICYmIHgxIC0gZW5kWCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiAmJiBlbmRZIC0geTAgPiBlcHNpbG9uID8gW3gxLCBNYXRoLmFicyhzdGFydFggLSB4MSkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24gJiYgZW5kWCAtIHgwID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjaXJjbGVzLCBlcHNpbG9uMn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG5leHBvcnQgdmFyIGZpcnN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBDaXJjbGUoKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy54ID1cbiAgdGhpcy55ID1cbiAgdGhpcy5hcmMgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmN5ID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgIHJBcmMgPSBhcmMuTjtcblxuICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgclNpdGUgPSByQXJjLnNpdGU7XG5cbiAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgYnkgPSBjU2l0ZVsxXSxcbiAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICBpZiAoZCA+PSAtZXBzaWxvbjIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gIGlmIChjaXJjbGUpIHtcbiAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y3JlYXRlQ2VsbH0gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHthdHRhY2hDaXJjbGUsIGRldGFjaENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NyZWF0ZUVkZ2UsIHNldEVkZ2VFbmR9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7YmVhY2hlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICB4ID0gY2lyY2xlLngsXG4gICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgcHJldmlvdXMgPSBiZWFjaC5QLFxuICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gIGRldGFjaEJlYWNoKGJlYWNoKTtcblxuICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBuZXh0ID0gckFyYy5OO1xuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgIHJBcmMgPSBuZXh0O1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLFxuICAgICAgaUFyYztcbiAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgfVxuXG4gIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcblxuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgIGlmIChkeHIgPiBlcHNpbG9uKSB7XG4gICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxsKHNpdGUpO1xuICB2YXIgbmV3QXJjID0gY3JlYXRlQmVhY2goc2l0ZSk7XG4gIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgaWYgKGxBcmMgPT09IHJBcmMpIHtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcbiAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXJBcmMpIHsgLy8gJiYgbEFyY1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgIGF5ID0gbFNpdGVbMV0sXG4gICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgclNpdGUgPSByQXJjLnNpdGUsXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcblxuICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5mdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgcmZvY3ggPSBzaXRlWzBdLFxuICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuXG4gIHZhciBsQXJjID0gYXJjLlA7XG4gIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICBzaXRlID0gbEFyYy5zaXRlO1xuICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MixcbiAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbn1cblxuZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciByQXJjID0gYXJjLk47XG4gIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgcmV0dXJuIHNpdGVbMV0gPT09IGRpcmVjdHJpeCA/IHNpdGVbMF0gOiBJbmZpbml0eTtcbn1cbiIsImltcG9ydCB7YWRkQmVhY2gsIHJlbW92ZUJlYWNofSBmcm9tIFwiLi9CZWFjaFwiO1xuaW1wb3J0IHtzb3J0Q2VsbEhhbGZlZGdlcywgY2VsbEhhbGZlZGdlU3RhcnQsIGNsaXBDZWxsc30gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHtmaXJzdENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NsaXBFZGdlc30gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IFJlZEJsYWNrVHJlZSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgYmVhY2hlcztcbmV4cG9ydCB2YXIgY2VsbHM7XG5leHBvcnQgdmFyIGNpcmNsZXM7XG5leHBvcnQgdmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcbmltcG9ydCBEaWFncmFtLCB7ZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IERpYWdyYW0oZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4KGQsIGksIGRhdGEpIC8gZXBzaWxvbikgKiBlcHNpbG9uLCBNYXRoLnJvdW5kKHkoZCwgaSwgZGF0YSkgLyBlcHNpbG9uKSAqIGVwc2lsb25dO1xuICAgICAgcy5pbmRleCA9IGk7XG4gICAgICBzLmRhdGEgPSBkO1xuICAgICAgcmV0dXJuIHM7XG4gICAgfSksIGV4dGVudCk7XG4gIH1cblxuICB2b3Jvbm9pLnBvbHlnb25zID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnBvbHlnb25zKCk7XG4gIH07XG5cbiAgdm9yb25vaS5saW5rcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gdm9yb25vaShkYXRhKS5saW5rcygpO1xuICB9O1xuXG4gIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnRyaWFuZ2xlcygpO1xuICB9O1xuXG4gIHZvcm9ub2kueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHZvcm9ub2kpIDogeDtcbiAgfTtcblxuICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB2b3Jvbm9pKSA6IHk7XG4gIH07XG5cbiAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbW2V4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdXSwgW2V4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IF8gPT0gbnVsbCA/IG51bGwgOiBbWzAsIDBdLCBbK19bMF0sICtfWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXV07XG4gIH07XG5cbiAgcmV0dXJuIHZvcm9ub2k7XG59XG4iLCJcbnZhciBNb2R1bGUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB1bmRlZmluZWQ7XG4gIHJldHVybiAoXG5mdW5jdGlvbihNb2R1bGUpIHtcbiAgTW9kdWxlID0gTW9kdWxlIHx8IHt9O1xuXG52YXIgTW9kdWxlPXR5cGVvZiBNb2R1bGUhPT1cInVuZGVmaW5lZFwiP01vZHVsZTp7fTt2YXIgbW9kdWxlT3ZlcnJpZGVzPXt9O3ZhciBrZXk7Zm9yKGtleSBpbiBNb2R1bGUpe2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKXttb2R1bGVPdmVycmlkZXNba2V5XT1Nb2R1bGVba2V5XX19TW9kdWxlW1wiYXJndW1lbnRzXCJdPVtdO01vZHVsZVtcInRoaXNQcm9ncmFtXCJdPVwiLi90aGlzLnByb2dyYW1cIjtNb2R1bGVbXCJxdWl0XCJdPShmdW5jdGlvbihzdGF0dXMsdG9UaHJvdyl7dGhyb3cgdG9UaHJvd30pO01vZHVsZVtcInByZVJ1blwiXT1bXTtNb2R1bGVbXCJwb3N0UnVuXCJdPVtdO3ZhciBFTlZJUk9OTUVOVF9JU19XRUI9ZmFsc2U7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfU0hFTEw9ZmFsc2U7RU5WSVJPTk1FTlRfSVNfV0VCPXR5cGVvZiB3aW5kb3c9PT1cIm9iamVjdFwiO0VOVklST05NRU5UX0lTX1dPUktFUj10eXBlb2YgaW1wb3J0U2NyaXB0cz09PVwiZnVuY3Rpb25cIjtFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT09XCJvYmplY3RcIiYmdHlwZW9mIHJlcXVpcmU9PT1cImZ1bmN0aW9uXCImJiFFTlZJUk9OTUVOVF9JU19XRUImJiFFTlZJUk9OTUVOVF9JU19XT1JLRVI7RU5WSVJPTk1FTlRfSVNfU0hFTEw9IUVOVklST05NRU5UX0lTX1dFQiYmIUVOVklST05NRU5UX0lTX05PREUmJiFFTlZJUk9OTUVOVF9JU19XT1JLRVI7dmFyIHNjcmlwdERpcmVjdG9yeT1cIlwiO2Z1bmN0aW9uIGxvY2F0ZUZpbGUocGF0aCl7aWYoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSl7cmV0dXJuIE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0ocGF0aCxzY3JpcHREaXJlY3RvcnkpfWVsc2V7cmV0dXJuIHNjcmlwdERpcmVjdG9yeStwYXRofX1pZihFTlZJUk9OTUVOVF9JU19OT0RFKXtzY3JpcHREaXJlY3Rvcnk9X19kaXJuYW1lK1wiL1wiO3ZhciBub2RlRlM7dmFyIG5vZGVQYXRoO01vZHVsZVtcInJlYWRcIl09ZnVuY3Rpb24gc2hlbGxfcmVhZChmaWxlbmFtZSxiaW5hcnkpe3ZhciByZXQ7aWYoIW5vZGVGUylub2RlRlM9cmVxdWlyZShcImZzXCIpO2lmKCFub2RlUGF0aClub2RlUGF0aD1yZXF1aXJlKFwicGF0aFwiKTtmaWxlbmFtZT1ub2RlUGF0aFtcIm5vcm1hbGl6ZVwiXShmaWxlbmFtZSk7cmV0PW5vZGVGU1tcInJlYWRGaWxlU3luY1wiXShmaWxlbmFtZSk7cmV0dXJuIGJpbmFyeT9yZXQ6cmV0LnRvU3RyaW5nKCl9O01vZHVsZVtcInJlYWRCaW5hcnlcIl09ZnVuY3Rpb24gcmVhZEJpbmFyeShmaWxlbmFtZSl7dmFyIHJldD1Nb2R1bGVbXCJyZWFkXCJdKGZpbGVuYW1lLHRydWUpO2lmKCFyZXQuYnVmZmVyKXtyZXQ9bmV3IFVpbnQ4QXJyYXkocmV0KX1hc3NlcnQocmV0LmJ1ZmZlcik7cmV0dXJuIHJldH07aWYocHJvY2Vzc1tcImFyZ3ZcIl0ubGVuZ3RoPjEpe01vZHVsZVtcInRoaXNQcm9ncmFtXCJdPXByb2Nlc3NbXCJhcmd2XCJdWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIil9TW9kdWxlW1wiYXJndW1lbnRzXCJdPXByb2Nlc3NbXCJhcmd2XCJdLnNsaWNlKDIpO3Byb2Nlc3NbXCJvblwiXShcInVuY2F1Z2h0RXhjZXB0aW9uXCIsKGZ1bmN0aW9uKGV4KXtpZighKGV4IGluc3RhbmNlb2YgRXhpdFN0YXR1cykpe3Rocm93IGV4fX0pKTtwcm9jZXNzW1wib25cIl0oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwoZnVuY3Rpb24ocmVhc29uLHApe3Byb2Nlc3NbXCJleGl0XCJdKDEpfSkpO01vZHVsZVtcInF1aXRcIl09KGZ1bmN0aW9uKHN0YXR1cyl7cHJvY2Vzc1tcImV4aXRcIl0oc3RhdHVzKX0pO01vZHVsZVtcImluc3BlY3RcIl09KGZ1bmN0aW9uKCl7cmV0dXJuXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwifSl9ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19TSEVMTCl7aWYodHlwZW9mIHJlYWQhPVwidW5kZWZpbmVkXCIpe01vZHVsZVtcInJlYWRcIl09ZnVuY3Rpb24gc2hlbGxfcmVhZChmKXtyZXR1cm4gcmVhZChmKX19TW9kdWxlW1wicmVhZEJpbmFyeVwiXT1mdW5jdGlvbiByZWFkQmluYXJ5KGYpe3ZhciBkYXRhO2lmKHR5cGVvZiByZWFkYnVmZmVyPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihmKSl9ZGF0YT1yZWFkKGYsXCJiaW5hcnlcIik7YXNzZXJ0KHR5cGVvZiBkYXRhPT09XCJvYmplY3RcIik7cmV0dXJuIGRhdGF9O2lmKHR5cGVvZiBzY3JpcHRBcmdzIT1cInVuZGVmaW5lZFwiKXtNb2R1bGVbXCJhcmd1bWVudHNcIl09c2NyaXB0QXJnc31lbHNlIGlmKHR5cGVvZiBhcmd1bWVudHMhPVwidW5kZWZpbmVkXCIpe01vZHVsZVtcImFyZ3VtZW50c1wiXT1hcmd1bWVudHN9aWYodHlwZW9mIHF1aXQ9PT1cImZ1bmN0aW9uXCIpe01vZHVsZVtcInF1aXRcIl09KGZ1bmN0aW9uKHN0YXR1cyl7cXVpdChzdGF0dXMpfSl9fWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpe2lmKEVOVklST05NRU5UX0lTX1dFQil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7c2NyaXB0RGlyZWN0b3J5PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjfX1lbHNle3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWZ9aWYoX3NjcmlwdERpcil7c2NyaXB0RGlyZWN0b3J5PV9zY3JpcHREaXJ9aWYoc2NyaXB0RGlyZWN0b3J5LmluZGV4T2YoXCJibG9iOlwiKSE9PTApe3NjcmlwdERpcmVjdG9yeT1zY3JpcHREaXJlY3Rvcnkuc3BsaXQoXCIvXCIpLnNsaWNlKDAsLTEpLmpvaW4oXCIvXCIpK1wiL1wifWVsc2V7c2NyaXB0RGlyZWN0b3J5PVwiXCJ9TW9kdWxlW1wicmVhZFwiXT1mdW5jdGlvbiBzaGVsbF9yZWFkKHVybCl7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO3JldHVybiB4aHIucmVzcG9uc2VUZXh0fTtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe01vZHVsZVtcInJlYWRCaW5hcnlcIl09ZnVuY3Rpb24gcmVhZEJpbmFyeSh1cmwpe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX19TW9kdWxlW1wicmVhZEFzeW5jXCJdPWZ1bmN0aW9uIHJlYWRBc3luYyh1cmwsb25sb2FkLG9uZXJyb3Ipe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLHRydWUpO3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO3hoci5vbmxvYWQ9ZnVuY3Rpb24geGhyX29ubG9hZCgpe2lmKHhoci5zdGF0dXM9PTIwMHx8eGhyLnN0YXR1cz09MCYmeGhyLnJlc3BvbnNlKXtvbmxvYWQoeGhyLnJlc3BvbnNlKTtyZXR1cm59b25lcnJvcigpfTt4aHIub25lcnJvcj1vbmVycm9yO3hoci5zZW5kKG51bGwpfTtNb2R1bGVbXCJzZXRXaW5kb3dUaXRsZVwiXT0oZnVuY3Rpb24odGl0bGUpe2RvY3VtZW50LnRpdGxlPXRpdGxlfSl9ZWxzZXt9dmFyIG91dD1Nb2R1bGVbXCJwcmludFwiXXx8KHR5cGVvZiBjb25zb2xlIT09XCJ1bmRlZmluZWRcIj9jb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOnR5cGVvZiBwcmludCE9PVwidW5kZWZpbmVkXCI/cHJpbnQ6bnVsbCk7dmFyIGVycj1Nb2R1bGVbXCJwcmludEVyclwiXXx8KHR5cGVvZiBwcmludEVyciE9PVwidW5kZWZpbmVkXCI/cHJpbnRFcnI6dHlwZW9mIGNvbnNvbGUhPT1cInVuZGVmaW5lZFwiJiZjb25zb2xlLndhcm4uYmluZChjb25zb2xlKXx8b3V0KTtmb3Ioa2V5IGluIG1vZHVsZU92ZXJyaWRlcyl7aWYobW9kdWxlT3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGtleSkpe01vZHVsZVtrZXldPW1vZHVsZU92ZXJyaWRlc1trZXldfX1tb2R1bGVPdmVycmlkZXM9dW5kZWZpbmVkO3ZhciBTVEFDS19BTElHTj0xNjtmdW5jdGlvbiBzdGF0aWNBbGxvYyhzaXplKXt2YXIgcmV0PVNUQVRJQ1RPUDtTVEFUSUNUT1A9U1RBVElDVE9QK3NpemUrMTUmLTE2O3JldHVybiByZXR9ZnVuY3Rpb24gZHluYW1pY0FsbG9jKHNpemUpe3ZhciByZXQ9SEVBUDMyW0RZTkFNSUNUT1BfUFRSPj4yXTt2YXIgZW5kPXJldCtzaXplKzE1Ji0xNjtIRUFQMzJbRFlOQU1JQ1RPUF9QVFI+PjJdPWVuZDtpZihlbmQ+PVRPVEFMX01FTU9SWSl7dmFyIHN1Y2Nlc3M9ZW5sYXJnZU1lbW9yeSgpO2lmKCFzdWNjZXNzKXtIRUFQMzJbRFlOQU1JQ1RPUF9QVFI+PjJdPXJldDtyZXR1cm4gMH19cmV0dXJuIHJldH1mdW5jdGlvbiBhbGlnbk1lbW9yeShzaXplLGZhY3Rvcil7aWYoIWZhY3RvcilmYWN0b3I9U1RBQ0tfQUxJR047dmFyIHJldD1zaXplPU1hdGguY2VpbChzaXplL2ZhY3RvcikqZmFjdG9yO3JldHVybiByZXR9ZnVuY3Rpb24gZ2V0TmF0aXZlVHlwZVNpemUodHlwZSl7c3dpdGNoKHR5cGUpe2Nhc2VcImkxXCI6Y2FzZVwiaThcIjpyZXR1cm4gMTtjYXNlXCJpMTZcIjpyZXR1cm4gMjtjYXNlXCJpMzJcIjpyZXR1cm4gNDtjYXNlXCJpNjRcIjpyZXR1cm4gODtjYXNlXCJmbG9hdFwiOnJldHVybiA0O2Nhc2VcImRvdWJsZVwiOnJldHVybiA4O2RlZmF1bHQ6e2lmKHR5cGVbdHlwZS5sZW5ndGgtMV09PT1cIipcIil7cmV0dXJuIDR9ZWxzZSBpZih0eXBlWzBdPT09XCJpXCIpe3ZhciBiaXRzPXBhcnNlSW50KHR5cGUuc3Vic3RyKDEpKTthc3NlcnQoYml0cyU4PT09MCk7cmV0dXJuIGJpdHMvOH1lbHNle3JldHVybiAwfX19fWZ1bmN0aW9uIHdhcm5PbmNlKHRleHQpe2lmKCF3YXJuT25jZS5zaG93bil3YXJuT25jZS5zaG93bj17fTtpZighd2Fybk9uY2Uuc2hvd25bdGV4dF0pe3dhcm5PbmNlLnNob3duW3RleHRdPTE7ZXJyKHRleHQpfX12YXIgYXNtMndhc21JbXBvcnRzPXtcImY2NC1yZW1cIjooZnVuY3Rpb24oeCx5KXtyZXR1cm4geCV5fSksXCJkZWJ1Z2dlclwiOihmdW5jdGlvbigpe2RlYnVnZ2VyfSl9O3ZhciBmdW5jdGlvblBvaW50ZXJzPW5ldyBBcnJheSgwKTt2YXIgR0xPQkFMX0JBU0U9MTAyNDt2YXIgQUJPUlQ9MDt2YXIgRVhJVFNUQVRVUz0wO2Z1bmN0aW9uIGFzc2VydChjb25kaXRpb24sdGV4dCl7aWYoIWNvbmRpdGlvbil7YWJvcnQoXCJBc3NlcnRpb24gZmFpbGVkOiBcIit0ZXh0KX19ZnVuY3Rpb24gZ2V0Q0Z1bmMoaWRlbnQpe3ZhciBmdW5jPU1vZHVsZVtcIl9cIitpZGVudF07YXNzZXJ0KGZ1bmMsXCJDYW5ub3QgY2FsbCB1bmtub3duIGZ1bmN0aW9uIFwiK2lkZW50K1wiLCBtYWtlIHN1cmUgaXQgaXMgZXhwb3J0ZWRcIik7cmV0dXJuIGZ1bmN9dmFyIEpTZnVuY3M9e1wic3RhY2tTYXZlXCI6KGZ1bmN0aW9uKCl7c3RhY2tTYXZlKCl9KSxcInN0YWNrUmVzdG9yZVwiOihmdW5jdGlvbigpe3N0YWNrUmVzdG9yZSgpfSksXCJhcnJheVRvQ1wiOihmdW5jdGlvbihhcnIpe3ZhciByZXQ9c3RhY2tBbGxvYyhhcnIubGVuZ3RoKTt3cml0ZUFycmF5VG9NZW1vcnkoYXJyLHJldCk7cmV0dXJuIHJldH0pLFwic3RyaW5nVG9DXCI6KGZ1bmN0aW9uKHN0cil7dmFyIHJldD0wO2lmKHN0ciE9PW51bGwmJnN0ciE9PXVuZGVmaW5lZCYmc3RyIT09MCl7dmFyIGxlbj0oc3RyLmxlbmd0aDw8MikrMTtyZXQ9c3RhY2tBbGxvYyhsZW4pO3N0cmluZ1RvVVRGOChzdHIscmV0LGxlbil9cmV0dXJuIHJldH0pfTt2YXIgdG9DPXtcInN0cmluZ1wiOkpTZnVuY3NbXCJzdHJpbmdUb0NcIl0sXCJhcnJheVwiOkpTZnVuY3NbXCJhcnJheVRvQ1wiXX07ZnVuY3Rpb24gY2NhbGwoaWRlbnQscmV0dXJuVHlwZSxhcmdUeXBlcyxhcmdzLG9wdHMpe2Z1bmN0aW9uIGNvbnZlcnRSZXR1cm5WYWx1ZShyZXQpe2lmKHJldHVyblR5cGU9PT1cInN0cmluZ1wiKXJldHVybiBQb2ludGVyX3N0cmluZ2lmeShyZXQpO2lmKHJldHVyblR5cGU9PT1cImJvb2xlYW5cIilyZXR1cm4gQm9vbGVhbihyZXQpO3JldHVybiByZXR9dmFyIGZ1bmM9Z2V0Q0Z1bmMoaWRlbnQpO3ZhciBjQXJncz1bXTt2YXIgc3RhY2s9MDtpZihhcmdzKXtmb3IodmFyIGk9MDtpPGFyZ3MubGVuZ3RoO2krKyl7dmFyIGNvbnZlcnRlcj10b0NbYXJnVHlwZXNbaV1dO2lmKGNvbnZlcnRlcil7aWYoc3RhY2s9PT0wKXN0YWNrPXN0YWNrU2F2ZSgpO2NBcmdzW2ldPWNvbnZlcnRlcihhcmdzW2ldKX1lbHNle2NBcmdzW2ldPWFyZ3NbaV19fX12YXIgcmV0PWZ1bmMuYXBwbHkobnVsbCxjQXJncyk7cmV0PWNvbnZlcnRSZXR1cm5WYWx1ZShyZXQpO2lmKHN0YWNrIT09MClzdGFja1Jlc3RvcmUoc3RhY2spO3JldHVybiByZXR9ZnVuY3Rpb24gY3dyYXAoaWRlbnQscmV0dXJuVHlwZSxhcmdUeXBlcyxvcHRzKXthcmdUeXBlcz1hcmdUeXBlc3x8W107dmFyIG51bWVyaWNBcmdzPWFyZ1R5cGVzLmV2ZXJ5KChmdW5jdGlvbih0eXBlKXtyZXR1cm4gdHlwZT09PVwibnVtYmVyXCJ9KSk7dmFyIG51bWVyaWNSZXQ9cmV0dXJuVHlwZSE9PVwic3RyaW5nXCI7aWYobnVtZXJpY1JldCYmbnVtZXJpY0FyZ3MmJiFvcHRzKXtyZXR1cm4gZ2V0Q0Z1bmMoaWRlbnQpfXJldHVybihmdW5jdGlvbigpe3JldHVybiBjY2FsbChpZGVudCxyZXR1cm5UeXBlLGFyZ1R5cGVzLGFyZ3VtZW50cyxvcHRzKX0pfWZ1bmN0aW9uIHNldFZhbHVlKHB0cix2YWx1ZSx0eXBlLG5vU2FmZSl7dHlwZT10eXBlfHxcImk4XCI7aWYodHlwZS5jaGFyQXQodHlwZS5sZW5ndGgtMSk9PT1cIipcIil0eXBlPVwiaTMyXCI7c3dpdGNoKHR5cGUpe2Nhc2VcImkxXCI6SEVBUDhbcHRyPj4wXT12YWx1ZTticmVhaztjYXNlXCJpOFwiOkhFQVA4W3B0cj4+MF09dmFsdWU7YnJlYWs7Y2FzZVwiaTE2XCI6SEVBUDE2W3B0cj4+MV09dmFsdWU7YnJlYWs7Y2FzZVwiaTMyXCI6SEVBUDMyW3B0cj4+Ml09dmFsdWU7YnJlYWs7Y2FzZVwiaTY0XCI6dGVtcEk2ND1bdmFsdWU+Pj4wLCh0ZW1wRG91YmxlPXZhbHVlLCtNYXRoX2Ficyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/KE1hdGhfbWluKCtNYXRoX2Zsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSl8MCk+Pj4wOn5+K01hdGhfY2VpbCgodGVtcERvdWJsZS0gKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbcHRyPj4yXT10ZW1wSTY0WzBdLEhFQVAzMltwdHIrND4+Ml09dGVtcEk2NFsxXTticmVhaztjYXNlXCJmbG9hdFwiOkhFQVBGMzJbcHRyPj4yXT12YWx1ZTticmVhaztjYXNlXCJkb3VibGVcIjpIRUFQRjY0W3B0cj4+M109dmFsdWU7YnJlYWs7ZGVmYXVsdDphYm9ydChcImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6IFwiK3R5cGUpfX12YXIgQUxMT0NfTk9STUFMPTA7dmFyIEFMTE9DX1NUQVRJQz0yO3ZhciBBTExPQ19OT05FPTQ7ZnVuY3Rpb24gYWxsb2NhdGUoc2xhYix0eXBlcyxhbGxvY2F0b3IscHRyKXt2YXIgemVyb2luaXQsc2l6ZTtpZih0eXBlb2Ygc2xhYj09PVwibnVtYmVyXCIpe3plcm9pbml0PXRydWU7c2l6ZT1zbGFifWVsc2V7emVyb2luaXQ9ZmFsc2U7c2l6ZT1zbGFiLmxlbmd0aH12YXIgc2luZ2xlVHlwZT10eXBlb2YgdHlwZXM9PT1cInN0cmluZ1wiP3R5cGVzOm51bGw7dmFyIHJldDtpZihhbGxvY2F0b3I9PUFMTE9DX05PTkUpe3JldD1wdHJ9ZWxzZXtyZXQ9W3R5cGVvZiBfbWFsbG9jPT09XCJmdW5jdGlvblwiP19tYWxsb2M6c3RhdGljQWxsb2Msc3RhY2tBbGxvYyxzdGF0aWNBbGxvYyxkeW5hbWljQWxsb2NdW2FsbG9jYXRvcj09PXVuZGVmaW5lZD9BTExPQ19TVEFUSUM6YWxsb2NhdG9yXShNYXRoLm1heChzaXplLHNpbmdsZVR5cGU/MTp0eXBlcy5sZW5ndGgpKX1pZih6ZXJvaW5pdCl7dmFyIHN0b3A7cHRyPXJldDthc3NlcnQoKHJldCYzKT09MCk7c3RvcD1yZXQrKHNpemUmfjMpO2Zvcig7cHRyPHN0b3A7cHRyKz00KXtIRUFQMzJbcHRyPj4yXT0wfXN0b3A9cmV0K3NpemU7d2hpbGUocHRyPHN0b3Ape0hFQVA4W3B0cisrPj4wXT0wfXJldHVybiByZXR9aWYoc2luZ2xlVHlwZT09PVwiaThcIil7aWYoc2xhYi5zdWJhcnJheXx8c2xhYi5zbGljZSl7SEVBUFU4LnNldChzbGFiLHJldCl9ZWxzZXtIRUFQVTguc2V0KG5ldyBVaW50OEFycmF5KHNsYWIpLHJldCl9cmV0dXJuIHJldH12YXIgaT0wLHR5cGUsdHlwZVNpemUscHJldmlvdXNUeXBlO3doaWxlKGk8c2l6ZSl7dmFyIGN1cnI9c2xhYltpXTt0eXBlPXNpbmdsZVR5cGV8fHR5cGVzW2ldO2lmKHR5cGU9PT0wKXtpKys7Y29udGludWV9aWYodHlwZT09XCJpNjRcIil0eXBlPVwiaTMyXCI7c2V0VmFsdWUocmV0K2ksY3Vycix0eXBlKTtpZihwcmV2aW91c1R5cGUhPT10eXBlKXt0eXBlU2l6ZT1nZXROYXRpdmVUeXBlU2l6ZSh0eXBlKTtwcmV2aW91c1R5cGU9dHlwZX1pKz10eXBlU2l6ZX1yZXR1cm4gcmV0fWZ1bmN0aW9uIGdldE1lbW9yeShzaXplKXtpZighc3RhdGljU2VhbGVkKXJldHVybiBzdGF0aWNBbGxvYyhzaXplKTtpZighcnVudGltZUluaXRpYWxpemVkKXJldHVybiBkeW5hbWljQWxsb2Moc2l6ZSk7cmV0dXJuIF9tYWxsb2Moc2l6ZSl9ZnVuY3Rpb24gUG9pbnRlcl9zdHJpbmdpZnkocHRyLGxlbmd0aCl7aWYobGVuZ3RoPT09MHx8IXB0cilyZXR1cm5cIlwiO3ZhciBoYXNVdGY9MDt2YXIgdDt2YXIgaT0wO3doaWxlKDEpe3Q9SEVBUFU4W3B0citpPj4wXTtoYXNVdGZ8PXQ7aWYodD09MCYmIWxlbmd0aClicmVhaztpKys7aWYobGVuZ3RoJiZpPT1sZW5ndGgpYnJlYWt9aWYoIWxlbmd0aClsZW5ndGg9aTt2YXIgcmV0PVwiXCI7aWYoaGFzVXRmPDEyOCl7dmFyIE1BWF9DSFVOSz0xMDI0O3ZhciBjdXJyO3doaWxlKGxlbmd0aD4wKXtjdXJyPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLEhFQVBVOC5zdWJhcnJheShwdHIscHRyK01hdGgubWluKGxlbmd0aCxNQVhfQ0hVTkspKSk7cmV0PXJldD9yZXQrY3VycjpjdXJyO3B0cis9TUFYX0NIVU5LO2xlbmd0aC09TUFYX0NIVU5LfXJldHVybiByZXR9cmV0dXJuIFVURjhUb1N0cmluZyhwdHIpfXZhciBVVEY4RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dW5kZWZpbmVkO2Z1bmN0aW9uIFVURjhBcnJheVRvU3RyaW5nKHU4QXJyYXksaWR4KXt2YXIgZW5kUHRyPWlkeDt3aGlsZSh1OEFycmF5W2VuZFB0cl0pKytlbmRQdHI7aWYoZW5kUHRyLWlkeD4xNiYmdThBcnJheS5zdWJhcnJheSYmVVRGOERlY29kZXIpe3JldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUodThBcnJheS5zdWJhcnJheShpZHgsZW5kUHRyKSl9ZWxzZXt2YXIgdTAsdTEsdTIsdTMsdTQsdTU7dmFyIHN0cj1cIlwiO3doaWxlKDEpe3UwPXU4QXJyYXlbaWR4KytdO2lmKCF1MClyZXR1cm4gc3RyO2lmKCEodTAmMTI4KSl7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTtjb250aW51ZX11MT11OEFycmF5W2lkeCsrXSY2MztpZigodTAmMjI0KT09MTkyKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoKHUwJjMxKTw8Nnx1MSk7Y29udGludWV9dTI9dThBcnJheVtpZHgrK10mNjM7aWYoKHUwJjI0MCk9PTIyNCl7dTA9KHUwJjE1KTw8MTJ8dTE8PDZ8dTJ9ZWxzZXt1Mz11OEFycmF5W2lkeCsrXSY2MztpZigodTAmMjQ4KT09MjQwKXt1MD0odTAmNyk8PDE4fHUxPDwxMnx1Mjw8Nnx1M31lbHNle3U0PXU4QXJyYXlbaWR4KytdJjYzO2lmKCh1MCYyNTIpPT0yNDgpe3UwPSh1MCYzKTw8MjR8dTE8PDE4fHUyPDwxMnx1Mzw8Nnx1NH1lbHNle3U1PXU4QXJyYXlbaWR4KytdJjYzO3UwPSh1MCYxKTw8MzB8dTE8PDI0fHUyPDwxOHx1Mzw8MTJ8dTQ8PDZ8dTV9fX1pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKX1lbHNle3ZhciBjaD11MC02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfX19fWZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIpe3JldHVybiBVVEY4QXJyYXlUb1N0cmluZyhIRUFQVTgscHRyKX1mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsb3V0VThBcnJheSxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKXtpZighKG1heEJ5dGVzVG9Xcml0ZT4wKSlyZXR1cm4gMDt2YXIgc3RhcnRJZHg9b3V0SWR4O3ZhciBlbmRJZHg9b3V0SWR4K21heEJ5dGVzVG9Xcml0ZS0xO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl7dmFyIHUxPXN0ci5jaGFyQ29kZUF0KCsraSk7dT02NTUzNisoKHUmMTAyMyk8PDEwKXx1MSYxMDIzfWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7b3V0VThBcnJheVtvdXRJZHgrK109dX1lbHNlIGlmKHU8PTIwNDcpe2lmKG91dElkeCsxPj1lbmRJZHgpYnJlYWs7b3V0VThBcnJheVtvdXRJZHgrK109MTkyfHU+PjY7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD02NTUzNSl7aWYob3V0SWR4KzI+PWVuZElkeClicmVhaztvdXRVOEFycmF5W291dElkeCsrXT0yMjR8dT4+MTI7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHU+PjYmNjM7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD0yMDk3MTUxKXtpZihvdXRJZHgrMz49ZW5kSWR4KWJyZWFrO291dFU4QXJyYXlbb3V0SWR4KytdPTI0MHx1Pj4xODtvdXRVOEFycmF5W291dElkeCsrXT0xMjh8dT4+MTImNjM7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHU+PjYmNjM7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD02NzEwODg2Myl7aWYob3V0SWR4KzQ+PWVuZElkeClicmVhaztvdXRVOEFycmF5W291dElkeCsrXT0yNDh8dT4+MjQ7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHU+PjE4JjYzO291dFU4QXJyYXlbb3V0SWR4KytdPTEyOHx1Pj4xMiY2MztvdXRVOEFycmF5W291dElkeCsrXT0xMjh8dT4+NiY2MztvdXRVOEFycmF5W291dElkeCsrXT0xMjh8dSY2M31lbHNle2lmKG91dElkeCs1Pj1lbmRJZHgpYnJlYWs7b3V0VThBcnJheVtvdXRJZHgrK109MjUyfHU+PjMwO291dFU4QXJyYXlbb3V0SWR4KytdPTEyOHx1Pj4yNCY2MztvdXRVOEFycmF5W291dElkeCsrXT0xMjh8dT4+MTgmNjM7b3V0VThBcnJheVtvdXRJZHgrK109MTI4fHU+PjEyJjYzO291dFU4QXJyYXlbb3V0SWR4KytdPTEyOHx1Pj42JjYzO291dFU4QXJyYXlbb3V0SWR4KytdPTEyOHx1JjYzfX1vdXRVOEFycmF5W291dElkeF09MDtyZXR1cm4gb3V0SWR4LXN0YXJ0SWR4fWZ1bmN0aW9uIHN0cmluZ1RvVVRGOChzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7cmV0dXJuIHN0cmluZ1RvVVRGOEFycmF5KHN0cixIRUFQVTgsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl9ZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl1PTY1NTM2KygodSYxMDIzKTw8MTApfHN0ci5jaGFyQ29kZUF0KCsraSkmMTAyMztpZih1PD0xMjcpeysrbGVufWVsc2UgaWYodTw9MjA0Nyl7bGVuKz0yfWVsc2UgaWYodTw9NjU1MzUpe2xlbis9M31lbHNlIGlmKHU8PTIwOTcxNTEpe2xlbis9NH1lbHNlIGlmKHU8PTY3MTA4ODYzKXtsZW4rPTV9ZWxzZXtsZW4rPTZ9fXJldHVybiBsZW59dmFyIFVURjE2RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0Zi0xNmxlXCIpOnVuZGVmaW5lZDtmdW5jdGlvbiBhbGxvY2F0ZVVURjgoc3RyKXt2YXIgc2l6ZT1sZW5ndGhCeXRlc1VURjgoc3RyKSsxO3ZhciByZXQ9X21hbGxvYyhzaXplKTtpZihyZXQpc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEhFQVA4LHJldCxzaXplKTtyZXR1cm4gcmV0fWZ1bmN0aW9uIGRlbWFuZ2xlKGZ1bmMpe3JldHVybiBmdW5jfWZ1bmN0aW9uIGRlbWFuZ2xlQWxsKHRleHQpe3ZhciByZWdleD0vX19aW1xcd1xcZF9dKy9nO3JldHVybiB0ZXh0LnJlcGxhY2UocmVnZXgsKGZ1bmN0aW9uKHgpe3ZhciB5PWRlbWFuZ2xlKHgpO3JldHVybiB4PT09eT94OngrXCIgW1wiK3krXCJdXCJ9KSl9ZnVuY3Rpb24ganNTdGFja1RyYWNlKCl7dmFyIGVycj1uZXcgRXJyb3I7aWYoIWVyci5zdGFjayl7dHJ5e3Rocm93IG5ldyBFcnJvcigwKX1jYXRjaChlKXtlcnI9ZX1pZighZXJyLnN0YWNrKXtyZXR1cm5cIihubyBzdGFjayB0cmFjZSBhdmFpbGFibGUpXCJ9fXJldHVybiBlcnIuc3RhY2sudG9TdHJpbmcoKX1mdW5jdGlvbiBzdGFja1RyYWNlKCl7dmFyIGpzPWpzU3RhY2tUcmFjZSgpO2lmKE1vZHVsZVtcImV4dHJhU3RhY2tUcmFjZVwiXSlqcys9XCJcXG5cIitNb2R1bGVbXCJleHRyYVN0YWNrVHJhY2VcIl0oKTtyZXR1cm4gZGVtYW5nbGVBbGwoanMpfXZhciBXQVNNX1BBR0VfU0laRT02NTUzNjt2YXIgQVNNSlNfUEFHRV9TSVpFPTE2Nzc3MjE2O2Z1bmN0aW9uIGFsaWduVXAoeCxtdWx0aXBsZSl7aWYoeCVtdWx0aXBsZT4wKXt4Kz1tdWx0aXBsZS14JW11bHRpcGxlfXJldHVybiB4fXZhciBidWZmZXIsSEVBUDgsSEVBUFU4LEhFQVAxNixIRUFQVTE2LEhFQVAzMixIRUFQVTMyLEhFQVBGMzIsSEVBUEY2NDtmdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXIoYnVmKXtNb2R1bGVbXCJidWZmZXJcIl09YnVmZmVyPWJ1Zn1mdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXJWaWV3cygpe01vZHVsZVtcIkhFQVA4XCJdPUhFQVA4PW5ldyBJbnQ4QXJyYXkoYnVmZmVyKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGJ1ZmZlcik7TW9kdWxlW1wiSEVBUDMyXCJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShidWZmZXIpO01vZHVsZVtcIkhFQVBVOFwiXT1IRUFQVTg9bmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtNb2R1bGVbXCJIRUFQVTE2XCJdPUhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGJ1ZmZlcik7TW9kdWxlW1wiSEVBUFUzMlwiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShidWZmZXIpO01vZHVsZVtcIkhFQVBGMzJcIl09SEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGJ1ZmZlcik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKX12YXIgU1RBVElDX0JBU0UsU1RBVElDVE9QLHN0YXRpY1NlYWxlZDt2YXIgU1RBQ0tfQkFTRSxTVEFDS1RPUCxTVEFDS19NQVg7dmFyIERZTkFNSUNfQkFTRSxEWU5BTUlDVE9QX1BUUjtTVEFUSUNfQkFTRT1TVEFUSUNUT1A9U1RBQ0tfQkFTRT1TVEFDS1RPUD1TVEFDS19NQVg9RFlOQU1JQ19CQVNFPURZTkFNSUNUT1BfUFRSPTA7c3RhdGljU2VhbGVkPWZhbHNlO2Z1bmN0aW9uIGFib3J0T25DYW5ub3RHcm93TWVtb3J5KCl7YWJvcnQoXCJDYW5ub3QgZW5sYXJnZSBtZW1vcnkgYXJyYXlzLiBFaXRoZXIgKDEpIGNvbXBpbGUgd2l0aCAgLXMgVE9UQUxfTUVNT1JZPVggIHdpdGggWCBoaWdoZXIgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSBcIitUT1RBTF9NRU1PUlkrXCIsICgyKSBjb21waWxlIHdpdGggIC1zIEFMTE9XX01FTU9SWV9HUk9XVEg9MSAgd2hpY2ggYWxsb3dzIGluY3JlYXNpbmcgdGhlIHNpemUgYXQgcnVudGltZSwgb3IgKDMpIGlmIHlvdSB3YW50IG1hbGxvYyB0byByZXR1cm4gTlVMTCAoMCkgaW5zdGVhZCBvZiB0aGlzIGFib3J0LCBjb21waWxlIHdpdGggIC1zIEFCT1JUSU5HX01BTExPQz0wIFwiKX1mdW5jdGlvbiBlbmxhcmdlTWVtb3J5KCl7YWJvcnRPbkNhbm5vdEdyb3dNZW1vcnkoKX12YXIgVE9UQUxfU1RBQ0s9TW9kdWxlW1wiVE9UQUxfU1RBQ0tcIl18fDUyNDI4ODA7dmFyIFRPVEFMX01FTU9SWT1Nb2R1bGVbXCJUT1RBTF9NRU1PUllcIl18fDI2ODQzNTQ1NjtpZihUT1RBTF9NRU1PUlk8VE9UQUxfU1RBQ0spZXJyKFwiVE9UQUxfTUVNT1JZIHNob3VsZCBiZSBsYXJnZXIgdGhhbiBUT1RBTF9TVEFDSywgd2FzIFwiK1RPVEFMX01FTU9SWStcIiEgKFRPVEFMX1NUQUNLPVwiK1RPVEFMX1NUQUNLK1wiKVwiKTtpZihNb2R1bGVbXCJidWZmZXJcIl0pe2J1ZmZlcj1Nb2R1bGVbXCJidWZmZXJcIl19ZWxzZXtpZih0eXBlb2YgV2ViQXNzZW1ibHk9PT1cIm9iamVjdFwiJiZ0eXBlb2YgV2ViQXNzZW1ibHkuTWVtb3J5PT09XCJmdW5jdGlvblwiKXtNb2R1bGVbXCJ3YXNtTWVtb3J5XCJdPW5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe1wiaW5pdGlhbFwiOlRPVEFMX01FTU9SWS9XQVNNX1BBR0VfU0laRSxcIm1heGltdW1cIjpUT1RBTF9NRU1PUlkvV0FTTV9QQUdFX1NJWkV9KTtidWZmZXI9TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXJ9ZWxzZXtidWZmZXI9bmV3IEFycmF5QnVmZmVyKFRPVEFMX01FTU9SWSl9TW9kdWxlW1wiYnVmZmVyXCJdPWJ1ZmZlcn11cGRhdGVHbG9iYWxCdWZmZXJWaWV3cygpO2Z1bmN0aW9uIGdldFRvdGFsTWVtb3J5KCl7cmV0dXJuIFRPVEFMX01FTU9SWX1mdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3Mpe3doaWxlKGNhbGxiYWNrcy5sZW5ndGg+MCl7dmFyIGNhbGxiYWNrPWNhbGxiYWNrcy5zaGlmdCgpO2lmKHR5cGVvZiBjYWxsYmFjaz09XCJmdW5jdGlvblwiKXtjYWxsYmFjaygpO2NvbnRpbnVlfXZhciBmdW5jPWNhbGxiYWNrLmZ1bmM7aWYodHlwZW9mIGZ1bmM9PT1cIm51bWJlclwiKXtpZihjYWxsYmFjay5hcmc9PT11bmRlZmluZWQpe01vZHVsZVtcImR5bkNhbGxfdlwiXShmdW5jKX1lbHNle01vZHVsZVtcImR5bkNhbGxfdmlcIl0oZnVuYyxjYWxsYmFjay5hcmcpfX1lbHNle2Z1bmMoY2FsbGJhY2suYXJnPT09dW5kZWZpbmVkP251bGw6Y2FsbGJhY2suYXJnKX19fXZhciBfX0FUUFJFUlVOX189W107dmFyIF9fQVRJTklUX189W107dmFyIF9fQVRNQUlOX189W107dmFyIF9fQVRFWElUX189W107dmFyIF9fQVRQT1NUUlVOX189W107dmFyIHJ1bnRpbWVJbml0aWFsaXplZD1mYWxzZTtmdW5jdGlvbiBwcmVSdW4oKXtpZihNb2R1bGVbXCJwcmVSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwcmVSdW5cIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVSdW5cIl09W01vZHVsZVtcInByZVJ1blwiXV07d2hpbGUoTW9kdWxlW1wicHJlUnVuXCJdLmxlbmd0aCl7YWRkT25QcmVSdW4oTW9kdWxlW1wicHJlUnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUFJFUlVOX18pfWZ1bmN0aW9uIGVuc3VyZUluaXRSdW50aW1lKCl7aWYocnVudGltZUluaXRpYWxpemVkKXJldHVybjtydW50aW1lSW5pdGlhbGl6ZWQ9dHJ1ZTtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKX1mdW5jdGlvbiBwcmVNYWluKCl7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXyl9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVtcInBvc3RSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicG9zdFJ1blwiXT1bTW9kdWxlW1wicG9zdFJ1blwiXV07d2hpbGUoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiB3cml0ZUFycmF5VG9NZW1vcnkoYXJyYXksYnVmZmVyKXtIRUFQOC5zZXQoYXJyYXksYnVmZmVyKX1mdW5jdGlvbiB3cml0ZUFzY2lpVG9NZW1vcnkoc3RyLGJ1ZmZlcixkb250QWRkTnVsbCl7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7SEVBUDhbYnVmZmVyKys+PjBdPXN0ci5jaGFyQ29kZUF0KGkpfWlmKCFkb250QWRkTnVsbClIRUFQOFtidWZmZXI+PjBdPTB9dmFyIE1hdGhfYWJzPU1hdGguYWJzO3ZhciBNYXRoX2Nvcz1NYXRoLmNvczt2YXIgTWF0aF9zaW49TWF0aC5zaW47dmFyIE1hdGhfY2VpbD1NYXRoLmNlaWw7dmFyIE1hdGhfZmxvb3I9TWF0aC5mbG9vcjt2YXIgTWF0aF9taW49TWF0aC5taW47dmFyIHJ1bkRlcGVuZGVuY2llcz0wO3ZhciBydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsO3ZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtmdW5jdGlvbiBnZXRVbmlxdWVSdW5EZXBlbmRlbmN5KGlkKXtyZXR1cm4gaWR9ZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzKys7aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfX1mdW5jdGlvbiByZW1vdmVSdW5EZXBlbmRlbmN5KGlkKXtydW5EZXBlbmRlbmNpZXMtLTtpZihNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKXtNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyl9aWYocnVuRGVwZW5kZW5jaWVzPT0wKXtpZihydW5EZXBlbmRlbmN5V2F0Y2hlciE9PW51bGwpe2NsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpO3J1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGx9aWYoZGVwZW5kZW5jaWVzRnVsZmlsbGVkKXt2YXIgY2FsbGJhY2s9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkO2RlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2NhbGxiYWNrKCl9fX1Nb2R1bGVbXCJwcmVsb2FkZWRJbWFnZXNcIl09e307TW9kdWxlW1wicHJlbG9hZGVkQXVkaW9zXCJdPXt9O3ZhciBkYXRhVVJJUHJlZml4PVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSl7cmV0dXJuIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD9maWxlbmFtZS5zdGFydHNXaXRoKGRhdGFVUklQcmVmaXgpOmZpbGVuYW1lLmluZGV4T2YoZGF0YVVSSVByZWZpeCk9PT0wfWZ1bmN0aW9uIGludGVncmF0ZVdhc21KUygpe3ZhciB3YXNtVGV4dEZpbGU9XCJlZ3JhcGgud2FzdFwiO3ZhciB3YXNtQmluYXJ5RmlsZT1cImVncmFwaC53YXNtXCI7dmFyIGFzbWpzQ29kZUZpbGU9XCJlZ3JhcGgudGVtcC5hc20uanNcIjtpZighaXNEYXRhVVJJKHdhc21UZXh0RmlsZSkpe3dhc21UZXh0RmlsZT1sb2NhdGVGaWxlKHdhc21UZXh0RmlsZSl9aWYoIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkpe3dhc21CaW5hcnlGaWxlPWxvY2F0ZUZpbGUod2FzbUJpbmFyeUZpbGUpfWlmKCFpc0RhdGFVUkkoYXNtanNDb2RlRmlsZSkpe2FzbWpzQ29kZUZpbGU9bG9jYXRlRmlsZShhc21qc0NvZGVGaWxlKX12YXIgd2FzbVBhZ2VTaXplPTY0KjEwMjQ7dmFyIGluZm89e1wiZ2xvYmFsXCI6bnVsbCxcImVudlwiOm51bGwsXCJhc20yd2FzbVwiOmFzbTJ3YXNtSW1wb3J0cyxcInBhcmVudFwiOk1vZHVsZX07dmFyIGV4cG9ydHM9bnVsbDtmdW5jdGlvbiBtZXJnZU1lbW9yeShuZXdCdWZmZXIpe3ZhciBvbGRCdWZmZXI9TW9kdWxlW1wiYnVmZmVyXCJdO2lmKG5ld0J1ZmZlci5ieXRlTGVuZ3RoPG9sZEJ1ZmZlci5ieXRlTGVuZ3RoKXtlcnIoXCJ0aGUgbmV3IGJ1ZmZlciBpbiBtZXJnZU1lbW9yeSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzIG9uZS4gaW4gbmF0aXZlIHdhc20sIHdlIHNob3VsZCBncm93IG1lbW9yeSBoZXJlXCIpfXZhciBvbGRWaWV3PW5ldyBJbnQ4QXJyYXkob2xkQnVmZmVyKTt2YXIgbmV3Vmlldz1uZXcgSW50OEFycmF5KG5ld0J1ZmZlcik7bmV3Vmlldy5zZXQob2xkVmlldyk7dXBkYXRlR2xvYmFsQnVmZmVyKG5ld0J1ZmZlcik7dXBkYXRlR2xvYmFsQnVmZmVyVmlld3MoKX1mdW5jdGlvbiBmaXhJbXBvcnRzKGltcG9ydHMpe3JldHVybiBpbXBvcnRzfWZ1bmN0aW9uIGdldEJpbmFyeSgpe3RyeXtpZihNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoTW9kdWxlW1wid2FzbUJpbmFyeVwiXSl9aWYoTW9kdWxlW1wicmVhZEJpbmFyeVwiXSl7cmV0dXJuIE1vZHVsZVtcInJlYWRCaW5hcnlcIl0od2FzbUJpbmFyeUZpbGUpfWVsc2V7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9fWNhdGNoKGVycil7YWJvcnQoZXJyKX19ZnVuY3Rpb24gZ2V0QmluYXJ5UHJvbWlzZSgpe2lmKCFNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdJiYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpJiZ0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe2lmKCFyZXNwb25zZVtcIm9rXCJdKXt0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrd2FzbUJpbmFyeUZpbGUrXCInXCJ9cmV0dXJuIHJlc3BvbnNlW1wiYXJyYXlCdWZmZXJcIl0oKX0pKS5jYXRjaCgoZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KCl9KSl9cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7cmVzb2x2ZShnZXRCaW5hcnkoKSl9KSl9ZnVuY3Rpb24gZG9OYXRpdmVXYXNtKGdsb2JhbCxlbnYscHJvdmlkZWRCdWZmZXIpe2lmKHR5cGVvZiBXZWJBc3NlbWJseSE9PVwib2JqZWN0XCIpe2VycihcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7cmV0dXJuIGZhbHNlfWlmKCEoTW9kdWxlW1wid2FzbU1lbW9yeVwiXWluc3RhbmNlb2YgV2ViQXNzZW1ibHkuTWVtb3J5KSl7ZXJyKFwibm8gbmF0aXZlIHdhc20gTWVtb3J5IGluIHVzZVwiKTtyZXR1cm4gZmFsc2V9ZW52W1wibWVtb3J5XCJdPU1vZHVsZVtcIndhc21NZW1vcnlcIl07aW5mb1tcImdsb2JhbFwiXT17XCJOYU5cIjpOYU4sXCJJbmZpbml0eVwiOkluZmluaXR5fTtpbmZvW1wiZ2xvYmFsLk1hdGhcIl09TWF0aDtpbmZvW1wiZW52XCJdPWVudjtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXtleHBvcnRzPWluc3RhbmNlLmV4cG9ydHM7aWYoZXhwb3J0cy5tZW1vcnkpbWVyZ2VNZW1vcnkoZXhwb3J0cy5tZW1vcnkpO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO01vZHVsZVtcInVzaW5nV2FzbVwiXT10cnVlO3JlbW92ZVJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpfWFkZFJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpO2lmKE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXSl7dHJ5e3JldHVybiBNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpfWNhdGNoKGUpe2VycihcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK2UpO3JldHVybiBmYWxzZX19ZnVuY3Rpb24gcmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZShvdXRwdXQpe3JlY2VpdmVJbnN0YW5jZShvdXRwdXRbXCJpbnN0YW5jZVwiXSxvdXRwdXRbXCJtb2R1bGVcIl0pfWZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZXIpe2dldEJpbmFyeVByb21pc2UoKS50aGVuKChmdW5jdGlvbihiaW5hcnkpe3JldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksaW5mbyl9KSkudGhlbihyZWNlaXZlcikuY2F0Y2goKGZ1bmN0aW9uKHJlYXNvbil7ZXJyKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIrcmVhc29uKTthYm9ydChyZWFzb24pfSkpfWlmKCFNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdJiZ0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmc9PT1cImZ1bmN0aW9uXCImJiFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpJiZ0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCIpe1dlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGZldGNoKHdhc21CaW5hcnlGaWxlLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KSxpbmZvKS50aGVuKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpLmNhdGNoKChmdW5jdGlvbihyZWFzb24pe2VycihcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIityZWFzb24pO2VycihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO2luc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSl9KSl9ZWxzZXtpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpfXJldHVybnt9fU1vZHVsZVtcImFzbVByZWxvYWRcIl09TW9kdWxlW1wiYXNtXCJdO3ZhciBhc21qc1JlYWxsb2NCdWZmZXI9TW9kdWxlW1wicmVhbGxvY0J1ZmZlclwiXTt2YXIgd2FzbVJlYWxsb2NCdWZmZXI9KGZ1bmN0aW9uKHNpemUpe3ZhciBQQUdFX01VTFRJUExFPU1vZHVsZVtcInVzaW5nV2FzbVwiXT9XQVNNX1BBR0VfU0laRTpBU01KU19QQUdFX1NJWkU7c2l6ZT1hbGlnblVwKHNpemUsUEFHRV9NVUxUSVBMRSk7dmFyIG9sZD1Nb2R1bGVbXCJidWZmZXJcIl07dmFyIG9sZFNpemU9b2xkLmJ5dGVMZW5ndGg7aWYoTW9kdWxlW1widXNpbmdXYXNtXCJdKXt0cnl7dmFyIHJlc3VsdD1Nb2R1bGVbXCJ3YXNtTWVtb3J5XCJdLmdyb3coKHNpemUtb2xkU2l6ZSkvd2FzbVBhZ2VTaXplKTtpZihyZXN1bHQhPT0oLTF8MCkpe3JldHVybiBNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXJ9ZWxzZXtyZXR1cm4gbnVsbH19Y2F0Y2goZSl7cmV0dXJuIG51bGx9fX0pO01vZHVsZVtcInJlYWxsb2NCdWZmZXJcIl09KGZ1bmN0aW9uKHNpemUpe2lmKGZpbmFsTWV0aG9kPT09XCJhc21qc1wiKXtyZXR1cm4gYXNtanNSZWFsbG9jQnVmZmVyKHNpemUpfWVsc2V7cmV0dXJuIHdhc21SZWFsbG9jQnVmZmVyKHNpemUpfX0pO3ZhciBmaW5hbE1ldGhvZD1cIlwiO01vZHVsZVtcImFzbVwiXT0oZnVuY3Rpb24oZ2xvYmFsLGVudixwcm92aWRlZEJ1ZmZlcil7ZW52PWZpeEltcG9ydHMoZW52KTtpZighZW52W1widGFibGVcIl0pe3ZhciBUQUJMRV9TSVpFPU1vZHVsZVtcIndhc21UYWJsZVNpemVcIl07aWYoVEFCTEVfU0laRT09PXVuZGVmaW5lZClUQUJMRV9TSVpFPTEwMjQ7dmFyIE1BWF9UQUJMRV9TSVpFPU1vZHVsZVtcIndhc21NYXhUYWJsZVNpemVcIl07aWYodHlwZW9mIFdlYkFzc2VtYmx5PT09XCJvYmplY3RcIiYmdHlwZW9mIFdlYkFzc2VtYmx5LlRhYmxlPT09XCJmdW5jdGlvblwiKXtpZihNQVhfVEFCTEVfU0laRSE9PXVuZGVmaW5lZCl7ZW52W1widGFibGVcIl09bmV3IFdlYkFzc2VtYmx5LlRhYmxlKHtcImluaXRpYWxcIjpUQUJMRV9TSVpFLFwibWF4aW11bVwiOk1BWF9UQUJMRV9TSVpFLFwiZWxlbWVudFwiOlwiYW55ZnVuY1wifSl9ZWxzZXtlbnZbXCJ0YWJsZVwiXT1uZXcgV2ViQXNzZW1ibHkuVGFibGUoe1wiaW5pdGlhbFwiOlRBQkxFX1NJWkUsZWxlbWVudDpcImFueWZ1bmNcIn0pfX1lbHNle2VudltcInRhYmxlXCJdPW5ldyBBcnJheShUQUJMRV9TSVpFKX1Nb2R1bGVbXCJ3YXNtVGFibGVcIl09ZW52W1widGFibGVcIl19aWYoIWVudltcIm1lbW9yeUJhc2VcIl0pe2VudltcIm1lbW9yeUJhc2VcIl09TW9kdWxlW1wiU1RBVElDX0JBU0VcIl19aWYoIWVudltcInRhYmxlQmFzZVwiXSl7ZW52W1widGFibGVCYXNlXCJdPTB9dmFyIGV4cG9ydHM7ZXhwb3J0cz1kb05hdGl2ZVdhc20oZ2xvYmFsLGVudixwcm92aWRlZEJ1ZmZlcik7YXNzZXJ0KGV4cG9ydHMsXCJubyBiaW5hcnllbiBtZXRob2Qgc3VjY2VlZGVkLlwiKTtyZXR1cm4gZXhwb3J0c30pfWludGVncmF0ZVdhc21KUygpO1NUQVRJQ19CQVNFPUdMT0JBTF9CQVNFO1NUQVRJQ1RPUD1TVEFUSUNfQkFTRSszODE0NDtfX0FUSU5JVF9fLnB1c2goe2Z1bmM6KGZ1bmN0aW9uKCl7X19fZW1zY3JpcHRlbl9lbnZpcm9uX2NvbnN0cnVjdG9yKCl9KX0se2Z1bmM6KGZ1bmN0aW9uKCl7X19HTE9CQUxfX3N1Yl9JX2lvc3RyZWFtX2NwcCgpfSl9KTt2YXIgU1RBVElDX0JVTVA9MzgxNDQ7TW9kdWxlW1wiU1RBVElDX0JBU0VcIl09U1RBVElDX0JBU0U7TW9kdWxlW1wiU1RBVElDX0JVTVBcIl09U1RBVElDX0JVTVA7U1RBVElDVE9QKz0xNjtmdW5jdGlvbiBfX2Vtc2NyaXB0ZW5fdHJhdmVyc2Vfc3RhY2soYXJncyl7aWYoIWFyZ3N8fCFhcmdzLmNhbGxlZXx8IWFyZ3MuY2FsbGVlLm5hbWUpe3JldHVybltudWxsLFwiXCIsXCJcIl19dmFyIGZ1bnN0cj1hcmdzLmNhbGxlZS50b1N0cmluZygpO3ZhciBmdW5jbmFtZT1hcmdzLmNhbGxlZS5uYW1lO3ZhciBzdHI9XCIoXCI7dmFyIGZpcnN0PXRydWU7Zm9yKHZhciBpIGluIGFyZ3Mpe3ZhciBhPWFyZ3NbaV07aWYoIWZpcnN0KXtzdHIrPVwiLCBcIn1maXJzdD1mYWxzZTtpZih0eXBlb2YgYT09PVwibnVtYmVyXCJ8fHR5cGVvZiBhPT09XCJzdHJpbmdcIil7c3RyKz1hfWVsc2V7c3RyKz1cIihcIit0eXBlb2YgYStcIilcIn19c3RyKz1cIilcIjt2YXIgY2FsbGVyPWFyZ3MuY2FsbGVlLmNhbGxlcjthcmdzPWNhbGxlcj9jYWxsZXIuYXJndW1lbnRzOltdO2lmKGZpcnN0KXN0cj1cIlwiO3JldHVyblthcmdzLGZ1bmNuYW1lLHN0cl19ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fZ2V0X2NhbGxzdGFja19qcyhmbGFncyl7dmFyIGNhbGxzdGFjaz1qc1N0YWNrVHJhY2UoKTt2YXIgaVRoaXNGdW5jPWNhbGxzdGFjay5sYXN0SW5kZXhPZihcIl9lbXNjcmlwdGVuX2xvZ1wiKTt2YXIgaVRoaXNGdW5jMj1jYWxsc3RhY2subGFzdEluZGV4T2YoXCJfZW1zY3JpcHRlbl9nZXRfY2FsbHN0YWNrXCIpO3ZhciBpTmV4dExpbmU9Y2FsbHN0YWNrLmluZGV4T2YoXCJcXG5cIixNYXRoLm1heChpVGhpc0Z1bmMsaVRoaXNGdW5jMikpKzE7Y2FsbHN0YWNrPWNhbGxzdGFjay5zbGljZShpTmV4dExpbmUpO2lmKGZsYWdzJjgmJnR5cGVvZiBlbXNjcmlwdGVuX3NvdXJjZV9tYXA9PT1cInVuZGVmaW5lZFwiKXt3YXJuT25jZSgnU291cmNlIG1hcCBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLCBlbXNjcmlwdGVuX2xvZyB3aXRoIEVNX0xPR19DX1NUQUNLIHdpbGwgYmUgaWdub3JlZC4gQnVpbGQgd2l0aCBcIi0tcHJlLWpzICRFTVNDUklQVEVOL3NyYy9lbXNjcmlwdGVuLXNvdXJjZS1tYXAubWluLmpzXCIgbGlua2VyIGZsYWcgdG8gYWRkIHNvdXJjZSBtYXAgbG9hZGluZyB0byBjb2RlLicpO2ZsYWdzXj04O2ZsYWdzfD0xNn12YXIgc3RhY2tfYXJncz1udWxsO2lmKGZsYWdzJjEyOCl7c3RhY2tfYXJncz1fX2Vtc2NyaXB0ZW5fdHJhdmVyc2Vfc3RhY2soYXJndW1lbnRzKTt3aGlsZShzdGFja19hcmdzWzFdLmluZGV4T2YoXCJfZW1zY3JpcHRlbl9cIik+PTApc3RhY2tfYXJncz1fX2Vtc2NyaXB0ZW5fdHJhdmVyc2Vfc3RhY2soc3RhY2tfYXJnc1swXSl9dmFyIGxpbmVzPWNhbGxzdGFjay5zcGxpdChcIlxcblwiKTtjYWxsc3RhY2s9XCJcIjt2YXIgbmV3RmlyZWZveFJlPW5ldyBSZWdFeHAoXCJcXFxccyooLio/KUAoLio/KTooWzAtOV0rKTooWzAtOV0rKVwiKTt2YXIgZmlyZWZveFJlPW5ldyBSZWdFeHAoXCJcXFxccyooLio/KUAoLiopOiguKikoOiguKikpP1wiKTt2YXIgY2hyb21lUmU9bmV3IFJlZ0V4cChcIlxcXFxzKmF0ICguKj8pIFxcXFwoKC4qKTooLiopOiguKilcXFxcKVwiKTtmb3IodmFyIGwgaW4gbGluZXMpe3ZhciBsaW5lPWxpbmVzW2xdO3ZhciBqc1N5bWJvbE5hbWU9XCJcIjt2YXIgZmlsZT1cIlwiO3ZhciBsaW5lbm89MDt2YXIgY29sdW1uPTA7dmFyIHBhcnRzPWNocm9tZVJlLmV4ZWMobGluZSk7aWYocGFydHMmJnBhcnRzLmxlbmd0aD09NSl7anNTeW1ib2xOYW1lPXBhcnRzWzFdO2ZpbGU9cGFydHNbMl07bGluZW5vPXBhcnRzWzNdO2NvbHVtbj1wYXJ0c1s0XX1lbHNle3BhcnRzPW5ld0ZpcmVmb3hSZS5leGVjKGxpbmUpO2lmKCFwYXJ0cylwYXJ0cz1maXJlZm94UmUuZXhlYyhsaW5lKTtpZihwYXJ0cyYmcGFydHMubGVuZ3RoPj00KXtqc1N5bWJvbE5hbWU9cGFydHNbMV07ZmlsZT1wYXJ0c1syXTtsaW5lbm89cGFydHNbM107Y29sdW1uPXBhcnRzWzRdfDB9ZWxzZXtjYWxsc3RhY2srPWxpbmUrXCJcXG5cIjtjb250aW51ZX19dmFyIGNTeW1ib2xOYW1lPWZsYWdzJjMyP2RlbWFuZ2xlKGpzU3ltYm9sTmFtZSk6anNTeW1ib2xOYW1lO2lmKCFjU3ltYm9sTmFtZSl7Y1N5bWJvbE5hbWU9anNTeW1ib2xOYW1lfXZhciBoYXZlU291cmNlTWFwPWZhbHNlO2lmKGZsYWdzJjgpe3ZhciBvcmlnPWVtc2NyaXB0ZW5fc291cmNlX21hcC5vcmlnaW5hbFBvc2l0aW9uRm9yKHtsaW5lOmxpbmVubyxjb2x1bW46Y29sdW1ufSk7aGF2ZVNvdXJjZU1hcD1vcmlnJiZvcmlnLnNvdXJjZTtpZihoYXZlU291cmNlTWFwKXtpZihmbGFncyY2NCl7b3JpZy5zb3VyY2U9b3JpZy5zb3VyY2Uuc3Vic3RyaW5nKG9yaWcuc291cmNlLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikubGFzdEluZGV4T2YoXCIvXCIpKzEpfWNhbGxzdGFjays9XCIgICAgYXQgXCIrY1N5bWJvbE5hbWUrXCIgKFwiK29yaWcuc291cmNlK1wiOlwiK29yaWcubGluZStcIjpcIitvcmlnLmNvbHVtbitcIilcXG5cIn19aWYoZmxhZ3MmMTZ8fCFoYXZlU291cmNlTWFwKXtpZihmbGFncyY2NCl7ZmlsZT1maWxlLnN1YnN0cmluZyhmaWxlLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikubGFzdEluZGV4T2YoXCIvXCIpKzEpfWNhbGxzdGFjays9KGhhdmVTb3VyY2VNYXA/XCIgICAgID0gXCIranNTeW1ib2xOYW1lOlwiICAgIGF0IFwiK2NTeW1ib2xOYW1lKStcIiAoXCIrZmlsZStcIjpcIitsaW5lbm8rXCI6XCIrY29sdW1uK1wiKVxcblwifWlmKGZsYWdzJjEyOCYmc3RhY2tfYXJnc1swXSl7aWYoc3RhY2tfYXJnc1sxXT09anNTeW1ib2xOYW1lJiZzdGFja19hcmdzWzJdLmxlbmd0aD4wKXtjYWxsc3RhY2s9Y2FsbHN0YWNrLnJlcGxhY2UoL1xccyskLyxcIlwiKTtjYWxsc3RhY2srPVwiIHdpdGggdmFsdWVzOiBcIitzdGFja19hcmdzWzFdK3N0YWNrX2FyZ3NbMl0rXCJcXG5cIn1zdGFja19hcmdzPV9fZW1zY3JpcHRlbl90cmF2ZXJzZV9zdGFjayhzdGFja19hcmdzWzBdKX19Y2FsbHN0YWNrPWNhbGxzdGFjay5yZXBsYWNlKC9cXHMrJC8sXCJcIik7cmV0dXJuIGNhbGxzdGFja31mdW5jdGlvbiBfX1Vud2luZF9CYWNrdHJhY2UoZnVuYyxhcmcpe3ZhciB0cmFjZT1fZW1zY3JpcHRlbl9nZXRfY2FsbHN0YWNrX2pzKCk7dmFyIHBhcnRzPXRyYWNlLnNwbGl0KFwiXFxuXCIpO2Zvcih2YXIgaT0wO2k8cGFydHMubGVuZ3RoO2krKyl7dmFyIHJldD1Nb2R1bGVbXCJkeW5DYWxsX2lpaVwiXShmdW5jLDAsYXJnKTtpZihyZXQhPT0wKXJldHVybn19ZnVuY3Rpb24gX19VbndpbmRfRmluZEVuY2xvc2luZ0Z1bmN0aW9uKCl7cmV0dXJuIDB9ZnVuY3Rpb24gX19VbndpbmRfR2V0SVBJbmZvKCl7YWJvcnQoXCJVbndpbmRfR2V0SVBJbmZvXCIpfXZhciBFTlY9e307ZnVuY3Rpb24gX19fYnVpbGRFbnZpcm9ubWVudChlbnZpcm9uKXt2YXIgTUFYX0VOVl9WQUxVRVM9NjQ7dmFyIFRPVEFMX0VOVl9TSVpFPTEwMjQ7dmFyIHBvb2xQdHI7dmFyIGVudlB0cjtpZighX19fYnVpbGRFbnZpcm9ubWVudC5jYWxsZWQpe19fX2J1aWxkRW52aXJvbm1lbnQuY2FsbGVkPXRydWU7RU5WW1wiVVNFUlwiXT1FTlZbXCJMT0dOQU1FXCJdPVwid2ViX3VzZXJcIjtFTlZbXCJQQVRIXCJdPVwiL1wiO0VOVltcIlBXRFwiXT1cIi9cIjtFTlZbXCJIT01FXCJdPVwiL2hvbWUvd2ViX3VzZXJcIjtFTlZbXCJMQU5HXCJdPVwiQy5VVEYtOFwiO0VOVltcIl9cIl09TW9kdWxlW1widGhpc1Byb2dyYW1cIl07cG9vbFB0cj1nZXRNZW1vcnkoVE9UQUxfRU5WX1NJWkUpO2VudlB0cj1nZXRNZW1vcnkoTUFYX0VOVl9WQUxVRVMqNCk7SEVBUDMyW2VudlB0cj4+Ml09cG9vbFB0cjtIRUFQMzJbZW52aXJvbj4+Ml09ZW52UHRyfWVsc2V7ZW52UHRyPUhFQVAzMltlbnZpcm9uPj4yXTtwb29sUHRyPUhFQVAzMltlbnZQdHI+PjJdfXZhciBzdHJpbmdzPVtdO3ZhciB0b3RhbFNpemU9MDtmb3IodmFyIGtleSBpbiBFTlYpe2lmKHR5cGVvZiBFTlZba2V5XT09PVwic3RyaW5nXCIpe3ZhciBsaW5lPWtleStcIj1cIitFTlZba2V5XTtzdHJpbmdzLnB1c2gobGluZSk7dG90YWxTaXplKz1saW5lLmxlbmd0aH19aWYodG90YWxTaXplPlRPVEFMX0VOVl9TSVpFKXt0aHJvdyBuZXcgRXJyb3IoXCJFbnZpcm9ubWVudCBzaXplIGV4Y2VlZGVkIFRPVEFMX0VOVl9TSVpFIVwiKX12YXIgcHRyU2l6ZT00O2Zvcih2YXIgaT0wO2k8c3RyaW5ncy5sZW5ndGg7aSsrKXt2YXIgbGluZT1zdHJpbmdzW2ldO3dyaXRlQXNjaWlUb01lbW9yeShsaW5lLHBvb2xQdHIpO0hFQVAzMltlbnZQdHIraSpwdHJTaXplPj4yXT1wb29sUHRyO3Bvb2xQdHIrPWxpbmUubGVuZ3RoKzF9SEVBUDMyW2VudlB0citzdHJpbmdzLmxlbmd0aCpwdHJTaXplPj4yXT0wfWZ1bmN0aW9uIF9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24oc2l6ZSl7cmV0dXJuIF9tYWxsb2Moc2l6ZSl9ZnVuY3Rpb24gX19aU3QxOHVuY2F1Z2h0X2V4Y2VwdGlvbnYoKXtyZXR1cm4hIV9fWlN0MTh1bmNhdWdodF9leGNlcHRpb252LnVuY2F1Z2h0X2V4Y2VwdGlvbn12YXIgRVhDRVBUSU9OUz17bGFzdDowLGNhdWdodDpbXSxpbmZvczp7fSxkZUFkanVzdDooZnVuY3Rpb24oYWRqdXN0ZWQpe2lmKCFhZGp1c3RlZHx8RVhDRVBUSU9OUy5pbmZvc1thZGp1c3RlZF0pcmV0dXJuIGFkanVzdGVkO2Zvcih2YXIga2V5IGluIEVYQ0VQVElPTlMuaW5mb3Mpe3ZhciBwdHI9K2tleTt2YXIgaW5mbz1FWENFUFRJT05TLmluZm9zW3B0cl07aWYoaW5mby5hZGp1c3RlZD09PWFkanVzdGVkKXtyZXR1cm4gcHRyfX1yZXR1cm4gYWRqdXN0ZWR9KSxhZGRSZWY6KGZ1bmN0aW9uKHB0cil7aWYoIXB0cilyZXR1cm47dmFyIGluZm89RVhDRVBUSU9OUy5pbmZvc1twdHJdO2luZm8ucmVmY291bnQrK30pLGRlY1JlZjooZnVuY3Rpb24ocHRyKXtpZighcHRyKXJldHVybjt2YXIgaW5mbz1FWENFUFRJT05TLmluZm9zW3B0cl07YXNzZXJ0KGluZm8ucmVmY291bnQ+MCk7aW5mby5yZWZjb3VudC0tO2lmKGluZm8ucmVmY291bnQ9PT0wJiYhaW5mby5yZXRocm93bil7aWYoaW5mby5kZXN0cnVjdG9yKXtNb2R1bGVbXCJkeW5DYWxsX3ZpXCJdKGluZm8uZGVzdHJ1Y3RvcixwdHIpfWRlbGV0ZSBFWENFUFRJT05TLmluZm9zW3B0cl07X19fY3hhX2ZyZWVfZXhjZXB0aW9uKHB0cil9fSksY2xlYXJSZWY6KGZ1bmN0aW9uKHB0cil7aWYoIXB0cilyZXR1cm47dmFyIGluZm89RVhDRVBUSU9OUy5pbmZvc1twdHJdO2luZm8ucmVmY291bnQ9MH0pfTtmdW5jdGlvbiBfX19jeGFfdGhyb3cocHRyLHR5cGUsZGVzdHJ1Y3Rvcil7RVhDRVBUSU9OUy5pbmZvc1twdHJdPXtwdHI6cHRyLGFkanVzdGVkOnB0cix0eXBlOnR5cGUsZGVzdHJ1Y3RvcjpkZXN0cnVjdG9yLHJlZmNvdW50OjAsY2F1Z2h0OmZhbHNlLHJldGhyb3duOmZhbHNlfTtFWENFUFRJT05TLmxhc3Q9cHRyO2lmKCEoXCJ1bmNhdWdodF9leGNlcHRpb25cImluIF9fWlN0MTh1bmNhdWdodF9leGNlcHRpb252KSl7X19aU3QxOHVuY2F1Z2h0X2V4Y2VwdGlvbnYudW5jYXVnaHRfZXhjZXB0aW9uPTF9ZWxzZXtfX1pTdDE4dW5jYXVnaHRfZXhjZXB0aW9udi51bmNhdWdodF9leGNlcHRpb24rK310aHJvdyBwdHIrXCIgLSBFeGNlcHRpb24gY2F0Y2hpbmcgaXMgZGlzYWJsZWQsIHRoaXMgZXhjZXB0aW9uIGNhbm5vdCBiZSBjYXVnaHQuIENvbXBpbGUgd2l0aCAtcyBESVNBQkxFX0VYQ0VQVElPTl9DQVRDSElORz0wIG9yIERJU0FCTEVfRVhDRVBUSU9OX0NBVENISU5HPTIgdG8gY2F0Y2guXCJ9ZnVuY3Rpb24gX19fbG9jaygpe312YXIgRVJSTk9fQ09ERVM9e0VQRVJNOjEsRU5PRU5UOjIsRVNSQ0g6MyxFSU5UUjo0LEVJTzo1LEVOWElPOjYsRTJCSUc6NyxFTk9FWEVDOjgsRUJBREY6OSxFQ0hJTEQ6MTAsRUFHQUlOOjExLEVXT1VMREJMT0NLOjExLEVOT01FTToxMixFQUNDRVM6MTMsRUZBVUxUOjE0LEVOT1RCTEs6MTUsRUJVU1k6MTYsRUVYSVNUOjE3LEVYREVWOjE4LEVOT0RFVjoxOSxFTk9URElSOjIwLEVJU0RJUjoyMSxFSU5WQUw6MjIsRU5GSUxFOjIzLEVNRklMRToyNCxFTk9UVFk6MjUsRVRYVEJTWToyNixFRkJJRzoyNyxFTk9TUEM6MjgsRVNQSVBFOjI5LEVST0ZTOjMwLEVNTElOSzozMSxFUElQRTozMixFRE9NOjMzLEVSQU5HRTozNCxFTk9NU0c6NDIsRUlEUk06NDMsRUNIUk5HOjQ0LEVMMk5TWU5DOjQ1LEVMM0hMVDo0NixFTDNSU1Q6NDcsRUxOUk5HOjQ4LEVVTkFUQ0g6NDksRU5PQ1NJOjUwLEVMMkhMVDo1MSxFREVBRExLOjM1LEVOT0xDSzozNyxFQkFERTo1MixFQkFEUjo1MyxFWEZVTEw6NTQsRU5PQU5POjU1LEVCQURSUUM6NTYsRUJBRFNMVDo1NyxFREVBRExPQ0s6MzUsRUJGT05UOjU5LEVOT1NUUjo2MCxFTk9EQVRBOjYxLEVUSU1FOjYyLEVOT1NSOjYzLEVOT05FVDo2NCxFTk9QS0c6NjUsRVJFTU9URTo2NixFTk9MSU5LOjY3LEVBRFY6NjgsRVNSTU5UOjY5LEVDT01NOjcwLEVQUk9UTzo3MSxFTVVMVElIT1A6NzIsRURPVERPVDo3MyxFQkFETVNHOjc0LEVOT1RVTklROjc2LEVCQURGRDo3NyxFUkVNQ0hHOjc4LEVMSUJBQ0M6NzksRUxJQkJBRDo4MCxFTElCU0NOOjgxLEVMSUJNQVg6ODIsRUxJQkVYRUM6ODMsRU5PU1lTOjM4LEVOT1RFTVBUWTozOSxFTkFNRVRPT0xPTkc6MzYsRUxPT1A6NDAsRU9QTk9UU1VQUDo5NSxFUEZOT1NVUFBPUlQ6OTYsRUNPTk5SRVNFVDoxMDQsRU5PQlVGUzoxMDUsRUFGTk9TVVBQT1JUOjk3LEVQUk9UT1RZUEU6OTEsRU5PVFNPQ0s6ODgsRU5PUFJPVE9PUFQ6OTIsRVNIVVRET1dOOjEwOCxFQ09OTlJFRlVTRUQ6MTExLEVBRERSSU5VU0U6OTgsRUNPTk5BQk9SVEVEOjEwMyxFTkVUVU5SRUFDSDoxMDEsRU5FVERPV046MTAwLEVUSU1FRE9VVDoxMTAsRUhPU1RET1dOOjExMixFSE9TVFVOUkVBQ0g6MTEzLEVJTlBST0dSRVNTOjExNSxFQUxSRUFEWToxMTQsRURFU1RBRERSUkVROjg5LEVNU0dTSVpFOjkwLEVQUk9UT05PU1VQUE9SVDo5MyxFU09DS1ROT1NVUFBPUlQ6OTQsRUFERFJOT1RBVkFJTDo5OSxFTkVUUkVTRVQ6MTAyLEVJU0NPTk46MTA2LEVOT1RDT05OOjEwNyxFVE9PTUFOWVJFRlM6MTA5LEVVU0VSUzo4NyxFRFFVT1Q6MTIyLEVTVEFMRToxMTYsRU5PVFNVUDo5NSxFTk9NRURJVU06MTIzLEVJTFNFUTo4NCxFT1ZFUkZMT1c6NzUsRUNBTkNFTEVEOjEyNSxFTk9UUkVDT1ZFUkFCTEU6MTMxLEVPV05FUkRFQUQ6MTMwLEVTVFJQSVBFOjg2fTtmdW5jdGlvbiBfX19zZXRFcnJObyh2YWx1ZSl7aWYoTW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl0pSEVBUDMyW01vZHVsZVtcIl9fX2Vycm5vX2xvY2F0aW9uXCJdKCk+PjJdPXZhbHVlO3JldHVybiB2YWx1ZX1mdW5jdGlvbiBfX19tYXBfZmlsZShwYXRobmFtZSxzaXplKXtfX19zZXRFcnJObyhFUlJOT19DT0RFUy5FUEVSTSk7cmV0dXJuLTF9dmFyIEVSUk5PX01FU1NBR0VTPXswOlwiU3VjY2Vzc1wiLDE6XCJOb3Qgc3VwZXItdXNlclwiLDI6XCJObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5XCIsMzpcIk5vIHN1Y2ggcHJvY2Vzc1wiLDQ6XCJJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbFwiLDU6XCJJL08gZXJyb3JcIiw2OlwiTm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzc1wiLDc6XCJBcmcgbGlzdCB0b28gbG9uZ1wiLDg6XCJFeGVjIGZvcm1hdCBlcnJvclwiLDk6XCJCYWQgZmlsZSBudW1iZXJcIiwxMDpcIk5vIGNoaWxkcmVuXCIsMTE6XCJObyBtb3JlIHByb2Nlc3Nlc1wiLDEyOlwiTm90IGVub3VnaCBjb3JlXCIsMTM6XCJQZXJtaXNzaW9uIGRlbmllZFwiLDE0OlwiQmFkIGFkZHJlc3NcIiwxNTpcIkJsb2NrIGRldmljZSByZXF1aXJlZFwiLDE2OlwiTW91bnQgZGV2aWNlIGJ1c3lcIiwxNzpcIkZpbGUgZXhpc3RzXCIsMTg6XCJDcm9zcy1kZXZpY2UgbGlua1wiLDE5OlwiTm8gc3VjaCBkZXZpY2VcIiwyMDpcIk5vdCBhIGRpcmVjdG9yeVwiLDIxOlwiSXMgYSBkaXJlY3RvcnlcIiwyMjpcIkludmFsaWQgYXJndW1lbnRcIiwyMzpcIlRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtXCIsMjQ6XCJUb28gbWFueSBvcGVuIGZpbGVzXCIsMjU6XCJOb3QgYSB0eXBld3JpdGVyXCIsMjY6XCJUZXh0IGZpbGUgYnVzeVwiLDI3OlwiRmlsZSB0b28gbGFyZ2VcIiwyODpcIk5vIHNwYWNlIGxlZnQgb24gZGV2aWNlXCIsMjk6XCJJbGxlZ2FsIHNlZWtcIiwzMDpcIlJlYWQgb25seSBmaWxlIHN5c3RlbVwiLDMxOlwiVG9vIG1hbnkgbGlua3NcIiwzMjpcIkJyb2tlbiBwaXBlXCIsMzM6XCJNYXRoIGFyZyBvdXQgb2YgZG9tYWluIG9mIGZ1bmNcIiwzNDpcIk1hdGggcmVzdWx0IG5vdCByZXByZXNlbnRhYmxlXCIsMzU6XCJGaWxlIGxvY2tpbmcgZGVhZGxvY2sgZXJyb3JcIiwzNjpcIkZpbGUgb3IgcGF0aCBuYW1lIHRvbyBsb25nXCIsMzc6XCJObyByZWNvcmQgbG9ja3MgYXZhaWxhYmxlXCIsMzg6XCJGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWRcIiwzOTpcIkRpcmVjdG9yeSBub3QgZW1wdHlcIiw0MDpcIlRvbyBtYW55IHN5bWJvbGljIGxpbmtzXCIsNDI6XCJObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZVwiLDQzOlwiSWRlbnRpZmllciByZW1vdmVkXCIsNDQ6XCJDaGFubmVsIG51bWJlciBvdXQgb2YgcmFuZ2VcIiw0NTpcIkxldmVsIDIgbm90IHN5bmNocm9uaXplZFwiLDQ2OlwiTGV2ZWwgMyBoYWx0ZWRcIiw0NzpcIkxldmVsIDMgcmVzZXRcIiw0ODpcIkxpbmsgbnVtYmVyIG91dCBvZiByYW5nZVwiLDQ5OlwiUHJvdG9jb2wgZHJpdmVyIG5vdCBhdHRhY2hlZFwiLDUwOlwiTm8gQ1NJIHN0cnVjdHVyZSBhdmFpbGFibGVcIiw1MTpcIkxldmVsIDIgaGFsdGVkXCIsNTI6XCJJbnZhbGlkIGV4Y2hhbmdlXCIsNTM6XCJJbnZhbGlkIHJlcXVlc3QgZGVzY3JpcHRvclwiLDU0OlwiRXhjaGFuZ2UgZnVsbFwiLDU1OlwiTm8gYW5vZGVcIiw1NjpcIkludmFsaWQgcmVxdWVzdCBjb2RlXCIsNTc6XCJJbnZhbGlkIHNsb3RcIiw1OTpcIkJhZCBmb250IGZpbGUgZm10XCIsNjA6XCJEZXZpY2Ugbm90IGEgc3RyZWFtXCIsNjE6XCJObyBkYXRhIChmb3Igbm8gZGVsYXkgaW8pXCIsNjI6XCJUaW1lciBleHBpcmVkXCIsNjM6XCJPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXNcIiw2NDpcIk1hY2hpbmUgaXMgbm90IG9uIHRoZSBuZXR3b3JrXCIsNjU6XCJQYWNrYWdlIG5vdCBpbnN0YWxsZWRcIiw2NjpcIlRoZSBvYmplY3QgaXMgcmVtb3RlXCIsNjc6XCJUaGUgbGluayBoYXMgYmVlbiBzZXZlcmVkXCIsNjg6XCJBZHZlcnRpc2UgZXJyb3JcIiw2OTpcIlNybW91bnQgZXJyb3JcIiw3MDpcIkNvbW11bmljYXRpb24gZXJyb3Igb24gc2VuZFwiLDcxOlwiUHJvdG9jb2wgZXJyb3JcIiw3MjpcIk11bHRpaG9wIGF0dGVtcHRlZFwiLDczOlwiQ3Jvc3MgbW91bnQgcG9pbnQgKG5vdCByZWFsbHkgZXJyb3IpXCIsNzQ6XCJUcnlpbmcgdG8gcmVhZCB1bnJlYWRhYmxlIG1lc3NhZ2VcIiw3NTpcIlZhbHVlIHRvbyBsYXJnZSBmb3IgZGVmaW5lZCBkYXRhIHR5cGVcIiw3NjpcIkdpdmVuIGxvZy4gbmFtZSBub3QgdW5pcXVlXCIsNzc6XCJmLmQuIGludmFsaWQgZm9yIHRoaXMgb3BlcmF0aW9uXCIsNzg6XCJSZW1vdGUgYWRkcmVzcyBjaGFuZ2VkXCIsNzk6XCJDYW4gICBhY2Nlc3MgYSBuZWVkZWQgc2hhcmVkIGxpYlwiLDgwOlwiQWNjZXNzaW5nIGEgY29ycnVwdGVkIHNoYXJlZCBsaWJcIiw4MTpcIi5saWIgc2VjdGlvbiBpbiBhLm91dCBjb3JydXB0ZWRcIiw4MjpcIkF0dGVtcHRpbmcgdG8gbGluayBpbiB0b28gbWFueSBsaWJzXCIsODM6XCJBdHRlbXB0aW5nIHRvIGV4ZWMgYSBzaGFyZWQgbGlicmFyeVwiLDg0OlwiSWxsZWdhbCBieXRlIHNlcXVlbmNlXCIsODY6XCJTdHJlYW1zIHBpcGUgZXJyb3JcIiw4NzpcIlRvbyBtYW55IHVzZXJzXCIsODg6XCJTb2NrZXQgb3BlcmF0aW9uIG9uIG5vbi1zb2NrZXRcIiw4OTpcIkRlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWRcIiw5MDpcIk1lc3NhZ2UgdG9vIGxvbmdcIiw5MTpcIlByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldFwiLDkyOlwiUHJvdG9jb2wgbm90IGF2YWlsYWJsZVwiLDkzOlwiVW5rbm93biBwcm90b2NvbFwiLDk0OlwiU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZFwiLDk1OlwiTm90IHN1cHBvcnRlZFwiLDk2OlwiUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWRcIiw5NzpcIkFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wgZmFtaWx5XCIsOTg6XCJBZGRyZXNzIGFscmVhZHkgaW4gdXNlXCIsOTk6XCJBZGRyZXNzIG5vdCBhdmFpbGFibGVcIiwxMDA6XCJOZXR3b3JrIGludGVyZmFjZSBpcyBub3QgY29uZmlndXJlZFwiLDEwMTpcIk5ldHdvcmsgaXMgdW5yZWFjaGFibGVcIiwxMDI6XCJDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmtcIiwxMDM6XCJDb25uZWN0aW9uIGFib3J0ZWRcIiwxMDQ6XCJDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXJcIiwxMDU6XCJObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlXCIsMTA2OlwiU29ja2V0IGlzIGFscmVhZHkgY29ubmVjdGVkXCIsMTA3OlwiU29ja2V0IGlzIG5vdCBjb25uZWN0ZWRcIiwxMDg6XCJDYW4ndCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93blwiLDEwOTpcIlRvbyBtYW55IHJlZmVyZW5jZXNcIiwxMTA6XCJDb25uZWN0aW9uIHRpbWVkIG91dFwiLDExMTpcIkNvbm5lY3Rpb24gcmVmdXNlZFwiLDExMjpcIkhvc3QgaXMgZG93blwiLDExMzpcIkhvc3QgaXMgdW5yZWFjaGFibGVcIiwxMTQ6XCJTb2NrZXQgYWxyZWFkeSBjb25uZWN0ZWRcIiwxMTU6XCJDb25uZWN0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3NcIiwxMTY6XCJTdGFsZSBmaWxlIGhhbmRsZVwiLDEyMjpcIlF1b3RhIGV4Y2VlZGVkXCIsMTIzOlwiTm8gbWVkaXVtIChpbiB0YXBlIGRyaXZlKVwiLDEyNTpcIk9wZXJhdGlvbiBjYW5jZWxlZFwiLDEzMDpcIlByZXZpb3VzIG93bmVyIGRpZWRcIiwxMzE6XCJTdGF0ZSBub3QgcmVjb3ZlcmFibGVcIn07dmFyIFBBVEg9e3NwbGl0UGF0aDooZnVuY3Rpb24oZmlsZW5hbWUpe3ZhciBzcGxpdFBhdGhSZT0vXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztyZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSl9KSxub3JtYWxpemVBcnJheTooZnVuY3Rpb24ocGFydHMsYWxsb3dBYm92ZVJvb3Qpe3ZhciB1cD0wO2Zvcih2YXIgaT1wYXJ0cy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGxhc3Q9cGFydHNbaV07aWYobGFzdD09PVwiLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKX1lbHNlIGlmKGxhc3Q9PT1cIi4uXCIpe3BhcnRzLnNwbGljZShpLDEpO3VwKyt9ZWxzZSBpZih1cCl7cGFydHMuc3BsaWNlKGksMSk7dXAtLX19aWYoYWxsb3dBYm92ZVJvb3Qpe2Zvcig7dXA7dXAtLSl7cGFydHMudW5zaGlmdChcIi4uXCIpfX1yZXR1cm4gcGFydHN9KSxub3JtYWxpemU6KGZ1bmN0aW9uKHBhdGgpe3ZhciBpc0Fic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCIsdHJhaWxpbmdTbGFzaD1wYXRoLnN1YnN0cigtMSk9PT1cIi9cIjtwYXRoPVBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKChmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofSksZGlybmFtZTooZnVuY3Rpb24ocGF0aCl7dmFyIHJlc3VsdD1QQVRILnNwbGl0UGF0aChwYXRoKSxyb290PXJlc3VsdFswXSxkaXI9cmVzdWx0WzFdO2lmKCFyb290JiYhZGlyKXtyZXR1cm5cIi5cIn1pZihkaXIpe2Rpcj1kaXIuc3Vic3RyKDAsZGlyLmxlbmd0aC0xKX1yZXR1cm4gcm9vdCtkaXJ9KSxiYXNlbmFtZTooZnVuY3Rpb24ocGF0aCl7aWYocGF0aD09PVwiL1wiKXJldHVyblwiL1wiO3ZhciBsYXN0U2xhc2g9cGF0aC5sYXN0SW5kZXhPZihcIi9cIik7aWYobGFzdFNsYXNoPT09LTEpcmV0dXJuIHBhdGg7cmV0dXJuIHBhdGguc3Vic3RyKGxhc3RTbGFzaCsxKX0pLGV4dG5hbWU6KGZ1bmN0aW9uKHBhdGgpe3JldHVybiBQQVRILnNwbGl0UGF0aChwYXRoKVszXX0pLGpvaW46KGZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gUEFUSC5ub3JtYWxpemUocGF0aHMuam9pbihcIi9cIikpfSksam9pbjI6KGZ1bmN0aW9uKGwscil7cmV0dXJuIFBBVEgubm9ybWFsaXplKGwrXCIvXCIrcil9KSxyZXNvbHZlOihmdW5jdGlvbigpe3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLTE7aT49LTEmJiFyZXNvbHZlZEFic29sdXRlO2ktLSl7dmFyIHBhdGg9aT49MD9hcmd1bWVudHNbaV06RlMuY3dkKCk7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3NcIil9ZWxzZSBpZighcGF0aCl7cmV0dXJuXCJcIn1yZXNvbHZlZFBhdGg9cGF0aCtcIi9cIityZXNvbHZlZFBhdGg7cmVzb2x2ZWRBYnNvbHV0ZT1wYXRoLmNoYXJBdCgwKT09PVwiL1wifXJlc29sdmVkUGF0aD1QQVRILm5vcm1hbGl6ZUFycmF5KHJlc29sdmVkUGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKChmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSksIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oXCIvXCIpO3JldHVybihyZXNvbHZlZEFic29sdXRlP1wiL1wiOlwiXCIpK3Jlc29sdmVkUGF0aHx8XCIuXCJ9KSxyZWxhdGl2ZTooZnVuY3Rpb24oZnJvbSx0byl7ZnJvbT1QQVRILnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO3RvPVBBVEgucmVzb2x2ZSh0bykuc3Vic3RyKDEpO2Z1bmN0aW9uIHRyaW0oYXJyKXt2YXIgc3RhcnQ9MDtmb3IoO3N0YXJ0PGFyci5sZW5ndGg7c3RhcnQrKyl7aWYoYXJyW3N0YXJ0XSE9PVwiXCIpYnJlYWt9dmFyIGVuZD1hcnIubGVuZ3RoLTE7Zm9yKDtlbmQ+PTA7ZW5kLS0pe2lmKGFycltlbmRdIT09XCJcIilicmVha31pZihzdGFydD5lbmQpcmV0dXJuW107cmV0dXJuIGFyci5zbGljZShzdGFydCxlbmQtc3RhcnQrMSl9dmFyIGZyb21QYXJ0cz10cmltKGZyb20uc3BsaXQoXCIvXCIpKTt2YXIgdG9QYXJ0cz10cmltKHRvLnNwbGl0KFwiL1wiKSk7dmFyIGxlbmd0aD1NYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLHRvUGFydHMubGVuZ3RoKTt2YXIgc2FtZVBhcnRzTGVuZ3RoPWxlbmd0aDtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe2lmKGZyb21QYXJ0c1tpXSE9PXRvUGFydHNbaV0pe3NhbWVQYXJ0c0xlbmd0aD1pO2JyZWFrfX12YXIgb3V0cHV0UGFydHM9W107Zm9yKHZhciBpPXNhbWVQYXJ0c0xlbmd0aDtpPGZyb21QYXJ0cy5sZW5ndGg7aSsrKXtvdXRwdXRQYXJ0cy5wdXNoKFwiLi5cIil9b3V0cHV0UGFydHM9b3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7cmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oXCIvXCIpfSl9O3ZhciBUVFk9e3R0eXM6W10saW5pdDooZnVuY3Rpb24oKXt9KSxzaHV0ZG93bjooZnVuY3Rpb24oKXt9KSxyZWdpc3RlcjooZnVuY3Rpb24oZGV2LG9wcyl7VFRZLnR0eXNbZGV2XT17aW5wdXQ6W10sb3V0cHV0OltdLG9wczpvcHN9O0ZTLnJlZ2lzdGVyRGV2aWNlKGRldixUVFkuc3RyZWFtX29wcyl9KSxzdHJlYW1fb3BzOntvcGVuOihmdW5jdGlvbihzdHJlYW0pe3ZhciB0dHk9VFRZLnR0eXNbc3RyZWFtLm5vZGUucmRldl07aWYoIXR0eSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKX1zdHJlYW0udHR5PXR0eTtzdHJlYW0uc2Vla2FibGU9ZmFsc2V9KSxjbG9zZTooZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mbHVzaChzdHJlYW0udHR5KX0pLGZsdXNoOihmdW5jdGlvbihzdHJlYW0pe3N0cmVhbS50dHkub3BzLmZsdXNoKHN0cmVhbS50dHkpfSkscmVhZDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7aWYoIXN0cmVhbS50dHl8fCFzdHJlYW0udHR5Lm9wcy5nZXRfY2hhcil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5YSU8pfXZhciBieXRlc1JlYWQ9MDtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe3ZhciByZXN1bHQ7dHJ5e3Jlc3VsdD1zdHJlYW0udHR5Lm9wcy5nZXRfY2hhcihzdHJlYW0udHR5KX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU8pfWlmKHJlc3VsdD09PXVuZGVmaW5lZCYmYnl0ZXNSZWFkPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUFHQUlOKX1pZihyZXN1bHQ9PT1udWxsfHxyZXN1bHQ9PT11bmRlZmluZWQpYnJlYWs7Ynl0ZXNSZWFkKys7YnVmZmVyW29mZnNldCtpXT1yZXN1bHR9aWYoYnl0ZXNSZWFkKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gYnl0ZXNSZWFkfSksd3JpdGU6KGZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe2lmKCFzdHJlYW0udHR5fHwhc3RyZWFtLnR0eS5vcHMucHV0X2NoYXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOWElPKX1mb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe3RyeXtzdHJlYW0udHR5Lm9wcy5wdXRfY2hhcihzdHJlYW0udHR5LGJ1ZmZlcltvZmZzZXQraV0pfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTyl9fWlmKGxlbmd0aCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGl9KX0sZGVmYXVsdF90dHlfb3BzOntnZXRfY2hhcjooZnVuY3Rpb24odHR5KXtpZighdHR5LmlucHV0Lmxlbmd0aCl7dmFyIHJlc3VsdD1udWxsO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBCVUZTSVpFPTI1Njt2YXIgYnVmPW5ldyBCdWZmZXIoQlVGU0laRSk7dmFyIGJ5dGVzUmVhZD0wO3ZhciBpc1Bvc2l4UGxhdGZvcm09cHJvY2Vzcy5wbGF0Zm9ybSE9XCJ3aW4zMlwiO3ZhciBmZD1wcm9jZXNzLnN0ZGluLmZkO2lmKGlzUG9zaXhQbGF0Zm9ybSl7dmFyIHVzaW5nRGV2aWNlPWZhbHNlO3RyeXtmZD1mcy5vcGVuU3luYyhcIi9kZXYvc3RkaW5cIixcInJcIik7dXNpbmdEZXZpY2U9dHJ1ZX1jYXRjaChlKXt9fXRyeXtieXRlc1JlYWQ9ZnMucmVhZFN5bmMoZmQsYnVmLDAsQlVGU0laRSxudWxsKX1jYXRjaChlKXtpZihlLnRvU3RyaW5nKCkuaW5kZXhPZihcIkVPRlwiKSE9LTEpYnl0ZXNSZWFkPTA7ZWxzZSB0aHJvdyBlfWlmKHVzaW5nRGV2aWNlKXtmcy5jbG9zZVN5bmMoZmQpfWlmKGJ5dGVzUmVhZD4wKXtyZXN1bHQ9YnVmLnNsaWNlKDAsYnl0ZXNSZWFkKS50b1N0cmluZyhcInV0Zi04XCIpfWVsc2V7cmVzdWx0PW51bGx9fWVsc2UgaWYodHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHdpbmRvdy5wcm9tcHQ9PVwiZnVuY3Rpb25cIil7cmVzdWx0PXdpbmRvdy5wcm9tcHQoXCJJbnB1dDogXCIpO2lmKHJlc3VsdCE9PW51bGwpe3Jlc3VsdCs9XCJcXG5cIn19ZWxzZSBpZih0eXBlb2YgcmVhZGxpbmU9PVwiZnVuY3Rpb25cIil7cmVzdWx0PXJlYWRsaW5lKCk7aWYocmVzdWx0IT09bnVsbCl7cmVzdWx0Kz1cIlxcblwifX1pZighcmVzdWx0KXtyZXR1cm4gbnVsbH10dHkuaW5wdXQ9aW50QXJyYXlGcm9tU3RyaW5nKHJlc3VsdCx0cnVlKX1yZXR1cm4gdHR5LmlucHV0LnNoaWZ0KCl9KSxwdXRfY2hhcjooZnVuY3Rpb24odHR5LHZhbCl7aWYodmFsPT09bnVsbHx8dmFsPT09MTApe291dChVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfWVsc2V7aWYodmFsIT0wKXR0eS5vdXRwdXQucHVzaCh2YWwpfX0pLGZsdXNoOihmdW5jdGlvbih0dHkpe2lmKHR0eS5vdXRwdXQmJnR0eS5vdXRwdXQubGVuZ3RoPjApe291dChVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfX0pfSxkZWZhdWx0X3R0eTFfb3BzOntwdXRfY2hhcjooZnVuY3Rpb24odHR5LHZhbCl7aWYodmFsPT09bnVsbHx8dmFsPT09MTApe2VycihVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfWVsc2V7aWYodmFsIT0wKXR0eS5vdXRwdXQucHVzaCh2YWwpfX0pLGZsdXNoOihmdW5jdGlvbih0dHkpe2lmKHR0eS5vdXRwdXQmJnR0eS5vdXRwdXQubGVuZ3RoPjApe2VycihVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfX0pfX07dmFyIE1FTUZTPXtvcHNfdGFibGU6bnVsbCxtb3VudDooZnVuY3Rpb24obW91bnQpe3JldHVybiBNRU1GUy5jcmVhdGVOb2RlKG51bGwsXCIvXCIsMTYzODR8NTExLDApfSksY3JlYXRlTm9kZTooZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxkZXYpe2lmKEZTLmlzQmxrZGV2KG1vZGUpfHxGUy5pc0ZJRk8obW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX1pZighTUVNRlMub3BzX3RhYmxlKXtNRU1GUy5vcHNfdGFibGU9e2Rpcjp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cixsb29rdXA6TUVNRlMubm9kZV9vcHMubG9va3VwLG1rbm9kOk1FTUZTLm5vZGVfb3BzLm1rbm9kLHJlbmFtZTpNRU1GUy5ub2RlX29wcy5yZW5hbWUsdW5saW5rOk1FTUZTLm5vZGVfb3BzLnVubGluayxybWRpcjpNRU1GUy5ub2RlX29wcy5ybWRpcixyZWFkZGlyOk1FTUZTLm5vZGVfb3BzLnJlYWRkaXIsc3ltbGluazpNRU1GUy5ub2RlX29wcy5zeW1saW5rfSxzdHJlYW06e2xsc2VlazpNRU1GUy5zdHJlYW1fb3BzLmxsc2Vla319LGZpbGU6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTp7bGxzZWVrOk1FTUZTLnN0cmVhbV9vcHMubGxzZWVrLHJlYWQ6TUVNRlMuc3RyZWFtX29wcy5yZWFkLHdyaXRlOk1FTUZTLnN0cmVhbV9vcHMud3JpdGUsYWxsb2NhdGU6TUVNRlMuc3RyZWFtX29wcy5hbGxvY2F0ZSxtbWFwOk1FTUZTLnN0cmVhbV9vcHMubW1hcCxtc3luYzpNRU1GUy5zdHJlYW1fb3BzLm1zeW5jfX0sbGluazp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cixyZWFkbGluazpNRU1GUy5ub2RlX29wcy5yZWFkbGlua30sc3RyZWFtOnt9fSxjaHJkZXY6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTpGUy5jaHJkZXZfc3RyZWFtX29wc319fXZhciBub2RlPUZTLmNyZWF0ZU5vZGUocGFyZW50LG5hbWUsbW9kZSxkZXYpO2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmRpci5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUuZGlyLnN0cmVhbTtub2RlLmNvbnRlbnRzPXt9fWVsc2UgaWYoRlMuaXNGaWxlKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmZpbGUubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmZpbGUuc3RyZWFtO25vZGUudXNlZEJ5dGVzPTA7bm9kZS5jb250ZW50cz1udWxsfWVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmxpbmsubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmxpbmsuc3RyZWFtfWVsc2UgaWYoRlMuaXNDaHJkZXYobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuY2hyZGV2Lm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5jaHJkZXYuc3RyZWFtfW5vZGUudGltZXN0YW1wPURhdGUubm93KCk7aWYocGFyZW50KXtwYXJlbnQuY29udGVudHNbbmFtZV09bm9kZX1yZXR1cm4gbm9kZX0pLGdldEZpbGVEYXRhQXNSZWd1bGFyQXJyYXk6KGZ1bmN0aW9uKG5vZGUpe2lmKG5vZGUuY29udGVudHMmJm5vZGUuY29udGVudHMuc3ViYXJyYXkpe3ZhciBhcnI9W107Zm9yKHZhciBpPTA7aTxub2RlLnVzZWRCeXRlczsrK2kpYXJyLnB1c2gobm9kZS5jb250ZW50c1tpXSk7cmV0dXJuIGFycn1yZXR1cm4gbm9kZS5jb250ZW50c30pLGdldEZpbGVEYXRhQXNUeXBlZEFycmF5OihmdW5jdGlvbihub2RlKXtpZighbm9kZS5jb250ZW50cylyZXR1cm4gbmV3IFVpbnQ4QXJyYXk7aWYobm9kZS5jb250ZW50cy5zdWJhcnJheSlyZXR1cm4gbm9kZS5jb250ZW50cy5zdWJhcnJheSgwLG5vZGUudXNlZEJ5dGVzKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkobm9kZS5jb250ZW50cyl9KSxleHBhbmRGaWxlU3RvcmFnZTooZnVuY3Rpb24obm9kZSxuZXdDYXBhY2l0eSl7aWYobm9kZS5jb250ZW50cyYmbm9kZS5jb250ZW50cy5zdWJhcnJheSYmbmV3Q2FwYWNpdHk+bm9kZS5jb250ZW50cy5sZW5ndGgpe25vZGUuY29udGVudHM9TUVNRlMuZ2V0RmlsZURhdGFBc1JlZ3VsYXJBcnJheShub2RlKTtub2RlLnVzZWRCeXRlcz1ub2RlLmNvbnRlbnRzLmxlbmd0aH1pZighbm9kZS5jb250ZW50c3x8bm9kZS5jb250ZW50cy5zdWJhcnJheSl7dmFyIHByZXZDYXBhY2l0eT1ub2RlLmNvbnRlbnRzP25vZGUuY29udGVudHMubGVuZ3RoOjA7aWYocHJldkNhcGFjaXR5Pj1uZXdDYXBhY2l0eSlyZXR1cm47dmFyIENBUEFDSVRZX0RPVUJMSU5HX01BWD0xMDI0KjEwMjQ7bmV3Q2FwYWNpdHk9TWF0aC5tYXgobmV3Q2FwYWNpdHkscHJldkNhcGFjaXR5KihwcmV2Q2FwYWNpdHk8Q0FQQUNJVFlfRE9VQkxJTkdfTUFYPzI6MS4xMjUpfDApO2lmKHByZXZDYXBhY2l0eSE9MCluZXdDYXBhY2l0eT1NYXRoLm1heChuZXdDYXBhY2l0eSwyNTYpO3ZhciBvbGRDb250ZW50cz1ub2RlLmNvbnRlbnRzO25vZGUuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkobmV3Q2FwYWNpdHkpO2lmKG5vZGUudXNlZEJ5dGVzPjApbm9kZS5jb250ZW50cy5zZXQob2xkQ29udGVudHMuc3ViYXJyYXkoMCxub2RlLnVzZWRCeXRlcyksMCk7cmV0dXJufWlmKCFub2RlLmNvbnRlbnRzJiZuZXdDYXBhY2l0eT4wKW5vZGUuY29udGVudHM9W107d2hpbGUobm9kZS5jb250ZW50cy5sZW5ndGg8bmV3Q2FwYWNpdHkpbm9kZS5jb250ZW50cy5wdXNoKDApfSkscmVzaXplRmlsZVN0b3JhZ2U6KGZ1bmN0aW9uKG5vZGUsbmV3U2l6ZSl7aWYobm9kZS51c2VkQnl0ZXM9PW5ld1NpemUpcmV0dXJuO2lmKG5ld1NpemU9PTApe25vZGUuY29udGVudHM9bnVsbDtub2RlLnVzZWRCeXRlcz0wO3JldHVybn1pZighbm9kZS5jb250ZW50c3x8bm9kZS5jb250ZW50cy5zdWJhcnJheSl7dmFyIG9sZENvbnRlbnRzPW5vZGUuY29udGVudHM7bm9kZS5jb250ZW50cz1uZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIobmV3U2l6ZSkpO2lmKG9sZENvbnRlbnRzKXtub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLE1hdGgubWluKG5ld1NpemUsbm9kZS51c2VkQnl0ZXMpKSl9bm9kZS51c2VkQnl0ZXM9bmV3U2l6ZTtyZXR1cm59aWYoIW5vZGUuY29udGVudHMpbm9kZS5jb250ZW50cz1bXTtpZihub2RlLmNvbnRlbnRzLmxlbmd0aD5uZXdTaXplKW5vZGUuY29udGVudHMubGVuZ3RoPW5ld1NpemU7ZWxzZSB3aGlsZShub2RlLmNvbnRlbnRzLmxlbmd0aDxuZXdTaXplKW5vZGUuY29udGVudHMucHVzaCgwKTtub2RlLnVzZWRCeXRlcz1uZXdTaXplfSksbm9kZV9vcHM6e2dldGF0dHI6KGZ1bmN0aW9uKG5vZGUpe3ZhciBhdHRyPXt9O2F0dHIuZGV2PUZTLmlzQ2hyZGV2KG5vZGUubW9kZSk/bm9kZS5pZDoxO2F0dHIuaW5vPW5vZGUuaWQ7YXR0ci5tb2RlPW5vZGUubW9kZTthdHRyLm5saW5rPTE7YXR0ci51aWQ9MDthdHRyLmdpZD0wO2F0dHIucmRldj1ub2RlLnJkZXY7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7YXR0ci5zaXplPTQwOTZ9ZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSl7YXR0ci5zaXplPW5vZGUudXNlZEJ5dGVzfWVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe2F0dHIuc2l6ZT1ub2RlLmxpbmsubGVuZ3RofWVsc2V7YXR0ci5zaXplPTB9YXR0ci5hdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5tdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5jdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5ibGtzaXplPTQwOTY7YXR0ci5ibG9ja3M9TWF0aC5jZWlsKGF0dHIuc2l6ZS9hdHRyLmJsa3NpemUpO3JldHVybiBhdHRyfSksc2V0YXR0cjooZnVuY3Rpb24obm9kZSxhdHRyKXtpZihhdHRyLm1vZGUhPT11bmRlZmluZWQpe25vZGUubW9kZT1hdHRyLm1vZGV9aWYoYXR0ci50aW1lc3RhbXAhPT11bmRlZmluZWQpe25vZGUudGltZXN0YW1wPWF0dHIudGltZXN0YW1wfWlmKGF0dHIuc2l6ZSE9PXVuZGVmaW5lZCl7TUVNRlMucmVzaXplRmlsZVN0b3JhZ2Uobm9kZSxhdHRyLnNpemUpfX0pLGxvb2t1cDooZnVuY3Rpb24ocGFyZW50LG5hbWUpe3Rocm93IEZTLmdlbmVyaWNFcnJvcnNbRVJSTk9fQ09ERVMuRU5PRU5UXX0pLG1rbm9kOihmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLGRldil7cmV0dXJuIE1FTUZTLmNyZWF0ZU5vZGUocGFyZW50LG5hbWUsbW9kZSxkZXYpfSkscmVuYW1lOihmdW5jdGlvbihvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKXtpZihGUy5pc0RpcihvbGRfbm9kZS5tb2RlKSl7dmFyIG5ld19ub2RlO3RyeXtuZXdfbm9kZT1GUy5sb29rdXBOb2RlKG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe31pZihuZXdfbm9kZSl7Zm9yKHZhciBpIGluIG5ld19ub2RlLmNvbnRlbnRzKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URU1QVFkpfX19ZGVsZXRlIG9sZF9ub2RlLnBhcmVudC5jb250ZW50c1tvbGRfbm9kZS5uYW1lXTtvbGRfbm9kZS5uYW1lPW5ld19uYW1lO25ld19kaXIuY29udGVudHNbbmV3X25hbWVdPW9sZF9ub2RlO29sZF9ub2RlLnBhcmVudD1uZXdfZGlyfSksdW5saW5rOihmdW5jdGlvbihwYXJlbnQsbmFtZSl7ZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXX0pLHJtZGlyOihmdW5jdGlvbihwYXJlbnQsbmFtZSl7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7Zm9yKHZhciBpIGluIG5vZGUuY29udGVudHMpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT1RFTVBUWSl9ZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXX0pLHJlYWRkaXI6KGZ1bmN0aW9uKG5vZGUpe3ZhciBlbnRyaWVzPVtcIi5cIixcIi4uXCJdO2Zvcih2YXIga2V5IGluIG5vZGUuY29udGVudHMpe2lmKCFub2RlLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGtleSkpe2NvbnRpbnVlfWVudHJpZXMucHVzaChrZXkpfXJldHVybiBlbnRyaWVzfSksc3ltbGluazooZnVuY3Rpb24ocGFyZW50LG5ld25hbWUsb2xkcGF0aCl7dmFyIG5vZGU9TUVNRlMuY3JlYXRlTm9kZShwYXJlbnQsbmV3bmFtZSw1MTF8NDA5NjAsMCk7bm9kZS5saW5rPW9sZHBhdGg7cmV0dXJuIG5vZGV9KSxyZWFkbGluazooZnVuY3Rpb24obm9kZSl7aWYoIUZTLmlzTGluayhub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfXJldHVybiBub2RlLmxpbmt9KX0sc3RyZWFtX29wczp7cmVhZDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXt2YXIgY29udGVudHM9c3RyZWFtLm5vZGUuY29udGVudHM7aWYocG9zaXRpb24+PXN0cmVhbS5ub2RlLnVzZWRCeXRlcylyZXR1cm4gMDt2YXIgc2l6ZT1NYXRoLm1pbihzdHJlYW0ubm9kZS51c2VkQnl0ZXMtcG9zaXRpb24sbGVuZ3RoKTthc3NlcnQoc2l6ZT49MCk7aWYoc2l6ZT44JiZjb250ZW50cy5zdWJhcnJheSl7YnVmZmVyLnNldChjb250ZW50cy5zdWJhcnJheShwb3NpdGlvbixwb3NpdGlvbitzaXplKSxvZmZzZXQpfWVsc2V7Zm9yKHZhciBpPTA7aTxzaXplO2krKylidWZmZXJbb2Zmc2V0K2ldPWNvbnRlbnRzW3Bvc2l0aW9uK2ldfXJldHVybiBzaXplfSksd3JpdGU6KGZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixjYW5Pd24pe2lmKCFsZW5ndGgpcmV0dXJuIDA7dmFyIG5vZGU9c3RyZWFtLm5vZGU7bm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKTtpZihidWZmZXIuc3ViYXJyYXkmJighbm9kZS5jb250ZW50c3x8bm9kZS5jb250ZW50cy5zdWJhcnJheSkpe2lmKGNhbk93bil7bm9kZS5jb250ZW50cz1idWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpO25vZGUudXNlZEJ5dGVzPWxlbmd0aDtyZXR1cm4gbGVuZ3RofWVsc2UgaWYobm9kZS51c2VkQnl0ZXM9PT0wJiZwb3NpdGlvbj09PTApe25vZGUuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkoYnVmZmVyLnN1YmFycmF5KG9mZnNldCxvZmZzZXQrbGVuZ3RoKSk7bm9kZS51c2VkQnl0ZXM9bGVuZ3RoO3JldHVybiBsZW5ndGh9ZWxzZSBpZihwb3NpdGlvbitsZW5ndGg8PW5vZGUudXNlZEJ5dGVzKXtub2RlLmNvbnRlbnRzLnNldChidWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpLHBvc2l0aW9uKTtyZXR1cm4gbGVuZ3RofX1NRU1GUy5leHBhbmRGaWxlU3RvcmFnZShub2RlLHBvc2l0aW9uK2xlbmd0aCk7aWYobm9kZS5jb250ZW50cy5zdWJhcnJheSYmYnVmZmVyLnN1YmFycmF5KW5vZGUuY29udGVudHMuc2V0KGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCkscG9zaXRpb24pO2Vsc2V7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtub2RlLmNvbnRlbnRzW3Bvc2l0aW9uK2ldPWJ1ZmZlcltvZmZzZXQraV19fW5vZGUudXNlZEJ5dGVzPU1hdGgubWF4KG5vZGUudXNlZEJ5dGVzLHBvc2l0aW9uK2xlbmd0aCk7cmV0dXJuIGxlbmd0aH0pLGxsc2VlazooZnVuY3Rpb24oc3RyZWFtLG9mZnNldCx3aGVuY2Upe3ZhciBwb3NpdGlvbj1vZmZzZXQ7aWYod2hlbmNlPT09MSl7cG9zaXRpb24rPXN0cmVhbS5wb3NpdGlvbn1lbHNlIGlmKHdoZW5jZT09PTIpe2lmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7cG9zaXRpb24rPXN0cmVhbS5ub2RlLnVzZWRCeXRlc319aWYocG9zaXRpb248MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKX1yZXR1cm4gcG9zaXRpb259KSxhbGxvY2F0ZTooZnVuY3Rpb24oc3RyZWFtLG9mZnNldCxsZW5ndGgpe01FTUZTLmV4cGFuZEZpbGVTdG9yYWdlKHN0cmVhbS5ub2RlLG9mZnNldCtsZW5ndGgpO3N0cmVhbS5ub2RlLnVzZWRCeXRlcz1NYXRoLm1heChzdHJlYW0ubm9kZS51c2VkQnl0ZXMsb2Zmc2V0K2xlbmd0aCl9KSxtbWFwOihmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl7aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKX12YXIgcHRyO3ZhciBhbGxvY2F0ZWQ7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKCEoZmxhZ3MmMikmJihjb250ZW50cy5idWZmZXI9PT1idWZmZXJ8fGNvbnRlbnRzLmJ1ZmZlcj09PWJ1ZmZlci5idWZmZXIpKXthbGxvY2F0ZWQ9ZmFsc2U7cHRyPWNvbnRlbnRzLmJ5dGVPZmZzZXR9ZWxzZXtpZihwb3NpdGlvbj4wfHxwb3NpdGlvbitsZW5ndGg8c3RyZWFtLm5vZGUudXNlZEJ5dGVzKXtpZihjb250ZW50cy5zdWJhcnJheSl7Y29udGVudHM9Y29udGVudHMuc3ViYXJyYXkocG9zaXRpb24scG9zaXRpb24rbGVuZ3RoKX1lbHNle2NvbnRlbnRzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbnRlbnRzLHBvc2l0aW9uLHBvc2l0aW9uK2xlbmd0aCl9fWFsbG9jYXRlZD10cnVlO3B0cj1fbWFsbG9jKGxlbmd0aCk7aWYoIXB0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PTUVNKX1idWZmZXIuc2V0KGNvbnRlbnRzLHB0cil9cmV0dXJue3B0cjpwdHIsYWxsb2NhdGVkOmFsbG9jYXRlZH19KSxtc3luYzooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLG1tYXBGbGFncyl7aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKX1pZihtbWFwRmxhZ3MmMil7cmV0dXJuIDB9dmFyIGJ5dGVzV3JpdHRlbj1NRU1GUy5zdHJlYW1fb3BzLndyaXRlKHN0cmVhbSxidWZmZXIsMCxsZW5ndGgsb2Zmc2V0LGZhbHNlKTtyZXR1cm4gMH0pfX07dmFyIElEQkZTPXtkYnM6e30saW5kZXhlZERCOihmdW5jdGlvbigpe2lmKHR5cGVvZiBpbmRleGVkREIhPT1cInVuZGVmaW5lZFwiKXJldHVybiBpbmRleGVkREI7dmFyIHJldD1udWxsO2lmKHR5cGVvZiB3aW5kb3c9PT1cIm9iamVjdFwiKXJldD13aW5kb3cuaW5kZXhlZERCfHx3aW5kb3cubW96SW5kZXhlZERCfHx3aW5kb3cud2Via2l0SW5kZXhlZERCfHx3aW5kb3cubXNJbmRleGVkREI7YXNzZXJ0KHJldCxcIklEQkZTIHVzZWQsIGJ1dCBpbmRleGVkREIgbm90IHN1cHBvcnRlZFwiKTtyZXR1cm4gcmV0fSksREJfVkVSU0lPTjoyMSxEQl9TVE9SRV9OQU1FOlwiRklMRV9EQVRBXCIsbW91bnQ6KGZ1bmN0aW9uKG1vdW50KXtyZXR1cm4gTUVNRlMubW91bnQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSksc3luY2ZzOihmdW5jdGlvbihtb3VudCxwb3B1bGF0ZSxjYWxsYmFjayl7SURCRlMuZ2V0TG9jYWxTZXQobW91bnQsKGZ1bmN0aW9uKGVycixsb2NhbCl7aWYoZXJyKXJldHVybiBjYWxsYmFjayhlcnIpO0lEQkZTLmdldFJlbW90ZVNldChtb3VudCwoZnVuY3Rpb24oZXJyLHJlbW90ZSl7aWYoZXJyKXJldHVybiBjYWxsYmFjayhlcnIpO3ZhciBzcmM9cG9wdWxhdGU/cmVtb3RlOmxvY2FsO3ZhciBkc3Q9cG9wdWxhdGU/bG9jYWw6cmVtb3RlO0lEQkZTLnJlY29uY2lsZShzcmMsZHN0LGNhbGxiYWNrKX0pKX0pKX0pLGdldERCOihmdW5jdGlvbihuYW1lLGNhbGxiYWNrKXt2YXIgZGI9SURCRlMuZGJzW25hbWVdO2lmKGRiKXtyZXR1cm4gY2FsbGJhY2sobnVsbCxkYil9dmFyIHJlcTt0cnl7cmVxPUlEQkZTLmluZGV4ZWREQigpLm9wZW4obmFtZSxJREJGUy5EQl9WRVJTSU9OKX1jYXRjaChlKXtyZXR1cm4gY2FsbGJhY2soZSl9aWYoIXJlcSl7cmV0dXJuIGNhbGxiYWNrKFwiVW5hYmxlIHRvIGNvbm5lY3QgdG8gSW5kZXhlZERCXCIpfXJlcS5vbnVwZ3JhZGVuZWVkZWQ9KGZ1bmN0aW9uKGUpe3ZhciBkYj1lLnRhcmdldC5yZXN1bHQ7dmFyIHRyYW5zYWN0aW9uPWUudGFyZ2V0LnRyYW5zYWN0aW9uO3ZhciBmaWxlU3RvcmU7aWYoZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhJREJGUy5EQl9TVE9SRV9OQU1FKSl7ZmlsZVN0b3JlPXRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKElEQkZTLkRCX1NUT1JFX05BTUUpfWVsc2V7ZmlsZVN0b3JlPWRiLmNyZWF0ZU9iamVjdFN0b3JlKElEQkZTLkRCX1NUT1JFX05BTUUpfWlmKCFmaWxlU3RvcmUuaW5kZXhOYW1lcy5jb250YWlucyhcInRpbWVzdGFtcFwiKSl7ZmlsZVN0b3JlLmNyZWF0ZUluZGV4KFwidGltZXN0YW1wXCIsXCJ0aW1lc3RhbXBcIix7dW5pcXVlOmZhbHNlfSl9fSk7cmVxLm9uc3VjY2Vzcz0oZnVuY3Rpb24oKXtkYj1yZXEucmVzdWx0O0lEQkZTLmRic1tuYW1lXT1kYjtjYWxsYmFjayhudWxsLGRiKX0pO3JlcS5vbmVycm9yPShmdW5jdGlvbihlKXtjYWxsYmFjayh0aGlzLmVycm9yKTtlLnByZXZlbnREZWZhdWx0KCl9KX0pLGdldExvY2FsU2V0OihmdW5jdGlvbihtb3VudCxjYWxsYmFjayl7dmFyIGVudHJpZXM9e307ZnVuY3Rpb24gaXNSZWFsRGlyKHApe3JldHVybiBwIT09XCIuXCImJnAhPT1cIi4uXCJ9ZnVuY3Rpb24gdG9BYnNvbHV0ZShyb290KXtyZXR1cm4oZnVuY3Rpb24ocCl7cmV0dXJuIFBBVEguam9pbjIocm9vdCxwKX0pfXZhciBjaGVjaz1GUy5yZWFkZGlyKG1vdW50Lm1vdW50cG9pbnQpLmZpbHRlcihpc1JlYWxEaXIpLm1hcCh0b0Fic29sdXRlKG1vdW50Lm1vdW50cG9pbnQpKTt3aGlsZShjaGVjay5sZW5ndGgpe3ZhciBwYXRoPWNoZWNrLnBvcCgpO3ZhciBzdGF0O3RyeXtzdGF0PUZTLnN0YXQocGF0aCl9Y2F0Y2goZSl7cmV0dXJuIGNhbGxiYWNrKGUpfWlmKEZTLmlzRGlyKHN0YXQubW9kZSkpe2NoZWNrLnB1c2guYXBwbHkoY2hlY2ssRlMucmVhZGRpcihwYXRoKS5maWx0ZXIoaXNSZWFsRGlyKS5tYXAodG9BYnNvbHV0ZShwYXRoKSkpfWVudHJpZXNbcGF0aF09e3RpbWVzdGFtcDpzdGF0Lm10aW1lfX1yZXR1cm4gY2FsbGJhY2sobnVsbCx7dHlwZTpcImxvY2FsXCIsZW50cmllczplbnRyaWVzfSl9KSxnZXRSZW1vdGVTZXQ6KGZ1bmN0aW9uKG1vdW50LGNhbGxiYWNrKXt2YXIgZW50cmllcz17fTtJREJGUy5nZXREQihtb3VudC5tb3VudHBvaW50LChmdW5jdGlvbihlcnIsZGIpe2lmKGVycilyZXR1cm4gY2FsbGJhY2soZXJyKTt0cnl7dmFyIHRyYW5zYWN0aW9uPWRiLnRyYW5zYWN0aW9uKFtJREJGUy5EQl9TVE9SRV9OQU1FXSxcInJlYWRvbmx5XCIpO3RyYW5zYWN0aW9uLm9uZXJyb3I9KGZ1bmN0aW9uKGUpe2NhbGxiYWNrKHRoaXMuZXJyb3IpO2UucHJldmVudERlZmF1bHQoKX0pO3ZhciBzdG9yZT10cmFuc2FjdGlvbi5vYmplY3RTdG9yZShJREJGUy5EQl9TVE9SRV9OQU1FKTt2YXIgaW5kZXg9c3RvcmUuaW5kZXgoXCJ0aW1lc3RhbXBcIik7aW5kZXgub3BlbktleUN1cnNvcigpLm9uc3VjY2Vzcz0oZnVuY3Rpb24oZXZlbnQpe3ZhciBjdXJzb3I9ZXZlbnQudGFyZ2V0LnJlc3VsdDtpZighY3Vyc29yKXtyZXR1cm4gY2FsbGJhY2sobnVsbCx7dHlwZTpcInJlbW90ZVwiLGRiOmRiLGVudHJpZXM6ZW50cmllc30pfWVudHJpZXNbY3Vyc29yLnByaW1hcnlLZXldPXt0aW1lc3RhbXA6Y3Vyc29yLmtleX07Y3Vyc29yLmNvbnRpbnVlKCl9KX1jYXRjaChlKXtyZXR1cm4gY2FsbGJhY2soZSl9fSkpfSksbG9hZExvY2FsRW50cnk6KGZ1bmN0aW9uKHBhdGgsY2FsbGJhY2spe3ZhciBzdGF0LG5vZGU7dHJ5e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoKTtub2RlPWxvb2t1cC5ub2RlO3N0YXQ9RlMuc3RhdChwYXRoKX1jYXRjaChlKXtyZXR1cm4gY2FsbGJhY2soZSl9aWYoRlMuaXNEaXIoc3RhdC5tb2RlKSl7cmV0dXJuIGNhbGxiYWNrKG51bGwse3RpbWVzdGFtcDpzdGF0Lm10aW1lLG1vZGU6c3RhdC5tb2RlfSl9ZWxzZSBpZihGUy5pc0ZpbGUoc3RhdC5tb2RlKSl7bm9kZS5jb250ZW50cz1NRU1GUy5nZXRGaWxlRGF0YUFzVHlwZWRBcnJheShub2RlKTtyZXR1cm4gY2FsbGJhY2sobnVsbCx7dGltZXN0YW1wOnN0YXQubXRpbWUsbW9kZTpzdGF0Lm1vZGUsY29udGVudHM6bm9kZS5jb250ZW50c30pfWVsc2V7cmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIm5vZGUgdHlwZSBub3Qgc3VwcG9ydGVkXCIpKX19KSxzdG9yZUxvY2FsRW50cnk6KGZ1bmN0aW9uKHBhdGgsZW50cnksY2FsbGJhY2spe3RyeXtpZihGUy5pc0RpcihlbnRyeS5tb2RlKSl7RlMubWtkaXIocGF0aCxlbnRyeS5tb2RlKX1lbHNlIGlmKEZTLmlzRmlsZShlbnRyeS5tb2RlKSl7RlMud3JpdGVGaWxlKHBhdGgsZW50cnkuY29udGVudHMse2Nhbk93bjp0cnVlfSl9ZWxzZXtyZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwibm9kZSB0eXBlIG5vdCBzdXBwb3J0ZWRcIikpfUZTLmNobW9kKHBhdGgsZW50cnkubW9kZSk7RlMudXRpbWUocGF0aCxlbnRyeS50aW1lc3RhbXAsZW50cnkudGltZXN0YW1wKX1jYXRjaChlKXtyZXR1cm4gY2FsbGJhY2soZSl9Y2FsbGJhY2sobnVsbCl9KSxyZW1vdmVMb2NhbEVudHJ5OihmdW5jdGlvbihwYXRoLGNhbGxiYWNrKXt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgpO3ZhciBzdGF0PUZTLnN0YXQocGF0aCk7aWYoRlMuaXNEaXIoc3RhdC5tb2RlKSl7RlMucm1kaXIocGF0aCl9ZWxzZSBpZihGUy5pc0ZpbGUoc3RhdC5tb2RlKSl7RlMudW5saW5rKHBhdGgpfX1jYXRjaChlKXtyZXR1cm4gY2FsbGJhY2soZSl9Y2FsbGJhY2sobnVsbCl9KSxsb2FkUmVtb3RlRW50cnk6KGZ1bmN0aW9uKHN0b3JlLHBhdGgsY2FsbGJhY2spe3ZhciByZXE9c3RvcmUuZ2V0KHBhdGgpO3JlcS5vbnN1Y2Nlc3M9KGZ1bmN0aW9uKGV2ZW50KXtjYWxsYmFjayhudWxsLGV2ZW50LnRhcmdldC5yZXN1bHQpfSk7cmVxLm9uZXJyb3I9KGZ1bmN0aW9uKGUpe2NhbGxiYWNrKHRoaXMuZXJyb3IpO2UucHJldmVudERlZmF1bHQoKX0pfSksc3RvcmVSZW1vdGVFbnRyeTooZnVuY3Rpb24oc3RvcmUscGF0aCxlbnRyeSxjYWxsYmFjayl7dmFyIHJlcT1zdG9yZS5wdXQoZW50cnkscGF0aCk7cmVxLm9uc3VjY2Vzcz0oZnVuY3Rpb24oKXtjYWxsYmFjayhudWxsKX0pO3JlcS5vbmVycm9yPShmdW5jdGlvbihlKXtjYWxsYmFjayh0aGlzLmVycm9yKTtlLnByZXZlbnREZWZhdWx0KCl9KX0pLHJlbW92ZVJlbW90ZUVudHJ5OihmdW5jdGlvbihzdG9yZSxwYXRoLGNhbGxiYWNrKXt2YXIgcmVxPXN0b3JlLmRlbGV0ZShwYXRoKTtyZXEub25zdWNjZXNzPShmdW5jdGlvbigpe2NhbGxiYWNrKG51bGwpfSk7cmVxLm9uZXJyb3I9KGZ1bmN0aW9uKGUpe2NhbGxiYWNrKHRoaXMuZXJyb3IpO2UucHJldmVudERlZmF1bHQoKX0pfSkscmVjb25jaWxlOihmdW5jdGlvbihzcmMsZHN0LGNhbGxiYWNrKXt2YXIgdG90YWw9MDt2YXIgY3JlYXRlPVtdO09iamVjdC5rZXlzKHNyYy5lbnRyaWVzKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpe3ZhciBlPXNyYy5lbnRyaWVzW2tleV07dmFyIGUyPWRzdC5lbnRyaWVzW2tleV07aWYoIWUyfHxlLnRpbWVzdGFtcD5lMi50aW1lc3RhbXApe2NyZWF0ZS5wdXNoKGtleSk7dG90YWwrK319KSk7dmFyIHJlbW92ZT1bXTtPYmplY3Qua2V5cyhkc3QuZW50cmllcykuZm9yRWFjaCgoZnVuY3Rpb24oa2V5KXt2YXIgZT1kc3QuZW50cmllc1trZXldO3ZhciBlMj1zcmMuZW50cmllc1trZXldO2lmKCFlMil7cmVtb3ZlLnB1c2goa2V5KTt0b3RhbCsrfX0pKTtpZighdG90YWwpe3JldHVybiBjYWxsYmFjayhudWxsKX12YXIgY29tcGxldGVkPTA7dmFyIGRiPXNyYy50eXBlPT09XCJyZW1vdGVcIj9zcmMuZGI6ZHN0LmRiO3ZhciB0cmFuc2FjdGlvbj1kYi50cmFuc2FjdGlvbihbSURCRlMuREJfU1RPUkVfTkFNRV0sXCJyZWFkd3JpdGVcIik7dmFyIHN0b3JlPXRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKElEQkZTLkRCX1NUT1JFX05BTUUpO2Z1bmN0aW9uIGRvbmUoZXJyKXtpZihlcnIpe2lmKCFkb25lLmVycm9yZWQpe2RvbmUuZXJyb3JlZD10cnVlO3JldHVybiBjYWxsYmFjayhlcnIpfXJldHVybn1pZigrK2NvbXBsZXRlZD49dG90YWwpe3JldHVybiBjYWxsYmFjayhudWxsKX19dHJhbnNhY3Rpb24ub25lcnJvcj0oZnVuY3Rpb24oZSl7ZG9uZSh0aGlzLmVycm9yKTtlLnByZXZlbnREZWZhdWx0KCl9KTtjcmVhdGUuc29ydCgpLmZvckVhY2goKGZ1bmN0aW9uKHBhdGgpe2lmKGRzdC50eXBlPT09XCJsb2NhbFwiKXtJREJGUy5sb2FkUmVtb3RlRW50cnkoc3RvcmUscGF0aCwoZnVuY3Rpb24oZXJyLGVudHJ5KXtpZihlcnIpcmV0dXJuIGRvbmUoZXJyKTtJREJGUy5zdG9yZUxvY2FsRW50cnkocGF0aCxlbnRyeSxkb25lKX0pKX1lbHNle0lEQkZTLmxvYWRMb2NhbEVudHJ5KHBhdGgsKGZ1bmN0aW9uKGVycixlbnRyeSl7aWYoZXJyKXJldHVybiBkb25lKGVycik7SURCRlMuc3RvcmVSZW1vdGVFbnRyeShzdG9yZSxwYXRoLGVudHJ5LGRvbmUpfSkpfX0pKTtyZW1vdmUuc29ydCgpLnJldmVyc2UoKS5mb3JFYWNoKChmdW5jdGlvbihwYXRoKXtpZihkc3QudHlwZT09PVwibG9jYWxcIil7SURCRlMucmVtb3ZlTG9jYWxFbnRyeShwYXRoLGRvbmUpfWVsc2V7SURCRlMucmVtb3ZlUmVtb3RlRW50cnkoc3RvcmUscGF0aCxkb25lKX19KSl9KX07dmFyIE5PREVGUz17aXNXaW5kb3dzOmZhbHNlLHN0YXRpY0luaXQ6KGZ1bmN0aW9uKCl7Tk9ERUZTLmlzV2luZG93cz0hIXByb2Nlc3MucGxhdGZvcm0ubWF0Y2goL153aW4vKTt2YXIgZmxhZ3M9cHJvY2Vzc1tcImJpbmRpbmdcIl0oXCJjb25zdGFudHNcIik7aWYoZmxhZ3NbXCJmc1wiXSl7ZmxhZ3M9ZmxhZ3NbXCJmc1wiXX1OT0RFRlMuZmxhZ3NGb3JOb2RlTWFwPXtcIjEwMjRcIjpmbGFnc1tcIk9fQVBQRU5EXCJdLFwiNjRcIjpmbGFnc1tcIk9fQ1JFQVRcIl0sXCIxMjhcIjpmbGFnc1tcIk9fRVhDTFwiXSxcIjBcIjpmbGFnc1tcIk9fUkRPTkxZXCJdLFwiMlwiOmZsYWdzW1wiT19SRFdSXCJdLFwiNDA5NlwiOmZsYWdzW1wiT19TWU5DXCJdLFwiNTEyXCI6ZmxhZ3NbXCJPX1RSVU5DXCJdLFwiMVwiOmZsYWdzW1wiT19XUk9OTFlcIl19fSksYnVmZmVyRnJvbTooZnVuY3Rpb24oYXJyYXlCdWZmZXIpe3JldHVybiBCdWZmZXIuYWxsb2M/QnVmZmVyLmZyb20oYXJyYXlCdWZmZXIpOm5ldyBCdWZmZXIoYXJyYXlCdWZmZXIpfSksbW91bnQ6KGZ1bmN0aW9uKG1vdW50KXthc3NlcnQoRU5WSVJPTk1FTlRfSVNfTk9ERSk7cmV0dXJuIE5PREVGUy5jcmVhdGVOb2RlKG51bGwsXCIvXCIsTk9ERUZTLmdldE1vZGUobW91bnQub3B0cy5yb290KSwwKX0pLGNyZWF0ZU5vZGU6KGZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUsZGV2KXtpZighRlMuaXNEaXIobW9kZSkmJiFGUy5pc0ZpbGUobW9kZSkmJiFGUy5pc0xpbmsobW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlKTtub2RlLm5vZGVfb3BzPU5PREVGUy5ub2RlX29wcztub2RlLnN0cmVhbV9vcHM9Tk9ERUZTLnN0cmVhbV9vcHM7cmV0dXJuIG5vZGV9KSxnZXRNb2RlOihmdW5jdGlvbihwYXRoKXt2YXIgc3RhdDt0cnl7c3RhdD1mcy5sc3RhdFN5bmMocGF0aCk7aWYoTk9ERUZTLmlzV2luZG93cyl7c3RhdC5tb2RlPXN0YXQubW9kZXwoc3RhdC5tb2RlJjI5Mik+PjJ9fWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX1yZXR1cm4gc3RhdC5tb2RlfSkscmVhbFBhdGg6KGZ1bmN0aW9uKG5vZGUpe3ZhciBwYXJ0cz1bXTt3aGlsZShub2RlLnBhcmVudCE9PW5vZGUpe3BhcnRzLnB1c2gobm9kZS5uYW1lKTtub2RlPW5vZGUucGFyZW50fXBhcnRzLnB1c2gobm9kZS5tb3VudC5vcHRzLnJvb3QpO3BhcnRzLnJldmVyc2UoKTtyZXR1cm4gUEFUSC5qb2luLmFwcGx5KG51bGwscGFydHMpfSksZmxhZ3NGb3JOb2RlOihmdW5jdGlvbihmbGFncyl7ZmxhZ3MmPX4yMDk3MTUyO2ZsYWdzJj1+MjA0ODtmbGFncyY9fjMyNzY4O2ZsYWdzJj1+NTI0Mjg4O3ZhciBuZXdGbGFncz0wO2Zvcih2YXIgayBpbiBOT0RFRlMuZmxhZ3NGb3JOb2RlTWFwKXtpZihmbGFncyZrKXtuZXdGbGFnc3w9Tk9ERUZTLmZsYWdzRm9yTm9kZU1hcFtrXTtmbGFnc149a319aWYoIWZsYWdzKXtyZXR1cm4gbmV3RmxhZ3N9ZWxzZXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfX0pLG5vZGVfb3BzOntnZXRhdHRyOihmdW5jdGlvbihub2RlKXt2YXIgcGF0aD1OT0RFRlMucmVhbFBhdGgobm9kZSk7dmFyIHN0YXQ7dHJ5e3N0YXQ9ZnMubHN0YXRTeW5jKHBhdGgpfWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX1pZihOT0RFRlMuaXNXaW5kb3dzJiYhc3RhdC5ibGtzaXplKXtzdGF0LmJsa3NpemU9NDA5Nn1pZihOT0RFRlMuaXNXaW5kb3dzJiYhc3RhdC5ibG9ja3Mpe3N0YXQuYmxvY2tzPShzdGF0LnNpemUrc3RhdC5ibGtzaXplLTEpL3N0YXQuYmxrc2l6ZXwwfXJldHVybntkZXY6c3RhdC5kZXYsaW5vOnN0YXQuaW5vLG1vZGU6c3RhdC5tb2RlLG5saW5rOnN0YXQubmxpbmssdWlkOnN0YXQudWlkLGdpZDpzdGF0LmdpZCxyZGV2OnN0YXQucmRldixzaXplOnN0YXQuc2l6ZSxhdGltZTpzdGF0LmF0aW1lLG10aW1lOnN0YXQubXRpbWUsY3RpbWU6c3RhdC5jdGltZSxibGtzaXplOnN0YXQuYmxrc2l6ZSxibG9ja3M6c3RhdC5ibG9ja3N9fSksc2V0YXR0cjooZnVuY3Rpb24obm9kZSxhdHRyKXt2YXIgcGF0aD1OT0RFRlMucmVhbFBhdGgobm9kZSk7dHJ5e2lmKGF0dHIubW9kZSE9PXVuZGVmaW5lZCl7ZnMuY2htb2RTeW5jKHBhdGgsYXR0ci5tb2RlKTtub2RlLm1vZGU9YXR0ci5tb2RlfWlmKGF0dHIudGltZXN0YW1wIT09dW5kZWZpbmVkKXt2YXIgZGF0ZT1uZXcgRGF0ZShhdHRyLnRpbWVzdGFtcCk7ZnMudXRpbWVzU3luYyhwYXRoLGRhdGUsZGF0ZSl9aWYoYXR0ci5zaXplIT09dW5kZWZpbmVkKXtmcy50cnVuY2F0ZVN5bmMocGF0aCxhdHRyLnNpemUpfX1jYXRjaChlKXtpZighZS5jb2RlKXRocm93IGU7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSl9fSksbG9va3VwOihmdW5jdGlvbihwYXJlbnQsbmFtZSl7dmFyIHBhdGg9UEFUSC5qb2luMihOT0RFRlMucmVhbFBhdGgocGFyZW50KSxuYW1lKTt2YXIgbW9kZT1OT0RFRlMuZ2V0TW9kZShwYXRoKTtyZXR1cm4gTk9ERUZTLmNyZWF0ZU5vZGUocGFyZW50LG5hbWUsbW9kZSl9KSxta25vZDooZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxkZXYpe3ZhciBub2RlPU5PREVGUy5jcmVhdGVOb2RlKHBhcmVudCxuYW1lLG1vZGUsZGV2KTt2YXIgcGF0aD1OT0RFRlMucmVhbFBhdGgobm9kZSk7dHJ5e2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe2ZzLm1rZGlyU3luYyhwYXRoLG5vZGUubW9kZSl9ZWxzZXtmcy53cml0ZUZpbGVTeW5jKHBhdGgsXCJcIix7bW9kZTpub2RlLm1vZGV9KX19Y2F0Y2goZSl7aWYoIWUuY29kZSl0aHJvdyBlO3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pfXJldHVybiBub2RlfSkscmVuYW1lOihmdW5jdGlvbihvbGROb2RlLG5ld0RpcixuZXdOYW1lKXt2YXIgb2xkUGF0aD1OT0RFRlMucmVhbFBhdGgob2xkTm9kZSk7dmFyIG5ld1BhdGg9UEFUSC5qb2luMihOT0RFRlMucmVhbFBhdGgobmV3RGlyKSxuZXdOYW1lKTt0cnl7ZnMucmVuYW1lU3luYyhvbGRQYXRoLG5ld1BhdGgpfWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX19KSx1bmxpbms6KGZ1bmN0aW9uKHBhcmVudCxuYW1lKXt2YXIgcGF0aD1QQVRILmpvaW4yKE5PREVGUy5yZWFsUGF0aChwYXJlbnQpLG5hbWUpO3RyeXtmcy51bmxpbmtTeW5jKHBhdGgpfWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX19KSxybWRpcjooZnVuY3Rpb24ocGFyZW50LG5hbWUpe3ZhciBwYXRoPVBBVEguam9pbjIoTk9ERUZTLnJlYWxQYXRoKHBhcmVudCksbmFtZSk7dHJ5e2ZzLnJtZGlyU3luYyhwYXRoKX1jYXRjaChlKXtpZighZS5jb2RlKXRocm93IGU7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSl9fSkscmVhZGRpcjooZnVuY3Rpb24obm9kZSl7dmFyIHBhdGg9Tk9ERUZTLnJlYWxQYXRoKG5vZGUpO3RyeXtyZXR1cm4gZnMucmVhZGRpclN5bmMocGF0aCl9Y2F0Y2goZSl7aWYoIWUuY29kZSl0aHJvdyBlO3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pfX0pLHN5bWxpbms6KGZ1bmN0aW9uKHBhcmVudCxuZXdOYW1lLG9sZFBhdGgpe3ZhciBuZXdQYXRoPVBBVEguam9pbjIoTk9ERUZTLnJlYWxQYXRoKHBhcmVudCksbmV3TmFtZSk7dHJ5e2ZzLnN5bWxpbmtTeW5jKG9sZFBhdGgsbmV3UGF0aCl9Y2F0Y2goZSl7aWYoIWUuY29kZSl0aHJvdyBlO3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pfX0pLHJlYWRsaW5rOihmdW5jdGlvbihub2RlKXt2YXIgcGF0aD1OT0RFRlMucmVhbFBhdGgobm9kZSk7dHJ5e3BhdGg9ZnMucmVhZGxpbmtTeW5jKHBhdGgpO3BhdGg9Tk9ERUpTX1BBVEgucmVsYXRpdmUoTk9ERUpTX1BBVEgucmVzb2x2ZShub2RlLm1vdW50Lm9wdHMucm9vdCkscGF0aCk7cmV0dXJuIHBhdGh9Y2F0Y2goZSl7aWYoIWUuY29kZSl0aHJvdyBlO3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pfX0pfSxzdHJlYW1fb3BzOntvcGVuOihmdW5jdGlvbihzdHJlYW0pe3ZhciBwYXRoPU5PREVGUy5yZWFsUGF0aChzdHJlYW0ubm9kZSk7dHJ5e2lmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7c3RyZWFtLm5mZD1mcy5vcGVuU3luYyhwYXRoLE5PREVGUy5mbGFnc0Zvck5vZGUoc3RyZWFtLmZsYWdzKSl9fWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX19KSxjbG9zZTooZnVuY3Rpb24oc3RyZWFtKXt0cnl7aWYoRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpJiZzdHJlYW0ubmZkKXtmcy5jbG9zZVN5bmMoc3RyZWFtLm5mZCl9fWNhdGNoKGUpe2lmKCFlLmNvZGUpdGhyb3cgZTt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKX19KSxyZWFkOihmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe2lmKGxlbmd0aD09PTApcmV0dXJuIDA7dHJ5e3JldHVybiBmcy5yZWFkU3luYyhzdHJlYW0ubmZkLE5PREVGUy5idWZmZXJGcm9tKGJ1ZmZlci5idWZmZXIpLG9mZnNldCxsZW5ndGgscG9zaXRpb24pfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pfX0pLHdyaXRlOihmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe3RyeXtyZXR1cm4gZnMud3JpdGVTeW5jKHN0cmVhbS5uZmQsTk9ERUZTLmJ1ZmZlckZyb20oYnVmZmVyLmJ1ZmZlciksb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbil9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSl9fSksbGxzZWVrOihmdW5jdGlvbihzdHJlYW0sb2Zmc2V0LHdoZW5jZSl7dmFyIHBvc2l0aW9uPW9mZnNldDtpZih3aGVuY2U9PT0xKXtwb3NpdGlvbis9c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYod2hlbmNlPT09Mil7aWYoRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXt0cnl7dmFyIHN0YXQ9ZnMuZnN0YXRTeW5jKHN0cmVhbS5uZmQpO3Bvc2l0aW9uKz1zdGF0LnNpemV9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSl9fX1pZihwb3NpdGlvbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfXJldHVybiBwb3NpdGlvbn0pfX07dmFyIFdPUktFUkZTPXtESVJfTU9ERToxNjg5NSxGSUxFX01PREU6MzMyNzkscmVhZGVyOm51bGwsbW91bnQ6KGZ1bmN0aW9uKG1vdW50KXthc3NlcnQoRU5WSVJPTk1FTlRfSVNfV09SS0VSKTtpZighV09SS0VSRlMucmVhZGVyKVdPUktFUkZTLnJlYWRlcj1uZXcgRmlsZVJlYWRlclN5bmM7dmFyIHJvb3Q9V09SS0VSRlMuY3JlYXRlTm9kZShudWxsLFwiL1wiLFdPUktFUkZTLkRJUl9NT0RFLDApO3ZhciBjcmVhdGVkUGFyZW50cz17fTtmdW5jdGlvbiBlbnN1cmVQYXJlbnQocGF0aCl7dmFyIHBhcnRzPXBhdGguc3BsaXQoXCIvXCIpO3ZhciBwYXJlbnQ9cm9vdDtmb3IodmFyIGk9MDtpPHBhcnRzLmxlbmd0aC0xO2krKyl7dmFyIGN1cnI9cGFydHMuc2xpY2UoMCxpKzEpLmpvaW4oXCIvXCIpO2lmKCFjcmVhdGVkUGFyZW50c1tjdXJyXSl7Y3JlYXRlZFBhcmVudHNbY3Vycl09V09SS0VSRlMuY3JlYXRlTm9kZShwYXJlbnQscGFydHNbaV0sV09SS0VSRlMuRElSX01PREUsMCl9cGFyZW50PWNyZWF0ZWRQYXJlbnRzW2N1cnJdfXJldHVybiBwYXJlbnR9ZnVuY3Rpb24gYmFzZShwYXRoKXt2YXIgcGFydHM9cGF0aC5zcGxpdChcIi9cIik7cmV0dXJuIHBhcnRzW3BhcnRzLmxlbmd0aC0xXX1BcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG1vdW50Lm9wdHNbXCJmaWxlc1wiXXx8W10sKGZ1bmN0aW9uKGZpbGUpe1dPUktFUkZTLmNyZWF0ZU5vZGUoZW5zdXJlUGFyZW50KGZpbGUubmFtZSksYmFzZShmaWxlLm5hbWUpLFdPUktFUkZTLkZJTEVfTU9ERSwwLGZpbGUsZmlsZS5sYXN0TW9kaWZpZWREYXRlKX0pKTsobW91bnQub3B0c1tcImJsb2JzXCJdfHxbXSkuZm9yRWFjaCgoZnVuY3Rpb24ob2JqKXtXT1JLRVJGUy5jcmVhdGVOb2RlKGVuc3VyZVBhcmVudChvYmpbXCJuYW1lXCJdKSxiYXNlKG9ialtcIm5hbWVcIl0pLFdPUktFUkZTLkZJTEVfTU9ERSwwLG9ialtcImRhdGFcIl0pfSkpOyhtb3VudC5vcHRzW1wicGFja2FnZXNcIl18fFtdKS5mb3JFYWNoKChmdW5jdGlvbihwYWNrKXtwYWNrW1wibWV0YWRhdGFcIl0uZmlsZXMuZm9yRWFjaCgoZnVuY3Rpb24oZmlsZSl7dmFyIG5hbWU9ZmlsZS5maWxlbmFtZS5zdWJzdHIoMSk7V09SS0VSRlMuY3JlYXRlTm9kZShlbnN1cmVQYXJlbnQobmFtZSksYmFzZShuYW1lKSxXT1JLRVJGUy5GSUxFX01PREUsMCxwYWNrW1wiYmxvYlwiXS5zbGljZShmaWxlLnN0YXJ0LGZpbGUuZW5kKSl9KSl9KSk7cmV0dXJuIHJvb3R9KSxjcmVhdGVOb2RlOihmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLGRldixjb250ZW50cyxtdGltZSl7dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlKTtub2RlLm1vZGU9bW9kZTtub2RlLm5vZGVfb3BzPVdPUktFUkZTLm5vZGVfb3BzO25vZGUuc3RyZWFtX29wcz1XT1JLRVJGUy5zdHJlYW1fb3BzO25vZGUudGltZXN0YW1wPShtdGltZXx8bmV3IERhdGUpLmdldFRpbWUoKTthc3NlcnQoV09SS0VSRlMuRklMRV9NT0RFIT09V09SS0VSRlMuRElSX01PREUpO2lmKG1vZGU9PT1XT1JLRVJGUy5GSUxFX01PREUpe25vZGUuc2l6ZT1jb250ZW50cy5zaXplO25vZGUuY29udGVudHM9Y29udGVudHN9ZWxzZXtub2RlLnNpemU9NDA5Njtub2RlLmNvbnRlbnRzPXt9fWlmKHBhcmVudCl7cGFyZW50LmNvbnRlbnRzW25hbWVdPW5vZGV9cmV0dXJuIG5vZGV9KSxub2RlX29wczp7Z2V0YXR0cjooZnVuY3Rpb24obm9kZSl7cmV0dXJue2RldjoxLGlubzp1bmRlZmluZWQsbW9kZTpub2RlLm1vZGUsbmxpbms6MSx1aWQ6MCxnaWQ6MCxyZGV2OnVuZGVmaW5lZCxzaXplOm5vZGUuc2l6ZSxhdGltZTpuZXcgRGF0ZShub2RlLnRpbWVzdGFtcCksbXRpbWU6bmV3IERhdGUobm9kZS50aW1lc3RhbXApLGN0aW1lOm5ldyBEYXRlKG5vZGUudGltZXN0YW1wKSxibGtzaXplOjQwOTYsYmxvY2tzOk1hdGguY2VpbChub2RlLnNpemUvNDA5Nil9fSksc2V0YXR0cjooZnVuY3Rpb24obm9kZSxhdHRyKXtpZihhdHRyLm1vZGUhPT11bmRlZmluZWQpe25vZGUubW9kZT1hdHRyLm1vZGV9aWYoYXR0ci50aW1lc3RhbXAhPT11bmRlZmluZWQpe25vZGUudGltZXN0YW1wPWF0dHIudGltZXN0YW1wfX0pLGxvb2t1cDooZnVuY3Rpb24ocGFyZW50LG5hbWUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCl9KSxta25vZDooZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxkZXYpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX0pLHJlbmFtZTooZnVuY3Rpb24ob2xkTm9kZSxuZXdEaXIsbmV3TmFtZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pfSksdW5saW5rOihmdW5jdGlvbihwYXJlbnQsbmFtZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pfSkscm1kaXI6KGZ1bmN0aW9uKHBhcmVudCxuYW1lKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9KSxyZWFkZGlyOihmdW5jdGlvbihub2RlKXt2YXIgZW50cmllcz1bXCIuXCIsXCIuLlwiXTtmb3IodmFyIGtleSBpbiBub2RlLmNvbnRlbnRzKXtpZighbm9kZS5jb250ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtjb250aW51ZX1lbnRyaWVzLnB1c2goa2V5KX1yZXR1cm4gZW50cmllc30pLHN5bWxpbms6KGZ1bmN0aW9uKHBhcmVudCxuZXdOYW1lLG9sZFBhdGgpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX0pLHJlYWRsaW5rOihmdW5jdGlvbihub2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9KX0sc3RyZWFtX29wczp7cmVhZDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtpZihwb3NpdGlvbj49c3RyZWFtLm5vZGUuc2l6ZSlyZXR1cm4gMDt2YXIgY2h1bms9c3RyZWFtLm5vZGUuY29udGVudHMuc2xpY2UocG9zaXRpb24scG9zaXRpb24rbGVuZ3RoKTt2YXIgYWI9V09SS0VSRlMucmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGNodW5rKTtidWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGFiKSxvZmZzZXQpO3JldHVybiBjaHVuay5zaXplfSksd3JpdGU6KGZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlPKX0pLGxsc2VlazooZnVuY3Rpb24oc3RyZWFtLG9mZnNldCx3aGVuY2Upe3ZhciBwb3NpdGlvbj1vZmZzZXQ7aWYod2hlbmNlPT09MSl7cG9zaXRpb24rPXN0cmVhbS5wb3NpdGlvbn1lbHNlIGlmKHdoZW5jZT09PTIpe2lmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7cG9zaXRpb24rPXN0cmVhbS5ub2RlLnNpemV9fWlmKHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9cmV0dXJuIHBvc2l0aW9ufSl9fTtTVEFUSUNUT1ArPTE2O1NUQVRJQ1RPUCs9MTY7U1RBVElDVE9QKz0xNjt2YXIgRlM9e3Jvb3Q6bnVsbCxtb3VudHM6W10sZGV2aWNlczp7fSxzdHJlYW1zOltdLG5leHRJbm9kZToxLG5hbWVUYWJsZTpudWxsLGN1cnJlbnRQYXRoOlwiL1wiLGluaXRpYWxpemVkOmZhbHNlLGlnbm9yZVBlcm1pc3Npb25zOnRydWUsdHJhY2tpbmdEZWxlZ2F0ZTp7fSx0cmFja2luZzp7b3BlbkZsYWdzOntSRUFEOjEsV1JJVEU6Mn19LEVycm5vRXJyb3I6bnVsbCxnZW5lcmljRXJyb3JzOnt9LGZpbGVzeXN0ZW1zOm51bGwsc3luY0ZTUmVxdWVzdHM6MCxoYW5kbGVGU0Vycm9yOihmdW5jdGlvbihlKXtpZighKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlK1wiIDogXCIrc3RhY2tUcmFjZSgpO3JldHVybiBfX19zZXRFcnJObyhlLmVycm5vKX0pLGxvb2t1cFBhdGg6KGZ1bmN0aW9uKHBhdGgsb3B0cyl7cGF0aD1QQVRILnJlc29sdmUoRlMuY3dkKCkscGF0aCk7b3B0cz1vcHRzfHx7fTtpZighcGF0aClyZXR1cm57cGF0aDpcIlwiLG5vZGU6bnVsbH07dmFyIGRlZmF1bHRzPXtmb2xsb3dfbW91bnQ6dHJ1ZSxyZWN1cnNlX2NvdW50OjB9O2Zvcih2YXIga2V5IGluIGRlZmF1bHRzKXtpZihvcHRzW2tleV09PT11bmRlZmluZWQpe29wdHNba2V5XT1kZWZhdWx0c1trZXldfX1pZihvcHRzLnJlY3Vyc2VfY291bnQ+OCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUxPT1ApfXZhciBwYXJ0cz1QQVRILm5vcm1hbGl6ZUFycmF5KHBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcigoZnVuY3Rpb24ocCl7cmV0dXJuISFwfSkpLGZhbHNlKTt2YXIgY3VycmVudD1GUy5yb290O3ZhciBjdXJyZW50X3BhdGg9XCIvXCI7Zm9yKHZhciBpPTA7aTxwYXJ0cy5sZW5ndGg7aSsrKXt2YXIgaXNsYXN0PWk9PT1wYXJ0cy5sZW5ndGgtMTtpZihpc2xhc3QmJm9wdHMucGFyZW50KXticmVha31jdXJyZW50PUZTLmxvb2t1cE5vZGUoY3VycmVudCxwYXJ0c1tpXSk7Y3VycmVudF9wYXRoPVBBVEguam9pbjIoY3VycmVudF9wYXRoLHBhcnRzW2ldKTtpZihGUy5pc01vdW50cG9pbnQoY3VycmVudCkpe2lmKCFpc2xhc3R8fGlzbGFzdCYmb3B0cy5mb2xsb3dfbW91bnQpe2N1cnJlbnQ9Y3VycmVudC5tb3VudGVkLnJvb3R9fWlmKCFpc2xhc3R8fG9wdHMuZm9sbG93KXt2YXIgY291bnQ9MDt3aGlsZShGUy5pc0xpbmsoY3VycmVudC5tb2RlKSl7dmFyIGxpbms9RlMucmVhZGxpbmsoY3VycmVudF9wYXRoKTtjdXJyZW50X3BhdGg9UEFUSC5yZXNvbHZlKFBBVEguZGlybmFtZShjdXJyZW50X3BhdGgpLGxpbmspO3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChjdXJyZW50X3BhdGgse3JlY3Vyc2VfY291bnQ6b3B0cy5yZWN1cnNlX2NvdW50fSk7Y3VycmVudD1sb29rdXAubm9kZTtpZihjb3VudCsrPjQwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTE9PUCl9fX19cmV0dXJue3BhdGg6Y3VycmVudF9wYXRoLG5vZGU6Y3VycmVudH19KSxnZXRQYXRoOihmdW5jdGlvbihub2RlKXt2YXIgcGF0aDt3aGlsZSh0cnVlKXtpZihGUy5pc1Jvb3Qobm9kZSkpe3ZhciBtb3VudD1ub2RlLm1vdW50Lm1vdW50cG9pbnQ7aWYoIXBhdGgpcmV0dXJuIG1vdW50O3JldHVybiBtb3VudFttb3VudC5sZW5ndGgtMV0hPT1cIi9cIj9tb3VudCtcIi9cIitwYXRoOm1vdW50K3BhdGh9cGF0aD1wYXRoP25vZGUubmFtZStcIi9cIitwYXRoOm5vZGUubmFtZTtub2RlPW5vZGUucGFyZW50fX0pLGhhc2hOYW1lOihmdW5jdGlvbihwYXJlbnRpZCxuYW1lKXt2YXIgaGFzaD0wO2Zvcih2YXIgaT0wO2k8bmFtZS5sZW5ndGg7aSsrKXtoYXNoPShoYXNoPDw1KS1oYXNoK25hbWUuY2hhckNvZGVBdChpKXwwfXJldHVybihwYXJlbnRpZCtoYXNoPj4+MCklRlMubmFtZVRhYmxlLmxlbmd0aH0pLGhhc2hBZGROb2RlOihmdW5jdGlvbihub2RlKXt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO25vZGUubmFtZV9uZXh0PUZTLm5hbWVUYWJsZVtoYXNoXTtGUy5uYW1lVGFibGVbaGFzaF09bm9kZX0pLGhhc2hSZW1vdmVOb2RlOihmdW5jdGlvbihub2RlKXt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO2lmKEZTLm5hbWVUYWJsZVtoYXNoXT09PW5vZGUpe0ZTLm5hbWVUYWJsZVtoYXNoXT1ub2RlLm5hbWVfbmV4dH1lbHNle3ZhciBjdXJyZW50PUZTLm5hbWVUYWJsZVtoYXNoXTt3aGlsZShjdXJyZW50KXtpZihjdXJyZW50Lm5hbWVfbmV4dD09PW5vZGUpe2N1cnJlbnQubmFtZV9uZXh0PW5vZGUubmFtZV9uZXh0O2JyZWFrfWN1cnJlbnQ9Y3VycmVudC5uYW1lX25leHR9fX0pLGxvb2t1cE5vZGU6KGZ1bmN0aW9uKHBhcmVudCxuYW1lKXt2YXIgZXJyPUZTLm1heUxvb2t1cChwYXJlbnQpO2lmKGVycil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyLHBhcmVudCl9dmFyIGhhc2g9RlMuaGFzaE5hbWUocGFyZW50LmlkLG5hbWUpO2Zvcih2YXIgbm9kZT1GUy5uYW1lVGFibGVbaGFzaF07bm9kZTtub2RlPW5vZGUubmFtZV9uZXh0KXt2YXIgbm9kZU5hbWU9bm9kZS5uYW1lO2lmKG5vZGUucGFyZW50LmlkPT09cGFyZW50LmlkJiZub2RlTmFtZT09PW5hbWUpe3JldHVybiBub2RlfX1yZXR1cm4gRlMubG9va3VwKHBhcmVudCxuYW1lKX0pLGNyZWF0ZU5vZGU6KGZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUscmRldil7aWYoIUZTLkZTTm9kZSl7RlMuRlNOb2RlPShmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLHJkZXYpe2lmKCFwYXJlbnQpe3BhcmVudD10aGlzfXRoaXMucGFyZW50PXBhcmVudDt0aGlzLm1vdW50PXBhcmVudC5tb3VudDt0aGlzLm1vdW50ZWQ9bnVsbDt0aGlzLmlkPUZTLm5leHRJbm9kZSsrO3RoaXMubmFtZT1uYW1lO3RoaXMubW9kZT1tb2RlO3RoaXMubm9kZV9vcHM9e307dGhpcy5zdHJlYW1fb3BzPXt9O3RoaXMucmRldj1yZGV2fSk7RlMuRlNOb2RlLnByb3RvdHlwZT17fTt2YXIgcmVhZE1vZGU9MjkyfDczO3ZhciB3cml0ZU1vZGU9MTQ2O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEZTLkZTTm9kZS5wcm90b3R5cGUse3JlYWQ6e2dldDooZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJnJlYWRNb2RlKT09PXJlYWRNb2RlfSksc2V0OihmdW5jdGlvbih2YWwpe3ZhbD90aGlzLm1vZGV8PXJlYWRNb2RlOnRoaXMubW9kZSY9fnJlYWRNb2RlfSl9LHdyaXRlOntnZXQ6KGZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMubW9kZSZ3cml0ZU1vZGUpPT09d3JpdGVNb2RlfSksc2V0OihmdW5jdGlvbih2YWwpe3ZhbD90aGlzLm1vZGV8PXdyaXRlTW9kZTp0aGlzLm1vZGUmPX53cml0ZU1vZGV9KX0saXNGb2xkZXI6e2dldDooZnVuY3Rpb24oKXtyZXR1cm4gRlMuaXNEaXIodGhpcy5tb2RlKX0pfSxpc0RldmljZTp7Z2V0OihmdW5jdGlvbigpe3JldHVybiBGUy5pc0NocmRldih0aGlzLm1vZGUpfSl9fSl9dmFyIG5vZGU9bmV3IEZTLkZTTm9kZShwYXJlbnQsbmFtZSxtb2RlLHJkZXYpO0ZTLmhhc2hBZGROb2RlKG5vZGUpO3JldHVybiBub2RlfSksZGVzdHJveU5vZGU6KGZ1bmN0aW9uKG5vZGUpe0ZTLmhhc2hSZW1vdmVOb2RlKG5vZGUpfSksaXNSb290OihmdW5jdGlvbihub2RlKXtyZXR1cm4gbm9kZT09PW5vZGUucGFyZW50fSksaXNNb3VudHBvaW50OihmdW5jdGlvbihub2RlKXtyZXR1cm4hIW5vZGUubW91bnRlZH0pLGlzRmlsZTooZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MzI3Njh9KSxpc0RpcjooZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MTYzODR9KSxpc0xpbms6KGZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTQwOTYwfSksaXNDaHJkZXY6KGZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTgxOTJ9KSxpc0Jsa2RldjooZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MjQ1NzZ9KSxpc0ZJRk86KGZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTQwOTZ9KSxpc1NvY2tldDooZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNDkxNTIpPT09NDkxNTJ9KSxmbGFnTW9kZXM6e1wiclwiOjAsXCJyc1wiOjEwNTI2NzIsXCJyK1wiOjIsXCJ3XCI6NTc3LFwid3hcIjo3MDUsXCJ4d1wiOjcwNSxcIncrXCI6NTc4LFwid3grXCI6NzA2LFwieHcrXCI6NzA2LFwiYVwiOjEwODksXCJheFwiOjEyMTcsXCJ4YVwiOjEyMTcsXCJhK1wiOjEwOTAsXCJheCtcIjoxMjE4LFwieGErXCI6MTIxOH0sbW9kZVN0cmluZ1RvRmxhZ3M6KGZ1bmN0aW9uKHN0cil7dmFyIGZsYWdzPUZTLmZsYWdNb2Rlc1tzdHJdO2lmKHR5cGVvZiBmbGFncz09PVwidW5kZWZpbmVkXCIpe3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZmlsZSBvcGVuIG1vZGU6IFwiK3N0cil9cmV0dXJuIGZsYWdzfSksZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmc6KGZ1bmN0aW9uKGZsYWcpe3ZhciBwZXJtcz1bXCJyXCIsXCJ3XCIsXCJyd1wiXVtmbGFnJjNdO2lmKGZsYWcmNTEyKXtwZXJtcys9XCJ3XCJ9cmV0dXJuIHBlcm1zfSksbm9kZVBlcm1pc3Npb25zOihmdW5jdGlvbihub2RlLHBlcm1zKXtpZihGUy5pZ25vcmVQZXJtaXNzaW9ucyl7cmV0dXJuIDB9aWYocGVybXMuaW5kZXhPZihcInJcIikhPT0tMSYmIShub2RlLm1vZGUmMjkyKSl7cmV0dXJuIEVSUk5PX0NPREVTLkVBQ0NFU31lbHNlIGlmKHBlcm1zLmluZGV4T2YoXCJ3XCIpIT09LTEmJiEobm9kZS5tb2RlJjE0Nikpe3JldHVybiBFUlJOT19DT0RFUy5FQUNDRVN9ZWxzZSBpZihwZXJtcy5pbmRleE9mKFwieFwiKSE9PS0xJiYhKG5vZGUubW9kZSY3Mykpe3JldHVybiBFUlJOT19DT0RFUy5FQUNDRVN9cmV0dXJuIDB9KSxtYXlMb29rdXA6KGZ1bmN0aW9uKGRpcil7dmFyIGVycj1GUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwieFwiKTtpZihlcnIpcmV0dXJuIGVycjtpZighZGlyLm5vZGVfb3BzLmxvb2t1cClyZXR1cm4gRVJSTk9fQ09ERVMuRUFDQ0VTO3JldHVybiAwfSksbWF5Q3JlYXRlOihmdW5jdGlvbihkaXIsbmFtZSl7dHJ5e3ZhciBub2RlPUZTLmxvb2t1cE5vZGUoZGlyLG5hbWUpO3JldHVybiBFUlJOT19DT0RFUy5FRVhJU1R9Y2F0Y2goZSl7fXJldHVybiBGUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwid3hcIil9KSxtYXlEZWxldGU6KGZ1bmN0aW9uKGRpcixuYW1lLGlzZGlyKXt2YXIgbm9kZTt0cnl7bm9kZT1GUy5sb29rdXBOb2RlKGRpcixuYW1lKX1jYXRjaChlKXtyZXR1cm4gZS5lcnJub312YXIgZXJyPUZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ3eFwiKTtpZihlcnIpe3JldHVybiBlcnJ9aWYoaXNkaXIpe2lmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXtyZXR1cm4gRVJSTk9fQ09ERVMuRU5PVERJUn1pZihGUy5pc1Jvb3Qobm9kZSl8fEZTLmdldFBhdGgobm9kZSk9PT1GUy5jd2QoKSl7cmV0dXJuIEVSUk5PX0NPREVTLkVCVVNZfX1lbHNle2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe3JldHVybiBFUlJOT19DT0RFUy5FSVNESVJ9fXJldHVybiAwfSksbWF5T3BlbjooZnVuY3Rpb24obm9kZSxmbGFncyl7aWYoIW5vZGUpe3JldHVybiBFUlJOT19DT0RFUy5FTk9FTlR9aWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe3JldHVybiBFUlJOT19DT0RFUy5FTE9PUH1lbHNlIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpe2lmKEZTLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKGZsYWdzKSE9PVwiclwifHxmbGFncyY1MTIpe3JldHVybiBFUlJOT19DT0RFUy5FSVNESVJ9fXJldHVybiBGUy5ub2RlUGVybWlzc2lvbnMobm9kZSxGUy5mbGFnc1RvUGVybWlzc2lvblN0cmluZyhmbGFncykpfSksTUFYX09QRU5fRkRTOjQwOTYsbmV4dGZkOihmdW5jdGlvbihmZF9zdGFydCxmZF9lbmQpe2ZkX3N0YXJ0PWZkX3N0YXJ0fHwwO2ZkX2VuZD1mZF9lbmR8fEZTLk1BWF9PUEVOX0ZEUztmb3IodmFyIGZkPWZkX3N0YXJ0O2ZkPD1mZF9lbmQ7ZmQrKyl7aWYoIUZTLnN0cmVhbXNbZmRdKXtyZXR1cm4gZmR9fXRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVNRklMRSl9KSxnZXRTdHJlYW06KGZ1bmN0aW9uKGZkKXtyZXR1cm4gRlMuc3RyZWFtc1tmZF19KSxjcmVhdGVTdHJlYW06KGZ1bmN0aW9uKHN0cmVhbSxmZF9zdGFydCxmZF9lbmQpe2lmKCFGUy5GU1N0cmVhbSl7RlMuRlNTdHJlYW09KGZ1bmN0aW9uKCl7fSk7RlMuRlNTdHJlYW0ucHJvdG90eXBlPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEZTLkZTU3RyZWFtLnByb3RvdHlwZSx7b2JqZWN0OntnZXQ6KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZX0pLHNldDooZnVuY3Rpb24odmFsKXt0aGlzLm5vZGU9dmFsfSl9LGlzUmVhZDp7Z2V0OihmdW5jdGlvbigpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MX0pfSxpc1dyaXRlOntnZXQ6KGZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuZmxhZ3MmMjA5NzE1NSkhPT0wfSl9LGlzQXBwZW5kOntnZXQ6KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmxhZ3MmMTAyNH0pfX0pfXZhciBuZXdTdHJlYW09bmV3IEZTLkZTU3RyZWFtO2Zvcih2YXIgcCBpbiBzdHJlYW0pe25ld1N0cmVhbVtwXT1zdHJlYW1bcF19c3RyZWFtPW5ld1N0cmVhbTt2YXIgZmQ9RlMubmV4dGZkKGZkX3N0YXJ0LGZkX2VuZCk7c3RyZWFtLmZkPWZkO0ZTLnN0cmVhbXNbZmRdPXN0cmVhbTtyZXR1cm4gc3RyZWFtfSksY2xvc2VTdHJlYW06KGZ1bmN0aW9uKGZkKXtGUy5zdHJlYW1zW2ZkXT1udWxsfSksY2hyZGV2X3N0cmVhbV9vcHM6e29wZW46KGZ1bmN0aW9uKHN0cmVhbSl7dmFyIGRldmljZT1GUy5nZXREZXZpY2Uoc3RyZWFtLm5vZGUucmRldik7c3RyZWFtLnN0cmVhbV9vcHM9ZGV2aWNlLnN0cmVhbV9vcHM7aWYoc3RyZWFtLnN0cmVhbV9vcHMub3Blbil7c3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pfX0pLGxsc2VlazooZnVuY3Rpb24oKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FU1BJUEUpfSl9LG1ham9yOihmdW5jdGlvbihkZXYpe3JldHVybiBkZXY+Pjh9KSxtaW5vcjooZnVuY3Rpb24oZGV2KXtyZXR1cm4gZGV2JjI1NX0pLG1ha2VkZXY6KGZ1bmN0aW9uKG1hLG1pKXtyZXR1cm4gbWE8PDh8bWl9KSxyZWdpc3RlckRldmljZTooZnVuY3Rpb24oZGV2LG9wcyl7RlMuZGV2aWNlc1tkZXZdPXtzdHJlYW1fb3BzOm9wc319KSxnZXREZXZpY2U6KGZ1bmN0aW9uKGRldil7cmV0dXJuIEZTLmRldmljZXNbZGV2XX0pLGdldE1vdW50czooZnVuY3Rpb24obW91bnQpe3ZhciBtb3VudHM9W107dmFyIGNoZWNrPVttb3VudF07d2hpbGUoY2hlY2subGVuZ3RoKXt2YXIgbT1jaGVjay5wb3AoKTttb3VudHMucHVzaChtKTtjaGVjay5wdXNoLmFwcGx5KGNoZWNrLG0ubW91bnRzKX1yZXR1cm4gbW91bnRzfSksc3luY2ZzOihmdW5jdGlvbihwb3B1bGF0ZSxjYWxsYmFjayl7aWYodHlwZW9mIHBvcHVsYXRlPT09XCJmdW5jdGlvblwiKXtjYWxsYmFjaz1wb3B1bGF0ZTtwb3B1bGF0ZT1mYWxzZX1GUy5zeW5jRlNSZXF1ZXN0cysrO2lmKEZTLnN5bmNGU1JlcXVlc3RzPjEpe2NvbnNvbGUubG9nKFwid2FybmluZzogXCIrRlMuc3luY0ZTUmVxdWVzdHMrXCIgRlMuc3luY2ZzIG9wZXJhdGlvbnMgaW4gZmxpZ2h0IGF0IG9uY2UsIHByb2JhYmx5IGp1c3QgZG9pbmcgZXh0cmEgd29ya1wiKX12YXIgbW91bnRzPUZTLmdldE1vdW50cyhGUy5yb290Lm1vdW50KTt2YXIgY29tcGxldGVkPTA7ZnVuY3Rpb24gZG9DYWxsYmFjayhlcnIpe2Fzc2VydChGUy5zeW5jRlNSZXF1ZXN0cz4wKTtGUy5zeW5jRlNSZXF1ZXN0cy0tO3JldHVybiBjYWxsYmFjayhlcnIpfWZ1bmN0aW9uIGRvbmUoZXJyKXtpZihlcnIpe2lmKCFkb25lLmVycm9yZWQpe2RvbmUuZXJyb3JlZD10cnVlO3JldHVybiBkb0NhbGxiYWNrKGVycil9cmV0dXJufWlmKCsrY29tcGxldGVkPj1tb3VudHMubGVuZ3RoKXtkb0NhbGxiYWNrKG51bGwpfX1tb3VudHMuZm9yRWFjaCgoZnVuY3Rpb24obW91bnQpe2lmKCFtb3VudC50eXBlLnN5bmNmcyl7cmV0dXJuIGRvbmUobnVsbCl9bW91bnQudHlwZS5zeW5jZnMobW91bnQscG9wdWxhdGUsZG9uZSl9KSl9KSxtb3VudDooZnVuY3Rpb24odHlwZSxvcHRzLG1vdW50cG9pbnQpe3ZhciByb290PW1vdW50cG9pbnQ9PT1cIi9cIjt2YXIgcHNldWRvPSFtb3VudHBvaW50O3ZhciBub2RlO2lmKHJvb3QmJkZTLnJvb3Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKX1lbHNlIGlmKCFyb290JiYhcHNldWRvKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobW91bnRwb2ludCx7Zm9sbG93X21vdW50OmZhbHNlfSk7bW91bnRwb2ludD1sb29rdXAucGF0aDtub2RlPWxvb2t1cC5ub2RlO2lmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJVU1kpfWlmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URElSKX19dmFyIG1vdW50PXt0eXBlOnR5cGUsb3B0czpvcHRzLG1vdW50cG9pbnQ6bW91bnRwb2ludCxtb3VudHM6W119O3ZhciBtb3VudFJvb3Q9dHlwZS5tb3VudChtb3VudCk7bW91bnRSb290Lm1vdW50PW1vdW50O21vdW50LnJvb3Q9bW91bnRSb290O2lmKHJvb3Qpe0ZTLnJvb3Q9bW91bnRSb290fWVsc2UgaWYobm9kZSl7bm9kZS5tb3VudGVkPW1vdW50O2lmKG5vZGUubW91bnQpe25vZGUubW91bnQubW91bnRzLnB1c2gobW91bnQpfX1yZXR1cm4gbW91bnRSb290fSksdW5tb3VudDooZnVuY3Rpb24obW91bnRwb2ludCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO2lmKCFGUy5pc01vdW50cG9pbnQobG9va3VwLm5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfXZhciBub2RlPWxvb2t1cC5ub2RlO3ZhciBtb3VudD1ub2RlLm1vdW50ZWQ7dmFyIG1vdW50cz1GUy5nZXRNb3VudHMobW91bnQpO09iamVjdC5rZXlzKEZTLm5hbWVUYWJsZSkuZm9yRWFjaCgoZnVuY3Rpb24oaGFzaCl7dmFyIGN1cnJlbnQ9RlMubmFtZVRhYmxlW2hhc2hdO3doaWxlKGN1cnJlbnQpe3ZhciBuZXh0PWN1cnJlbnQubmFtZV9uZXh0O2lmKG1vdW50cy5pbmRleE9mKGN1cnJlbnQubW91bnQpIT09LTEpe0ZTLmRlc3Ryb3lOb2RlKGN1cnJlbnQpfWN1cnJlbnQ9bmV4dH19KSk7bm9kZS5tb3VudGVkPW51bGw7dmFyIGlkeD1ub2RlLm1vdW50Lm1vdW50cy5pbmRleE9mKG1vdW50KTthc3NlcnQoaWR4IT09LTEpO25vZGUubW91bnQubW91bnRzLnNwbGljZShpZHgsMSl9KSxsb29rdXA6KGZ1bmN0aW9uKHBhcmVudCxuYW1lKXtyZXR1cm4gcGFyZW50Lm5vZGVfb3BzLmxvb2t1cChwYXJlbnQsbmFtZSl9KSxta25vZDooZnVuY3Rpb24ocGF0aCxtb2RlLGRldil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2lmKCFuYW1lfHxuYW1lPT09XCIuXCJ8fG5hbWU9PT1cIi4uXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9dmFyIGVycj1GUy5tYXlDcmVhdGUocGFyZW50LG5hbWUpO2lmKGVycil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyKX1pZighcGFyZW50Lm5vZGVfb3BzLm1rbm9kKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9cmV0dXJuIHBhcmVudC5ub2RlX29wcy5ta25vZChwYXJlbnQsbmFtZSxtb2RlLGRldil9KSxjcmVhdGU6KGZ1bmN0aW9uKHBhdGgsbW9kZSl7bW9kZT1tb2RlIT09dW5kZWZpbmVkP21vZGU6NDM4O21vZGUmPTQwOTU7bW9kZXw9MzI3Njg7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSwwKX0pLG1rZGlyOihmdW5jdGlvbihwYXRoLG1vZGUpe21vZGU9bW9kZSE9PXVuZGVmaW5lZD9tb2RlOjUxMTttb2RlJj01MTF8NTEyO21vZGV8PTE2Mzg0O3JldHVybiBGUy5ta25vZChwYXRoLG1vZGUsMCl9KSxta2RpclRyZWU6KGZ1bmN0aW9uKHBhdGgsbW9kZSl7dmFyIGRpcnM9cGF0aC5zcGxpdChcIi9cIik7dmFyIGQ9XCJcIjtmb3IodmFyIGk9MDtpPGRpcnMubGVuZ3RoOysraSl7aWYoIWRpcnNbaV0pY29udGludWU7ZCs9XCIvXCIrZGlyc1tpXTt0cnl7RlMubWtkaXIoZCxtb2RlKX1jYXRjaChlKXtpZihlLmVycm5vIT1FUlJOT19DT0RFUy5FRVhJU1QpdGhyb3cgZX19fSksbWtkZXY6KGZ1bmN0aW9uKHBhdGgsbW9kZSxkZXYpe2lmKHR5cGVvZiBkZXY9PT1cInVuZGVmaW5lZFwiKXtkZXY9bW9kZTttb2RlPTQzOH1tb2RlfD04MTkyO3JldHVybiBGUy5ta25vZChwYXRoLG1vZGUsZGV2KX0pLHN5bWxpbms6KGZ1bmN0aW9uKG9sZHBhdGgsbmV3cGF0aCl7aWYoIVBBVEgucmVzb2x2ZShvbGRwYXRoKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKX12YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobmV3cGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO2lmKCFwYXJlbnQpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCl9dmFyIG5ld25hbWU9UEFUSC5iYXNlbmFtZShuZXdwYXRoKTt2YXIgZXJyPUZTLm1heUNyZWF0ZShwYXJlbnQsbmV3bmFtZSk7aWYoZXJyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpfWlmKCFwYXJlbnQubm9kZV9vcHMuc3ltbGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pfXJldHVybiBwYXJlbnQubm9kZV9vcHMuc3ltbGluayhwYXJlbnQsbmV3bmFtZSxvbGRwYXRoKX0pLHJlbmFtZTooZnVuY3Rpb24ob2xkX3BhdGgsbmV3X3BhdGgpe3ZhciBvbGRfZGlybmFtZT1QQVRILmRpcm5hbWUob2xkX3BhdGgpO3ZhciBuZXdfZGlybmFtZT1QQVRILmRpcm5hbWUobmV3X3BhdGgpO3ZhciBvbGRfbmFtZT1QQVRILmJhc2VuYW1lKG9sZF9wYXRoKTt2YXIgbmV3X25hbWU9UEFUSC5iYXNlbmFtZShuZXdfcGF0aCk7dmFyIGxvb2t1cCxvbGRfZGlyLG5ld19kaXI7dHJ5e2xvb2t1cD1GUy5sb29rdXBQYXRoKG9sZF9wYXRoLHtwYXJlbnQ6dHJ1ZX0pO29sZF9kaXI9bG9va3VwLm5vZGU7bG9va3VwPUZTLmxvb2t1cFBhdGgobmV3X3BhdGgse3BhcmVudDp0cnVlfSk7bmV3X2Rpcj1sb29rdXAubm9kZX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQlVTWSl9aWYoIW9sZF9kaXJ8fCFuZXdfZGlyKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCk7aWYob2xkX2Rpci5tb3VudCE9PW5ld19kaXIubW91bnQpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVYREVWKX12YXIgb2xkX25vZGU9RlMubG9va3VwTm9kZShvbGRfZGlyLG9sZF9uYW1lKTt2YXIgcmVsYXRpdmU9UEFUSC5yZWxhdGl2ZShvbGRfcGF0aCxuZXdfZGlybmFtZSk7aWYocmVsYXRpdmUuY2hhckF0KDApIT09XCIuXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9cmVsYXRpdmU9UEFUSC5yZWxhdGl2ZShuZXdfcGF0aCxvbGRfZGlybmFtZSk7aWYocmVsYXRpdmUuY2hhckF0KDApIT09XCIuXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT1RFTVBUWSl9dmFyIG5ld19ub2RlO3RyeXtuZXdfbm9kZT1GUy5sb29rdXBOb2RlKG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe31pZihvbGRfbm9kZT09PW5ld19ub2RlKXtyZXR1cm59dmFyIGlzZGlyPUZTLmlzRGlyKG9sZF9ub2RlLm1vZGUpO3ZhciBlcnI9RlMubWF5RGVsZXRlKG9sZF9kaXIsb2xkX25hbWUsaXNkaXIpO2lmKGVycil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyKX1lcnI9bmV3X25vZGU/RlMubWF5RGVsZXRlKG5ld19kaXIsbmV3X25hbWUsaXNkaXIpOkZTLm1heUNyZWF0ZShuZXdfZGlyLG5ld19uYW1lKTtpZihlcnIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVycil9aWYoIW9sZF9kaXIubm9kZV9vcHMucmVuYW1lKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9aWYoRlMuaXNNb3VudHBvaW50KG9sZF9ub2RlKXx8bmV3X25vZGUmJkZTLmlzTW91bnRwb2ludChuZXdfbm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKX1pZihuZXdfZGlyIT09b2xkX2Rpcil7ZXJyPUZTLm5vZGVQZXJtaXNzaW9ucyhvbGRfZGlyLFwid1wiKTtpZihlcnIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVycil9fXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbE1vdmVQYXRoXCJdKXtGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbE1vdmVQYXRoXCJdKG9sZF9wYXRoLG5ld19wYXRoKX19Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsTW92ZVBhdGgnXSgnXCIrb2xkX3BhdGgrXCInLCAnXCIrbmV3X3BhdGgrXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2UubWVzc2FnZSl9RlMuaGFzaFJlbW92ZU5vZGUob2xkX25vZGUpO3RyeXtvbGRfZGlyLm5vZGVfb3BzLnJlbmFtZShvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKX1jYXRjaChlKXt0aHJvdyBlfWZpbmFsbHl7RlMuaGFzaEFkZE5vZGUob2xkX25vZGUpfXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25Nb3ZlUGF0aFwiXSlGUy50cmFja2luZ0RlbGVnYXRlW1wib25Nb3ZlUGF0aFwiXShvbGRfcGF0aCxuZXdfcGF0aCl9Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk1vdmVQYXRoJ10oJ1wiK29sZF9wYXRoK1wiJywgJ1wiK25ld19wYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfX0pLHJtZGlyOihmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO3ZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVycj1GUy5tYXlEZWxldGUocGFyZW50LG5hbWUsdHJ1ZSk7aWYoZXJyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpfWlmKCFwYXJlbnQubm9kZV9vcHMucm1kaXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX1pZihGUy5pc01vdW50cG9pbnQobm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKX10cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxEZWxldGVQYXRoXCJdKXtGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbERlbGV0ZVBhdGhcIl0ocGF0aCl9fWNhdGNoKGUpe2NvbnNvbGUubG9nKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnXCIrcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX1wYXJlbnQubm9kZV9vcHMucm1kaXIocGFyZW50LG5hbWUpO0ZTLmRlc3Ryb3lOb2RlKG5vZGUpO3RyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25EZWxldGVQYXRoXCJdKUZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbkRlbGV0ZVBhdGhcIl0ocGF0aCl9Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbkRlbGV0ZVBhdGgnXSgnXCIrcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX19KSxyZWFkZGlyOihmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtpZighbm9kZS5ub2RlX29wcy5yZWFkZGlyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URElSKX1yZXR1cm4gbm9kZS5ub2RlX29wcy5yZWFkZGlyKG5vZGUpfSksdW5saW5rOihmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO3ZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVycj1GUy5tYXlEZWxldGUocGFyZW50LG5hbWUsZmFsc2UpO2lmKGVycil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyKX1pZighcGFyZW50Lm5vZGVfb3BzLnVubGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pfWlmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJVU1kpfXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbERlbGV0ZVBhdGhcIl0pe0ZTLnRyYWNraW5nRGVsZWdhdGVbXCJ3aWxsRGVsZXRlUGF0aFwiXShwYXRoKX19Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsRGVsZXRlUGF0aCddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXBhcmVudC5ub2RlX29wcy51bmxpbmsocGFyZW50LG5hbWUpO0ZTLmRlc3Ryb3lOb2RlKG5vZGUpO3RyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25EZWxldGVQYXRoXCJdKUZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbkRlbGV0ZVBhdGhcIl0ocGF0aCl9Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbkRlbGV0ZVBhdGgnXSgnXCIrcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX19KSxyZWFkbGluazooZnVuY3Rpb24ocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgpO3ZhciBsaW5rPWxvb2t1cC5ub2RlO2lmKCFsaW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9FTlQpfWlmKCFsaW5rLm5vZGVfb3BzLnJlYWRsaW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfXJldHVybiBQQVRILnJlc29sdmUoRlMuZ2V0UGF0aChsaW5rLnBhcmVudCksbGluay5ub2RlX29wcy5yZWFkbGluayhsaW5rKSl9KSxzdGF0OihmdW5jdGlvbihwYXRoLGRvbnRGb2xsb3cpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtpZighbm9kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKX1pZighbm9kZS5ub2RlX29wcy5nZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9cmV0dXJuIG5vZGUubm9kZV9vcHMuZ2V0YXR0cihub2RlKX0pLGxzdGF0OihmdW5jdGlvbihwYXRoKXtyZXR1cm4gRlMuc3RhdChwYXRoLHRydWUpfSksY2htb2Q6KGZ1bmN0aW9uKHBhdGgsbW9kZSxkb250Rm9sbG93KXt2YXIgbm9kZTtpZih0eXBlb2YgcGF0aD09PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7bW9kZTptb2RlJjQwOTV8bm9kZS5tb2RlJn40MDk1LHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9KSxsY2htb2Q6KGZ1bmN0aW9uKHBhdGgsbW9kZSl7RlMuY2htb2QocGF0aCxtb2RlLHRydWUpfSksZmNobW9kOihmdW5jdGlvbihmZCxtb2RlKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJBREYpfUZTLmNobW9kKHN0cmVhbS5ub2RlLG1vZGUpfSksY2hvd246KGZ1bmN0aW9uKHBhdGgsdWlkLGdpZCxkb250Rm9sbG93KXt2YXIgbm9kZTtpZih0eXBlb2YgcGF0aD09PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7dGltZXN0YW1wOkRhdGUubm93KCl9KX0pLGxjaG93bjooZnVuY3Rpb24ocGF0aCx1aWQsZ2lkKXtGUy5jaG93bihwYXRoLHVpZCxnaWQsdHJ1ZSl9KSxmY2hvd246KGZ1bmN0aW9uKGZkLHVpZCxnaWQpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9RlMuY2hvd24oc3RyZWFtLm5vZGUsdWlkLGdpZCl9KSx0cnVuY2F0ZTooZnVuY3Rpb24ocGF0aCxsZW4pe2lmKGxlbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJzdHJpbmdcIil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7bm9kZT1sb29rdXAubm9kZX1lbHNle25vZGU9cGF0aH1pZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSl9aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlTRElSKX1pZighRlMuaXNGaWxlKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9dmFyIGVycj1GUy5ub2RlUGVybWlzc2lvbnMobm9kZSxcIndcIik7aWYoZXJyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpfW5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLHtzaXplOmxlbix0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSksZnRydW5jYXRlOihmdW5jdGlvbihmZCxsZW4pe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9RlMudHJ1bmNhdGUoc3RyZWFtLm5vZGUsbGVuKX0pLHV0aW1lOihmdW5jdGlvbihwYXRoLGF0aW1lLG10aW1lKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7dGltZXN0YW1wOk1hdGgubWF4KGF0aW1lLG10aW1lKX0pfSksb3BlbjooZnVuY3Rpb24ocGF0aCxmbGFncyxtb2RlLGZkX3N0YXJ0LGZkX2VuZCl7aWYocGF0aD09PVwiXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCl9ZmxhZ3M9dHlwZW9mIGZsYWdzPT09XCJzdHJpbmdcIj9GUy5tb2RlU3RyaW5nVG9GbGFncyhmbGFncyk6ZmxhZ3M7bW9kZT10eXBlb2YgbW9kZT09PVwidW5kZWZpbmVkXCI/NDM4Om1vZGU7aWYoZmxhZ3MmNjQpe21vZGU9bW9kZSY0MDk1fDMyNzY4fWVsc2V7bW9kZT0wfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJvYmplY3RcIil7bm9kZT1wYXRofWVsc2V7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohKGZsYWdzJjEzMTA3Mil9KTtub2RlPWxvb2t1cC5ub2RlfWNhdGNoKGUpe319dmFyIGNyZWF0ZWQ9ZmFsc2U7aWYoZmxhZ3MmNjQpe2lmKG5vZGUpe2lmKGZsYWdzJjEyOCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUVYSVNUKX19ZWxzZXtub2RlPUZTLm1rbm9kKHBhdGgsbW9kZSwwKTtjcmVhdGVkPXRydWV9fWlmKCFub2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9FTlQpfWlmKEZTLmlzQ2hyZGV2KG5vZGUubW9kZSkpe2ZsYWdzJj1+NTEyfWlmKGZsYWdzJjY1NTM2JiYhRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PVERJUil9aWYoIWNyZWF0ZWQpe3ZhciBlcnI9RlMubWF5T3Blbihub2RlLGZsYWdzKTtpZihlcnIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVycil9fWlmKGZsYWdzJjUxMil7RlMudHJ1bmNhdGUobm9kZSwwKX1mbGFncyY9figxMjh8NTEyKTt2YXIgc3RyZWFtPUZTLmNyZWF0ZVN0cmVhbSh7bm9kZTpub2RlLHBhdGg6RlMuZ2V0UGF0aChub2RlKSxmbGFnczpmbGFncyxzZWVrYWJsZTp0cnVlLHBvc2l0aW9uOjAsc3RyZWFtX29wczpub2RlLnN0cmVhbV9vcHMsdW5nb3R0ZW46W10sZXJyb3I6ZmFsc2V9LGZkX3N0YXJ0LGZkX2VuZCk7aWYoc3RyZWFtLnN0cmVhbV9vcHMub3Blbil7c3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pfWlmKE1vZHVsZVtcImxvZ1JlYWRGaWxlc1wiXSYmIShmbGFncyYxKSl7aWYoIUZTLnJlYWRGaWxlcylGUy5yZWFkRmlsZXM9e307aWYoIShwYXRoIGluIEZTLnJlYWRGaWxlcykpe0ZTLnJlYWRGaWxlc1twYXRoXT0xO2VycihcInJlYWQgZmlsZTogXCIrcGF0aCl9fXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25PcGVuRmlsZVwiXSl7dmFyIHRyYWNraW5nRmxhZ3M9MDtpZigoZmxhZ3MmMjA5NzE1NSkhPT0xKXt0cmFja2luZ0ZsYWdzfD1GUy50cmFja2luZy5vcGVuRmxhZ3MuUkVBRH1pZigoZmxhZ3MmMjA5NzE1NSkhPT0wKXt0cmFja2luZ0ZsYWdzfD1GUy50cmFja2luZy5vcGVuRmxhZ3MuV1JJVEV9RlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uT3BlbkZpbGVcIl0ocGF0aCx0cmFja2luZ0ZsYWdzKX19Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk9wZW5GaWxlJ10oJ1wiK3BhdGgrXCInLCBmbGFncykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXJldHVybiBzdHJlYW19KSxjbG9zZTooZnVuY3Rpb24oc3RyZWFtKXtpZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9aWYoc3RyZWFtLmdldGRlbnRzKXN0cmVhbS5nZXRkZW50cz1udWxsO3RyeXtpZihzdHJlYW0uc3RyZWFtX29wcy5jbG9zZSl7c3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Uoc3RyZWFtKX19Y2F0Y2goZSl7dGhyb3cgZX1maW5hbGx5e0ZTLmNsb3NlU3RyZWFtKHN0cmVhbS5mZCl9c3RyZWFtLmZkPW51bGx9KSxpc0Nsb3NlZDooZnVuY3Rpb24oc3RyZWFtKXtyZXR1cm4gc3RyZWFtLmZkPT09bnVsbH0pLGxsc2VlazooZnVuY3Rpb24oc3RyZWFtLG9mZnNldCx3aGVuY2Upe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKX1pZighc3RyZWFtLnNlZWthYmxlfHwhc3RyZWFtLnN0cmVhbV9vcHMubGxzZWVrKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FU1BJUEUpfXN0cmVhbS5wb3NpdGlvbj1zdHJlYW0uc3RyZWFtX29wcy5sbHNlZWsoc3RyZWFtLG9mZnNldCx3aGVuY2UpO3N0cmVhbS51bmdvdHRlbj1bXTtyZXR1cm4gc3RyZWFtLnBvc2l0aW9ufSkscmVhZDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtpZihsZW5ndGg8MHx8cG9zaXRpb248MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKX1pZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTEpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKX1pZihGUy5pc0RpcihzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlTRElSKX1pZighc3RyZWFtLnN0cmVhbV9vcHMucmVhZCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKX12YXIgc2Vla2luZz10eXBlb2YgcG9zaXRpb24hPT1cInVuZGVmaW5lZFwiO2lmKCFzZWVraW5nKXtwb3NpdGlvbj1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZighc3RyZWFtLnNlZWthYmxlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FU1BJUEUpfXZhciBieXRlc1JlYWQ9c3RyZWFtLnN0cmVhbV9vcHMucmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pO2lmKCFzZWVraW5nKXN0cmVhbS5wb3NpdGlvbis9Ynl0ZXNSZWFkO3JldHVybiBieXRlc1JlYWR9KSx3cml0ZTooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYobGVuZ3RoPDB8fHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCl9aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJBREYpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9aWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJU0RJUil9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLndyaXRlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfWlmKHN0cmVhbS5mbGFncyYxMDI0KXtGUy5sbHNlZWsoc3RyZWFtLDAsMil9dmFyIHNlZWtpbmc9dHlwZW9mIHBvc2l0aW9uIT09XCJ1bmRlZmluZWRcIjtpZighc2Vla2luZyl7cG9zaXRpb249c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVNQSVBFKX12YXIgYnl0ZXNXcml0dGVuPXN0cmVhbS5zdHJlYW1fb3BzLndyaXRlKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixjYW5Pd24pO2lmKCFzZWVraW5nKXN0cmVhbS5wb3NpdGlvbis9Ynl0ZXNXcml0dGVuO3RyeXtpZihzdHJlYW0ucGF0aCYmRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uV3JpdGVUb0ZpbGVcIl0pRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uV3JpdGVUb0ZpbGVcIl0oc3RyZWFtLnBhdGgpfWNhdGNoKGUpe2NvbnNvbGUubG9nKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25Xcml0ZVRvRmlsZSddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXJldHVybiBieXRlc1dyaXR0ZW59KSxhbGxvY2F0ZTooZnVuY3Rpb24oc3RyZWFtLG9mZnNldCxsZW5ndGgpe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKX1pZihvZmZzZXQ8MHx8bGVuZ3RoPD0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERil9aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSYmIUZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9ERVYpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5hbGxvY2F0ZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU9QTk9UU1VQUCl9c3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUoc3RyZWFtLG9mZnNldCxsZW5ndGgpfSksbW1hcDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLHByb3QsZmxhZ3Mpe2lmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0xKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQUNDRVMpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5tbWFwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9ERVYpfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tbWFwKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKX0pLG1zeW5jOihmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKXtpZighc3RyZWFtfHwhc3RyZWFtLnN0cmVhbV9vcHMubXN5bmMpe3JldHVybiAwfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tc3luYyhzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKX0pLG11bm1hcDooZnVuY3Rpb24oc3RyZWFtKXtyZXR1cm4gMH0pLGlvY3RsOihmdW5jdGlvbihzdHJlYW0sY21kLGFyZyl7aWYoIXN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9UVFkpfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5pb2N0bChzdHJlYW0sY21kLGFyZyl9KSxyZWFkRmlsZTooZnVuY3Rpb24ocGF0aCxvcHRzKXtvcHRzPW9wdHN8fHt9O29wdHMuZmxhZ3M9b3B0cy5mbGFnc3x8XCJyXCI7b3B0cy5lbmNvZGluZz1vcHRzLmVuY29kaW5nfHxcImJpbmFyeVwiO2lmKG9wdHMuZW5jb2RpbmchPT1cInV0ZjhcIiYmb3B0cy5lbmNvZGluZyE9PVwiYmluYXJ5XCIpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmNvZGluZyB0eXBlIFwiJytvcHRzLmVuY29kaW5nKydcIicpfXZhciByZXQ7dmFyIHN0cmVhbT1GUy5vcGVuKHBhdGgsb3B0cy5mbGFncyk7dmFyIHN0YXQ9RlMuc3RhdChwYXRoKTt2YXIgbGVuZ3RoPXN0YXQuc2l6ZTt2YXIgYnVmPW5ldyBVaW50OEFycmF5KGxlbmd0aCk7RlMucmVhZChzdHJlYW0sYnVmLDAsbGVuZ3RoLDApO2lmKG9wdHMuZW5jb2Rpbmc9PT1cInV0ZjhcIil7cmV0PVVURjhBcnJheVRvU3RyaW5nKGJ1ZiwwKX1lbHNlIGlmKG9wdHMuZW5jb2Rpbmc9PT1cImJpbmFyeVwiKXtyZXQ9YnVmfUZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIHJldH0pLHdyaXRlRmlsZTooZnVuY3Rpb24ocGF0aCxkYXRhLG9wdHMpe29wdHM9b3B0c3x8e307b3B0cy5mbGFncz1vcHRzLmZsYWdzfHxcIndcIjt2YXIgc3RyZWFtPUZTLm9wZW4ocGF0aCxvcHRzLmZsYWdzLG9wdHMubW9kZSk7aWYodHlwZW9mIGRhdGE9PT1cInN0cmluZ1wiKXt2YXIgYnVmPW5ldyBVaW50OEFycmF5KGxlbmd0aEJ5dGVzVVRGOChkYXRhKSsxKTt2YXIgYWN0dWFsTnVtQnl0ZXM9c3RyaW5nVG9VVEY4QXJyYXkoZGF0YSxidWYsMCxidWYubGVuZ3RoKTtGUy53cml0ZShzdHJlYW0sYnVmLDAsYWN0dWFsTnVtQnl0ZXMsdW5kZWZpbmVkLG9wdHMuY2FuT3duKX1lbHNlIGlmKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSl7RlMud3JpdGUoc3RyZWFtLGRhdGEsMCxkYXRhLmJ5dGVMZW5ndGgsdW5kZWZpbmVkLG9wdHMuY2FuT3duKX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZVwiKX1GUy5jbG9zZShzdHJlYW0pfSksY3dkOihmdW5jdGlvbigpe3JldHVybiBGUy5jdXJyZW50UGF0aH0pLGNoZGlyOihmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTtpZihsb29rdXAubm9kZT09PW51bGwpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCl9aWYoIUZTLmlzRGlyKGxvb2t1cC5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URElSKX12YXIgZXJyPUZTLm5vZGVQZXJtaXNzaW9ucyhsb29rdXAubm9kZSxcInhcIik7aWYoZXJyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpfUZTLmN1cnJlbnRQYXRoPWxvb2t1cC5wYXRofSksY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzOihmdW5jdGlvbigpe0ZTLm1rZGlyKFwiL3RtcFwiKTtGUy5ta2RpcihcIi9ob21lXCIpO0ZTLm1rZGlyKFwiL2hvbWUvd2ViX3VzZXJcIil9KSxjcmVhdGVEZWZhdWx0RGV2aWNlczooZnVuY3Rpb24oKXtGUy5ta2RpcihcIi9kZXZcIik7RlMucmVnaXN0ZXJEZXZpY2UoRlMubWFrZWRldigxLDMpLHtyZWFkOihmdW5jdGlvbigpe3JldHVybiAwfSksd3JpdGU6KGZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe3JldHVybiBsZW5ndGh9KX0pO0ZTLm1rZGV2KFwiL2Rldi9udWxsXCIsRlMubWFrZWRldigxLDMpKTtUVFkucmVnaXN0ZXIoRlMubWFrZWRldig1LDApLFRUWS5kZWZhdWx0X3R0eV9vcHMpO1RUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDYsMCksVFRZLmRlZmF1bHRfdHR5MV9vcHMpO0ZTLm1rZGV2KFwiL2Rldi90dHlcIixGUy5tYWtlZGV2KDUsMCkpO0ZTLm1rZGV2KFwiL2Rldi90dHkxXCIsRlMubWFrZWRldig2LDApKTt2YXIgcmFuZG9tX2RldmljZTtpZih0eXBlb2YgY3J5cHRvIT09XCJ1bmRlZmluZWRcIil7dmFyIHJhbmRvbUJ1ZmZlcj1uZXcgVWludDhBcnJheSgxKTtyYW5kb21fZGV2aWNlPShmdW5jdGlvbigpe2NyeXB0by5nZXRSYW5kb21WYWx1ZXMocmFuZG9tQnVmZmVyKTtyZXR1cm4gcmFuZG9tQnVmZmVyWzBdfSl9ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtyYW5kb21fZGV2aWNlPShmdW5jdGlvbigpe3JldHVybiByZXF1aXJlKFwiY3J5cHRvXCIpW1wicmFuZG9tQnl0ZXNcIl0oMSlbMF19KX1lbHNle3JhbmRvbV9kZXZpY2U9KGZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkqMjU2fDB9KX1GUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJyYW5kb21cIixyYW5kb21fZGV2aWNlKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJ1cmFuZG9tXCIscmFuZG9tX2RldmljZSk7RlMubWtkaXIoXCIvZGV2L3NobVwiKTtGUy5ta2RpcihcIi9kZXYvc2htL3RtcFwiKX0pLGNyZWF0ZVNwZWNpYWxEaXJlY3RvcmllczooZnVuY3Rpb24oKXtGUy5ta2RpcihcIi9wcm9jXCIpO0ZTLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKTtGUy5ta2RpcihcIi9wcm9jL3NlbGYvZmRcIik7RlMubW91bnQoe21vdW50OihmdW5jdGlvbigpe3ZhciBub2RlPUZTLmNyZWF0ZU5vZGUoXCIvcHJvYy9zZWxmXCIsXCJmZFwiLDE2Mzg0fDUxMSw3Myk7bm9kZS5ub2RlX29wcz17bG9va3VwOihmdW5jdGlvbihwYXJlbnQsbmFtZSl7dmFyIGZkPStuYW1lO3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTt2YXIgcmV0PXtwYXJlbnQ6bnVsbCxtb3VudDp7bW91bnRwb2ludDpcImZha2VcIn0sbm9kZV9vcHM6e3JlYWRsaW5rOihmdW5jdGlvbigpe3JldHVybiBzdHJlYW0ucGF0aH0pfX07cmV0LnBhcmVudD1yZXQ7cmV0dXJuIHJldH0pfTtyZXR1cm4gbm9kZX0pfSx7fSxcIi9wcm9jL3NlbGYvZmRcIil9KSxjcmVhdGVTdGFuZGFyZFN0cmVhbXM6KGZ1bmN0aW9uKCl7aWYoTW9kdWxlW1wic3RkaW5cIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZGluXCIsTW9kdWxlW1wic3RkaW5cIl0pfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZGluXCIpfWlmKE1vZHVsZVtcInN0ZG91dFwiXSl7RlMuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3Rkb3V0XCIsbnVsbCxNb2R1bGVbXCJzdGRvdXRcIl0pfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZG91dFwiKX1pZihNb2R1bGVbXCJzdGRlcnJcIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZGVyclwiLG51bGwsTW9kdWxlW1wic3RkZXJyXCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eTFcIixcIi9kZXYvc3RkZXJyXCIpfXZhciBzdGRpbj1GUy5vcGVuKFwiL2Rldi9zdGRpblwiLFwiclwiKTthc3NlcnQoc3RkaW4uZmQ9PT0wLFwiaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGluIChcIitzdGRpbi5mZCtcIilcIik7dmFyIHN0ZG91dD1GUy5vcGVuKFwiL2Rldi9zdGRvdXRcIixcIndcIik7YXNzZXJ0KHN0ZG91dC5mZD09PTEsXCJpbnZhbGlkIGhhbmRsZSBmb3Igc3Rkb3V0IChcIitzdGRvdXQuZmQrXCIpXCIpO3ZhciBzdGRlcnI9RlMub3BlbihcIi9kZXYvc3RkZXJyXCIsXCJ3XCIpO2Fzc2VydChzdGRlcnIuZmQ9PT0yLFwiaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGVyciAoXCIrc3RkZXJyLmZkK1wiKVwiKX0pLGVuc3VyZUVycm5vRXJyb3I6KGZ1bmN0aW9uKCl7aWYoRlMuRXJybm9FcnJvcilyZXR1cm47RlMuRXJybm9FcnJvcj1mdW5jdGlvbiBFcnJub0Vycm9yKGVycm5vLG5vZGUpe3RoaXMubm9kZT1ub2RlO3RoaXMuc2V0RXJybm89KGZ1bmN0aW9uKGVycm5vKXt0aGlzLmVycm5vPWVycm5vO2Zvcih2YXIga2V5IGluIEVSUk5PX0NPREVTKXtpZihFUlJOT19DT0RFU1trZXldPT09ZXJybm8pe3RoaXMuY29kZT1rZXk7YnJlYWt9fX0pO3RoaXMuc2V0RXJybm8oZXJybm8pO3RoaXMubWVzc2FnZT1FUlJOT19NRVNTQUdFU1tlcnJub107aWYodGhpcy5zdGFjaylPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN0YWNrXCIse3ZhbHVlOihuZXcgRXJyb3IpLnN0YWNrLHdyaXRhYmxlOnRydWV9KX07RlMuRXJybm9FcnJvci5wcm90b3R5cGU9bmV3IEVycm9yO0ZTLkVycm5vRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUZTLkVycm5vRXJyb3I7W0VSUk5PX0NPREVTLkVOT0VOVF0uZm9yRWFjaCgoZnVuY3Rpb24oY29kZSl7RlMuZ2VuZXJpY0Vycm9yc1tjb2RlXT1uZXcgRlMuRXJybm9FcnJvcihjb2RlKTtGUy5nZW5lcmljRXJyb3JzW2NvZGVdLnN0YWNrPVwiPGdlbmVyaWMgZXJyb3IsIG5vIHN0YWNrPlwifSkpfSksc3RhdGljSW5pdDooZnVuY3Rpb24oKXtGUy5lbnN1cmVFcnJub0Vycm9yKCk7RlMubmFtZVRhYmxlPW5ldyBBcnJheSg0MDk2KTtGUy5tb3VudChNRU1GUyx7fSxcIi9cIik7RlMuY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzKCk7RlMuY3JlYXRlRGVmYXVsdERldmljZXMoKTtGUy5jcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXMoKTtGUy5maWxlc3lzdGVtcz17XCJNRU1GU1wiOk1FTUZTLFwiSURCRlNcIjpJREJGUyxcIk5PREVGU1wiOk5PREVGUyxcIldPUktFUkZTXCI6V09SS0VSRlN9fSksaW5pdDooZnVuY3Rpb24oaW5wdXQsb3V0cHV0LGVycm9yKXthc3NlcnQoIUZTLmluaXQuaW5pdGlhbGl6ZWQsXCJGUy5pbml0IHdhcyBwcmV2aW91c2x5IGNhbGxlZC4gSWYgeW91IHdhbnQgdG8gaW5pdGlhbGl6ZSBsYXRlciB3aXRoIGN1c3RvbSBwYXJhbWV0ZXJzLCByZW1vdmUgYW55IGVhcmxpZXIgY2FsbHMgKG5vdGUgdGhhdCBvbmUgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgZ2VuZXJhdGVkIGNvZGUpXCIpO0ZTLmluaXQuaW5pdGlhbGl6ZWQ9dHJ1ZTtGUy5lbnN1cmVFcnJub0Vycm9yKCk7TW9kdWxlW1wic3RkaW5cIl09aW5wdXR8fE1vZHVsZVtcInN0ZGluXCJdO01vZHVsZVtcInN0ZG91dFwiXT1vdXRwdXR8fE1vZHVsZVtcInN0ZG91dFwiXTtNb2R1bGVbXCJzdGRlcnJcIl09ZXJyb3J8fE1vZHVsZVtcInN0ZGVyclwiXTtGUy5jcmVhdGVTdGFuZGFyZFN0cmVhbXMoKX0pLHF1aXQ6KGZ1bmN0aW9uKCl7RlMuaW5pdC5pbml0aWFsaXplZD1mYWxzZTt2YXIgZmZsdXNoPU1vZHVsZVtcIl9mZmx1c2hcIl07aWYoZmZsdXNoKWZmbHVzaCgwKTtmb3IodmFyIGk9MDtpPEZTLnN0cmVhbXMubGVuZ3RoO2krKyl7dmFyIHN0cmVhbT1GUy5zdHJlYW1zW2ldO2lmKCFzdHJlYW0pe2NvbnRpbnVlfUZTLmNsb3NlKHN0cmVhbSl9fSksZ2V0TW9kZTooZnVuY3Rpb24oY2FuUmVhZCxjYW5Xcml0ZSl7dmFyIG1vZGU9MDtpZihjYW5SZWFkKW1vZGV8PTI5Mnw3MztpZihjYW5Xcml0ZSltb2RlfD0xNDY7cmV0dXJuIG1vZGV9KSxqb2luUGF0aDooZnVuY3Rpb24ocGFydHMsZm9yY2VSZWxhdGl2ZSl7dmFyIHBhdGg9UEFUSC5qb2luLmFwcGx5KG51bGwscGFydHMpO2lmKGZvcmNlUmVsYXRpdmUmJnBhdGhbMF09PVwiL1wiKXBhdGg9cGF0aC5zdWJzdHIoMSk7cmV0dXJuIHBhdGh9KSxhYnNvbHV0ZVBhdGg6KGZ1bmN0aW9uKHJlbGF0aXZlLGJhc2Upe3JldHVybiBQQVRILnJlc29sdmUoYmFzZSxyZWxhdGl2ZSl9KSxzdGFuZGFyZGl6ZVBhdGg6KGZ1bmN0aW9uKHBhdGgpe3JldHVybiBQQVRILm5vcm1hbGl6ZShwYXRoKX0pLGZpbmRPYmplY3Q6KGZ1bmN0aW9uKHBhdGgsZG9udFJlc29sdmVMYXN0TGluayl7dmFyIHJldD1GUy5hbmFseXplUGF0aChwYXRoLGRvbnRSZXNvbHZlTGFzdExpbmspO2lmKHJldC5leGlzdHMpe3JldHVybiByZXQub2JqZWN0fWVsc2V7X19fc2V0RXJyTm8ocmV0LmVycm9yKTtyZXR1cm4gbnVsbH19KSxhbmFseXplUGF0aDooZnVuY3Rpb24ocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKXt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3BhdGg9bG9va3VwLnBhdGh9Y2F0Y2goZSl7fXZhciByZXQ9e2lzUm9vdDpmYWxzZSxleGlzdHM6ZmFsc2UsZXJyb3I6MCxuYW1lOm51bGwscGF0aDpudWxsLG9iamVjdDpudWxsLHBhcmVudEV4aXN0czpmYWxzZSxwYXJlbnRQYXRoOm51bGwscGFyZW50T2JqZWN0Om51bGx9O3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTtyZXQucGFyZW50RXhpc3RzPXRydWU7cmV0LnBhcmVudFBhdGg9bG9va3VwLnBhdGg7cmV0LnBhcmVudE9iamVjdD1sb29rdXAubm9kZTtyZXQubmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2xvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3JldC5leGlzdHM9dHJ1ZTtyZXQucGF0aD1sb29rdXAucGF0aDtyZXQub2JqZWN0PWxvb2t1cC5ub2RlO3JldC5uYW1lPWxvb2t1cC5ub2RlLm5hbWU7cmV0LmlzUm9vdD1sb29rdXAucGF0aD09PVwiL1wifWNhdGNoKGUpe3JldC5lcnJvcj1lLmVycm5vfXJldHVybiByZXR9KSxjcmVhdGVGb2xkZXI6KGZ1bmN0aW9uKHBhcmVudCxuYW1lLGNhblJlYWQsY2FuV3JpdGUpe3ZhciBwYXRoPVBBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTt2YXIgbW9kZT1GUy5nZXRNb2RlKGNhblJlYWQsY2FuV3JpdGUpO3JldHVybiBGUy5ta2RpcihwYXRoLG1vZGUpfSksY3JlYXRlUGF0aDooZnVuY3Rpb24ocGFyZW50LHBhdGgsY2FuUmVhZCxjYW5Xcml0ZSl7cGFyZW50PXR5cGVvZiBwYXJlbnQ9PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCk7dmFyIHBhcnRzPXBhdGguc3BsaXQoXCIvXCIpLnJldmVyc2UoKTt3aGlsZShwYXJ0cy5sZW5ndGgpe3ZhciBwYXJ0PXBhcnRzLnBvcCgpO2lmKCFwYXJ0KWNvbnRpbnVlO3ZhciBjdXJyZW50PVBBVEguam9pbjIocGFyZW50LHBhcnQpO3RyeXtGUy5ta2RpcihjdXJyZW50KX1jYXRjaChlKXt9cGFyZW50PWN1cnJlbnR9cmV0dXJuIGN1cnJlbnR9KSxjcmVhdGVGaWxlOihmdW5jdGlvbihwYXJlbnQsbmFtZSxwcm9wZXJ0aWVzLGNhblJlYWQsY2FuV3JpdGUpe3ZhciBwYXRoPVBBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTt2YXIgbW9kZT1GUy5nZXRNb2RlKGNhblJlYWQsY2FuV3JpdGUpO3JldHVybiBGUy5jcmVhdGUocGF0aCxtb2RlKX0pLGNyZWF0ZURhdGFGaWxlOihmdW5jdGlvbihwYXJlbnQsbmFtZSxkYXRhLGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKXt2YXIgcGF0aD1uYW1lP1BBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTpwYXJlbnQ7dmFyIG1vZGU9RlMuZ2V0TW9kZShjYW5SZWFkLGNhbldyaXRlKTt2YXIgbm9kZT1GUy5jcmVhdGUocGF0aCxtb2RlKTtpZihkYXRhKXtpZih0eXBlb2YgZGF0YT09PVwic3RyaW5nXCIpe3ZhciBhcnI9bmV3IEFycmF5KGRhdGEubGVuZ3RoKTtmb3IodmFyIGk9MCxsZW49ZGF0YS5sZW5ndGg7aTxsZW47KytpKWFycltpXT1kYXRhLmNoYXJDb2RlQXQoaSk7ZGF0YT1hcnJ9RlMuY2htb2Qobm9kZSxtb2RlfDE0Nik7dmFyIHN0cmVhbT1GUy5vcGVuKG5vZGUsXCJ3XCIpO0ZTLndyaXRlKHN0cmVhbSxkYXRhLDAsZGF0YS5sZW5ndGgsMCxjYW5Pd24pO0ZTLmNsb3NlKHN0cmVhbSk7RlMuY2htb2Qobm9kZSxtb2RlKX1yZXR1cm4gbm9kZX0pLGNyZWF0ZURldmljZTooZnVuY3Rpb24ocGFyZW50LG5hbWUsaW5wdXQsb3V0cHV0KXt2YXIgcGF0aD1QQVRILmpvaW4yKHR5cGVvZiBwYXJlbnQ9PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCksbmFtZSk7dmFyIG1vZGU9RlMuZ2V0TW9kZSghIWlucHV0LCEhb3V0cHV0KTtpZighRlMuY3JlYXRlRGV2aWNlLm1ham9yKUZTLmNyZWF0ZURldmljZS5tYWpvcj02NDt2YXIgZGV2PUZTLm1ha2VkZXYoRlMuY3JlYXRlRGV2aWNlLm1ham9yKyssMCk7RlMucmVnaXN0ZXJEZXZpY2UoZGV2LHtvcGVuOihmdW5jdGlvbihzdHJlYW0pe3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0pLGNsb3NlOihmdW5jdGlvbihzdHJlYW0pe2lmKG91dHB1dCYmb3V0cHV0LmJ1ZmZlciYmb3V0cHV0LmJ1ZmZlci5sZW5ndGgpe291dHB1dCgxMCl9fSkscmVhZDooZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PWlucHV0KCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlPKX1pZihyZXN1bHQ9PT11bmRlZmluZWQmJmJ5dGVzUmVhZD09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVBR0FJTil9aWYocmVzdWx0PT09bnVsbHx8cmVzdWx0PT09dW5kZWZpbmVkKWJyZWFrO2J5dGVzUmVhZCsrO2J1ZmZlcltvZmZzZXQraV09cmVzdWx0fWlmKGJ5dGVzUmVhZCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGJ5dGVzUmVhZH0pLHdyaXRlOihmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe3RyeXtvdXRwdXQoYnVmZmVyW29mZnNldCtpXSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlPKX19aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX0pfSk7cmV0dXJuIEZTLm1rZGV2KHBhdGgsbW9kZSxkZXYpfSksY3JlYXRlTGluazooZnVuY3Rpb24ocGFyZW50LG5hbWUsdGFyZ2V0LGNhblJlYWQsY2FuV3JpdGUpe3ZhciBwYXRoPVBBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTtyZXR1cm4gRlMuc3ltbGluayh0YXJnZXQscGF0aCl9KSxmb3JjZUxvYWRGaWxlOihmdW5jdGlvbihvYmope2lmKG9iai5pc0RldmljZXx8b2JqLmlzRm9sZGVyfHxvYmoubGlua3x8b2JqLmNvbnRlbnRzKXJldHVybiB0cnVlO3ZhciBzdWNjZXNzPXRydWU7aWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0IT09XCJ1bmRlZmluZWRcIil7dGhyb3cgbmV3IEVycm9yKFwiTGF6eSBsb2FkaW5nIHNob3VsZCBoYXZlIGJlZW4gcGVyZm9ybWVkIChjb250ZW50cyBzZXQpIGluIGNyZWF0ZUxhenlGaWxlLCBidXQgaXQgd2FzIG5vdC4gTGF6eSBsb2FkaW5nIG9ubHkgd29ya3MgaW4gd2ViIHdvcmtlcnMuIFVzZSAtLWVtYmVkLWZpbGUgb3IgLS1wcmVsb2FkLWZpbGUgaW4gZW1jYyBvbiB0aGUgbWFpbiB0aHJlYWQuXCIpfWVsc2UgaWYoTW9kdWxlW1wicmVhZFwiXSl7dHJ5e29iai5jb250ZW50cz1pbnRBcnJheUZyb21TdHJpbmcoTW9kdWxlW1wicmVhZFwiXShvYmoudXJsKSx0cnVlKTtvYmoudXNlZEJ5dGVzPW9iai5jb250ZW50cy5sZW5ndGh9Y2F0Y2goZSl7c3VjY2Vzcz1mYWxzZX19ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCB3aXRob3V0IHJlYWQoKSBvciBYTUxIdHRwUmVxdWVzdC5cIil9aWYoIXN1Y2Nlc3MpX19fc2V0RXJyTm8oRVJSTk9fQ09ERVMuRUlPKTtyZXR1cm4gc3VjY2Vzc30pLGNyZWF0ZUxhenlGaWxlOihmdW5jdGlvbihwYXJlbnQsbmFtZSx1cmwsY2FuUmVhZCxjYW5Xcml0ZSl7ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXkoKXt0aGlzLmxlbmd0aEtub3duPWZhbHNlO3RoaXMuY2h1bmtzPVtdfUxhenlVaW50OEFycmF5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfZ2V0KGlkeCl7aWYoaWR4PnRoaXMubGVuZ3RoLTF8fGlkeDwwKXtyZXR1cm4gdW5kZWZpbmVkfXZhciBjaHVua09mZnNldD1pZHgldGhpcy5jaHVua1NpemU7dmFyIGNodW5rTnVtPWlkeC90aGlzLmNodW5rU2l6ZXwwO3JldHVybiB0aGlzLmdldHRlcihjaHVua051bSlbY2h1bmtPZmZzZXRdfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuc2V0RGF0YUdldHRlcj1mdW5jdGlvbiBMYXp5VWludDhBcnJheV9zZXREYXRhR2V0dGVyKGdldHRlcil7dGhpcy5nZXR0ZXI9Z2V0dGVyfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuY2FjaGVMZW5ndGg9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfY2FjaGVMZW5ndGgoKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkhFQURcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO2lmKCEoeGhyLnN0YXR1cz49MjAwJiZ4aHIuc3RhdHVzPDMwMHx8eGhyLnN0YXR1cz09PTMwNCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIit1cmwrXCIuIFN0YXR1czogXCIreGhyLnN0YXR1cyk7dmFyIGRhdGFsZW5ndGg9TnVtYmVyKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtbGVuZ3RoXCIpKTt2YXIgaGVhZGVyO3ZhciBoYXNCeXRlU2VydmluZz0oaGVhZGVyPXhoci5nZXRSZXNwb25zZUhlYWRlcihcIkFjY2VwdC1SYW5nZXNcIikpJiZoZWFkZXI9PT1cImJ5dGVzXCI7dmFyIHVzZXNHemlwPShoZWFkZXI9eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSkmJmhlYWRlcj09PVwiZ3ppcFwiO3ZhciBjaHVua1NpemU9MTAyNCoxMDI0O2lmKCFoYXNCeXRlU2VydmluZyljaHVua1NpemU9ZGF0YWxlbmd0aDt2YXIgZG9YSFI9KGZ1bmN0aW9uKGZyb20sdG8pe2lmKGZyb20+dG8pdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCByYW5nZSAoXCIrZnJvbStcIiwgXCIrdG8rXCIpIG9yIG5vIGJ5dGVzIHJlcXVlc3RlZCFcIik7aWYodG8+ZGF0YWxlbmd0aC0xKXRocm93IG5ldyBFcnJvcihcIm9ubHkgXCIrZGF0YWxlbmd0aCtcIiBieXRlcyBhdmFpbGFibGUhIHByb2dyYW1tZXIgZXJyb3IhXCIpO3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTtpZihkYXRhbGVuZ3RoIT09Y2h1bmtTaXplKXhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiUmFuZ2VcIixcImJ5dGVzPVwiK2Zyb20rXCItXCIrdG8pO2lmKHR5cGVvZiBVaW50OEFycmF5IT1cInVuZGVmaW5lZFwiKXhoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2lmKHhoci5vdmVycmlkZU1pbWVUeXBlKXt4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIil9eGhyLnNlbmQobnVsbCk7aWYoISh4aHIuc3RhdHVzPj0yMDAmJnhoci5zdGF0dXM8MzAwfHx4aHIuc3RhdHVzPT09MzA0KSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBsb2FkIFwiK3VybCtcIi4gU3RhdHVzOiBcIit4aHIuc3RhdHVzKTtpZih4aHIucmVzcG9uc2UhPT11bmRlZmluZWQpe3JldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2V8fFtdKX1lbHNle3JldHVybiBpbnRBcnJheUZyb21TdHJpbmcoeGhyLnJlc3BvbnNlVGV4dHx8XCJcIix0cnVlKX19KTt2YXIgbGF6eUFycmF5PXRoaXM7bGF6eUFycmF5LnNldERhdGFHZXR0ZXIoKGZ1bmN0aW9uKGNodW5rTnVtKXt2YXIgc3RhcnQ9Y2h1bmtOdW0qY2h1bmtTaXplO3ZhciBlbmQ9KGNodW5rTnVtKzEpKmNodW5rU2l6ZS0xO2VuZD1NYXRoLm1pbihlbmQsZGF0YWxlbmd0aC0xKTtpZih0eXBlb2YgbGF6eUFycmF5LmNodW5rc1tjaHVua051bV09PT1cInVuZGVmaW5lZFwiKXtsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT1kb1hIUihzdGFydCxlbmQpfWlmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT09PVwidW5kZWZpbmVkXCIpdGhyb3cgbmV3IEVycm9yKFwiZG9YSFIgZmFpbGVkIVwiKTtyZXR1cm4gbGF6eUFycmF5LmNodW5rc1tjaHVua051bV19KSk7aWYodXNlc0d6aXB8fCFkYXRhbGVuZ3RoKXtjaHVua1NpemU9ZGF0YWxlbmd0aD0xO2RhdGFsZW5ndGg9dGhpcy5nZXR0ZXIoMCkubGVuZ3RoO2NodW5rU2l6ZT1kYXRhbGVuZ3RoO2NvbnNvbGUubG9nKFwiTGF6eUZpbGVzIG9uIGd6aXAgZm9yY2VzIGRvd25sb2FkIG9mIHRoZSB3aG9sZSBmaWxlIHdoZW4gbGVuZ3RoIGlzIGFjY2Vzc2VkXCIpfXRoaXMuX2xlbmd0aD1kYXRhbGVuZ3RoO3RoaXMuX2NodW5rU2l6ZT1jaHVua1NpemU7dGhpcy5sZW5ndGhLbm93bj10cnVlfTtpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPT1cInVuZGVmaW5lZFwiKXtpZighRU5WSVJPTk1FTlRfSVNfV09SS0VSKXRocm93XCJDYW5ub3QgZG8gc3luY2hyb25vdXMgYmluYXJ5IFhIUnMgb3V0c2lkZSB3ZWJ3b3JrZXJzIGluIG1vZGVybiBicm93c2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjXCI7dmFyIGxhenlBcnJheT1uZXcgTGF6eVVpbnQ4QXJyYXk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobGF6eUFycmF5LHtsZW5ndGg6e2dldDooZnVuY3Rpb24oKXtpZighdGhpcy5sZW5ndGhLbm93bil7dGhpcy5jYWNoZUxlbmd0aCgpfXJldHVybiB0aGlzLl9sZW5ndGh9KX0sY2h1bmtTaXplOntnZXQ6KGZ1bmN0aW9uKCl7aWYoIXRoaXMubGVuZ3RoS25vd24pe3RoaXMuY2FjaGVMZW5ndGgoKX1yZXR1cm4gdGhpcy5fY2h1bmtTaXplfSl9fSk7dmFyIHByb3BlcnRpZXM9e2lzRGV2aWNlOmZhbHNlLGNvbnRlbnRzOmxhenlBcnJheX19ZWxzZXt2YXIgcHJvcGVydGllcz17aXNEZXZpY2U6ZmFsc2UsdXJsOnVybH19dmFyIG5vZGU9RlMuY3JlYXRlRmlsZShwYXJlbnQsbmFtZSxwcm9wZXJ0aWVzLGNhblJlYWQsY2FuV3JpdGUpO2lmKHByb3BlcnRpZXMuY29udGVudHMpe25vZGUuY29udGVudHM9cHJvcGVydGllcy5jb250ZW50c31lbHNlIGlmKHByb3BlcnRpZXMudXJsKXtub2RlLmNvbnRlbnRzPW51bGw7bm9kZS51cmw9cHJvcGVydGllcy51cmx9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobm9kZSx7dXNlZEJ5dGVzOntnZXQ6KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGVudHMubGVuZ3RofSl9fSk7dmFyIHN0cmVhbV9vcHM9e307dmFyIGtleXM9T2JqZWN0LmtleXMobm9kZS5zdHJlYW1fb3BzKTtrZXlzLmZvckVhY2goKGZ1bmN0aW9uKGtleSl7dmFyIGZuPW5vZGUuc3RyZWFtX29wc1trZXldO3N0cmVhbV9vcHNba2V5XT1mdW5jdGlvbiBmb3JjZUxvYWRMYXp5RmlsZSgpe2lmKCFGUy5mb3JjZUxvYWRGaWxlKG5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU8pfXJldHVybiBmbi5hcHBseShudWxsLGFyZ3VtZW50cyl9fSkpO3N0cmVhbV9vcHMucmVhZD1mdW5jdGlvbiBzdHJlYW1fb3BzX3JlYWQoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtpZighRlMuZm9yY2VMb2FkRmlsZShub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlPKX12YXIgY29udGVudHM9c3RyZWFtLm5vZGUuY29udGVudHM7aWYocG9zaXRpb24+PWNvbnRlbnRzLmxlbmd0aClyZXR1cm4gMDt2YXIgc2l6ZT1NYXRoLm1pbihjb250ZW50cy5sZW5ndGgtcG9zaXRpb24sbGVuZ3RoKTthc3NlcnQoc2l6ZT49MCk7aWYoY29udGVudHMuc2xpY2Upe2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2J1ZmZlcltvZmZzZXQraV09Y29udGVudHNbcG9zaXRpb24raV19fWVsc2V7Zm9yKHZhciBpPTA7aTxzaXplO2krKyl7YnVmZmVyW29mZnNldCtpXT1jb250ZW50cy5nZXQocG9zaXRpb24raSl9fXJldHVybiBzaXplfTtub2RlLnN0cmVhbV9vcHM9c3RyZWFtX29wcztyZXR1cm4gbm9kZX0pLGNyZWF0ZVByZWxvYWRlZEZpbGU6KGZ1bmN0aW9uKHBhcmVudCxuYW1lLHVybCxjYW5SZWFkLGNhbldyaXRlLG9ubG9hZCxvbmVycm9yLGRvbnRDcmVhdGVGaWxlLGNhbk93bixwcmVGaW5pc2gpe0Jyb3dzZXIuaW5pdCgpO3ZhciBmdWxsbmFtZT1uYW1lP1BBVEgucmVzb2x2ZShQQVRILmpvaW4yKHBhcmVudCxuYW1lKSk6cGFyZW50O3ZhciBkZXA9Z2V0VW5pcXVlUnVuRGVwZW5kZW5jeShcImNwIFwiK2Z1bGxuYW1lKTtmdW5jdGlvbiBwcm9jZXNzRGF0YShieXRlQXJyYXkpe2Z1bmN0aW9uIGZpbmlzaChieXRlQXJyYXkpe2lmKHByZUZpbmlzaClwcmVGaW5pc2goKTtpZighZG9udENyZWF0ZUZpbGUpe0ZTLmNyZWF0ZURhdGFGaWxlKHBhcmVudCxuYW1lLGJ5dGVBcnJheSxjYW5SZWFkLGNhbldyaXRlLGNhbk93bil9aWYob25sb2FkKW9ubG9hZCgpO3JlbW92ZVJ1bkRlcGVuZGVuY3koZGVwKX12YXIgaGFuZGxlZD1mYWxzZTtNb2R1bGVbXCJwcmVsb2FkUGx1Z2luc1wiXS5mb3JFYWNoKChmdW5jdGlvbihwbHVnaW4pe2lmKGhhbmRsZWQpcmV0dXJuO2lmKHBsdWdpbltcImNhbkhhbmRsZVwiXShmdWxsbmFtZSkpe3BsdWdpbltcImhhbmRsZVwiXShieXRlQXJyYXksZnVsbG5hbWUsZmluaXNoLChmdW5jdGlvbigpe2lmKG9uZXJyb3Ipb25lcnJvcigpO3JlbW92ZVJ1bkRlcGVuZGVuY3koZGVwKX0pKTtoYW5kbGVkPXRydWV9fSkpO2lmKCFoYW5kbGVkKWZpbmlzaChieXRlQXJyYXkpfWFkZFJ1bkRlcGVuZGVuY3koZGVwKTtpZih0eXBlb2YgdXJsPT1cInN0cmluZ1wiKXtCcm93c2VyLmFzeW5jTG9hZCh1cmwsKGZ1bmN0aW9uKGJ5dGVBcnJheSl7cHJvY2Vzc0RhdGEoYnl0ZUFycmF5KX0pLG9uZXJyb3IpfWVsc2V7cHJvY2Vzc0RhdGEodXJsKX19KSxpbmRleGVkREI6KGZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQn0pLERCX05BTUU6KGZ1bmN0aW9uKCl7cmV0dXJuXCJFTV9GU19cIit3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9KSxEQl9WRVJTSU9OOjIwLERCX1NUT1JFX05BTUU6XCJGSUxFX0RBVEFcIixzYXZlRmlsZXNUb0RCOihmdW5jdGlvbihwYXRocyxvbmxvYWQsb25lcnJvcil7b25sb2FkPW9ubG9hZHx8KGZ1bmN0aW9uKCl7fSk7b25lcnJvcj1vbmVycm9yfHwoZnVuY3Rpb24oKXt9KTt2YXIgaW5kZXhlZERCPUZTLmluZGV4ZWREQigpO3RyeXt2YXIgb3BlblJlcXVlc3Q9aW5kZXhlZERCLm9wZW4oRlMuREJfTkFNRSgpLEZTLkRCX1ZFUlNJT04pfWNhdGNoKGUpe3JldHVybiBvbmVycm9yKGUpfW9wZW5SZXF1ZXN0Lm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbiBvcGVuUmVxdWVzdF9vbnVwZ3JhZGVuZWVkZWQoKXtjb25zb2xlLmxvZyhcImNyZWF0aW5nIGRiXCIpO3ZhciBkYj1vcGVuUmVxdWVzdC5yZXN1bHQ7ZGIuY3JlYXRlT2JqZWN0U3RvcmUoRlMuREJfU1RPUkVfTkFNRSl9O29wZW5SZXF1ZXN0Lm9uc3VjY2Vzcz1mdW5jdGlvbiBvcGVuUmVxdWVzdF9vbnN1Y2Nlc3MoKXt2YXIgZGI9b3BlblJlcXVlc3QucmVzdWx0O3ZhciB0cmFuc2FjdGlvbj1kYi50cmFuc2FjdGlvbihbRlMuREJfU1RPUkVfTkFNRV0sXCJyZWFkd3JpdGVcIik7dmFyIGZpbGVzPXRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKEZTLkRCX1NUT1JFX05BTUUpO3ZhciBvaz0wLGZhaWw9MCx0b3RhbD1wYXRocy5sZW5ndGg7ZnVuY3Rpb24gZmluaXNoKCl7aWYoZmFpbD09MClvbmxvYWQoKTtlbHNlIG9uZXJyb3IoKX1wYXRocy5mb3JFYWNoKChmdW5jdGlvbihwYXRoKXt2YXIgcHV0UmVxdWVzdD1maWxlcy5wdXQoRlMuYW5hbHl6ZVBhdGgocGF0aCkub2JqZWN0LmNvbnRlbnRzLHBhdGgpO3B1dFJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIHB1dFJlcXVlc3Rfb25zdWNjZXNzKCl7b2srKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX07cHV0UmVxdWVzdC5vbmVycm9yPWZ1bmN0aW9uIHB1dFJlcXVlc3Rfb25lcnJvcigpe2ZhaWwrKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX19KSk7dHJhbnNhY3Rpb24ub25lcnJvcj1vbmVycm9yfTtvcGVuUmVxdWVzdC5vbmVycm9yPW9uZXJyb3J9KSxsb2FkRmlsZXNGcm9tREI6KGZ1bmN0aW9uKHBhdGhzLG9ubG9hZCxvbmVycm9yKXtvbmxvYWQ9b25sb2FkfHwoZnVuY3Rpb24oKXt9KTtvbmVycm9yPW9uZXJyb3J8fChmdW5jdGlvbigpe30pO3ZhciBpbmRleGVkREI9RlMuaW5kZXhlZERCKCk7dHJ5e3ZhciBvcGVuUmVxdWVzdD1pbmRleGVkREIub3BlbihGUy5EQl9OQU1FKCksRlMuREJfVkVSU0lPTil9Y2F0Y2goZSl7cmV0dXJuIG9uZXJyb3IoZSl9b3BlblJlcXVlc3Qub251cGdyYWRlbmVlZGVkPW9uZXJyb3I7b3BlblJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIG9wZW5SZXF1ZXN0X29uc3VjY2Vzcygpe3ZhciBkYj1vcGVuUmVxdWVzdC5yZXN1bHQ7dHJ5e3ZhciB0cmFuc2FjdGlvbj1kYi50cmFuc2FjdGlvbihbRlMuREJfU1RPUkVfTkFNRV0sXCJyZWFkb25seVwiKX1jYXRjaChlKXtvbmVycm9yKGUpO3JldHVybn12YXIgZmlsZXM9dHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoRlMuREJfU1RPUkVfTkFNRSk7dmFyIG9rPTAsZmFpbD0wLHRvdGFsPXBhdGhzLmxlbmd0aDtmdW5jdGlvbiBmaW5pc2goKXtpZihmYWlsPT0wKW9ubG9hZCgpO2Vsc2Ugb25lcnJvcigpfXBhdGhzLmZvckVhY2goKGZ1bmN0aW9uKHBhdGgpe3ZhciBnZXRSZXF1ZXN0PWZpbGVzLmdldChwYXRoKTtnZXRSZXF1ZXN0Lm9uc3VjY2Vzcz1mdW5jdGlvbiBnZXRSZXF1ZXN0X29uc3VjY2Vzcygpe2lmKEZTLmFuYWx5emVQYXRoKHBhdGgpLmV4aXN0cyl7RlMudW5saW5rKHBhdGgpfUZTLmNyZWF0ZURhdGFGaWxlKFBBVEguZGlybmFtZShwYXRoKSxQQVRILmJhc2VuYW1lKHBhdGgpLGdldFJlcXVlc3QucmVzdWx0LHRydWUsdHJ1ZSx0cnVlKTtvaysrO2lmKG9rK2ZhaWw9PXRvdGFsKWZpbmlzaCgpfTtnZXRSZXF1ZXN0Lm9uZXJyb3I9ZnVuY3Rpb24gZ2V0UmVxdWVzdF9vbmVycm9yKCl7ZmFpbCsrO2lmKG9rK2ZhaWw9PXRvdGFsKWZpbmlzaCgpfX0pKTt0cmFuc2FjdGlvbi5vbmVycm9yPW9uZXJyb3J9O29wZW5SZXF1ZXN0Lm9uZXJyb3I9b25lcnJvcn0pfTt2YXIgU1lTQ0FMTFM9e0RFRkFVTFRfUE9MTE1BU0s6NSxtYXBwaW5nczp7fSx1bWFzazo1MTEsY2FsY3VsYXRlQXQ6KGZ1bmN0aW9uKGRpcmZkLHBhdGgpe2lmKHBhdGhbMF0hPT1cIi9cIil7dmFyIGRpcjtpZihkaXJmZD09PS0xMDApe2Rpcj1GUy5jd2QoKX1lbHNle3ZhciBkaXJzdHJlYW09RlMuZ2V0U3RyZWFtKGRpcmZkKTtpZighZGlyc3RyZWFtKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTtkaXI9ZGlyc3RyZWFtLnBhdGh9cGF0aD1QQVRILmpvaW4yKGRpcixwYXRoKX1yZXR1cm4gcGF0aH0pLGRvU3RhdDooZnVuY3Rpb24oZnVuYyxwYXRoLGJ1Zil7dHJ5e3ZhciBzdGF0PWZ1bmMocGF0aCl9Y2F0Y2goZSl7aWYoZSYmZS5ub2RlJiZQQVRILm5vcm1hbGl6ZShwYXRoKSE9PVBBVEgubm9ybWFsaXplKEZTLmdldFBhdGgoZS5ub2RlKSkpe3JldHVybi1FUlJOT19DT0RFUy5FTk9URElSfXRocm93IGV9SEVBUDMyW2J1Zj4+Ml09c3RhdC5kZXY7SEVBUDMyW2J1Zis0Pj4yXT0wO0hFQVAzMltidWYrOD4+Ml09c3RhdC5pbm87SEVBUDMyW2J1ZisxMj4+Ml09c3RhdC5tb2RlO0hFQVAzMltidWYrMTY+PjJdPXN0YXQubmxpbms7SEVBUDMyW2J1ZisyMD4+Ml09c3RhdC51aWQ7SEVBUDMyW2J1ZisyND4+Ml09c3RhdC5naWQ7SEVBUDMyW2J1ZisyOD4+Ml09c3RhdC5yZGV2O0hFQVAzMltidWYrMzI+PjJdPTA7SEVBUDMyW2J1ZiszNj4+Ml09c3RhdC5zaXplO0hFQVAzMltidWYrNDA+PjJdPTQwOTY7SEVBUDMyW2J1Zis0ND4+Ml09c3RhdC5ibG9ja3M7SEVBUDMyW2J1Zis0OD4+Ml09c3RhdC5hdGltZS5nZXRUaW1lKCkvMWUzfDA7SEVBUDMyW2J1Zis1Mj4+Ml09MDtIRUFQMzJbYnVmKzU2Pj4yXT1zdGF0Lm10aW1lLmdldFRpbWUoKS8xZTN8MDtIRUFQMzJbYnVmKzYwPj4yXT0wO0hFQVAzMltidWYrNjQ+PjJdPXN0YXQuY3RpbWUuZ2V0VGltZSgpLzFlM3wwO0hFQVAzMltidWYrNjg+PjJdPTA7SEVBUDMyW2J1Zis3Mj4+Ml09c3RhdC5pbm87cmV0dXJuIDB9KSxkb01zeW5jOihmdW5jdGlvbihhZGRyLHN0cmVhbSxsZW4sZmxhZ3Mpe3ZhciBidWZmZXI9bmV3IFVpbnQ4QXJyYXkoSEVBUFU4LnN1YmFycmF5KGFkZHIsYWRkcitsZW4pKTtGUy5tc3luYyhzdHJlYW0sYnVmZmVyLDAsbGVuLGZsYWdzKX0pLGRvTWtkaXI6KGZ1bmN0aW9uKHBhdGgsbW9kZSl7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTtpZihwYXRoW3BhdGgubGVuZ3RoLTFdPT09XCIvXCIpcGF0aD1wYXRoLnN1YnN0cigwLHBhdGgubGVuZ3RoLTEpO0ZTLm1rZGlyKHBhdGgsbW9kZSwwKTtyZXR1cm4gMH0pLGRvTWtub2Q6KGZ1bmN0aW9uKHBhdGgsbW9kZSxkZXYpe3N3aXRjaChtb2RlJjYxNDQwKXtjYXNlIDMyNzY4OmNhc2UgODE5MjpjYXNlIDI0NTc2OmNhc2UgNDA5NjpjYXNlIDQ5MTUyOmJyZWFrO2RlZmF1bHQ6cmV0dXJuLUVSUk5PX0NPREVTLkVJTlZBTH1GUy5ta25vZChwYXRoLG1vZGUsZGV2KTtyZXR1cm4gMH0pLGRvUmVhZGxpbms6KGZ1bmN0aW9uKHBhdGgsYnVmLGJ1ZnNpemUpe2lmKGJ1ZnNpemU8PTApcmV0dXJuLUVSUk5PX0NPREVTLkVJTlZBTDt2YXIgcmV0PUZTLnJlYWRsaW5rKHBhdGgpO3ZhciBsZW49TWF0aC5taW4oYnVmc2l6ZSxsZW5ndGhCeXRlc1VURjgocmV0KSk7dmFyIGVuZENoYXI9SEVBUDhbYnVmK2xlbl07c3RyaW5nVG9VVEY4KHJldCxidWYsYnVmc2l6ZSsxKTtIRUFQOFtidWYrbGVuXT1lbmRDaGFyO3JldHVybiBsZW59KSxkb0FjY2VzczooZnVuY3Rpb24ocGF0aCxhbW9kZSl7aWYoYW1vZGUmfjcpe3JldHVybi1FUlJOT19DT0RFUy5FSU5WQUx9dmFyIG5vZGU7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7bm9kZT1sb29rdXAubm9kZTt2YXIgcGVybXM9XCJcIjtpZihhbW9kZSY0KXBlcm1zKz1cInJcIjtpZihhbW9kZSYyKXBlcm1zKz1cIndcIjtpZihhbW9kZSYxKXBlcm1zKz1cInhcIjtpZihwZXJtcyYmRlMubm9kZVBlcm1pc3Npb25zKG5vZGUscGVybXMpKXtyZXR1cm4tRVJSTk9fQ09ERVMuRUFDQ0VTfXJldHVybiAwfSksZG9EdXA6KGZ1bmN0aW9uKHBhdGgsZmxhZ3Msc3VnZ2VzdEZEKXt2YXIgc3VnZ2VzdD1GUy5nZXRTdHJlYW0oc3VnZ2VzdEZEKTtpZihzdWdnZXN0KUZTLmNsb3NlKHN1Z2dlc3QpO3JldHVybiBGUy5vcGVuKHBhdGgsZmxhZ3MsMCxzdWdnZXN0RkQsc3VnZ2VzdEZEKS5mZH0pLGRvUmVhZHY6KGZ1bmN0aW9uKHN0cmVhbSxpb3YsaW92Y250LG9mZnNldCl7dmFyIHJldD0wO2Zvcih2YXIgaT0wO2k8aW92Y250O2krKyl7dmFyIHB0cj1IRUFQMzJbaW92K2kqOD4+Ml07dmFyIGxlbj1IRUFQMzJbaW92KyhpKjgrNCk+PjJdO3ZhciBjdXJyPUZTLnJlYWQoc3RyZWFtLEhFQVA4LHB0cixsZW4sb2Zmc2V0KTtpZihjdXJyPDApcmV0dXJuLTE7cmV0Kz1jdXJyO2lmKGN1cnI8bGVuKWJyZWFrfXJldHVybiByZXR9KSxkb1dyaXRldjooZnVuY3Rpb24oc3RyZWFtLGlvdixpb3ZjbnQsb2Zmc2V0KXt2YXIgcmV0PTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUhFQVAzMltpb3YraSo4Pj4yXTt2YXIgbGVuPUhFQVAzMltpb3YrKGkqOCs0KT4+Ml07dmFyIGN1cnI9RlMud3JpdGUoc3RyZWFtLEhFQVA4LHB0cixsZW4sb2Zmc2V0KTtpZihjdXJyPDApcmV0dXJuLTE7cmV0Kz1jdXJyfXJldHVybiByZXR9KSx2YXJhcmdzOjAsZ2V0OihmdW5jdGlvbih2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzKz00O3ZhciByZXQ9SEVBUDMyW1NZU0NBTExTLnZhcmFyZ3MtND4+Ml07cmV0dXJuIHJldH0pLGdldFN0cjooZnVuY3Rpb24oKXt2YXIgcmV0PVBvaW50ZXJfc3RyaW5naWZ5KFNZU0NBTExTLmdldCgpKTtyZXR1cm4gcmV0fSksZ2V0U3RyZWFtRnJvbUZEOihmdW5jdGlvbigpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKFNZU0NBTExTLmdldCgpKTtpZighc3RyZWFtKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTtyZXR1cm4gc3RyZWFtfSksZ2V0U29ja2V0RnJvbUZEOihmdW5jdGlvbigpe3ZhciBzb2NrZXQ9U09DS0ZTLmdldFNvY2tldChTWVNDQUxMUy5nZXQoKSk7aWYoIXNvY2tldCl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERik7cmV0dXJuIHNvY2tldH0pLGdldFNvY2tldEFkZHJlc3M6KGZ1bmN0aW9uKGFsbG93TnVsbCl7dmFyIGFkZHJwPVNZU0NBTExTLmdldCgpLGFkZHJsZW49U1lTQ0FMTFMuZ2V0KCk7aWYoYWxsb3dOdWxsJiZhZGRycD09PTApcmV0dXJuIG51bGw7dmFyIGluZm89X19yZWFkX3NvY2thZGRyKGFkZHJwLGFkZHJsZW4pO2lmKGluZm8uZXJybm8pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoaW5mby5lcnJubyk7aW5mby5hZGRyPUROUy5sb29rdXBfYWRkcihpbmZvLmFkZHIpfHxpbmZvLmFkZHI7cmV0dXJuIGluZm99KSxnZXQ2NDooZnVuY3Rpb24oKXt2YXIgbG93PVNZU0NBTExTLmdldCgpLGhpZ2g9U1lTQ0FMTFMuZ2V0KCk7aWYobG93Pj0wKWFzc2VydChoaWdoPT09MCk7ZWxzZSBhc3NlcnQoaGlnaD09PS0xKTtyZXR1cm4gbG93fSksZ2V0WmVybzooZnVuY3Rpb24oKXthc3NlcnQoU1lTQ0FMTFMuZ2V0KCk9PT0wKX0pfTtmdW5jdGlvbiBfX19zeXNjYWxsMTQwKHdoaWNoLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoKSxvZmZzZXRfaGlnaD1TWVNDQUxMUy5nZXQoKSxvZmZzZXRfbG93PVNZU0NBTExTLmdldCgpLHJlc3VsdD1TWVNDQUxMUy5nZXQoKSx3aGVuY2U9U1lTQ0FMTFMuZ2V0KCk7dmFyIG9mZnNldD1vZmZzZXRfbG93O0ZTLmxsc2VlayhzdHJlYW0sb2Zmc2V0LHdoZW5jZSk7SEVBUDMyW3Jlc3VsdD4+Ml09c3RyZWFtLnBvc2l0aW9uO2lmKHN0cmVhbS5nZXRkZW50cyYmb2Zmc2V0PT09MCYmd2hlbmNlPT09MClzdHJlYW0uZ2V0ZGVudHM9bnVsbDtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzY2FsbDE0NSh3aGljaCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKCksaW92PVNZU0NBTExTLmdldCgpLGlvdmNudD1TWVNDQUxMUy5nZXQoKTtyZXR1cm4gU1lTQ0FMTFMuZG9SZWFkdihzdHJlYW0saW92LGlvdmNudCl9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGwxNDYod2hpY2gsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRCgpLGlvdj1TWVNDQUxMUy5nZXQoKSxpb3ZjbnQ9U1lTQ0FMTFMuZ2V0KCk7cmV0dXJuIFNZU0NBTExTLmRvV3JpdGV2KHN0cmVhbSxpb3YsaW92Y250KX1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzY2FsbDIyMSh3aGljaCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKCksY21kPVNZU0NBTExTLmdldCgpO3N3aXRjaChjbWQpe2Nhc2UgMDp7dmFyIGFyZz1TWVNDQUxMUy5nZXQoKTtpZihhcmc8MCl7cmV0dXJuLUVSUk5PX0NPREVTLkVJTlZBTH12YXIgbmV3U3RyZWFtO25ld1N0cmVhbT1GUy5vcGVuKHN0cmVhbS5wYXRoLHN0cmVhbS5mbGFncywwLGFyZyk7cmV0dXJuIG5ld1N0cmVhbS5mZH07Y2FzZSAxOmNhc2UgMjpyZXR1cm4gMDtjYXNlIDM6cmV0dXJuIHN0cmVhbS5mbGFncztjYXNlIDQ6e3ZhciBhcmc9U1lTQ0FMTFMuZ2V0KCk7c3RyZWFtLmZsYWdzfD1hcmc7cmV0dXJuIDB9O2Nhc2UgMTI6Y2FzZSAxMjp7dmFyIGFyZz1TWVNDQUxMUy5nZXQoKTt2YXIgb2Zmc2V0PTA7SEVBUDE2W2FyZytvZmZzZXQ+PjFdPTI7cmV0dXJuIDB9O2Nhc2UgMTM6Y2FzZSAxNDpjYXNlIDEzOmNhc2UgMTQ6cmV0dXJuIDA7Y2FzZSAxNjpjYXNlIDg6cmV0dXJuLUVSUk5PX0NPREVTLkVJTlZBTDtjYXNlIDk6X19fc2V0RXJyTm8oRVJSTk9fQ09ERVMuRUlOVkFMKTtyZXR1cm4tMTtkZWZhdWx0OntyZXR1cm4tRVJSTk9fQ09ERVMuRUlOVkFMfX19Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGwzKHdoaWNoLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoKSxidWY9U1lTQ0FMTFMuZ2V0KCksY291bnQ9U1lTQ0FMTFMuZ2V0KCk7cmV0dXJuIEZTLnJlYWQoc3RyZWFtLEhFQVA4LGJ1Zixjb3VudCl9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGw0KHdoaWNoLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoKSxidWY9U1lTQ0FMTFMuZ2V0KCksY291bnQ9U1lTQ0FMTFMuZ2V0KCk7cmV0dXJuIEZTLndyaXRlKHN0cmVhbSxIRUFQOCxidWYsY291bnQpfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNjYWxsNSh3aGljaCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBwYXRobmFtZT1TWVNDQUxMUy5nZXRTdHIoKSxmbGFncz1TWVNDQUxMUy5nZXQoKSxtb2RlPVNZU0NBTExTLmdldCgpO3ZhciBzdHJlYW09RlMub3BlbihwYXRobmFtZSxmbGFncyxtb2RlKTtyZXR1cm4gc3RyZWFtLmZkfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNjYWxsNTQod2hpY2gsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRCgpLG9wPVNZU0NBTExTLmdldCgpO3N3aXRjaChvcCl7Y2FzZSAyMTUwOTpjYXNlIDIxNTA1OntpZighc3RyZWFtLnR0eSlyZXR1cm4tRVJSTk9fQ09ERVMuRU5PVFRZO3JldHVybiAwfTtjYXNlIDIxNTEwOmNhc2UgMjE1MTE6Y2FzZSAyMTUxMjpjYXNlIDIxNTA2OmNhc2UgMjE1MDc6Y2FzZSAyMTUwODp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLUVSUk5PX0NPREVTLkVOT1RUWTtyZXR1cm4gMH07Y2FzZSAyMTUxOTp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLUVSUk5PX0NPREVTLkVOT1RUWTt2YXIgYXJncD1TWVNDQUxMUy5nZXQoKTtIRUFQMzJbYXJncD4+Ml09MDtyZXR1cm4gMH07Y2FzZSAyMTUyMDp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLUVSUk5PX0NPREVTLkVOT1RUWTtyZXR1cm4tRVJSTk9fQ09ERVMuRUlOVkFMfTtjYXNlIDIxNTMxOnt2YXIgYXJncD1TWVNDQUxMUy5nZXQoKTtyZXR1cm4gRlMuaW9jdGwoc3RyZWFtLG9wLGFyZ3ApfTtjYXNlIDIxNTIzOntpZighc3RyZWFtLnR0eSlyZXR1cm4tRVJSTk9fQ09ERVMuRU5PVFRZO3JldHVybiAwfTtjYXNlIDIxNTI0OntpZighc3RyZWFtLnR0eSlyZXR1cm4tRVJSTk9fQ09ERVMuRU5PVFRZO3JldHVybiAwfTtkZWZhdWx0OmFib3J0KFwiYmFkIGlvY3RsIHN5c2NhbGwgXCIrb3ApfX1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzY2FsbDYod2hpY2gsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRCgpO0ZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c2NhbGw5MSh3aGljaCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBhZGRyPVNZU0NBTExTLmdldCgpLGxlbj1TWVNDQUxMUy5nZXQoKTt2YXIgaW5mbz1TWVNDQUxMUy5tYXBwaW5nc1thZGRyXTtpZighaW5mbylyZXR1cm4gMDtpZihsZW49PT1pbmZvLmxlbil7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oaW5mby5mZCk7U1lTQ0FMTFMuZG9Nc3luYyhhZGRyLHN0cmVhbSxsZW4saW5mby5mbGFncyk7RlMubXVubWFwKHN0cmVhbSk7U1lTQ0FMTFMubWFwcGluZ3NbYWRkcl09bnVsbDtpZihpbmZvLmFsbG9jYXRlZCl7X2ZyZWUoaW5mby5tYWxsb2MpfX1yZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fdW5sb2NrKCl7fWZ1bmN0aW9uIF9hYm9ydCgpe01vZHVsZVtcImFib3J0XCJdKCl9ZnVuY3Rpb24gX2RsYWRkcihhZGRyLGluZm8pe3ZhciBmbmFtZT1hbGxvY2F0ZShpbnRBcnJheUZyb21TdHJpbmcoTW9kdWxlW1widGhpc1Byb2dyYW1cIl18fFwiLi90aGlzLnByb2dyYW1cIiksXCJpOFwiLEFMTE9DX05PUk1BTCk7SEVBUDMyW2luZm8+PjJdPWZuYW1lO0hFQVAzMltpbmZvKzQ+PjJdPTA7SEVBUDMyW2luZm8rOD4+Ml09MDtIRUFQMzJbaW5mbysxMj4+Ml09MDtyZXR1cm4gMX1mdW5jdGlvbiBfZ2V0ZW52KG5hbWUpe2lmKG5hbWU9PT0wKXJldHVybiAwO25hbWU9UG9pbnRlcl9zdHJpbmdpZnkobmFtZSk7aWYoIUVOVi5oYXNPd25Qcm9wZXJ0eShuYW1lKSlyZXR1cm4gMDtpZihfZ2V0ZW52LnJldClfZnJlZShfZ2V0ZW52LnJldCk7X2dldGVudi5yZXQ9YWxsb2NhdGVVVEY4KEVOVltuYW1lXSk7cmV0dXJuIF9nZXRlbnYucmV0fXZhciBfbGx2bV9jb3NfZjMyPU1hdGhfY29zO3ZhciBfbGx2bV9zaW5fZjMyPU1hdGhfc2luO2Z1bmN0aW9uIF9sbHZtX3N0YWNrcmVzdG9yZShwKXt2YXIgc2VsZj1fbGx2bV9zdGFja3NhdmU7dmFyIHJldD1zZWxmLkxMVk1fU0FWRURTVEFDS1NbcF07c2VsZi5MTFZNX1NBVkVEU1RBQ0tTLnNwbGljZShwLDEpO3N0YWNrUmVzdG9yZShyZXQpfWZ1bmN0aW9uIF9sbHZtX3N0YWNrc2F2ZSgpe3ZhciBzZWxmPV9sbHZtX3N0YWNrc2F2ZTtpZighc2VsZi5MTFZNX1NBVkVEU1RBQ0tTKXtzZWxmLkxMVk1fU0FWRURTVEFDS1M9W119c2VsZi5MTFZNX1NBVkVEU1RBQ0tTLnB1c2goc3RhY2tTYXZlKCkpO3JldHVybiBzZWxmLkxMVk1fU0FWRURTVEFDS1MubGVuZ3RoLTF9ZnVuY3Rpb24gX2xsdm1fdHJhcCgpe2Fib3J0KFwidHJhcCFcIil9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyhkZXN0LHNyYyxudW0pe0hFQVBVOC5zZXQoSEVBUFU4LnN1YmFycmF5KHNyYyxzcmMrbnVtKSxkZXN0KTtyZXR1cm4gZGVzdH1mdW5jdGlvbiBfcHRocmVhZF9jb25kX2Rlc3Ryb3koKXtyZXR1cm4gMH1mdW5jdGlvbiBfcHRocmVhZF9jb25kX2luaXQoKXtyZXR1cm4gMH1mdW5jdGlvbiBfcHRocmVhZF9jb25kX3dhaXQoKXtyZXR1cm4gMH1mdW5jdGlvbiBfcHRocmVhZF9jb25kYXR0cl9kZXN0cm95KCl7cmV0dXJuIDB9ZnVuY3Rpb24gX3B0aHJlYWRfY29uZGF0dHJfaW5pdCgpe3JldHVybiAwfWZ1bmN0aW9uIF9wdGhyZWFkX2NvbmRhdHRyX3NldGNsb2NrKCl7cmV0dXJuIDB9ZnVuY3Rpb24gX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSgpe31mdW5jdGlvbiBfcHRocmVhZF9tdXRleF9pbml0KCl7fWZ1bmN0aW9uIF9wdGhyZWFkX211dGV4YXR0cl9kZXN0cm95KCl7fWZ1bmN0aW9uIF9wdGhyZWFkX211dGV4YXR0cl9pbml0KCl7fWZ1bmN0aW9uIF9wdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlKCl7fWZ1bmN0aW9uIF9wdGhyZWFkX3J3bG9ja19yZGxvY2soKXtyZXR1cm4gMH1mdW5jdGlvbiBfcHRocmVhZF9yd2xvY2tfdW5sb2NrKCl7cmV0dXJuIDB9ZnVuY3Rpb24gX19pc0xlYXBZZWFyKHllYXIpe3JldHVybiB5ZWFyJTQ9PT0wJiYoeWVhciUxMDAhPT0wfHx5ZWFyJTQwMD09PTApfWZ1bmN0aW9uIF9fYXJyYXlTdW0oYXJyYXksaW5kZXgpe3ZhciBzdW09MDtmb3IodmFyIGk9MDtpPD1pbmRleDtzdW0rPWFycmF5W2krK10pO3JldHVybiBzdW19dmFyIF9fTU9OVEhfREFZU19MRUFQPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07dmFyIF9fTU9OVEhfREFZU19SRUdVTEFSPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gX19hZGREYXlzKGRhdGUsZGF5cyl7dmFyIG5ld0RhdGU9bmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO3doaWxlKGRheXM+MCl7dmFyIGxlYXA9X19pc0xlYXBZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSk7dmFyIGN1cnJlbnRNb250aD1uZXdEYXRlLmdldE1vbnRoKCk7dmFyIGRheXNJbkN1cnJlbnRNb250aD0obGVhcD9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUilbY3VycmVudE1vbnRoXTtpZihkYXlzPmRheXNJbkN1cnJlbnRNb250aC1uZXdEYXRlLmdldERhdGUoKSl7ZGF5cy09ZGF5c0luQ3VycmVudE1vbnRoLW5ld0RhdGUuZ2V0RGF0ZSgpKzE7bmV3RGF0ZS5zZXREYXRlKDEpO2lmKGN1cnJlbnRNb250aDwxMSl7bmV3RGF0ZS5zZXRNb250aChjdXJyZW50TW9udGgrMSl9ZWxzZXtuZXdEYXRlLnNldE1vbnRoKDApO25ld0RhdGUuc2V0RnVsbFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKzEpfX1lbHNle25ld0RhdGUuc2V0RGF0ZShuZXdEYXRlLmdldERhdGUoKStkYXlzKTtyZXR1cm4gbmV3RGF0ZX19cmV0dXJuIG5ld0RhdGV9ZnVuY3Rpb24gX3N0cmZ0aW1lKHMsbWF4c2l6ZSxmb3JtYXQsdG0pe3ZhciB0bV96b25lPUhFQVAzMlt0bSs0MD4+Ml07dmFyIGRhdGU9e3RtX3NlYzpIRUFQMzJbdG0+PjJdLHRtX21pbjpIRUFQMzJbdG0rND4+Ml0sdG1faG91cjpIRUFQMzJbdG0rOD4+Ml0sdG1fbWRheTpIRUFQMzJbdG0rMTI+PjJdLHRtX21vbjpIRUFQMzJbdG0rMTY+PjJdLHRtX3llYXI6SEVBUDMyW3RtKzIwPj4yXSx0bV93ZGF5OkhFQVAzMlt0bSsyND4+Ml0sdG1feWRheTpIRUFQMzJbdG0rMjg+PjJdLHRtX2lzZHN0OkhFQVAzMlt0bSszMj4+Ml0sdG1fZ210b2ZmOkhFQVAzMlt0bSszNj4+Ml0sdG1fem9uZTp0bV96b25lP1BvaW50ZXJfc3RyaW5naWZ5KHRtX3pvbmUpOlwiXCJ9O3ZhciBwYXR0ZXJuPVBvaW50ZXJfc3RyaW5naWZ5KGZvcm1hdCk7dmFyIEVYUEFOU0lPTl9SVUxFU18xPXtcIiVjXCI6XCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFwiJURcIjpcIiVtLyVkLyV5XCIsXCIlRlwiOlwiJVktJW0tJWRcIixcIiVoXCI6XCIlYlwiLFwiJXJcIjpcIiVJOiVNOiVTICVwXCIsXCIlUlwiOlwiJUg6JU1cIixcIiVUXCI6XCIlSDolTTolU1wiLFwiJXhcIjpcIiVtLyVkLyV5XCIsXCIlWFwiOlwiJUg6JU06JVNcIn07Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18xKXtwYXR0ZXJuPXBhdHRlcm4ucmVwbGFjZShuZXcgUmVnRXhwKHJ1bGUsXCJnXCIpLEVYUEFOU0lPTl9SVUxFU18xW3J1bGVdKX12YXIgV0VFS0RBWVM9W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl07dmFyIE1PTlRIUz1bXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl07ZnVuY3Rpb24gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsY2hhcmFjdGVyKXt2YXIgc3RyPXR5cGVvZiB2YWx1ZT09PVwibnVtYmVyXCI/dmFsdWUudG9TdHJpbmcoKTp2YWx1ZXx8XCJcIjt3aGlsZShzdHIubGVuZ3RoPGRpZ2l0cyl7c3RyPWNoYXJhY3RlclswXStzdHJ9cmV0dXJuIHN0cn1mdW5jdGlvbiBsZWFkaW5nTnVsbHModmFsdWUsZGlnaXRzKXtyZXR1cm4gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsXCIwXCIpfWZ1bmN0aW9uIGNvbXBhcmVCeURheShkYXRlMSxkYXRlMil7ZnVuY3Rpb24gc2duKHZhbHVlKXtyZXR1cm4gdmFsdWU8MD8tMTp2YWx1ZT4wPzE6MH12YXIgY29tcGFyZTtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0RnVsbFllYXIoKS1kYXRlMi5nZXRGdWxsWWVhcigpKSk9PT0wKXtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0TW9udGgoKS1kYXRlMi5nZXRNb250aCgpKSk9PT0wKXtjb21wYXJlPXNnbihkYXRlMS5nZXREYXRlKCktZGF0ZTIuZ2V0RGF0ZSgpKX19cmV0dXJuIGNvbXBhcmV9ZnVuY3Rpb24gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aCl7c3dpdGNoKGphbkZvdXJ0aC5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDI5KTtjYXNlIDE6cmV0dXJuIGphbkZvdXJ0aDtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwxKTtjYXNlIDU6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl7dmFyIHRoaXNEYXRlPV9fYWRkRGF5cyhuZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDEpLGRhdGUudG1feWRheSk7dmFyIGphbkZvdXJ0aFRoaXNZZWFyPW5ldyBEYXRlKHRoaXNEYXRlLmdldEZ1bGxZZWFyKCksMCw0KTt2YXIgamFuRm91cnRoTmV4dFllYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxLDAsNCk7dmFyIGZpcnN0V2Vla1N0YXJ0VGhpc1llYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTt2YXIgZmlyc3RXZWVrU3RhcnROZXh0WWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO2lmKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydFRoaXNZZWFyLHRoaXNEYXRlKTw9MCl7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsdGhpc0RhdGUpPD0wKXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxfWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCl9fWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCktMX19dmFyIEVYUEFOU0lPTl9SVUxFU18yPXtcIiVhXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBXRUVLREFZU1tkYXRlLnRtX3dkYXldLnN1YnN0cmluZygwLDMpfSksXCIlQVwiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XX0pLFwiJWJcIjooZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl0uc3Vic3RyaW5nKDAsMyl9KSxcIiVCXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBNT05USFNbZGF0ZS50bV9tb25dfSksXCIlQ1wiOihmdW5jdGlvbihkYXRlKXt2YXIgeWVhcj1kYXRlLnRtX3llYXIrMTkwMDtyZXR1cm4gbGVhZGluZ051bGxzKHllYXIvMTAwfDAsMil9KSxcIiVkXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5LDIpfSksXCIlZVwiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ1NvbWV0aGluZyhkYXRlLnRtX21kYXksMixcIiBcIil9KSxcIiVnXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSksXCIlR1wiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4gZ2V0V2Vla0Jhc2VkWWVhcihkYXRlKX0pLFwiJUhcIjooZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX2hvdXIsMil9KSxcIiVJXCI6KGZ1bmN0aW9uKGRhdGUpe3ZhciB0d2VsdmVIb3VyPWRhdGUudG1faG91cjtpZih0d2VsdmVIb3VyPT0wKXR3ZWx2ZUhvdXI9MTI7ZWxzZSBpZih0d2VsdmVIb3VyPjEyKXR3ZWx2ZUhvdXItPTEyO3JldHVybiBsZWFkaW5nTnVsbHModHdlbHZlSG91ciwyKX0pLFwiJWpcIjooZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21kYXkrX19hcnJheVN1bShfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyKzE5MDApP19fTU9OVEhfREFZU19MRUFQOl9fTU9OVEhfREFZU19SRUdVTEFSLGRhdGUudG1fbW9uLTEpLDMpfSksXCIlbVwiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbW9uKzEsMil9KSxcIiVNXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9taW4sMil9KSxcIiVuXCI6KGZ1bmN0aW9uKCl7cmV0dXJuXCJcXG5cIn0pLFwiJXBcIjooZnVuY3Rpb24oZGF0ZSl7aWYoZGF0ZS50bV9ob3VyPj0wJiZkYXRlLnRtX2hvdXI8MTIpe3JldHVyblwiQU1cIn1lbHNle3JldHVyblwiUE1cIn19KSxcIiVTXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9zZWMsMil9KSxcIiV0XCI6KGZ1bmN0aW9uKCl7cmV0dXJuXCJcXHRcIn0pLFwiJXVcIjooZnVuY3Rpb24oZGF0ZSl7dmFyIGRheT1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCxkYXRlLnRtX21vbisxLGRhdGUudG1fbWRheSwwLDAsMCwwKTtyZXR1cm4gZGF5LmdldERheSgpfHw3fSksXCIlVVwiOihmdW5jdGlvbihkYXRlKXt2YXIgamFuRmlyc3Q9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsMCwxKTt2YXIgZmlyc3RTdW5kYXk9amFuRmlyc3QuZ2V0RGF5KCk9PT0wP2phbkZpcnN0Ol9fYWRkRGF5cyhqYW5GaXJzdCw3LWphbkZpcnN0LmdldERheSgpKTt2YXIgZW5kRGF0ZT1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCxkYXRlLnRtX21vbixkYXRlLnRtX21kYXkpO2lmKGNvbXBhcmVCeURheShmaXJzdFN1bmRheSxlbmREYXRlKTwwKXt2YXIgZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGg9X19hcnJheVN1bShfX2lzTGVhcFllYXIoZW5kRGF0ZS5nZXRGdWxsWWVhcigpKT9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUixlbmREYXRlLmdldE1vbnRoKCktMSktMzE7dmFyIGZpcnN0U3VuZGF5VW50aWxFbmRKYW51YXJ5PTMxLWZpcnN0U3VuZGF5LmdldERhdGUoKTt2YXIgZGF5cz1maXJzdFN1bmRheVVudGlsRW5kSmFudWFyeStmZWJydWFyeUZpcnN0VW50aWxFbmRNb250aCtlbmREYXRlLmdldERhdGUoKTtyZXR1cm4gbGVhZGluZ051bGxzKE1hdGguY2VpbChkYXlzLzcpLDIpfXJldHVybiBjb21wYXJlQnlEYXkoZmlyc3RTdW5kYXksamFuRmlyc3QpPT09MD9cIjAxXCI6XCIwMFwifSksXCIlVlwiOihmdW5jdGlvbihkYXRlKXt2YXIgamFuRm91cnRoVGhpc1llYXI9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsMCw0KTt2YXIgamFuRm91cnRoTmV4dFllYXI9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDEsMCw0KTt2YXIgZmlyc3RXZWVrU3RhcnRUaGlzWWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoVGhpc1llYXIpO3ZhciBmaXJzdFdlZWtTdGFydE5leHRZZWFyPWdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGhOZXh0WWVhcik7dmFyIGVuZERhdGU9X19hZGREYXlzKG5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLDAsMSksZGF0ZS50bV95ZGF5KTtpZihjb21wYXJlQnlEYXkoZW5kRGF0ZSxmaXJzdFdlZWtTdGFydFRoaXNZZWFyKTwwKXtyZXR1cm5cIjUzXCJ9aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsZW5kRGF0ZSk8PTApe3JldHVyblwiMDFcIn12YXIgZGF5c0RpZmZlcmVuY2U7aWYoZmlyc3RXZWVrU3RhcnRUaGlzWWVhci5nZXRGdWxsWWVhcigpPGRhdGUudG1feWVhcisxOTAwKXtkYXlzRGlmZmVyZW5jZT1kYXRlLnRtX3lkYXkrMzItZmlyc3RXZWVrU3RhcnRUaGlzWWVhci5nZXREYXRlKCl9ZWxzZXtkYXlzRGlmZmVyZW5jZT1kYXRlLnRtX3lkYXkrMS1maXJzdFdlZWtTdGFydFRoaXNZZWFyLmdldERhdGUoKX1yZXR1cm4gbGVhZGluZ051bGxzKE1hdGguY2VpbChkYXlzRGlmZmVyZW5jZS83KSwyKX0pLFwiJXdcIjooZnVuY3Rpb24oZGF0ZSl7dmFyIGRheT1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCxkYXRlLnRtX21vbisxLGRhdGUudG1fbWRheSwwLDAsMCwwKTtyZXR1cm4gZGF5LmdldERheSgpfSksXCIlV1wiOihmdW5jdGlvbihkYXRlKXt2YXIgamFuRmlyc3Q9bmV3IERhdGUoZGF0ZS50bV95ZWFyLDAsMSk7dmFyIGZpcnN0TW9uZGF5PWphbkZpcnN0LmdldERheSgpPT09MT9qYW5GaXJzdDpfX2FkZERheXMoamFuRmlyc3QsamFuRmlyc3QuZ2V0RGF5KCk9PT0wPzE6Ny1qYW5GaXJzdC5nZXREYXkoKSsxKTt2YXIgZW5kRGF0ZT1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCxkYXRlLnRtX21vbixkYXRlLnRtX21kYXkpO2lmKGNvbXBhcmVCeURheShmaXJzdE1vbmRheSxlbmREYXRlKTwwKXt2YXIgZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGg9X19hcnJheVN1bShfX2lzTGVhcFllYXIoZW5kRGF0ZS5nZXRGdWxsWWVhcigpKT9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUixlbmREYXRlLmdldE1vbnRoKCktMSktMzE7dmFyIGZpcnN0TW9uZGF5VW50aWxFbmRKYW51YXJ5PTMxLWZpcnN0TW9uZGF5LmdldERhdGUoKTt2YXIgZGF5cz1maXJzdE1vbmRheVVudGlsRW5kSmFudWFyeStmZWJydWFyeUZpcnN0VW50aWxFbmRNb250aCtlbmREYXRlLmdldERhdGUoKTtyZXR1cm4gbGVhZGluZ051bGxzKE1hdGguY2VpbChkYXlzLzcpLDIpfXJldHVybiBjb21wYXJlQnlEYXkoZmlyc3RNb25kYXksamFuRmlyc3QpPT09MD9cIjAxXCI6XCIwMFwifSksXCIleVwiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4oZGF0ZS50bV95ZWFyKzE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSksXCIlWVwiOihmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV95ZWFyKzE5MDB9KSxcIiV6XCI6KGZ1bmN0aW9uKGRhdGUpe3ZhciBvZmY9ZGF0ZS50bV9nbXRvZmY7dmFyIGFoZWFkPW9mZj49MDtvZmY9TWF0aC5hYnMob2ZmKS82MDtvZmY9b2ZmLzYwKjEwMCtvZmYlNjA7cmV0dXJuKGFoZWFkP1wiK1wiOlwiLVwiKStTdHJpbmcoXCIwMDAwXCIrb2ZmKS5zbGljZSgtNCl9KSxcIiVaXCI6KGZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3pvbmV9KSxcIiUlXCI6KGZ1bmN0aW9uKCl7cmV0dXJuXCIlXCJ9KX07Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18yKXtpZihwYXR0ZXJuLmluZGV4T2YocnVsZSk+PTApe3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSxcImdcIiksRVhQQU5TSU9OX1JVTEVTXzJbcnVsZV0oZGF0ZSkpfX12YXIgYnl0ZXM9aW50QXJyYXlGcm9tU3RyaW5nKHBhdHRlcm4sZmFsc2UpO2lmKGJ5dGVzLmxlbmd0aD5tYXhzaXplKXtyZXR1cm4gMH13cml0ZUFycmF5VG9NZW1vcnkoYnl0ZXMscyk7cmV0dXJuIGJ5dGVzLmxlbmd0aC0xfWZ1bmN0aW9uIF9zdHJmdGltZV9sKHMsbWF4c2l6ZSxmb3JtYXQsdG0pe3JldHVybiBfc3RyZnRpbWUocyxtYXhzaXplLGZvcm1hdCx0bSl9RlMuc3RhdGljSW5pdCgpO19fQVRJTklUX18udW5zaGlmdCgoZnVuY3Rpb24oKXtpZighTW9kdWxlW1wibm9GU0luaXRcIl0mJiFGUy5pbml0LmluaXRpYWxpemVkKUZTLmluaXQoKX0pKTtfX0FUTUFJTl9fLnB1c2goKGZ1bmN0aW9uKCl7RlMuaWdub3JlUGVybWlzc2lvbnM9ZmFsc2V9KSk7X19BVEVYSVRfXy5wdXNoKChmdW5jdGlvbigpe0ZTLnF1aXQoKX0pKTtfX0FUSU5JVF9fLnVuc2hpZnQoKGZ1bmN0aW9uKCl7VFRZLmluaXQoKX0pKTtfX0FURVhJVF9fLnB1c2goKGZ1bmN0aW9uKCl7VFRZLnNodXRkb3duKCl9KSk7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgTk9ERUpTX1BBVEg9cmVxdWlyZShcInBhdGhcIik7Tk9ERUZTLnN0YXRpY0luaXQoKX1EWU5BTUlDVE9QX1BUUj1zdGF0aWNBbGxvYyg0KTtTVEFDS19CQVNFPVNUQUNLVE9QPWFsaWduTWVtb3J5KFNUQVRJQ1RPUCk7U1RBQ0tfTUFYPVNUQUNLX0JBU0UrVE9UQUxfU1RBQ0s7RFlOQU1JQ19CQVNFPWFsaWduTWVtb3J5KFNUQUNLX01BWCk7SEVBUDMyW0RZTkFNSUNUT1BfUFRSPj4yXT1EWU5BTUlDX0JBU0U7c3RhdGljU2VhbGVkPXRydWU7ZnVuY3Rpb24gaW50QXJyYXlGcm9tU3RyaW5nKHN0cmluZ3ksZG9udEFkZE51bGwsbGVuZ3RoKXt2YXIgbGVuPWxlbmd0aD4wP2xlbmd0aDpsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkrMTt2YXIgdThhcnJheT1uZXcgQXJyYXkobGVuKTt2YXIgbnVtQnl0ZXNXcml0dGVuPXN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksdThhcnJheSwwLHU4YXJyYXkubGVuZ3RoKTtpZihkb250QWRkTnVsbCl1OGFycmF5Lmxlbmd0aD1udW1CeXRlc1dyaXR0ZW47cmV0dXJuIHU4YXJyYXl9TW9kdWxlW1wid2FzbVRhYmxlU2l6ZVwiXT03Njk7TW9kdWxlW1wid2FzbU1heFRhYmxlU2l6ZVwiXT03Njk7TW9kdWxlLmFzbUdsb2JhbEFyZz17fTtNb2R1bGUuYXNtTGlicmFyeUFyZz17XCJhYm9ydFwiOmFib3J0LFwiZW5sYXJnZU1lbW9yeVwiOmVubGFyZ2VNZW1vcnksXCJnZXRUb3RhbE1lbW9yeVwiOmdldFRvdGFsTWVtb3J5LFwiYWJvcnRPbkNhbm5vdEdyb3dNZW1vcnlcIjphYm9ydE9uQ2Fubm90R3Jvd01lbW9yeSxcIl9fVW53aW5kX0JhY2t0cmFjZVwiOl9fVW53aW5kX0JhY2t0cmFjZSxcIl9fVW53aW5kX0ZpbmRFbmNsb3NpbmdGdW5jdGlvblwiOl9fVW53aW5kX0ZpbmRFbmNsb3NpbmdGdW5jdGlvbixcIl9fVW53aW5kX0dldElQSW5mb1wiOl9fVW53aW5kX0dldElQSW5mbyxcIl9fX2J1aWxkRW52aXJvbm1lbnRcIjpfX19idWlsZEVudmlyb25tZW50LFwiX19fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvblwiOl9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24sXCJfX19jeGFfdGhyb3dcIjpfX19jeGFfdGhyb3csXCJfX19sb2NrXCI6X19fbG9jayxcIl9fX21hcF9maWxlXCI6X19fbWFwX2ZpbGUsXCJfX19zZXRFcnJOb1wiOl9fX3NldEVyck5vLFwiX19fc3lzY2FsbDE0MFwiOl9fX3N5c2NhbGwxNDAsXCJfX19zeXNjYWxsMTQ1XCI6X19fc3lzY2FsbDE0NSxcIl9fX3N5c2NhbGwxNDZcIjpfX19zeXNjYWxsMTQ2LFwiX19fc3lzY2FsbDIyMVwiOl9fX3N5c2NhbGwyMjEsXCJfX19zeXNjYWxsM1wiOl9fX3N5c2NhbGwzLFwiX19fc3lzY2FsbDRcIjpfX19zeXNjYWxsNCxcIl9fX3N5c2NhbGw1XCI6X19fc3lzY2FsbDUsXCJfX19zeXNjYWxsNTRcIjpfX19zeXNjYWxsNTQsXCJfX19zeXNjYWxsNlwiOl9fX3N5c2NhbGw2LFwiX19fc3lzY2FsbDkxXCI6X19fc3lzY2FsbDkxLFwiX19fdW5sb2NrXCI6X19fdW5sb2NrLFwiX2Fib3J0XCI6X2Fib3J0LFwiX2RsYWRkclwiOl9kbGFkZHIsXCJfZW1zY3JpcHRlbl9tZW1jcHlfYmlnXCI6X2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyxcIl9nZXRlbnZcIjpfZ2V0ZW52LFwiX2xsdm1fY29zX2YzMlwiOl9sbHZtX2Nvc19mMzIsXCJfbGx2bV9zaW5fZjMyXCI6X2xsdm1fc2luX2YzMixcIl9sbHZtX3N0YWNrcmVzdG9yZVwiOl9sbHZtX3N0YWNrcmVzdG9yZSxcIl9sbHZtX3N0YWNrc2F2ZVwiOl9sbHZtX3N0YWNrc2F2ZSxcIl9sbHZtX3RyYXBcIjpfbGx2bV90cmFwLFwiX3B0aHJlYWRfY29uZF9kZXN0cm95XCI6X3B0aHJlYWRfY29uZF9kZXN0cm95LFwiX3B0aHJlYWRfY29uZF9pbml0XCI6X3B0aHJlYWRfY29uZF9pbml0LFwiX3B0aHJlYWRfY29uZF93YWl0XCI6X3B0aHJlYWRfY29uZF93YWl0LFwiX3B0aHJlYWRfY29uZGF0dHJfZGVzdHJveVwiOl9wdGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3ksXCJfcHRocmVhZF9jb25kYXR0cl9pbml0XCI6X3B0aHJlYWRfY29uZGF0dHJfaW5pdCxcIl9wdGhyZWFkX2NvbmRhdHRyX3NldGNsb2NrXCI6X3B0aHJlYWRfY29uZGF0dHJfc2V0Y2xvY2ssXCJfcHRocmVhZF9tdXRleF9kZXN0cm95XCI6X3B0aHJlYWRfbXV0ZXhfZGVzdHJveSxcIl9wdGhyZWFkX211dGV4X2luaXRcIjpfcHRocmVhZF9tdXRleF9pbml0LFwiX3B0aHJlYWRfbXV0ZXhhdHRyX2Rlc3Ryb3lcIjpfcHRocmVhZF9tdXRleGF0dHJfZGVzdHJveSxcIl9wdGhyZWFkX211dGV4YXR0cl9pbml0XCI6X3B0aHJlYWRfbXV0ZXhhdHRyX2luaXQsXCJfcHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZVwiOl9wdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlLFwiX3B0aHJlYWRfcndsb2NrX3JkbG9ja1wiOl9wdGhyZWFkX3J3bG9ja19yZGxvY2ssXCJfcHRocmVhZF9yd2xvY2tfdW5sb2NrXCI6X3B0aHJlYWRfcndsb2NrX3VubG9jayxcIl9zdHJmdGltZV9sXCI6X3N0cmZ0aW1lX2wsXCJEWU5BTUlDVE9QX1BUUlwiOkRZTkFNSUNUT1BfUFRSLFwiU1RBQ0tUT1BcIjpTVEFDS1RPUH07dmFyIGFzbT1Nb2R1bGVbXCJhc21cIl0oTW9kdWxlLmFzbUdsb2JhbEFyZyxNb2R1bGUuYXNtTGlicmFyeUFyZyxidWZmZXIpO01vZHVsZVtcImFzbVwiXT1hc207dmFyIF9fR0xPQkFMX19zdWJfSV9pb3N0cmVhbV9jcHA9TW9kdWxlW1wiX19HTE9CQUxfX3N1Yl9JX2lvc3RyZWFtX2NwcFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX19HTE9CQUxfX3N1Yl9JX2lvc3RyZWFtX2NwcFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX19fZW1zY3JpcHRlbl9lbnZpcm9uX2NvbnN0cnVjdG9yPU1vZHVsZVtcIl9fX2Vtc2NyaXB0ZW5fZW52aXJvbl9jb25zdHJ1Y3RvclwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX19fZW1zY3JpcHRlbl9lbnZpcm9uX2NvbnN0cnVjdG9yXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfX19lcnJub19sb2NhdGlvbj1Nb2R1bGVbXCJfX19lcnJub19sb2NhdGlvblwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX19fZXJybm9fbG9jYXRpb25cIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9jb25uZWN0ZWRfY29tcG9uZW50cz1Nb2R1bGVbXCJfY29ubmVjdGVkX2NvbXBvbmVudHNcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9jb25uZWN0ZWRfY29tcG9uZW50c1wiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2VkZ2VfYnVuZGxpbmdfY2FsbD1Nb2R1bGVbXCJfZWRnZV9idW5kbGluZ19jYWxsXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZWRnZV9idW5kbGluZ19jYWxsXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZWRnZV9idW5kbGluZ19nZXRfY3ljbGVzPU1vZHVsZVtcIl9lZGdlX2J1bmRsaW5nX2dldF9jeWNsZXNcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9lZGdlX2J1bmRsaW5nX2dldF9jeWNsZXNcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9lZGdlX2J1bmRsaW5nX2dldF9pMD1Nb2R1bGVbXCJfZWRnZV9idW5kbGluZ19nZXRfaTBcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9lZGdlX2J1bmRsaW5nX2dldF9pMFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2VkZ2VfYnVuZGxpbmdfZ2V0X2lfc3RlcD1Nb2R1bGVbXCJfZWRnZV9idW5kbGluZ19nZXRfaV9zdGVwXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZWRnZV9idW5kbGluZ19nZXRfaV9zdGVwXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZWRnZV9idW5kbGluZ19nZXRfczA9TW9kdWxlW1wiX2VkZ2VfYnVuZGxpbmdfZ2V0X3MwXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZWRnZV9idW5kbGluZ19nZXRfczBcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9lZGdlX2J1bmRsaW5nX2dldF9zX3N0ZXA9TW9kdWxlW1wiX2VkZ2VfYnVuZGxpbmdfZ2V0X3Nfc3RlcFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX2VkZ2VfYnVuZGxpbmdfZ2V0X3Nfc3RlcFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2VkZ2VfYnVuZGxpbmdfbmV3PU1vZHVsZVtcIl9lZGdlX2J1bmRsaW5nX25ld1wiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX2VkZ2VfYnVuZGxpbmdfbmV3XCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZWRnZV9idW5kbGluZ19zZXRfY3ljbGVzPU1vZHVsZVtcIl9lZGdlX2J1bmRsaW5nX3NldF9jeWNsZXNcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9lZGdlX2J1bmRsaW5nX3NldF9jeWNsZXNcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9lZGdlX2J1bmRsaW5nX3NldF9pMD1Nb2R1bGVbXCJfZWRnZV9idW5kbGluZ19zZXRfaTBcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9lZGdlX2J1bmRsaW5nX3NldF9pMFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2VkZ2VfYnVuZGxpbmdfc2V0X2lfc3RlcD1Nb2R1bGVbXCJfZWRnZV9idW5kbGluZ19zZXRfaV9zdGVwXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZWRnZV9idW5kbGluZ19zZXRfaV9zdGVwXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZWRnZV9idW5kbGluZ19zZXRfczA9TW9kdWxlW1wiX2VkZ2VfYnVuZGxpbmdfc2V0X3MwXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZWRnZV9idW5kbGluZ19zZXRfczBcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9lZGdlX2J1bmRsaW5nX3NldF9zX3N0ZXA9TW9kdWxlW1wiX2VkZ2VfYnVuZGxpbmdfc2V0X3Nfc3RlcFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX2VkZ2VfYnVuZGxpbmdfc2V0X3Nfc3RlcFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9mcmVlXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZ3JhcGhfYWRkX2VkZ2U9TW9kdWxlW1wiX2dyYXBoX2FkZF9lZGdlXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZ3JhcGhfYWRkX2VkZ2VcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9ncmFwaF9hZGRfbm9kZT1Nb2R1bGVbXCJfZ3JhcGhfYWRkX25vZGVcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9ncmFwaF9hZGRfbm9kZVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2dyYXBoX2VkZ2VfY291bnQ9TW9kdWxlW1wiX2dyYXBoX2VkZ2VfY291bnRcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9ncmFwaF9lZGdlX2NvdW50XCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZ3JhcGhfZ2V0X3g9TW9kdWxlW1wiX2dyYXBoX2dldF94XCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZ3JhcGhfZ2V0X3hcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9ncmFwaF9nZXRfeT1Nb2R1bGVbXCJfZ3JhcGhfZ2V0X3lcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9ncmFwaF9nZXRfeVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2dyYXBoX25ldz1Nb2R1bGVbXCJfZ3JhcGhfbmV3XCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfZ3JhcGhfbmV3XCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfZ3JhcGhfbm9kZV9jb3VudD1Nb2R1bGVbXCJfZ3JhcGhfbm9kZV9jb3VudFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX2dyYXBoX25vZGVfY291bnRcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9saW5lX3BvaW50cz1Nb2R1bGVbXCJfbGluZV9wb2ludHNcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9saW5lX3BvaW50c1wiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX2xpbmVfcG9pbnRzX2F0PU1vZHVsZVtcIl9saW5lX3BvaW50c19hdFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX2xpbmVfcG9pbnRzX2F0XCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfbGluZV9wb2ludHNfbGVuZ3RoPU1vZHVsZVtcIl9saW5lX3BvaW50c19sZW5ndGhcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9saW5lX3BvaW50c19sZW5ndGhcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9saW5lc19hdD1Nb2R1bGVbXCJfbGluZXNfYXRcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9saW5lc19hdFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX21hbGxvYz1Nb2R1bGVbXCJfbWFsbG9jXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfbWFsbG9jXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfcG9pbnRfeD1Nb2R1bGVbXCJfcG9pbnRfeFwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX3BvaW50X3hcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9wb2ludF95PU1vZHVsZVtcIl9wb2ludF95XCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfcG9pbnRfeVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX3J1c3RfYWxsb2M9TW9kdWxlW1wiX3J1c3RfYWxsb2NcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9ydXN0X2FsbG9jXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfcnVzdF9mcmVlPU1vZHVsZVtcIl9ydXN0X2ZyZWVcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9ydXN0X2ZyZWVcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9zaW11bGF0aW9uX2FkZF9jZW50ZXJfZm9yY2U9TW9kdWxlW1wiX3NpbXVsYXRpb25fYWRkX2NlbnRlcl9mb3JjZVwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX3NpbXVsYXRpb25fYWRkX2NlbnRlcl9mb3JjZVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX3NpbXVsYXRpb25fYWRkX2dyb3VwX2NlbnRlcl9mb3JjZT1Nb2R1bGVbXCJfc2ltdWxhdGlvbl9hZGRfZ3JvdXBfY2VudGVyX2ZvcmNlXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfc2ltdWxhdGlvbl9hZGRfZ3JvdXBfY2VudGVyX2ZvcmNlXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfc2ltdWxhdGlvbl9hZGRfZ3JvdXBfbGlua19mb3JjZT1Nb2R1bGVbXCJfc2ltdWxhdGlvbl9hZGRfZ3JvdXBfbGlua19mb3JjZVwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX3NpbXVsYXRpb25fYWRkX2dyb3VwX2xpbmtfZm9yY2VcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9zaW11bGF0aW9uX2FkZF9ncm91cF9tYW55X2JvZHlfZm9yY2U9TW9kdWxlW1wiX3NpbXVsYXRpb25fYWRkX2dyb3VwX21hbnlfYm9keV9mb3JjZVwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX3NpbXVsYXRpb25fYWRkX2dyb3VwX21hbnlfYm9keV9mb3JjZVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX3NpbXVsYXRpb25fYWRkX2xpbmtfZm9yY2U9TW9kdWxlW1wiX3NpbXVsYXRpb25fYWRkX2xpbmtfZm9yY2VcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9zaW11bGF0aW9uX2FkZF9saW5rX2ZvcmNlXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfc2ltdWxhdGlvbl9hZGRfbWFueV9ib2R5X2ZvcmNlPU1vZHVsZVtcIl9zaW11bGF0aW9uX2FkZF9tYW55X2JvZHlfZm9yY2VcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9zaW11bGF0aW9uX2FkZF9tYW55X2JvZHlfZm9yY2VcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9zaW11bGF0aW9uX2dldF9zdHJlbmd0aD1Nb2R1bGVbXCJfc2ltdWxhdGlvbl9nZXRfc3RyZW5ndGhcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcIl9zaW11bGF0aW9uX2dldF9zdHJlbmd0aFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX3NpbXVsYXRpb25fbmV3PU1vZHVsZVtcIl9zaW11bGF0aW9uX25ld1wiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiX3NpbXVsYXRpb25fbmV3XCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBfc2ltdWxhdGlvbl9zZXRfc3RyZW5ndGg9TW9kdWxlW1wiX3NpbXVsYXRpb25fc2V0X3N0cmVuZ3RoXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfc2ltdWxhdGlvbl9zZXRfc3RyZW5ndGhcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIF9zaW11bGF0aW9uX3N0YXJ0PU1vZHVsZVtcIl9zaW11bGF0aW9uX3N0YXJ0XCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfc2ltdWxhdGlvbl9zdGFydFwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgX3NxdWFyaWZpZWRfdHJlZW1hcD1Nb2R1bGVbXCJfc3F1YXJpZmllZF90cmVlbWFwXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJfc3F1YXJpZmllZF90cmVlbWFwXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBzdGFja0FsbG9jPU1vZHVsZVtcInN0YWNrQWxsb2NcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcInN0YWNrQWxsb2NcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcInN0YWNrUmVzdG9yZVwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wic3RhY2tTYXZlXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO3ZhciBkeW5DYWxsX2lpaT1Nb2R1bGVbXCJkeW5DYWxsX2lpaVwiXT0oZnVuY3Rpb24oKXtyZXR1cm4gTW9kdWxlW1wiYXNtXCJdW1wiZHluQ2FsbF9paWlcIl0uYXBwbHkobnVsbCxhcmd1bWVudHMpfSk7dmFyIGR5bkNhbGxfdj1Nb2R1bGVbXCJkeW5DYWxsX3ZcIl09KGZ1bmN0aW9uKCl7cmV0dXJuIE1vZHVsZVtcImFzbVwiXVtcImR5bkNhbGxfdlwiXS5hcHBseShudWxsLGFyZ3VtZW50cyl9KTt2YXIgZHluQ2FsbF92aT1Nb2R1bGVbXCJkeW5DYWxsX3ZpXCJdPShmdW5jdGlvbigpe3JldHVybiBNb2R1bGVbXCJhc21cIl1bXCJkeW5DYWxsX3ZpXCJdLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pO01vZHVsZVtcImFzbVwiXT1hc207TW9kdWxlW1wiY2NhbGxcIl09Y2NhbGw7TW9kdWxlW1wiY3dyYXBcIl09Y3dyYXA7TW9kdWxlW1widGhlblwiXT0oZnVuY3Rpb24oZnVuYyl7aWYoTW9kdWxlW1wiY2FsbGVkUnVuXCJdKXtmdW5jKE1vZHVsZSl9ZWxzZXt2YXIgb2xkPU1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdO01vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdPShmdW5jdGlvbigpe2lmKG9sZClvbGQoKTtmdW5jKE1vZHVsZSl9KX1yZXR1cm4gTW9kdWxlfSk7ZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9XCJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KFwiK3N0YXR1cytcIilcIjt0aGlzLnN0YXR1cz1zdGF0dXN9RXhpdFN0YXR1cy5wcm90b3R5cGU9bmV3IEVycm9yO0V4aXRTdGF0dXMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUV4aXRTdGF0dXM7ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFNb2R1bGVbXCJjYWxsZWRSdW5cIl0pcnVuKCk7aWYoIU1vZHVsZVtcImNhbGxlZFJ1blwiXSlkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBydW4oYXJncyl7YXJncz1hcmdzfHxNb2R1bGVbXCJhcmd1bWVudHNcIl07aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1wcmVSdW4oKTtpZihydW5EZXBlbmRlbmNpZXM+MClyZXR1cm47aWYoTW9kdWxlW1wiY2FsbGVkUnVuXCJdKXJldHVybjtmdW5jdGlvbiBkb1J1bigpe2lmKE1vZHVsZVtcImNhbGxlZFJ1blwiXSlyZXR1cm47TW9kdWxlW1wiY2FsbGVkUnVuXCJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2Vuc3VyZUluaXRSdW50aW1lKCk7cHJlTWFpbigpO2lmKE1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKU1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKCk7cG9zdFJ1bigpfWlmKE1vZHVsZVtcInNldFN0YXR1c1wiXSl7TW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiUnVubmluZy4uLlwiKTtzZXRUaW1lb3V0KChmdW5jdGlvbigpe3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7TW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiXCIpfSksMSk7ZG9SdW4oKX0pLDEpfWVsc2V7ZG9SdW4oKX19TW9kdWxlW1wicnVuXCJdPXJ1bjtmdW5jdGlvbiBhYm9ydCh3aGF0KXtpZihNb2R1bGVbXCJvbkFib3J0XCJdKXtNb2R1bGVbXCJvbkFib3J0XCJdKHdoYXQpfWlmKHdoYXQhPT11bmRlZmluZWQpe291dCh3aGF0KTtlcnIod2hhdCk7d2hhdD1KU09OLnN0cmluZ2lmeSh3aGF0KX1lbHNle3doYXQ9XCJcIn1BQk9SVD10cnVlO0VYSVRTVEFUVVM9MTt0aHJvd1wiYWJvcnQoXCIrd2hhdCtcIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uXCJ9TW9kdWxlW1wiYWJvcnRcIl09YWJvcnQ7aWYoTW9kdWxlW1wicHJlSW5pdFwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZUluaXRcIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVJbml0XCJdPVtNb2R1bGVbXCJwcmVJbml0XCJdXTt3aGlsZShNb2R1bGVbXCJwcmVJbml0XCJdLmxlbmd0aD4wKXtNb2R1bGVbXCJwcmVJbml0XCJdLnBvcCgpKCl9fU1vZHVsZVtcIm5vRXhpdFJ1bnRpbWVcIl09dHJ1ZTtydW4oKVxuXG5cblxuXG5cbiAgcmV0dXJuIE1vZHVsZTtcbn1cbik7XG59KSgpO1xuaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JylcbiAgICBtb2R1bGUuZXhwb3J0cyA9IE1vZHVsZTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKVxuICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7IHJldHVybiBNb2R1bGU7IH0pO1xuICBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG4gICAgZXhwb3J0c1tcIk1vZHVsZVwiXSA9IE1vZHVsZTtcbiAgIiwiaW1wb3J0ICdlZy1yZW5kZXJlcidcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMydcbmltcG9ydCB7bGF5b3V0fSBmcm9tICcuL2xheW91dCdcblxuY29uc3Qgbm9kZUNvbG9yID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApXG5jb25zdCBxdWVyeSA9IGBNQVRDSCBwID0gKHYxKS1bcjpDb3JyZWxhdGlvbl0tPih2MilcbldIRVJFIGFicyhyLnZhbHVlKSA+IDAuNlxuICBBTkQgdjEudGltZU9yZGVyIDwgdjIudGltZU9yZGVyXG5SRVRVUk4gY29sbGVjdChub2RlcyhwKSksIGNvbGxlY3QocmVsYXRpb25zaGlwcyhwKSlgXG5cbmNvbnN0IGZldGNoR3JhcGggPSAocXVlcnksIHVzZXJJZCwgcGFzc3dvcmQsIG5vZGVDb2xvclByb3BlcnR5KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9XG4gIGlmICh1c2VySWQgJiYgcGFzc3dvcmQpIHtcbiAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHt3aW5kb3cuYnRvYShgJHt1c2VySWR9OiR7cGFzc3dvcmR9YCl9YFxuICB9XG4gIHJldHVybiB3aW5kb3dcbiAgICAuZmV0Y2goJ2h0dHBzOi8vbmVvNGoubGlrci1sYWIuY29tL2RiL2RhdGEvdHJhbnNhY3Rpb24vY29tbWl0Jywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGVtZW50OiBxdWVyeSxcbiAgICAgICAgICAgIHJlc3VsdERhdGFDb250ZW50czogWydncmFwaCddXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9KVxuICAgIH0pXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgLnRoZW4oKHtyZXN1bHRzfSkgPT4ge1xuICAgICAgY29uc3QgZ3JhcGggPSByZXN1bHRzWzBdLmRhdGFbMF0uZ3JhcGhcbiAgICAgIGNvbnN0IGxpbmtXaWR0aFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCAxXSlcbiAgICAgICAgLnJhbmdlKFswLCAzXSlcbiAgICAgIGNvbnN0IGxpbmtDb2xvclNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFstMSwgMCwgMV0pXG4gICAgICAgIC5yYW5nZShbJyMwMGYnLCAnI2ZmZicsICcjZjAwJ10pXG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZ3JhcGgubm9kZXMpIHtcbiAgICAgICAgbm9kZS5maWxsQ29sb3IgPSBub2RlQ29sb3Iobm9kZS5wcm9wZXJ0aWVzW25vZGVDb2xvclByb3BlcnR5XSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbGluayBvZiBncmFwaC5yZWxhdGlvbnNoaXBzKSB7XG4gICAgICAgIGxpbmsudHlwZSA9ICdsaW5lJ1xuICAgICAgICBsaW5rLnN0cm9rZVdpZHRoID0gbGlua1dpZHRoU2NhbGUoTWF0aC5hYnMobGluay5wcm9wZXJ0aWVzLnZhbHVlKSlcbiAgICAgICAgbGluay5zdHJva2VDb2xvciA9IGxpbmtDb2xvclNjYWxlKGxpbmsucHJvcGVydGllcy52YWx1ZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBncmFwaFxuICAgIH0pXG59XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHdpZHRoOiAzMDAsXG4gICAgICBoZWlnaHQ6IDE1MFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCB7d3JhcHBlcn0gPSB0aGlzLnJlZnNcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdpZHRoOiB3cmFwcGVyLmNsaWVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiB3cmFwcGVyLmNsaWVudEhlaWdodFxuICAgIH0pXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgaWYgKGRvY3VtZW50LndlYmtpdElzRnVsbFNjcmVlbikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHdpZHRoOiB3cmFwcGVyLmNsaWVudFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogd3JhcHBlci5jbGllbnRIZWlnaHRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSB0aGlzLnN0YXRlXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSd1aSBjb250YWluZXInPlxuICAgICAgPGgxPkN5cGhlciBWaWV3ZXI8L2gxPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3VpIHZlcnRpY2FsIHNlZ21lbnQnPlxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9J3VpIGZvcm0nIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdFF1ZXJ5Rm9ybS5iaW5kKHRoaXMpfT5cbiAgICAgICAgICA8aDQgY2xhc3NOYW1lPSd1aSBkaXZpZGluZyBoZWFkZXInPlF1ZXJ5PC9oND5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3R3byBmaWVsZHMnPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5Vc2VyIElEPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPSd1c2VySWQnIGRlZmF1bHRWYWx1ZT0nbmVvNGonIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IHJlZj0ncGFzc3dvcmQnIHR5cGU9J3Bhc3N3b3JkJyAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmaWVsZCc+XG4gICAgICAgICAgICA8bGFiZWw+UXVlcnk8L2xhYmVsPlxuICAgICAgICAgICAgPHRleHRhcmVhIHJlZj0ncXVlcnknIGRlZmF1bHRWYWx1ZT17cXVlcnl9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3VpIGJ1dHRvbicgdHlwZT0nc3VibWl0Jz5sb2FkPC9idXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3VpIHZlcnRpY2FsIHNlZ21lbnQnID5cbiAgICAgICAgPGRpdiByZWY9J3dyYXBwZXInIHN0eWxlPXt7aGVpZ2h0OiAnNjAwcHgnfX0+XG4gICAgICAgICAgPGVnLXJlbmRlcmVyXG4gICAgICAgICAgICByZWY9J3JlbmRlcmVyJ1xuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYm9yZGVyOiAnc29saWQgMXB4ICNjY2MnLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uPScxMDAwJ1xuICAgICAgICAgICAgZ3JhcGgtbm9kZXMtcHJvcGVydHk9J25vZGVzJ1xuICAgICAgICAgICAgZ3JhcGgtbGlua3MtcHJvcGVydHk9J3JlbGF0aW9uc2hpcHMnXG4gICAgICAgICAgICBub2RlLWlkLXByb3BlcnR5PSdpZCdcbiAgICAgICAgICAgIG5vZGUtbGFiZWwtcHJvcGVydHk9J3Byb3BlcnRpZXMubmFtZSdcbiAgICAgICAgICAgIGxpbmstc291cmNlLXByb3BlcnR5PSdzdGFydE5vZGUnXG4gICAgICAgICAgICBsaW5rLXRhcmdldC1wcm9wZXJ0eT0nZW5kTm9kZSdcbiAgICAgICAgICAgIGRlZmF1bHQtbm9kZS13aWR0aD0nMTAnXG4gICAgICAgICAgICBkZWZhdWx0LW5vZGUtaGVpZ2h0PScxMCdcbiAgICAgICAgICAgIGRlZmF1bHQtbm9kZS1zdHJva2Utd2lkdGg9JzAnXG4gICAgICAgICAgICBkZWZhdWx0LWxpbmstc3Ryb2tlLXdpZHRoPScxJ1xuICAgICAgICAgICAgbm8tYXV0by1jZW50ZXJpbmdcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3VpIG1lbnUnPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtJz5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSd1aSBidXR0b24nIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2tDZW50ZXJCdXR0b24uYmluZCh0aGlzKX0+Q2VudGVyPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0nPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3VpIGJ1dHRvbicgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja0Z1bGxzY3JlZW5CdXR0b24uYmluZCh0aGlzKX0+RnVsbHNjcmVlbjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3VpIHZlcnRpY2FsIHNlZ21lbnQnPlxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9J3VpIGZvcm0nIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdE9wdGlvbnNGb3JtLmJpbmQodGhpcyl9PlxuICAgICAgICAgIDxoNCBjbGFzc05hbWU9J3VpIGRpdmlkaW5nIGhlYWRlcic+UmVuZGVyZXIgT3B0aW9uczwvaDQ+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5Hcm91cCBMYXlvdXQ8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdCByZWY9J2dyb3VwJyBjbGFzc05hbWU9J3VpIHNlbGVjdGlvbiBkcm9wZG93bicgZGVmYXVsdFZhbHVlPSdjaXJjbGUtcGFjayc+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3RyZWVtYXAnPlRyZWVtYXA8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nY2lyY2xlLXBhY2snPkNpcmNsZSBQYWNraW5nPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgPGxhYmVsPk5vZGUgQ29sb3I8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdCByZWY9J25vZGVDb2xvcicgY2xhc3NOYW1lPSd1aSBzZWxlY3Rpb24gZHJvcGRvd24nIGRlZmF1bHRWYWx1ZT0ndHlwZSc+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3R5cGUnPlR5cGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ndGltZUdyb3VwJz5UaW1lIEdyb3VwPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3RpbWVHcm91cERldGFpbCc+VGltZSBHcm91cCBEZXRhaWw8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ndW5pdCc+VW5pdDwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5Ob2RlIEdyb3VwPC9sYWJlbD5cbiAgICAgICAgICAgIDxzZWxlY3QgcmVmPSdub2RlR3JvdXAnIGNsYXNzTmFtZT0ndWkgc2VsZWN0aW9uIGRyb3Bkb3duJyBkZWZhdWx0VmFsdWU9J3RpbWVHcm91cCc+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3R5cGUnPlR5cGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ndGltZUdyb3VwJz5UaW1lIEdyb3VwPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3RpbWVHcm91cERldGFpbCc+VGltZSBHcm91cCBEZXRhaWw8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ndW5pdCc+VW5pdDwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5FZGdlIEJ1bmRsaW5nIEN5Y2xlczwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgcmVmPSdjeWNsZXMnIHR5cGU9J251bWJlcicgbWluPScwJyBkZWZhdWx0VmFsdWU9JzMnIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5FZGdlIENvbmNlbnRyYXRpb24gTWluIENvdW50PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCByZWY9J21pbkNvdW50JyB0eXBlPSdudW1iZXInIG1pbj0nMScgZGVmYXVsdFZhbHVlPSc2JyAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmaWVsZCc+XG4gICAgICAgICAgICA8bGFiZWw+R3JvdXAgTWFueSBCb2R5IEZvcmNlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCByZWY9J21hbnlCb2R5Rm9yY2UnIHR5cGU9J251bWJlcicgbWluPScwJyBzdGVwPScwLjAxJyBkZWZhdWx0VmFsdWU9JzAuNScgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgPGxhYmVsPkdyb3VwIExpbmsgRm9yY2U8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHJlZj0nbGlua0ZvcmNlJyB0eXBlPSdudW1iZXInIG1pbj0nMCcgc3RlcD0nMC4wMScgZGVmYXVsdFZhbHVlPScwLjUnIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5JbnRyYSBHcm91cCBTdHJlbmd0aDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgcmVmPSdpbnRyYUdyb3VwJyB0eXBlPSdudW1iZXInIG1pbj0nMCcgc3RlcD0nMC4wMScgZGVmYXVsdFZhbHVlPScwLjUnIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5JbnRlciBHcm91cCBTdHJlbmd0aDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgcmVmPSdpbnRlckdyb3VwJyB0eXBlPSdudW1iZXInIG1pbj0nMCcgc3RlcD0nMC4wMScgZGVmYXVsdFZhbHVlPScwLjMnIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpZWxkJz5cbiAgICAgICAgICAgIDxsYWJlbD5Hcm91cCBDZW50ZXIgRm9yY2U8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHJlZj0nY2VudGVyRm9yY2UnIHR5cGU9J251bWJlcicgbWluPScwJyBzdGVwPScwLjAxJyBkZWZhdWx0VmFsdWU9JzAuMicgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmllbGQnPlxuICAgICAgICAgICAgPGxhYmVsPlVzZSBFZGdlIENvbmNlbnRyYXRpb248L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdCByZWY9J3VzZUVkZ2VDb25jZW50cmF0aW9uJyBjbGFzc05hbWU9J3VpIHNlbGVjdGlvbiBkcm9wZG93bicgZGVmYXVsdFZhbHVlPSd5ZXMnPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSd5ZXMnPlllczwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdubyc+Tm88L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmaWVsZCc+XG4gICAgICAgICAgICA8bGFiZWw+U2hvdyBTaW5nbGUgRWRnZTwvbGFiZWw+XG4gICAgICAgICAgICA8c2VsZWN0IHJlZj0nc2hvd1NpbmdsZUVkZ2UnIGNsYXNzTmFtZT0ndWkgc2VsZWN0aW9uIGRyb3Bkb3duJyBkZWZhdWx0VmFsdWU9J25vJz5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0neWVzJz5ZZXM8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nbm8nPk5vPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0ndWkgYnV0dG9uJyB0eXBlPSdzdWJtaXQnPnVwZGF0ZTwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxuXG4gIGhhbmRsZUNsaWNrQ2VudGVyQnV0dG9uICgpIHtcbiAgICB0aGlzLnJlZnMucmVuZGVyZXIuY2VudGVyKClcbiAgfVxuXG4gIGhhbmRsZUNsaWNrRnVsbHNjcmVlbkJ1dHRvbiAoKSB7XG4gICAgaWYgKHRoaXMucmVmcy5yZW5kZXJlci53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgdGhpcy5yZWZzLnJlbmRlcmVyLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKClcbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdWJtaXRRdWVyeUZvcm0gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5yZWZzLnF1ZXJ5LnZhbHVlXG4gICAgY29uc3QgdXNlcklkID0gdGhpcy5yZWZzLnVzZXJJZC52YWx1ZVxuICAgIGNvbnN0IHBhc3N3b3JkID0gdGhpcy5yZWZzLnBhc3N3b3JkLnZhbHVlXG4gICAgY29uc3Qgbm9kZUNvbG9yUHJvcGVydHkgPSB0aGlzLnJlZnMubm9kZUNvbG9yLnZhbHVlXG4gICAgZmV0Y2hHcmFwaChxdWVyeSwgdXNlcklkLCBwYXNzd29yZCwgbm9kZUNvbG9yUHJvcGVydHkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgICAgIHRoaXMubGF5b3V0KCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMucmVmcy5yZW5kZXJlci5jZW50ZXIoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlU3VibWl0T3B0aW9uc0Zvcm0gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMubGF5b3V0KClcbiAgfVxuXG4gIGxheW91dCAoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHR5cGU6IHRoaXMucmVmcy5ncm91cC52YWx1ZSxcbiAgICAgIGN5Y2xlczogK3RoaXMucmVmcy5jeWNsZXMudmFsdWUsXG4gICAgICBzMDogMC4xLFxuICAgICAgaTA6IDkwLFxuICAgICAgc1N0ZXA6IDAuNSxcbiAgICAgIGlTdGVwOiAwLjYsXG4gICAgICBncm91cFByb3BlcnR5OiB0aGlzLnJlZnMubm9kZUdyb3VwLnZhbHVlLFxuICAgICAgbWFueUJvZHlGb3JjZTogK3RoaXMucmVmcy5tYW55Qm9keUZvcmNlLnZhbHVlLFxuICAgICAgbGlua0ZvcmNlOiArdGhpcy5yZWZzLmxpbmtGb3JjZS52YWx1ZSxcbiAgICAgIGNlbnRlckZvcmNlOiArdGhpcy5yZWZzLmNlbnRlckZvcmNlLnZhbHVlLFxuICAgICAgaW50cmFHcm91cDogK3RoaXMucmVmcy5pbnRyYUdyb3VwLnZhbHVlLFxuICAgICAgaW50ZXJHcm91cDogK3RoaXMucmVmcy5pbnRlckdyb3VwLnZhbHVlLFxuICAgICAgdXNlRWRnZUNvbmNlbnRyYXRpb246IHRoaXMucmVmcy51c2VFZGdlQ29uY2VudHJhdGlvbi52YWx1ZSA9PT0gJ3llcycsXG4gICAgICBzaG93U2luZ2xlRWRnZTogdGhpcy5yZWZzLnNob3dTaW5nbGVFZGdlLnZhbHVlID09PSAneWVzJyxcbiAgICAgIG11OiAwLjUsXG4gICAgICBtaW5Db3VudDogK3RoaXMucmVmcy5taW5Db3VudC52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0KHRoaXMuZGF0YSwgb3B0aW9ucykudGhlbigoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgbGlua1dpZHRoU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oWzAsIDFdKVxuICAgICAgICAucmFuZ2UoWzEsIDNdKVxuICAgICAgY29uc3QgbGlua0NvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oWy0xLCAwLCAxXSlcbiAgICAgICAgLnJhbmdlKFsnIzAwZicsICcjODg4JywgJyNmMDAnXSlcbiAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBkYXRhLm5vZGVzKSB7XG4gICAgICAgIG5vZGUuZmlsbENvbG9yID0gbm9kZUNvbG9yKG5vZGUucHJvcGVydGllc1t0aGlzLnJlZnMubm9kZUNvbG9yLnZhbHVlXSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbGluayBvZiBkYXRhLnJlbGF0aW9uc2hpcHMpIHtcbiAgICAgICAgbGluay50eXBlID0gJ2xpbmUnXG4gICAgICAgIGxpbmsuc3Ryb2tlV2lkdGggPSBsaW5rV2lkdGhTY2FsZShNYXRoLmFicyhsaW5rLnByb3BlcnRpZXMudmFsdWUpKVxuICAgICAgICBsaW5rLnN0cm9rZUNvbG9yID0gbGlua0NvbG9yU2NhbGUobGluay5wcm9wZXJ0aWVzLnZhbHVlKVxuICAgICAgfVxuICAgICAgdGhpcy5yZWZzLnJlbmRlcmVyLmxvYWQoZGF0YSlcbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlICgpIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5yZWZzLnJlbmRlcmVyLmRhdGEubm9kZXMpIHtcbiAgICAgIG5vZGUuZmlsbENvbG9yID0gbm9kZUNvbG9yKG5vZGUucHJvcGVydGllc1t0aGlzLnJlZnMubm9kZUNvbG9yLnZhbHVlXSlcbiAgICB9XG4gICAgdGhpcy5yZWZzLnJlbmRlcmVyLmludmFsaWRhdGUoKVxuICB9XG59XG5cbnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1JlYWN0Jyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsb3dQcmlvcml0eVdhcm5pbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyO1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIHRyYXZlcnNhbC4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBGb3JFYWNoQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmb3JFYWNoRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSB0cmF2ZXJzYWwgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG4gKi9cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZnVuYyA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuRm9yRWFjaEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jLFxuICAgICAgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2hpbGRyZW4uZm9yZWFjaFxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICB0aGlzLmtleVByZWZpeCA9IG51bGw7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQsXG4gICAgICBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXgsXG4gICAgICBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG5cbiAgdmFyIG1hcHBlZENoaWxkID0gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFwcGVkQ2hpbGQpKSB7XG4gICAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChtYXBwZWRDaGlsZCwgcmVzdWx0LCBjaGlsZEtleSwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcHBlZENoaWxkID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleShtYXBwZWRDaGlsZCxcbiAgICAgIC8vIEtlZXAgYm90aCB0aGUgKG1hcHBlZCkgYW5kIG9sZCBrZXlzIGlmIHRoZXkgZGlmZmVyLCBqdXN0IGFzXG4gICAgICAvLyB0cmF2ZXJzZUFsbENoaWxkcmVuIHVzZWQgdG8gZG8gZm9yIG9iamVjdHMgYXMgY2hpbGRyZW5cbiAgICAgIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gobWFwcGVkQ2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIGFycmF5LCBwcmVmaXgsIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGVzY2FwZWRQcmVmaXggPSAnJztcbiAgaWYgKHByZWZpeCAhPSBudWxsKSB7XG4gICAgZXNjYXBlZFByZWZpeCA9IGVzY2FwZVVzZXJQcm92aWRlZEtleShwcmVmaXgpICsgJy8nO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LCB0cmF2ZXJzZUNvbnRleHQpO1xuICBNYXBCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLm1hcFxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLmNvdW50XG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGEgY2hpbGRyZW4gb2JqZWN0ICh0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmApIGFuZFxuICogcmV0dXJuIGFuIGFycmF5IHdpdGggYXBwcm9wcmlhdGVseSByZS1rZXllZCBjaGlsZHJlbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2hpbGRyZW4udG9hcnJheVxuICovXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICBtYXA6IG1hcENoaWxkcmVuLFxuICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsLFxuICBjb3VudDogY291bnRDaGlsZHJlbixcbiAgdG9BcnJheTogdG9BcnJheVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICAhKGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJykgOiBfcHJvZEludmFyaWFudCgnMjUnKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgLy8gQ2FzdGluZyBhcyBhbnkgc28gdGhhdCBmbG93IGlnbm9yZXMgdGhlIGFjdHVhbCBpbXBsZW1lbnRhdGlvbiBhbmQgdHJ1c3RzXG4gIC8vIGl0IHRvIG1hdGNoIHRoZSB0eXBlIHdlIGRlY2xhcmVkXG4gIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gIH1cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuICBmb3VyQXJndW1lbnRQb29sZXI6IGZvdXJBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRTeW1ib2wnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUaGlzIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQgc2luY2UgdGhpcyBmaWxlIGlzIHNoYXJlZCBiZXR3ZWVuXG4gKiBpc29tb3JwaGljIGFuZCByZW5kZXJlcnMuIFdlIGNvdWxkIGV4dHJhY3QgdGhpcyB0byBhXG4gKlxuICovXG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIEtleUVzY2FwZVV0aWxzLmVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgLy8gVGhlIGZvbGxvd2luZyBpcyBpbmxpbmVkIGZyb20gUmVhY3RFbGVtZW50LiBUaGlzIG1lYW5zIHdlIGNhbiBvcHRpbWl6ZVxuICAvLyBzb21lIGNoZWNrcy4gUmVhY3QgRmliZXIgYWxzbyBpbmxpbmVzIHRoaXMgbG9naWMgZm9yIHNpbWlsYXIgcHVycG9zZXMuXG4gIHR5cGUgPT09ICdvYmplY3QnICYmIGNoaWxkcmVuLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLFxuICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQ7XG4gIHZhciBuZXh0TmFtZTtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0gPSAnJztcbiAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBpZiAobWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSArICdgLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXMnLCBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIEtleUVzY2FwZVV0aWxzLmVzY2FwZShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9IFwiIEl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIGFuIGVsZW1lbnQgY3JlYXRlZCBieSBhIGRpZmZlcmVudCBcIiArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IF9wcm9kSW52YXJpYW50KCczMScsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIGJlIGVzY2FwZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBlc2NhcGVkIGtleS5cbiAqL1xuXG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVSZWdleCA9IC9bPTpdL2c7XG4gIHZhciBlc2NhcGVyTG9va3VwID0ge1xuICAgICc9JzogJz0wJyxcbiAgICAnOic6ICc9MidcbiAgfTtcbiAgdmFyIGVzY2FwZWRTdHJpbmcgPSAoJycgKyBrZXkpLnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG5cbiAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG59XG5cbi8qKlxuICogVW5lc2NhcGUgYW5kIHVud3JhcCBrZXkgZm9yIGh1bWFuLXJlYWRhYmxlIGRpc3BsYXlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgdW5lc2NhcGVkIGtleS5cbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGUoa2V5KSB7XG4gIHZhciB1bmVzY2FwZVJlZ2V4ID0gLyg9MHw9MikvZztcbiAgdmFyIHVuZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPTAnOiAnPScsXG4gICAgJz0yJzogJzonXG4gIH07XG4gIHZhciBrZXlTdWJzdHJpbmcgPSBrZXlbMF0gPT09ICcuJyAmJiBrZXlbMV0gPT09ICckJyA/IGtleS5zdWJzdHJpbmcoMikgOiBrZXkuc3Vic3RyaW5nKDEpO1xuXG4gIHJldHVybiAoJycgKyBrZXlTdWJzdHJpbmcpLnJlcGxhY2UodW5lc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIHVuZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xufVxuXG52YXIgS2V5RXNjYXBlVXRpbHMgPSB7XG4gIGVzY2FwZTogZXNjYXBlLFxuICB1bmVzY2FwZTogdW5lc2NhcGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5RXNjYXBlVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgSFRNTCB0YWcgZWxlbWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIGNyZWF0ZURPTUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xuICBjcmVhdGVET01GYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcHBpbmcgZnJvbSBzdXBwb3J0ZWQgSFRNTCB0YWdzIHRvIGBSZWFjdERPTUNvbXBvbmVudGAgY2xhc3Nlcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHtcbiAgYTogY3JlYXRlRE9NRmFjdG9yeSgnYScpLFxuICBhYmJyOiBjcmVhdGVET01GYWN0b3J5KCdhYmJyJyksXG4gIGFkZHJlc3M6IGNyZWF0ZURPTUZhY3RvcnkoJ2FkZHJlc3MnKSxcbiAgYXJlYTogY3JlYXRlRE9NRmFjdG9yeSgnYXJlYScpLFxuICBhcnRpY2xlOiBjcmVhdGVET01GYWN0b3J5KCdhcnRpY2xlJyksXG4gIGFzaWRlOiBjcmVhdGVET01GYWN0b3J5KCdhc2lkZScpLFxuICBhdWRpbzogY3JlYXRlRE9NRmFjdG9yeSgnYXVkaW8nKSxcbiAgYjogY3JlYXRlRE9NRmFjdG9yeSgnYicpLFxuICBiYXNlOiBjcmVhdGVET01GYWN0b3J5KCdiYXNlJyksXG4gIGJkaTogY3JlYXRlRE9NRmFjdG9yeSgnYmRpJyksXG4gIGJkbzogY3JlYXRlRE9NRmFjdG9yeSgnYmRvJyksXG4gIGJpZzogY3JlYXRlRE9NRmFjdG9yeSgnYmlnJyksXG4gIGJsb2NrcXVvdGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2Jsb2NrcXVvdGUnKSxcbiAgYm9keTogY3JlYXRlRE9NRmFjdG9yeSgnYm9keScpLFxuICBicjogY3JlYXRlRE9NRmFjdG9yeSgnYnInKSxcbiAgYnV0dG9uOiBjcmVhdGVET01GYWN0b3J5KCdidXR0b24nKSxcbiAgY2FudmFzOiBjcmVhdGVET01GYWN0b3J5KCdjYW52YXMnKSxcbiAgY2FwdGlvbjogY3JlYXRlRE9NRmFjdG9yeSgnY2FwdGlvbicpLFxuICBjaXRlOiBjcmVhdGVET01GYWN0b3J5KCdjaXRlJyksXG4gIGNvZGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2NvZGUnKSxcbiAgY29sOiBjcmVhdGVET01GYWN0b3J5KCdjb2wnKSxcbiAgY29sZ3JvdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ2NvbGdyb3VwJyksXG4gIGRhdGE6IGNyZWF0ZURPTUZhY3RvcnkoJ2RhdGEnKSxcbiAgZGF0YWxpc3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ2RhdGFsaXN0JyksXG4gIGRkOiBjcmVhdGVET01GYWN0b3J5KCdkZCcpLFxuICBkZWw6IGNyZWF0ZURPTUZhY3RvcnkoJ2RlbCcpLFxuICBkZXRhaWxzOiBjcmVhdGVET01GYWN0b3J5KCdkZXRhaWxzJyksXG4gIGRmbjogY3JlYXRlRE9NRmFjdG9yeSgnZGZuJyksXG4gIGRpYWxvZzogY3JlYXRlRE9NRmFjdG9yeSgnZGlhbG9nJyksXG4gIGRpdjogY3JlYXRlRE9NRmFjdG9yeSgnZGl2JyksXG4gIGRsOiBjcmVhdGVET01GYWN0b3J5KCdkbCcpLFxuICBkdDogY3JlYXRlRE9NRmFjdG9yeSgnZHQnKSxcbiAgZW06IGNyZWF0ZURPTUZhY3RvcnkoJ2VtJyksXG4gIGVtYmVkOiBjcmVhdGVET01GYWN0b3J5KCdlbWJlZCcpLFxuICBmaWVsZHNldDogY3JlYXRlRE9NRmFjdG9yeSgnZmllbGRzZXQnKSxcbiAgZmlnY2FwdGlvbjogY3JlYXRlRE9NRmFjdG9yeSgnZmlnY2FwdGlvbicpLFxuICBmaWd1cmU6IGNyZWF0ZURPTUZhY3RvcnkoJ2ZpZ3VyZScpLFxuICBmb290ZXI6IGNyZWF0ZURPTUZhY3RvcnkoJ2Zvb3RlcicpLFxuICBmb3JtOiBjcmVhdGVET01GYWN0b3J5KCdmb3JtJyksXG4gIGgxOiBjcmVhdGVET01GYWN0b3J5KCdoMScpLFxuICBoMjogY3JlYXRlRE9NRmFjdG9yeSgnaDInKSxcbiAgaDM6IGNyZWF0ZURPTUZhY3RvcnkoJ2gzJyksXG4gIGg0OiBjcmVhdGVET01GYWN0b3J5KCdoNCcpLFxuICBoNTogY3JlYXRlRE9NRmFjdG9yeSgnaDUnKSxcbiAgaDY6IGNyZWF0ZURPTUZhY3RvcnkoJ2g2JyksXG4gIGhlYWQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2hlYWQnKSxcbiAgaGVhZGVyOiBjcmVhdGVET01GYWN0b3J5KCdoZWFkZXInKSxcbiAgaGdyb3VwOiBjcmVhdGVET01GYWN0b3J5KCdoZ3JvdXAnKSxcbiAgaHI6IGNyZWF0ZURPTUZhY3RvcnkoJ2hyJyksXG4gIGh0bWw6IGNyZWF0ZURPTUZhY3RvcnkoJ2h0bWwnKSxcbiAgaTogY3JlYXRlRE9NRmFjdG9yeSgnaScpLFxuICBpZnJhbWU6IGNyZWF0ZURPTUZhY3RvcnkoJ2lmcmFtZScpLFxuICBpbWc6IGNyZWF0ZURPTUZhY3RvcnkoJ2ltZycpLFxuICBpbnB1dDogY3JlYXRlRE9NRmFjdG9yeSgnaW5wdXQnKSxcbiAgaW5zOiBjcmVhdGVET01GYWN0b3J5KCdpbnMnKSxcbiAga2JkOiBjcmVhdGVET01GYWN0b3J5KCdrYmQnKSxcbiAga2V5Z2VuOiBjcmVhdGVET01GYWN0b3J5KCdrZXlnZW4nKSxcbiAgbGFiZWw6IGNyZWF0ZURPTUZhY3RvcnkoJ2xhYmVsJyksXG4gIGxlZ2VuZDogY3JlYXRlRE9NRmFjdG9yeSgnbGVnZW5kJyksXG4gIGxpOiBjcmVhdGVET01GYWN0b3J5KCdsaScpLFxuICBsaW5rOiBjcmVhdGVET01GYWN0b3J5KCdsaW5rJyksXG4gIG1haW46IGNyZWF0ZURPTUZhY3RvcnkoJ21haW4nKSxcbiAgbWFwOiBjcmVhdGVET01GYWN0b3J5KCdtYXAnKSxcbiAgbWFyazogY3JlYXRlRE9NRmFjdG9yeSgnbWFyaycpLFxuICBtZW51OiBjcmVhdGVET01GYWN0b3J5KCdtZW51JyksXG4gIG1lbnVpdGVtOiBjcmVhdGVET01GYWN0b3J5KCdtZW51aXRlbScpLFxuICBtZXRhOiBjcmVhdGVET01GYWN0b3J5KCdtZXRhJyksXG4gIG1ldGVyOiBjcmVhdGVET01GYWN0b3J5KCdtZXRlcicpLFxuICBuYXY6IGNyZWF0ZURPTUZhY3RvcnkoJ25hdicpLFxuICBub3NjcmlwdDogY3JlYXRlRE9NRmFjdG9yeSgnbm9zY3JpcHQnKSxcbiAgb2JqZWN0OiBjcmVhdGVET01GYWN0b3J5KCdvYmplY3QnKSxcbiAgb2w6IGNyZWF0ZURPTUZhY3RvcnkoJ29sJyksXG4gIG9wdGdyb3VwOiBjcmVhdGVET01GYWN0b3J5KCdvcHRncm91cCcpLFxuICBvcHRpb246IGNyZWF0ZURPTUZhY3RvcnkoJ29wdGlvbicpLFxuICBvdXRwdXQ6IGNyZWF0ZURPTUZhY3RvcnkoJ291dHB1dCcpLFxuICBwOiBjcmVhdGVET01GYWN0b3J5KCdwJyksXG4gIHBhcmFtOiBjcmVhdGVET01GYWN0b3J5KCdwYXJhbScpLFxuICBwaWN0dXJlOiBjcmVhdGVET01GYWN0b3J5KCdwaWN0dXJlJyksXG4gIHByZTogY3JlYXRlRE9NRmFjdG9yeSgncHJlJyksXG4gIHByb2dyZXNzOiBjcmVhdGVET01GYWN0b3J5KCdwcm9ncmVzcycpLFxuICBxOiBjcmVhdGVET01GYWN0b3J5KCdxJyksXG4gIHJwOiBjcmVhdGVET01GYWN0b3J5KCdycCcpLFxuICBydDogY3JlYXRlRE9NRmFjdG9yeSgncnQnKSxcbiAgcnVieTogY3JlYXRlRE9NRmFjdG9yeSgncnVieScpLFxuICBzOiBjcmVhdGVET01GYWN0b3J5KCdzJyksXG4gIHNhbXA6IGNyZWF0ZURPTUZhY3RvcnkoJ3NhbXAnKSxcbiAgc2NyaXB0OiBjcmVhdGVET01GYWN0b3J5KCdzY3JpcHQnKSxcbiAgc2VjdGlvbjogY3JlYXRlRE9NRmFjdG9yeSgnc2VjdGlvbicpLFxuICBzZWxlY3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ3NlbGVjdCcpLFxuICBzbWFsbDogY3JlYXRlRE9NRmFjdG9yeSgnc21hbGwnKSxcbiAgc291cmNlOiBjcmVhdGVET01GYWN0b3J5KCdzb3VyY2UnKSxcbiAgc3BhbjogY3JlYXRlRE9NRmFjdG9yeSgnc3BhbicpLFxuICBzdHJvbmc6IGNyZWF0ZURPTUZhY3RvcnkoJ3N0cm9uZycpLFxuICBzdHlsZTogY3JlYXRlRE9NRmFjdG9yeSgnc3R5bGUnKSxcbiAgc3ViOiBjcmVhdGVET01GYWN0b3J5KCdzdWInKSxcbiAgc3VtbWFyeTogY3JlYXRlRE9NRmFjdG9yeSgnc3VtbWFyeScpLFxuICBzdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ3N1cCcpLFxuICB0YWJsZTogY3JlYXRlRE9NRmFjdG9yeSgndGFibGUnKSxcbiAgdGJvZHk6IGNyZWF0ZURPTUZhY3RvcnkoJ3Rib2R5JyksXG4gIHRkOiBjcmVhdGVET01GYWN0b3J5KCd0ZCcpLFxuICB0ZXh0YXJlYTogY3JlYXRlRE9NRmFjdG9yeSgndGV4dGFyZWEnKSxcbiAgdGZvb3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ3Rmb290JyksXG4gIHRoOiBjcmVhdGVET01GYWN0b3J5KCd0aCcpLFxuICB0aGVhZDogY3JlYXRlRE9NRmFjdG9yeSgndGhlYWQnKSxcbiAgdGltZTogY3JlYXRlRE9NRmFjdG9yeSgndGltZScpLFxuICB0aXRsZTogY3JlYXRlRE9NRmFjdG9yeSgndGl0bGUnKSxcbiAgdHI6IGNyZWF0ZURPTUZhY3RvcnkoJ3RyJyksXG4gIHRyYWNrOiBjcmVhdGVET01GYWN0b3J5KCd0cmFjaycpLFxuICB1OiBjcmVhdGVET01GYWN0b3J5KCd1JyksXG4gIHVsOiBjcmVhdGVET01GYWN0b3J5KCd1bCcpLFxuICAndmFyJzogY3JlYXRlRE9NRmFjdG9yeSgndmFyJyksXG4gIHZpZGVvOiBjcmVhdGVET01GYWN0b3J5KCd2aWRlbycpLFxuICB3YnI6IGNyZWF0ZURPTUZhY3RvcnkoJ3dicicpLFxuXG4gIC8vIFNWR1xuICBjaXJjbGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2NpcmNsZScpLFxuICBjbGlwUGF0aDogY3JlYXRlRE9NRmFjdG9yeSgnY2xpcFBhdGgnKSxcbiAgZGVmczogY3JlYXRlRE9NRmFjdG9yeSgnZGVmcycpLFxuICBlbGxpcHNlOiBjcmVhdGVET01GYWN0b3J5KCdlbGxpcHNlJyksXG4gIGc6IGNyZWF0ZURPTUZhY3RvcnkoJ2cnKSxcbiAgaW1hZ2U6IGNyZWF0ZURPTUZhY3RvcnkoJ2ltYWdlJyksXG4gIGxpbmU6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpbmUnKSxcbiAgbGluZWFyR3JhZGllbnQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpbmVhckdyYWRpZW50JyksXG4gIG1hc2s6IGNyZWF0ZURPTUZhY3RvcnkoJ21hc2snKSxcbiAgcGF0aDogY3JlYXRlRE9NRmFjdG9yeSgncGF0aCcpLFxuICBwYXR0ZXJuOiBjcmVhdGVET01GYWN0b3J5KCdwYXR0ZXJuJyksXG4gIHBvbHlnb246IGNyZWF0ZURPTUZhY3RvcnkoJ3BvbHlnb24nKSxcbiAgcG9seWxpbmU6IGNyZWF0ZURPTUZhY3RvcnkoJ3BvbHlsaW5lJyksXG4gIHJhZGlhbEdyYWRpZW50OiBjcmVhdGVET01GYWN0b3J5KCdyYWRpYWxHcmFkaWVudCcpLFxuICByZWN0OiBjcmVhdGVET01GYWN0b3J5KCdyZWN0JyksXG4gIHN0b3A6IGNyZWF0ZURPTUZhY3RvcnkoJ3N0b3AnKSxcbiAgc3ZnOiBjcmVhdGVET01GYWN0b3J5KCdzdmcnKSxcbiAgdGV4dDogY3JlYXRlRE9NRmFjdG9yeSgndGV4dCcpLFxuICB0c3BhbjogY3JlYXRlRE9NRmFjdG9yeSgndHNwYW4nKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZhY3RvcmllczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpLFxuICAgIGlzVmFsaWRFbGVtZW50ID0gX3JlcXVpcmUuaXNWYWxpZEVsZW1lbnQ7XG5cbnZhciBmYWN0b3J5ID0gcmVxdWlyZSgncHJvcC10eXBlcy9mYWN0b3J5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShpc1ZhbGlkRWxlbWVudCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xudmFyIGNoZWNrUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9jaGVja1Byb3BUeXBlcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cbiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICB2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICAgKlxuICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAgICpcbiAgICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAgICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAgICogICAgICAgLi4uXG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gICAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAgICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAgICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAgICpcbiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICAgKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gICAqICAgICB9LFxuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICAgKlxuICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gICAqXG4gICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICAgKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gICAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgKiAgICAgICAgICApO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gICAqICB9KTtcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG4gIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxcblxuICAgIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gICAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gICAgaW5zdGFuY2VPZjogY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcixcbiAgICBub2RlOiBjcmVhdGVOb2RlQ2hlY2tlcigpLFxuICAgIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICAgIG9uZU9mOiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIsXG4gICAgb25lT2ZUeXBlOiBjcmVhdGVVbmlvblR5cGVDaGVja2VyLFxuICAgIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyXG4gIH07XG5cbiAgLyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqL1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG4gIGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4gIC8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAnJztcbiAgfVxuICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuXG4gIFByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgLy8gTmV3IGJlaGF2aW9yIG9ubHkgZm9yIHVzZXJzIG9mIGBwcm9wLXR5cGVzYCBwYWNrYWdlXG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzXG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAlc2AgcHJvcCBvbiBgJXNgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJyxcbiAgICAgICAgICAgICAgcHJvcEZ1bGxOYW1lLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICAgIHZhciBhY3R1YWxDbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgYWN0dWFsQ2xhc3NOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdpbnN0YW5jZSBvZiBgJyArIGV4cGVjdGVkQ2xhc3NOYW1lICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXlPZlR5cGVDaGVja2VycykpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBjaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZCB0byBvbmVPZlR5cGUuIEV4cGVjdGVkIGFuIGFycmF5IG9mIGNoZWNrIGZ1bmN0aW9ucywgYnV0ICcgK1xuICAgICAgICAgICdyZWNlaXZlZCAlcyBhdCBpbmRleCAlcy4nLFxuICAgICAgICAgIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSxcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICAgIGlmIChjaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnXG4gICAgaWYgKHByb3BWYWx1ZVsnQEB0b1N0cmluZ1RhZyddID09PSAnU3ltYm9sJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgZm9yIG5vbi1zcGVjIGNvbXBsaWFudCBTeW1ib2xzIHdoaWNoIGFyZSBwb2x5ZmlsbGVkLlxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRXF1aXZhbGVudCBvZiBgdHlwZW9mYCBidXQgd2l0aCBzcGVjaWFsIGhhbmRsaW5nIGZvciBhcnJheSBhbmQgcmVnZXhwLlxuICBmdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH1cbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAgIC8vIHBhc3NlcyBQcm9wVHlwZXMub2JqZWN0LlxuICAgICAgcmV0dXJuICdvYmplY3QnO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkpIHtcbiAgICAgIHJldHVybiAnc3ltYm9sJztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICAvLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbiAgZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHByb3BWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnICsgcHJvcFZhbHVlO1xuICAgIH1cbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBwb3N0Zml4ZWQgdG8gYSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgdHlwZS5cbiAgLy8gRm9yIGV4YW1wbGUsIFwidW5kZWZpbmVkXCIgb3IgXCJvZiB0eXBlIGFycmF5XCJcbiAgZnVuY3Rpb24gZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBnZXRQcmVjaXNlVHlwZSh2YWx1ZSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICByZXR1cm4gJ2FuICcgKyB0eXBlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgIGNhc2UgJ3JlZ2V4cCc6XG4gICAgICAgIHJldHVybiAnYSAnICsgdHlwZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgY2xhc3MgbmFtZSBvZiB0aGUgb2JqZWN0LCBpZiBhbnkuXG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgIHJldHVybiBBTk9OWU1PVVM7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gY2hlY2tQcm9wVHlwZXM7XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAodHlwZVNwZWNzLmhhc093blByb3BlcnR5KHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSA9PT0gJ2Z1bmN0aW9uJywgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lKTtcbiAgICAgICAgICBlcnJvciA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yID0gZXg7XG4gICAgICAgIH1cbiAgICAgICAgd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgbG9jYXRpb24sIHR5cGVTcGVjTmFtZSwgdHlwZW9mIGVycm9yKTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgJXMgdHlwZTogJXMlcycsIGxvY2F0aW9uLCBlcnJvci5tZXNzYWdlLCBzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzE1LjYuMSc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWFjdEJhc2VDbGFzc2VzJyksXG4gICAgQ29tcG9uZW50ID0gX3JlcXVpcmUuQ29tcG9uZW50O1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKSxcbiAgICBpc1ZhbGlkRWxlbWVudCA9IF9yZXF1aXJlMi5pc1ZhbGlkRWxlbWVudDtcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xudmFyIGZhY3RvcnkgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MvZmFjdG9yeScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoQ29tcG9uZW50LCBpc1ZhbGlkRWxlbWVudCwgUmVhY3ROb29wVXBkYXRlUXVldWUpOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG59XG5cbnZhciBNSVhJTlNfS0VZID0gJ21peGlucyc7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBhbGxvdyB0aGUgY3JlYXRpb24gb2YgYW5vbnltb3VzIGZ1bmN0aW9ucyB3aGljaCBkbyBub3Rcbi8vIGhhdmUgLm5hbWUgc2V0IHRvIHRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSBiZWluZyBhc3NpZ25lZCB0by5cbmZ1bmN0aW9uIGlkZW50aXR5KGZuKSB7XG4gIHJldHVybiBmbjtcbn1cblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufSBlbHNlIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcbn1cblxuZnVuY3Rpb24gZmFjdG9yeShSZWFjdENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQsIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKSB7XG4gIC8qKlxuICAgKiBQb2xpY2llcyB0aGF0IGRlc2NyaWJlIG1ldGhvZHMgaW4gYFJlYWN0Q2xhc3NJbnRlcmZhY2VgLlxuICAgKi9cblxuICB2YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuICAvKipcbiAgICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAgICogb3IgaG9zdCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBUbyBjcmVhdGUgYSBuZXcgdHlwZSBvZiBgUmVhY3RDbGFzc2AsIHBhc3MgYSBzcGVjaWZpY2F0aW9uIG9mXG4gICAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAgICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gICAqXG4gICAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj47XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAgICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAgICogbW9yZSB0aGUgY29tcHJlaGVuc2l2ZSBwcm90b2NvbC4gQW55IG90aGVyIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgaW4gdGhlXG4gICAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAgICpcbiAgICogQGludGVyZmFjZSBSZWFjdENsYXNzSW50ZXJmYWNlXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7YXJyYXl9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgbWl4aW5zOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAgICogdGhlIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgaXRzIHByb3RvdHlwZSAoc3RhdGljIG1ldGhvZHMpLlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBzdGF0aWNzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgcHJvcFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIHRoaXMgY29tcG9uZW50IHNldHMgZm9yIGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY2hpbGRDb250ZXh0VHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IERlZmluaXRpb24gbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICAgKiBgdGhpcy5wcm9wc2AgaWYgdGhhdCBwcm9wIGlzIG5vdCBzcGVjaWZpZWQgKGkuZS4gdXNpbmcgYW4gYGluYCBjaGVjaykuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAgICogb24gYHRoaXMuc3RhdGVgIG9yIHVzZSBgdGhpcy5zZXRTdGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFByb3BzOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICAgKlxuICAgICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICBpc09uOiBmYWxzZSxcbiAgICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXRDaGlsZENvbnRleHQ6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gICAgLyoqXG4gICAgICogVXNlcyBwcm9wcyBmcm9tIGB0aGlzLnByb3BzYCBhbmQgc3RhdGUgZnJvbSBgdGhpcy5zdGF0ZWAgdG8gcmVuZGVyIHRoZVxuICAgICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogTm8gZ3VhcmFudGVlcyBhcmUgbWFkZSBhYm91dCB3aGVuIG9yIGhvdyBvZnRlbiB0aGlzIG1ldGhvZCBpcyBpbnZva2VkLCBzb1xuICAgICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgICAqXG4gICAgICogICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICAgKiBAcmVxdWlyZWRcbiAgICAgKi9cbiAgICByZW5kZXI6ICdERUZJTkVfT05DRScsXG5cbiAgICAvLyA9PT09IERlbGVnYXRlIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQgYW5kIGFib3V0IHRvIGJlIG1vdW50ZWQuXG4gICAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcbiAgICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBIb3dldmVyLCB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgRE9NIG5vZGUgaXMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICAgKiBiZWVuIG1vdW50ZWQgKGluaXRpYWxpemVkIGFuZCByZW5kZXJlZCkgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVhY3QgdG8gYSBwcm9wIHRyYW5zaXRpb24gYnkgdXBkYXRpbmcgdGhlXG4gICAgICogc3RhdGUgdXNpbmcgYHRoaXMuc2V0U3RhdGVgLiBDdXJyZW50IHByb3BzIGFyZSBhY2Nlc3NlZCB2aWEgYHRoaXMucHJvcHNgLlxuICAgICAqXG4gICAgICogICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAgICogICAgIH0pO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogTk9URTogVGhlcmUgaXMgbm8gZXF1aXZhbGVudCBgY29tcG9uZW50V2lsbFJlY2VpdmVTdGF0ZWAuIEFuIGluY29taW5nIHByb3BcbiAgICAgKiB0cmFuc2l0aW9uIG1heSBjYXVzZSBhIHN0YXRlIGNoYW5nZSwgYnV0IHRoZSBvcHBvc2l0ZSBpcyBub3QgdHJ1ZS4gSWYgeW91XG4gICAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hpbGUgZGVjaWRpbmcgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgdXBkYXRlZCBhcyBhIHJlc3VsdCBvZlxuICAgICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gYHJldHVybiBmYWxzZWAgd2hlbiB5b3UncmUgY2VydGFpbiB0aGF0IHRoZVxuICAgICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcbiAgICAgKiB1cGRhdGUuXG4gICAgICpcbiAgICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgICAqICAgICAgICFlcXVhbChuZXh0U3RhdGUsIHRoaXMuc3RhdGUpIHx8XG4gICAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogJ0RFRklORV9PTkNFJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIHVwZGF0ZSBkdWUgdG8gYSB0cmFuc2l0aW9uIGZyb21cbiAgICAgKiBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAgdG8gYG5leHRQcm9wc2AsIGBuZXh0U3RhdGVgXG4gICAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBwZXJmb3JtIHByZXBhcmF0aW9uIGJlZm9yZSBhbiB1cGRhdGUgb2NjdXJzLlxuICAgICAqXG4gICAgICogTk9URTogWW91ICoqY2Fubm90KiogdXNlIGB0aGlzLnNldFN0YXRlKClgIGluIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQncyBET00gcmVwcmVzZW50YXRpb24gaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAgICogYmVlbiB1cGRhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByZXZQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldlN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICAgKiBpdHMgRE9NIHJlcHJlc2VudGF0aW9uIGRlc3Ryb3llZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuICAgICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgICAqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGludGVybmFsXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICovXG4gICAgdXBkYXRlQ29tcG9uZW50OiAnT1ZFUlJJREVfQkFTRSdcbiAgfTtcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAgICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAgICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAgICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICAgKi9cbiAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIH0sXG4gICAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG4gICAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlc1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsICdjb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgICBjb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBnZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLFxuICAgICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgJ3Byb3AnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgICB9LFxuICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gICAgfSxcbiAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIF9pbnZhcmlhbnQgc28gY29tcG9uZW50c1xuICAgICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV1cbiAgICAgIDogbnVsbDtcblxuICAgIC8vIERpc2FsbG93IG92ZXJyaWRpbmcgb2YgYmFzZSBjbGFzcyBtZXRob2RzIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gICAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgICAgICd0byBhIG1peGluLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICAgKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciB0eXBlb2ZTcGVjID0gdHlwZW9mIHNwZWM7XG4gICAgICAgIHZhciBpc01peGluVmFsaWQgPSB0eXBlb2ZTcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGlzTWl4aW5WYWxpZCxcbiAgICAgICAgICAgIFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIFwiICtcbiAgICAgICAgICAgICAgJ29yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgJyArXG4gICAgICAgICAgICAgICdhcyB3ZWxsIGFzIGFueSBtaXhpbnMgdGhleSBpbmNsdWRlIHRoZW1zZWx2ZXMuICcgK1xuICAgICAgICAgICAgICAnRXhwZWN0ZWQgb2JqZWN0IGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgICAgIHNwZWMgPT09IG51bGwgPyBudWxsIDogdHlwZW9mU3BlY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gXCIgK1xuICAgICAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgJyArXG4gICAgICAgICdyZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcbiAgICBfaW52YXJpYW50KFxuICAgICAgIWlzVmFsaWRFbGVtZW50KHNwZWMpLFxuICAgICAgXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBcIiArXG4gICAgICAgICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcblxuICAgIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuXG4gICAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gICAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gICAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlLlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgIHZhciBpc0FscmVhZHlEZWZpbmVkID0gcHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGlzQWxyZWFkeURlZmluZWQsIG5hbWUpO1xuXG4gICAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuICAgICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9XG4gICAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgICAhaXNBbHJlYWR5RGVmaW5lZCAmJlxuICAgICAgICAgIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBjYXNlcyBzaG91bGQgYWxyZWFkeSBiZSBjYXVnaHQgYnkgdmFsaWRhdGVNZXRob2RPdmVycmlkZS5cbiAgICAgICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgICAgIGlzUmVhY3RDbGFzc01ldGhvZCAmJlxuICAgICAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyB8fFxuICAgICAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJyksXG4gICAgICAgICAgICAgICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAgICAgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLFxuICAgICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJykge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWScpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIEFkZCB2ZXJib3NlIGRpc3BsYXlOYW1lIHRvIHRoZSBmdW5jdGlvbiwgd2hpY2ggaGVscHMgd2hlbiBsb29raW5nXG4gICAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICFpc1Jlc2VydmVkLFxuICAgICAgICAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgICAgICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArXG4gICAgICAgICAgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArXG4gICAgICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG5cbiAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICAhaXNJbmhlcml0ZWQsXG4gICAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgICAgICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICtcbiAgICAgICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcbiAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHR3byBvYmplY3RzLCBidXQgdGhyb3cgaWYgYm90aCBjb250YWluIHRoZSBzYW1lIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHdvIFRoZSBzZWNvbmQgb2JqZWN0XG4gICAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgICBfaW52YXJpYW50KFxuICAgICAgb25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JyxcbiAgICAgICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cy4nXG4gICAgKTtcblxuICAgIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICAgIGlmICh0d28uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBfaW52YXJpYW50KFxuICAgICAgICAgIG9uZVtrZXldID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArXG4gICAgICAgICAgICAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArXG4gICAgICAgICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgICAgICAgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArXG4gICAgICAgICAgICAnd2l0aCBjbGFzaGluZyBrZXlzLicsXG4gICAgICAgICAga2V5XG4gICAgICAgICk7XG4gICAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvbmU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIHZhciBjID0ge307XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGEpO1xuICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBib3VuZCBtZXRob2QuXG4gICAqL1xuICBmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcbiAgICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSxcbiAgICAgICAgICAgIF9rZXkgPSAxO1xuICAgICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICAgIF9rZXkrK1xuICAgICAgICApIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAgIC8vIGlnbm9yZSB0aGUgdmFsdWUgb2YgXCJ0aGlzXCIgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gdXNlLCBzb1xuICAgICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG4gICAgICAgICAgICAgICAgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgK1xuICAgICAgICAgICAgICAgICd3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAlcycsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG4gICAgdmFyIHBhaXJzID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZFBhaXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHZhciBhdXRvQmluZEtleSA9IHBhaXJzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHBhaXJzW2kgKyAxXTtcbiAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBJc01vdW50ZWRQcmVNaXhpbiA9IHtcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIElzTW91bnRlZFBvc3RNaXhpbiA9IHtcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAgICogdGhlcmVmb3JlIG5vdCBhbHJlYWR5IHBhcnQgb2YgdGhlIG1vZGVybiBSZWFjdENvbXBvbmVudC5cbiAgICovXG4gIHZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG4gICAgLyoqXG4gICAgICogVE9ETzogVGhpcyB3aWxsIGJlIGRlcHJlY2F0ZWQgYmVjYXVzZSBzdGF0ZSBzaG91bGQgYWx3YXlzIGtlZXAgYSBjb25zaXN0ZW50XG4gICAgICogdHlwZSBzaWduYXR1cmUgYW5kIHRoZSBvbmx5IHVzZSBjYXNlIGZvciB0aGlzLCBpcyB0byBhdm9pZCB0aGF0LlxuICAgICAqL1xuICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24obmV3U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBmaW5hbFxuICAgICAqL1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMuX19kaWRXYXJuSXNNb3VudGVkLFxuICAgICAgICAgICclczogaXNNb3VudGVkIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCAnICtcbiAgICAgICAgICAgICdzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluIGNvbXBvbmVudFdpbGxVbm1vdW50IHRvICcgK1xuICAgICAgICAgICAgJ3ByZXZlbnQgbWVtb3J5IGxlYWtzLicsXG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IgJiYgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgfHxcbiAgICAgICAgICAgIHRoaXMubmFtZSB8fFxuICAgICAgICAgICAgJ0NvbXBvbmVudCdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhdGhpcy5fX2lzTW91bnRlZDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIFJlYWN0Q2xhc3NDb21wb25lbnQgPSBmdW5jdGlvbigpIHt9O1xuICBfYXNzaWduKFxuICAgIFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgICBSZWFjdENsYXNzTWl4aW5cbiAgKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjKSB7XG4gICAgLy8gVG8ga2VlcCBvdXIgd2FybmluZ3MgbW9yZSB1bmRlcnN0YW5kYWJsZSwgd2UnbGwgdXNlIGEgbGl0dGxlIGhhY2sgaGVyZSB0b1xuICAgIC8vIGVuc3VyZSB0aGF0IENvbnN0cnVjdG9yLm5hbWUgIT09ICdDb25zdHJ1Y3RvcicuIFRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndFxuICAgIC8vIHVubmVjZXNzYXJpbHkgaWRlbnRpZnkgYSBjbGFzcyB3aXRob3V0IGRpc3BsYXlOYW1lIGFzICdDb25zdHJ1Y3RvcicuXG4gICAgdmFyIENvbnN0cnVjdG9yID0gaWRlbnRpdHkoZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgZ2V0cyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcixcbiAgICAgICAgICAnU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgJyArXG4gICAgICAgICAgICAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5J1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kUGFpcnMubGVuZ3RoKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9KTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDbGFzc0NvbXBvbmVudCgpO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuXG4gICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKSk7XG5cbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUHJlTWl4aW4pO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUG9zdE1peGluKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfaW52YXJpYW50KFxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcixcbiAgICAgICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLidcbiAgICApO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG4gICAgICAgICAgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICtcbiAgICAgICAgICAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApO1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5vbmx5XG4gKlxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0c1xuICogcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG9cbiAqIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RFbGVtZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDMnKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3RET00nKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4vKiBnbG9iYWxzIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRJbmplY3Rpb24nKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoJy4vZmluZERPTU5vZGUnKTtcbnZhciBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZSA9IHJlcXVpcmUoJy4vZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUnKTtcbnZhciByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVuZGVyU3VidHJlZUludG9Db250YWluZXInKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciBSZWFjdERPTSA9IHtcbiAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICByZW5kZXI6IFJlYWN0TW91bnQucmVuZGVyLFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyxcbiAgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXG4gIC8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG59O1xuXG4vLyBJbmplY3QgdGhlIHJ1bnRpbWUgaW50byBhIGRldnRvb2xzIGdsb2JhbCBob29rIHJlZ2FyZGxlc3Mgb2YgYnJvd3Nlci5cbi8vIEFsbG93cyBmb3IgZGVidWdnaW5nIHdoZW4gdGhlIGhvb2sgaXMgaW5qZWN0ZWQgb24gdGhlIHBhZ2UuXG5pZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ29tcG9uZW50VHJlZToge1xuICAgICAgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgICAgIGdldE5vZGVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAgIC8vIGluc3QgaXMgYW4gaW50ZXJuYWwgaW5zdGFuY2UgKGJ1dCBjb3VsZCBiZSBhIGNvbXBvc2l0ZSlcbiAgICAgICAgaWYgKGluc3QuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICAgICAgaW5zdCA9IGdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBSZWNvbmNpbGVyOiBSZWFjdFJlY29uY2lsZXJcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcbiAgICAvLyBGaXJzdCBjaGVjayBpZiBkZXZ0b29scyBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgICAgLy8gRmlyZWZveCBkb2VzIG5vdCBoYXZlIHRoZSBpc3N1ZSB3aXRoIGRldnRvb2xzIGxvYWRlZCBvdmVyIGZpbGU6Ly9cbiAgICAgICAgdmFyIHNob3dGaWxlVXJsTWVzc2FnZSA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKCdodHRwJykgPT09IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzICcgKyAoc2hvd0ZpbGVVcmxNZXNzYWdlID8gJ2FuZCB1c2UgYW4gSFRUUCBzZXJ2ZXIgKGluc3RlYWQgb2YgYSBmaWxlOiBVUkwpICcgOiAnJykgKyAnZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0ZXN0RnVuYyA9IGZ1bmN0aW9uIHRlc3RGbigpIHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCh0ZXN0RnVuYy5uYW1lIHx8IHRlc3RGdW5jLnRvU3RyaW5nKCkpLmluZGV4T2YoJ3Rlc3RGbicpICE9PSAtMSwgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBhIG1pbmlmaWVkIGNvcHkgb2YgdGhlIGRldmVsb3BtZW50IGJ1aWxkIFwiICsgJ29mIFJlYWN0LiBXaGVuIGRlcGxveWluZyBSZWFjdCBhcHBzIHRvIHByb2R1Y3Rpb24sIG1ha2Ugc3VyZSB0byB1c2UgJyArICd0aGUgcHJvZHVjdGlvbiBidWlsZCB3aGljaCBza2lwcyBkZXZlbG9wbWVudCB3YXJuaW5ncyBhbmQgaXMgZmFzdGVyLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LW1pbmlmaWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLicpIDogdm9pZCAwO1xuXG4gICAgLy8gSWYgd2UncmUgaW4gSUU4LCBjaGVjayB0byBzZWUgaWYgd2UgYXJlIGluIGNvbXBhdGliaWxpdHkgbW9kZSBhbmQgcHJvdmlkZVxuICAgIC8vIGluZm9ybWF0aW9uIG9uIHByZXZlbnRpbmcgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgdmFyIGllQ29tcGF0aWJpbGl0eU1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgODtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpZUNvbXBhdGliaWxpdHlNb2RlLCAnSW50ZXJuZXQgRXhwbG9yZXIgaXMgcnVubmluZyBpbiBjb21wYXRpYmlsaXR5IG1vZGU7IHBsZWFzZSBhZGQgdGhlICcgKyAnZm9sbG93aW5nIHRhZyB0byB5b3VyIEhUTUwgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nOiAnICsgJzxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZVwiIC8+JykgOiB2b2lkIDA7XG5cbiAgICB2YXIgZXhwZWN0ZWRGZWF0dXJlcyA9IFtcbiAgICAvLyBzaGltc1xuICAgIEFycmF5LmlzQXJyYXksIEFycmF5LnByb3RvdHlwZS5ldmVyeSwgQXJyYXkucHJvdG90eXBlLmZvckVhY2gsIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLCBBcnJheS5wcm90b3R5cGUubWFwLCBEYXRlLm5vdywgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIE9iamVjdC5rZXlzLCBTdHJpbmcucHJvdG90eXBlLnRyaW1dO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV4cGVjdGVkRmVhdHVyZXNbaV0pIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmUgb3IgbW9yZSBFUzUgc2hpbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscycpIDogdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rID0gcmVxdWlyZSgnLi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2snKTtcbiAgdmFyIFJlYWN0RE9NTnVsbElucHV0VmFsdWVQcm9wSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rJyk7XG4gIHZhciBSZWFjdERPTUludmFsaWRBUklBSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RET01JbnZhbGlkQVJJQUhvb2snKTtcblxuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2spO1xuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2spO1xuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTUludmFsaWRBUklBSG9vayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFSSUFET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vQVJJQURPTVByb3BlcnR5Q29uZmlnJyk7XG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQmVmb3JlSW5wdXRFdmVudFBsdWdpbicpO1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9DaGFuZ2VFdmVudFBsdWdpbicpO1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gcmVxdWlyZSgnLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlcicpO1xudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJyk7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9IVE1MRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NRW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NRW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdERPTVRyZWVUcmF2ZXJzYWwgPSByZXF1aXJlKCcuL1JlYWN0RE9NVHJlZVRyYXZlcnNhbCcpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJy4vUmVhY3RFdmVudExpc3RlbmVyJyk7XG52YXIgUmVhY3RJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5qZWN0aW9uJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbicpO1xudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9TVkdET01Qcm9wZXJ0eUNvbmZpZycpO1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TZWxlY3RFdmVudFBsdWdpbicpO1xudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TaW1wbGVFdmVudFBsdWdpbicpO1xuXG52YXIgYWxyZWFkeUluamVjdGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgaWYgKGFscmVhZHlJbmplY3RlZCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgY3VycmVudGx5IHRydWUgYmVjYXVzZSB0aGVzZSBpbmplY3Rpb25zIGFyZSBzaGFyZWQgYmV0d2VlblxuICAgIC8vIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXIgcGFja2FnZS4gVGhleSBzaG91bGQgYmUgYnVpbHQgaW5kZXBlbmRlbnRseVxuICAgIC8vIGFuZCBub3Qgc2hhcmUgYW55IGluamVjdGlvbiBzdGF0ZS4gVGhlbiB0aGlzIHByb2JsZW0gd2lsbCBiZSBzb2x2ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGFscmVhZHlJbmplY3RlZCA9IHRydWU7XG5cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRFbWl0dGVyLmluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcihSZWFjdEV2ZW50TGlzdGVuZXIpO1xuXG4gIC8qKlxuICAgKiBJbmplY3QgbW9kdWxlcyBmb3IgcmVzb2x2aW5nIERPTSBoaWVyYXJjaHkgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpblV0aWxzLmluamVjdENvbXBvbmVudFRyZWUoUmVhY3RET01Db21wb25lbnRUcmVlKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RUcmVlVHJhdmVyc2FsKFJlYWN0RE9NVHJlZVRyYXZlcnNhbCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5Ib3N0Q29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhSZWFjdERPTUNvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uSG9zdENvbXBvbmVudC5pbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MoUmVhY3RET01UZXh0Q29tcG9uZW50KTtcblxuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhBUklBRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnRGYWN0b3J5KGZ1bmN0aW9uIChpbnN0YW50aWF0ZSkge1xuICAgIHJldHVybiBuZXcgUmVhY3RET01FbXB0eUNvbXBvbmVudChpbnN0YW50aWF0ZSk7XG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5qZWN0OiBpbmplY3Rcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFSSUFET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgUHJvcGVydGllczoge1xuICAgIC8vIEdsb2JhbCBTdGF0ZXMgYW5kIFByb3BlcnRpZXNcbiAgICAnYXJpYS1jdXJyZW50JzogMCwgLy8gc3RhdGVcbiAgICAnYXJpYS1kZXRhaWxzJzogMCxcbiAgICAnYXJpYS1kaXNhYmxlZCc6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEtaGlkZGVuJzogMCwgLy8gc3RhdGVcbiAgICAnYXJpYS1pbnZhbGlkJzogMCwgLy8gc3RhdGVcbiAgICAnYXJpYS1rZXlzaG9ydGN1dHMnOiAwLFxuICAgICdhcmlhLWxhYmVsJzogMCxcbiAgICAnYXJpYS1yb2xlZGVzY3JpcHRpb24nOiAwLFxuICAgIC8vIFdpZGdldCBBdHRyaWJ1dGVzXG4gICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogMCxcbiAgICAnYXJpYS1jaGVja2VkJzogMCxcbiAgICAnYXJpYS1leHBhbmRlZCc6IDAsXG4gICAgJ2FyaWEtaGFzcG9wdXAnOiAwLFxuICAgICdhcmlhLWxldmVsJzogMCxcbiAgICAnYXJpYS1tb2RhbCc6IDAsXG4gICAgJ2FyaWEtbXVsdGlsaW5lJzogMCxcbiAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiAwLFxuICAgICdhcmlhLW9yaWVudGF0aW9uJzogMCxcbiAgICAnYXJpYS1wbGFjZWhvbGRlcic6IDAsXG4gICAgJ2FyaWEtcHJlc3NlZCc6IDAsXG4gICAgJ2FyaWEtcmVhZG9ubHknOiAwLFxuICAgICdhcmlhLXJlcXVpcmVkJzogMCxcbiAgICAnYXJpYS1zZWxlY3RlZCc6IDAsXG4gICAgJ2FyaWEtc29ydCc6IDAsXG4gICAgJ2FyaWEtdmFsdWVtYXgnOiAwLFxuICAgICdhcmlhLXZhbHVlbWluJzogMCxcbiAgICAnYXJpYS12YWx1ZW5vdyc6IDAsXG4gICAgJ2FyaWEtdmFsdWV0ZXh0JzogMCxcbiAgICAvLyBMaXZlIFJlZ2lvbiBBdHRyaWJ1dGVzXG4gICAgJ2FyaWEtYXRvbWljJzogMCxcbiAgICAnYXJpYS1idXN5JzogMCxcbiAgICAnYXJpYS1saXZlJzogMCxcbiAgICAnYXJpYS1yZWxldmFudCc6IDAsXG4gICAgLy8gRHJhZy1hbmQtRHJvcCBBdHRyaWJ1dGVzXG4gICAgJ2FyaWEtZHJvcGVmZmVjdCc6IDAsXG4gICAgJ2FyaWEtZ3JhYmJlZCc6IDAsXG4gICAgLy8gUmVsYXRpb25zaGlwIEF0dHJpYnV0ZXNcbiAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogMCxcbiAgICAnYXJpYS1jb2xjb3VudCc6IDAsXG4gICAgJ2FyaWEtY29saW5kZXgnOiAwLFxuICAgICdhcmlhLWNvbHNwYW4nOiAwLFxuICAgICdhcmlhLWNvbnRyb2xzJzogMCxcbiAgICAnYXJpYS1kZXNjcmliZWRieSc6IDAsXG4gICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzogMCxcbiAgICAnYXJpYS1mbG93dG8nOiAwLFxuICAgICdhcmlhLWxhYmVsbGVkYnknOiAwLFxuICAgICdhcmlhLW93bnMnOiAwLFxuICAgICdhcmlhLXBvc2luc2V0JzogMCxcbiAgICAnYXJpYS1yb3djb3VudCc6IDAsXG4gICAgJ2FyaWEtcm93aW5kZXgnOiAwLFxuICAgICdhcmlhLXJvd3NwYW4nOiAwLFxuICAgICdhcmlhLXNldHNpemUnOiAwXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7fSxcbiAgRE9NUHJvcGVydHlOYW1lczoge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQVJJQURPTVByb3BlcnR5Q29uZmlnOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlID0gcmVxdWlyZSgnLi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUnKTtcbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50Jyk7XG52YXIgU3ludGhldGljSW5wdXRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljSW5wdXRFdmVudCcpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG5cbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG5cbi8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmICFkb2N1bWVudE1vZGUgJiYgIWlzUHJlc3RvKCk7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG5cbi8qKlxuICogT3BlcmEgPD0gMTIgaW5jbHVkZXMgVGV4dEV2ZW50IGluIHdpbmRvdywgYnV0IGRvZXMgbm90IGZpcmVcbiAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGlzUHJlc3RvKCkge1xuICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gIHJldHVybiB0eXBlb2Ygb3BlcmEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmIHBhcnNlSW50KG9wZXJhLnZlcnNpb24oKSwgMTApIDw9IDEyO1xufVxuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQmVmb3JlSW5wdXQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkJlZm9yZUlucHV0Q2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BDb21wb3NpdGlvbkVuZCcsICd0b3BLZXlQcmVzcycsICd0b3BUZXh0SW5wdXQnLCAndG9wUGFzdGUnXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvbkVuZCcsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25FbmRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25FbmQnLCAndG9wS2V5RG93bicsICd0b3BLZXlQcmVzcycsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25TdGFydCcsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uVXBkYXRlJyxcbiAgICAgIGNhcHR1cmVkOiAnb25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDb21wb3NpdGlvblVwZGF0ZScsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSAndG9wQ29tcG9zaXRpb25TdGFydCc6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uVXBkYXRlJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlEb3duJyAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcEtleVVwJzpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlICd0b3BLZXlEb3duJzpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgY2FzZSAndG9wQmx1cic6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudFR5cGU7XG4gIHZhciBmYWxsYmFja0RhdGE7XG5cbiAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuICB9IGVsc2UgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgfVxuXG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEpIHtcbiAgICAvLyBUaGUgY3VycmVudCBjb21wb3NpdGlvbiBpcyBzdG9yZWQgc3RhdGljYWxseSBhbmQgbXVzdCBub3QgYmVcbiAgICAvLyBvdmVyd3JpdHRlbiB3aGlsZSBjb21wb3NpdGlvbiBjb250aW51ZXMuXG4gICAgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24gJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5nZXRQb29sZWQobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICAgIGZhbGxiYWNrRGF0YSA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIHByb3BlcnR5IG9mIG5hdGl2ZSBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlLlxuICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1c3RvbURhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgZXZlbnQuZGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuICB9XG5cbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBzdHJpbmcgY29ycmVzcG9uZGluZyB0byB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlICd0b3BLZXlQcmVzcyc6XG4gICAgICAvKipcbiAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAqIHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG4gICAgICAgKlxuICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcblxuICAgIGNhc2UgJ3RvcFRleHRJbnB1dCc6XG4gICAgICAvLyBSZWNvcmQgdGhlIGNoYXJhY3RlcnMgdG8gYmUgYWRkZWQgdG8gdGhlIERPTS5cbiAgICAgIHZhciBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICAgIC8vIElmIGl0J3MgYSBzcGFjZWJhciBjaGFyYWN0ZXIsIGFzc3VtZSB0aGF0IHdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkXG4gICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG4gICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gYmxhY2tsaXN0IGl0LlxuICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFycztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBGb3Igb3RoZXIgbmF0aXZlIGV2ZW50IHR5cGVzLCBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBGb3IgYnJvd3NlcnMgdGhhdCBkbyBub3QgcHJvdmlkZSB0aGUgYHRleHRJbnB1dGAgZXZlbnQsIGV4dHJhY3QgdGhlXG4gKiBhcHByb3ByaWF0ZSBzdHJpbmcgdG8gdXNlIGZvciBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmYWxsYmFjayBzdHJpbmcgZm9yIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBjb21wb3NpbmcgKElNRSkgYW5kIHVzaW5nIGEgZmFsbGJhY2sgdG8gZG8gc28sXG4gIC8vIHRyeSB0byBleHRyYWN0IHRoZSBjb21wb3NlZCBjaGFyYWN0ZXJzIGZyb20gdGhlIGZhbGxiYWNrIG9iamVjdC5cbiAgLy8gSWYgY29tcG9zaXRpb24gZXZlbnQgaXMgYXZhaWxhYmxlLCB3ZSBleHRyYWN0IGEgc3RyaW5nIG9ubHkgYXRcbiAgLy8gY29tcG9zaXRpb25ldmVudCwgb3RoZXJ3aXNlIGV4dHJhY3QgaXQgYXQgZmFsbGJhY2sgZXZlbnRzLlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENvbXBvc2l0aW9uRW5kJyB8fCAhY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcFBhc3RlJzpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBjaGFycztcblxuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH1cblxuICAvLyBJZiBubyBjaGFyYWN0ZXJzIGFyZSBiZWluZyBpbnNlcnRlZCwgbm8gQmVmb3JlSW5wdXQgZXZlbnQgc2hvdWxkXG4gIC8vIGJlIGZpcmVkLlxuICBpZiAoIWNoYXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmJlZm9yZUlucHV0LCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwbHVnaW4gaXMgYWxzbyByZXNwb25zaWJsZSBmb3IgZW1pdHRpbmcgYGNvbXBvc2l0aW9uYCBldmVudHMsIHRodXNcbiAqIGFsbG93aW5nIHVzIHRvIHNoYXJlIGNvbXBvc2l0aW9uIGZhbGxiYWNrIGNvZGUgZm9yIGJvdGggYGJlZm9yZUlucHV0YCBhbmRcbiAqIGBjb21wb3NpdGlvbmAgZXZlbnQgdHlwZXMuXG4gKi9cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHJldHVybiBbZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpLCBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCldO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUlucHV0RXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcblxudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9zdGFydFRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cblxuX2Fzc2lnbihGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucHJvdG90eXBlLCB7XG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICB0aGlzLl9zdGFydFRleHQgPSBudWxsO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHRleHQgb2YgaW5wdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldFRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ3ZhbHVlJyBpbiB0aGlzLl9yb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBkaWZmZXJpbmcgc3Vic3RyaW5nIGJldHdlZW4gdGhlIGluaXRpYWxseSBzdG9yZWRcbiAgICogdGV4dCBjb250ZW50IGFuZCB0aGUgY3VycmVudCBjb250ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXREYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2ZhbGxiYWNrVGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZhbGxiYWNrVGV4dDtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQ7XG4gICAgdmFyIHN0YXJ0VmFsdWUgPSB0aGlzLl9zdGFydFRleHQ7XG4gICAgdmFyIHN0YXJ0TGVuZ3RoID0gc3RhcnRWYWx1ZS5sZW5ndGg7XG4gICAgdmFyIGVuZDtcbiAgICB2YXIgZW5kVmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuXG4gICAgZm9yIChzdGFydCA9IDA7IHN0YXJ0IDwgc3RhcnRMZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0XSAhPT0gZW5kVmFsdWVbc3RhcnRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtaW5FbmQgPSBzdGFydExlbmd0aCAtIHN0YXJ0O1xuICAgIGZvciAoZW5kID0gMTsgZW5kIDw9IG1pbkVuZDsgZW5kKyspIHtcbiAgICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSAhPT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2xpY2VUYWlsID0gZW5kID4gMSA/IDEgLSBlbmQgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gICAgcmV0dXJuIHRoaXMuX2ZhbGxiYWNrVGV4dDtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50c1xuICovXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ29tcG9zaXRpb25FdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LCBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0lucHV0RXZlbnQsIElucHV0RXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgaW5wdXRWYWx1ZVRyYWNraW5nID0gcmVxdWlyZSgnLi9pbnB1dFZhbHVlVHJhY2tpbmcnKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZSgnLi9pc1RleHRJbnB1dEVsZW1lbnQnKTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25DaGFuZ2UnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNoYW5nZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDaGFuZ2UnLCAndG9wQ2xpY2snLCAndG9wRm9jdXMnLCAndG9wSW5wdXQnLCAndG9wS2V5RG93bicsICd0b3BLZXlVcCcsICd0b3BTZWxlY3Rpb25DaGFuZ2UnXVxuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5jaGFuZ2UsIGluc3QsIG5hdGl2ZUV2ZW50LCB0YXJnZXQpO1xuICBldmVudC50eXBlID0gJ2NoYW5nZSc7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCk7XG59XG5cbmZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGV2ZW50ID0gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGFjdGl2ZUVsZW1lbnRJbnN0LCBuYXRpdmVFdmVudCwgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpKTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG59XG5cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB1cGRhdGVkID0gaW5wdXRWYWx1ZVRyYWNraW5nLnVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldEluc3QpO1xuICB2YXIgc2ltdWxhdGVkID0gbmF0aXZlRXZlbnQuc2ltdWxhdGVkID09PSB0cnVlICYmIENoYW5nZUV2ZW50UGx1Z2luLl9hbGxvd1NpbXVsYXRlZFBhc3NUaHJvdWdoO1xuXG4gIGlmICh1cGRhdGVkIHx8IHNpbXVsYXRlZCkge1xuICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENoYW5nZScpIHtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wRm9jdXMnKSB7XG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldEluc3QpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEJsdXInKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcbiAgfVxufVxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgaW5wdXRgIGV2ZW50XG4gKi9cbnZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU5IGNsYWltcyB0byBzdXBwb3J0IHRoZSBpbnB1dCBldmVudCBidXQgZmFpbHMgdG8gdHJpZ2dlciBpdCB3aGVuXG4gIC8vIGRlbGV0aW5nIHRleHQsIHNvIHdlIGlnbm9yZSBpdHMgaW5wdXQgZXZlbnRzLlxuXG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2lucHV0JykgJiYgKCEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDkpO1xufVxuXG4vKipcbiAqIChGb3IgSUUgPD05KSBTdGFydHMgdHJhY2tpbmcgcHJvcGVydHljaGFuZ2UgZXZlbnRzIG9uIHRoZSBwYXNzZWQtaW4gZWxlbWVudFxuICogYW5kIG92ZXJyaWRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCB1c2VyIGV2ZW50cyBmcm9tXG4gKiB2YWx1ZSBjaGFuZ2VzIGluIEpTLlxuICovXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgUmVtb3ZlcyB0aGUgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGN1cnJlbnRseS10cmFja2VkIGVsZW1lbnQsXG4gKiBpZiBhbnkgZXhpc3RzLlxuICovXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG5cbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgSGFuZGxlcyBhIHByb3BlcnR5Y2hhbmdlIGV2ZW50LCBzZW5kaW5nIGEgYGNoYW5nZWAgZXZlbnQgaWZcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVByb3BlcnR5Q2hhbmdlKG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgIT09ICd2YWx1ZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGdldEluc3RJZlZhbHVlQ2hhbmdlZChhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQpKSB7XG4gICAgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsKHRvcExldmVsVHlwZSwgdGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BGb2N1cycpIHtcbiAgICAvLyBJbiBJRTgsIHdlIGNhbiBjYXB0dXJlIGFsbW9zdCBhbGwgLnZhbHVlIGNoYW5nZXMgYnkgYWRkaW5nIGFcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBoYW5kbGVyIGFuZCBsb29raW5nIGZvciBldmVudHMgd2l0aCBwcm9wZXJ0eU5hbWVcbiAgICAvLyBlcXVhbCB0byAndmFsdWUnXG4gICAgLy8gSW4gSUU5LCBwcm9wZXJ0eWNoYW5nZSBmaXJlcyBmb3IgbW9zdCBpbnB1dCBldmVudHMgYnV0IGlzIGJ1Z2d5IGFuZFxuICAgIC8vIGRvZXNuJ3QgZmlyZSB3aGVuIHRleHQgaXMgZGVsZXRlZCwgYnV0IGNvbnZlbmllbnRseSwgc2VsZWN0aW9uY2hhbmdlXG4gICAgLy8gYXBwZWFycyB0byBmaXJlIGluIGFsbCBvZiB0aGUgcmVtYWluaW5nIGNhc2VzIHNvIHdlIGNhdGNoIHRob3NlIGFuZFxuICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50IGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuICAgIC8vIEluIGVpdGhlciBjYXNlLCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhlIGV2ZW50IGhhbmRsZXIgaWYgdGhlIHZhbHVlXG4gICAgLy8gaXMgY2hhbmdlZCBmcm9tIEpTIHNvIHdlIHJlZGVmaW5lIGEgc2V0dGVyIGZvciBgLnZhbHVlYCB0aGF0IHVwZGF0ZXNcbiAgICAvLyBvdXIgYWN0aXZlRWxlbWVudFZhbHVlIHZhcmlhYmxlLCBhbGxvd2luZyB1cyB0byBpZ25vcmUgdGhvc2UgY2hhbmdlc1xuICAgIC8vXG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldEluc3QpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEJsdXInKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcFNlbGVjdGlvbkNoYW5nZScgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wS2V5VXAnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcEtleURvd24nKSB7XG4gICAgLy8gT24gdGhlIHNlbGVjdGlvbmNoYW5nZSBldmVudCwgdGhlIHRhcmdldCBpcyBqdXN0IGRvY3VtZW50IHdoaWNoIGlzbid0XG4gICAgLy8gaGVscGZ1bCBmb3IgdXMgc28ganVzdCBjaGVjayBhY3RpdmVFbGVtZW50IGluc3RlYWQuXG4gICAgLy9cbiAgICAvLyA5OSUgb2YgdGhlIHRpbWUsIGtleWRvd24gYW5kIGtleXVwIGFyZW4ndCBuZWNlc3NhcnkuIElFOCBmYWlscyB0byBmaXJlXG4gICAgLy8gcHJvcGVydHljaGFuZ2Ugb24gdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFmdGVyIHNldHRpbmcgYHZhbHVlYCBmcm9tIGFcbiAgICAvLyBzY3JpcHQgYW5kIGZpcmVzIG9ubHkga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLiBDYXRjaGluZyBrZXl1cCB1c3VhbGx5XG4gICAgLy8gZ2V0cyBpdCBhbmQgY2F0Y2hpbmcga2V5ZG93biBsZXRzIHVzIGZpcmUgYW4gZXZlbnQgZm9yIHRoZSBmaXJzdFxuICAgIC8vIGtleXN0cm9rZSBpZiB1c2VyIGRvZXMgYSBrZXkgcmVwZWF0IChpdCdsbCBiZSBhIGxpdHRsZSBkZWxheWVkOiByaWdodFxuICAgIC8vIGJlZm9yZSB0aGUgc2Vjb25kIGtleXN0cm9rZSkuIE90aGVyIGlucHV0IG1ldGhvZHMgKGUuZy4sIHBhc3RlKSBzZWVtIHRvXG4gICAgLy8gZmlyZSBzZWxlY3Rpb25jaGFuZ2Ugbm9ybWFsbHkuXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZChhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lO1xuICByZXR1cm4gbm9kZU5hbWUgJiYgbm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJiAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENsaWNrJykge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wSW5wdXQnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcENoYW5nZScpIHtcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250cm9sbGVkSW5wdXRCbHVyKGluc3QsIG5vZGUpIHtcbiAgLy8gVE9ETzogSW4gSUUsIGluc3QgaXMgb2NjYXNpb25hbGx5IG51bGwuIFdoeT9cbiAgaWYgKGluc3QgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpYmVyIGFuZCBSZWFjdERPTSBrZWVwIHdyYXBwZXIgc3RhdGUgaW4gc2VwYXJhdGUgcGxhY2VzXG4gIHZhciBzdGF0ZSA9IGluc3QuX3dyYXBwZXJTdGF0ZSB8fCBub2RlLl93cmFwcGVyU3RhdGU7XG5cbiAgaWYgKCFzdGF0ZSB8fCAhc3RhdGUuY29udHJvbGxlZCB8fCBub2RlLnR5cGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgY29udHJvbGxlZCwgYXNzaWduIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgdG8gdGhlIGN1cnJlbnQgdmFsdWUgb24gYmx1clxuICB2YXIgdmFsdWUgPSAnJyArIG5vZGUudmFsdWU7XG4gIGlmIChub2RlLmdldEF0dHJpYnV0ZSgndmFsdWUnKSAhPT0gdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLiBUaGlzIGV2ZW50IGZpcmVzIGF0IGEgdGltZSB3aGVuIGl0J3MgcG9zc2libGUgdG9cbiAqIGNoYW5nZSB0aGUgZWxlbWVudCdzIHZhbHVlIHdpdGhvdXQgc2VlaW5nIGEgZmxpY2tlci5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBzZWxlY3RcbiAqL1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIF9hbGxvd1NpbXVsYXRlZFBhc3NUaHJvdWdoOiB0cnVlLFxuICBfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMsIGhhbmRsZUV2ZW50RnVuYztcbiAgICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGlmIChkb2VzQ2hhbmdlRXZlbnRCdWJibGUpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICB2YXIgaW5zdCA9IGdldFRhcmdldEluc3RGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlRXZlbnRGdW5jKSB7XG4gICAgICBoYW5kbGVFdmVudEZ1bmModG9wTGV2ZWxUeXBlLCB0YXJnZXROb2RlLCB0YXJnZXRJbnN0KTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIGJsdXJyaW5nLCBzZXQgdGhlIHZhbHVlIGF0dHJpYnV0ZSBmb3IgbnVtYmVyIGlucHV0c1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BCbHVyJykge1xuICAgICAgaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cih0YXJnZXRJbnN0LCB0YXJnZXROb2RlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbmdlRXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RPd25lcicpO1xuXG52YXIgUmVhY3RSZWYgPSB7fTtcblxuZnVuY3Rpb24gYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCB0eXBlb2YgZWxlbWVudCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBhdHRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5SZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzID0gZnVuY3Rpb24gKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICAvLyBJZiBlaXRoZXIgdGhlIG93bmVyIG9yIGEgYHJlZmAgaGFzIGNoYW5nZWQsIG1ha2Ugc3VyZSB0aGUgbmV3ZXN0IG93bmVyXG4gIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gIC8vIGhhcyBmb3Jnb3R0ZW4gdGhlIHJlZmVyZW5jZSB0byBgdGhpc2AuIFdlIHVzZSB0aGUgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIG9mIHRoZSBwdWJsaWMgdGhpcy5wcm9wcyBiZWNhdXNlIHRoZSBwb3N0IHByb2Nlc3NpbmcgY2Fubm90IGRldGVybWluZVxuICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgLy8gVE9ETzogU2hvdWxkIHRoaXMgZXZlbiBiZSBwb3NzaWJsZT8gVGhlIG93bmVyIGNhbm5vdCBjaGFuZ2UgYmVjYXVzZVxuICAvLyBpdCdzIGZvcmJpZGRlbiBieSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC4gVGhlIHJlZiBjYW4gY2hhbmdlXG4gIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAvLyBpcyBtYWRlLiBJdCBwcm9iYWJseSBiZWxvbmdzIHdoZXJlIHRoZSBrZXkgY2hlY2tpbmcgYW5kXG4gIC8vIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgaXMgZG9uZS5cblxuICB2YXIgcHJldlJlZiA9IG51bGw7XG4gIHZhciBwcmV2T3duZXIgPSBudWxsO1xuICBpZiAocHJldkVsZW1lbnQgIT09IG51bGwgJiYgdHlwZW9mIHByZXZFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHByZXZSZWYgPSBwcmV2RWxlbWVudC5yZWY7XG4gICAgcHJldk93bmVyID0gcHJldkVsZW1lbnQuX293bmVyO1xuICB9XG5cbiAgdmFyIG5leHRSZWYgPSBudWxsO1xuICB2YXIgbmV4dE93bmVyID0gbnVsbDtcbiAgaWYgKG5leHRFbGVtZW50ICE9PSBudWxsICYmIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBuZXh0UmVmID0gbmV4dEVsZW1lbnQucmVmO1xuICAgIG5leHRPd25lciA9IG5leHRFbGVtZW50Ll9vd25lcjtcbiAgfVxuXG4gIHJldHVybiBwcmV2UmVmICE9PSBuZXh0UmVmIHx8XG4gIC8vIElmIG93bmVyIGNoYW5nZXMgYnV0IHdlIGhhdmUgYW4gdW5jaGFuZ2VkIGZ1bmN0aW9uIHJlZiwgZG9uJ3QgdXBkYXRlIHJlZnNcbiAgdHlwZW9mIG5leHRSZWYgPT09ICdzdHJpbmcnICYmIG5leHRPd25lciAhPT0gcHJldk93bmVyO1xufTtcblxuUmVhY3RSZWYuZGV0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCB0eXBlb2YgZWxlbWVudCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBkZXRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgb3duZXIuXG4gKiBAZmluYWxcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE93bmVyKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QuYXR0YWNoUmVmID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmplY3QuZGV0YWNoUmVmID09PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBSZWFjdE93bmVycyBhcmUgY2FwYWJsZSBvZiBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gb3duZWQgY29tcG9uZW50cy5cbiAqXG4gKiBBbGwgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL2JlaW5nLy8gcmVmZXJlbmNlZCBieSBvd25lciBjb21wb25lbnRzLCBidXRcbiAqIG9ubHkgUmVhY3RPd25lciBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vcmVmZXJlbmNpbmcvLyBvd25lZCBjb21wb25lbnRzLlxuICogVGhlIG5hbWVkIHJlZmVyZW5jZSBpcyBrbm93biBhcyBhIFwicmVmXCIuXG4gKlxuICogUmVmcyBhcmUgYXZhaWxhYmxlIHdoZW4gbW91bnRlZCBhbmQgdXBkYXRlZCBkdXJpbmcgcmVjb25jaWxpYXRpb24uXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiAoXG4gKiAgICAgICAgIDxkaXYgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30+XG4gKiAgICAgICAgICAgPEN1c3RvbUNvbXBvbmVudCByZWY9XCJjdXN0b21cIiAvPlxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgICk7XG4gKiAgICAgfSxcbiAqICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmhhbmRsZUNsaWNrKCk7XG4gKiAgICAgfSxcbiAqICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmluaXRpYWxpemUoKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFJlZnMgc2hvdWxkIHJhcmVseSBiZSB1c2VkLiBXaGVuIHJlZnMgYXJlIHVzZWQsIHRoZXkgc2hvdWxkIG9ubHkgYmUgZG9uZSB0b1xuICogY29udHJvbCBkYXRhIHRoYXQgaXMgbm90IGhhbmRsZWQgYnkgUmVhY3QncyBkYXRhIGZsb3cuXG4gKlxuICogQGNsYXNzIFJlYWN0T3duZXJcbiAqL1xudmFyIFJlYWN0T3duZXIgPSB7XG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uIChjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAhaXNWYWxpZE93bmVyKG93bmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhZGRDb21wb25lbnRBc1JlZlRvKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCBiZSBhZGRpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyBgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLicpIDogX3Byb2RJbnZhcmlhbnQoJzExOScpIDogdm9pZCAwO1xuICAgIG93bmVyLmF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjb21wb25lbnQgYnkgcmVmIGZyb20gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgb2YgdGhlIHJlZiB0byByZW1vdmUuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRoZSByZWYgaXMgcmVjb3JkZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFpc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBZb3UgbWlnaHQgYmUgcmVtb3ZpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyBgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLicpIDogX3Byb2RJbnZhcmlhbnQoJzEyMCcpIDogdm9pZCAwO1xuICAgIHZhciBvd25lclB1YmxpY0luc3RhbmNlID0gb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAvLyBDaGVjayB0aGF0IGBjb21wb25lbnRgJ3Mgb3duZXIgaXMgc3RpbGwgYWxpdmUgYW5kIHRoYXQgYGNvbXBvbmVudGAgaXMgc3RpbGwgdGhlIGN1cnJlbnQgcmVmXG4gICAgLy8gYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0byBkZXRhY2ggdGhlIHJlZiBpZiBhbm90aGVyIGNvbXBvbmVudCBzdG9sZSBpdC5cbiAgICBpZiAob3duZXJQdWJsaWNJbnN0YW5jZSAmJiBvd25lclB1YmxpY0luc3RhbmNlLnJlZnNbcmVmXSA9PT0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpIHtcbiAgICAgIG93bmVyLmRldGFjaFJlZihyZWYpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE93bmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIHRoYXQgaXMgaW5qZWN0YWJsZSBpbnRvIGBFdmVudFBsdWdpbkh1YmAsIHRoYXQgc3BlY2lmaWVzIGFcbiAqIGRldGVybWluaXN0aWMgb3JkZXJpbmcgb2YgYEV2ZW50UGx1Z2luYHMuIEEgY29udmVuaWVudCB3YXkgdG8gcmVhc29uIGFib3V0XG4gKiBwbHVnaW5zLCB3aXRob3V0IGhhdmluZyB0byBwYWNrYWdlIGV2ZXJ5IG9uZSBvZiB0aGVtLiBUaGlzIGlzIGJldHRlciB0aGFuXG4gKiBoYXZpbmcgcGx1Z2lucyBiZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgaW5qZWN0ZWQgYmVjYXVzZVxuICogdGhhdCBvcmRlcmluZyB3b3VsZCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBwYWNrYWdpbmcgb3JkZXIuXG4gKiBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIG11c3Qgb2NjdXIgYmVmb3JlIGBTaW1wbGVFdmVudFBsdWdpbmAgc28gdGhhdFxuICogcHJldmVudGluZyBkZWZhdWx0IG9uIGV2ZW50cyBpcyBjb252ZW5pZW50IGluIGBTaW1wbGVFdmVudFBsdWdpbmAgaGFuZGxlcnMuXG4gKi9cblxudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gWydSZXNwb25kZXJFdmVudFBsdWdpbicsICdTaW1wbGVFdmVudFBsdWdpbicsICdUYXBFdmVudFBsdWdpbicsICdFbnRlckxlYXZlRXZlbnRQbHVnaW4nLCAnQ2hhbmdlRXZlbnRQbHVnaW4nLCAnU2VsZWN0RXZlbnRQbHVnaW4nLCAnQmVmb3JlSW5wdXRFdmVudFBsdWdpbiddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRFdmVudFBsdWdpbk9yZGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNNb3VzZUV2ZW50Jyk7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW91c2VFbnRlcicsXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcE1vdXNlT3V0JywgJ3RvcE1vdXNlT3ZlciddXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUxlYXZlJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wTW91c2VPdXQnLCAndG9wTW91c2VPdmVyJ11cbiAgfVxufTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogRm9yIGFsbW9zdCBldmVyeSBpbnRlcmFjdGlvbiB3ZSBjYXJlIGFib3V0LCB0aGVyZSB3aWxsIGJlIGJvdGggYSB0b3AtbGV2ZWxcbiAgICogYG1vdXNlb3ZlcmAgYW5kIGBtb3VzZW91dGAgZXZlbnQgdGhhdCBvY2N1cnMuIE9ubHkgdXNlIGBtb3VzZW91dGAgc28gdGhhdFxuICAgKiB3ZSBkbyBub3QgZXh0cmFjdCBkdXBsaWNhdGUgZXZlbnRzLiBIb3dldmVyLCBtb3ZpbmcgdGhlIG1vdXNlIGludG8gdGhlXG4gICAqIGJyb3dzZXIgZnJvbSBvdXRzaWRlIHdpbGwgbm90IGZpcmUgYSBgbW91c2VvdXRgIGV2ZW50LiBJbiB0aGlzIGNhc2UsIHdlIHVzZVxuICAgKiB0aGUgYG1vdXNlb3ZlcmAgdG9wLWxldmVsIGV2ZW50LlxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlT3ZlcicgJiYgKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRvcExldmVsVHlwZSAhPT0gJ3RvcE1vdXNlT3V0JyAmJiB0b3BMZXZlbFR5cGUgIT09ICd0b3BNb3VzZU92ZXInKSB7XG4gICAgICAvLyBNdXN0IG5vdCBiZSBhIG1vdXNlIGluIG9yIG1vdXNlIG91dCAtIGlnbm9yaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdpbjtcbiAgICBpZiAobmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgLy8gYG5hdGl2ZUV2ZW50VGFyZ2V0YCBpcyBwcm9iYWJseSBhIHdpbmRvdyBvYmplY3QuXG4gICAgICB3aW4gPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHdpbiA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luID0gd2luZG93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmcm9tO1xuICAgIHZhciB0bztcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VPdXQnKSB7XG4gICAgICBmcm9tID0gdGFyZ2V0SW5zdDtcbiAgICAgIHZhciByZWxhdGVkID0gbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQ7XG4gICAgICB0byA9IHJlbGF0ZWQgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVsYXRlZCkgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3ZpbmcgdG8gYSBub2RlIGZyb20gb3V0c2lkZSB0aGUgd2luZG93LlxuICAgICAgZnJvbSA9IG51bGw7XG4gICAgICB0byA9IHRhcmdldEluc3Q7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAvLyBOb3RoaW5nIHBlcnRhaW5zIHRvIG91ciBtYW5hZ2VkIGNvbXBvbmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZnJvbU5vZGUgPSBmcm9tID09IG51bGwgPyB3aW4gOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShmcm9tKTtcbiAgICB2YXIgdG9Ob2RlID0gdG8gPT0gbnVsbCA/IHdpbiA6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRvKTtcblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VMZWF2ZSwgZnJvbSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb21Ob2RlO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0b05vZGU7XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG9Ob2RlO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tTm9kZTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pO1xuXG4gICAgcmV0dXJuIFtsZWF2ZSwgZW50ZXJdO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG5cbnZhciBNVVNUX1VTRV9QUk9QRVJUWSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWTtcbnZhciBIQVNfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRTtcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG5cbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChuZXcgUmVnRXhwKCdeKGRhdGF8YXJpYSktWycgKyBET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpKSxcbiAgUHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhY2NlcHQ6IDAsXG4gICAgYWNjZXB0Q2hhcnNldDogMCxcbiAgICBhY2Nlc3NLZXk6IDAsXG4gICAgYWN0aW9uOiAwLFxuICAgIGFsbG93RnVsbFNjcmVlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IDAsXG4gICAgYWx0OiAwLFxuICAgIC8vIHNwZWNpZmllcyB0YXJnZXQgY29udGV4dCBmb3IgbGlua3Mgd2l0aCBgcHJlbG9hZGAgdHlwZVxuICAgIGFzOiAwLFxuICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvQ29tcGxldGU6IDAsXG4gICAgLy8gYXV0b0ZvY3VzIGlzIHBvbHlmaWxsZWQvbm9ybWFsaXplZCBieSBBdXRvRm9jdXNVdGlsc1xuICAgIC8vIGF1dG9Gb2N1czogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNhcHR1cmU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNlbGxQYWRkaW5nOiAwLFxuICAgIGNlbGxTcGFjaW5nOiAwLFxuICAgIGNoYXJTZXQ6IDAsXG4gICAgY2hhbGxlbmdlOiAwLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2l0ZTogMCxcbiAgICBjbGFzc0lEOiAwLFxuICAgIGNsYXNzTmFtZTogMCxcbiAgICBjb2xzOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiAwLFxuICAgIGNvbnRlbnQ6IDAsXG4gICAgY29udGVudEVkaXRhYmxlOiAwLFxuICAgIGNvbnRleHRNZW51OiAwLFxuICAgIGNvbnRyb2xzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjb29yZHM6IDAsXG4gICAgY3Jvc3NPcmlnaW46IDAsXG4gICAgZGF0YTogMCwgLy8gRm9yIGA8b2JqZWN0IC8+YCBhY3RzIGFzIGBzcmNgLlxuICAgIGRhdGVUaW1lOiAwLFxuICAgICdkZWZhdWx0JzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZGVmZXI6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRpcjogMCxcbiAgICBkaXNhYmxlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZG93bmxvYWQ6IEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsXG4gICAgZHJhZ2dhYmxlOiAwLFxuICAgIGVuY1R5cGU6IDAsXG4gICAgZm9ybTogMCxcbiAgICBmb3JtQWN0aW9uOiAwLFxuICAgIGZvcm1FbmNUeXBlOiAwLFxuICAgIGZvcm1NZXRob2Q6IDAsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGZvcm1UYXJnZXQ6IDAsXG4gICAgZnJhbWVCb3JkZXI6IDAsXG4gICAgaGVhZGVyczogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaGlkZGVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBoaWdoOiAwLFxuICAgIGhyZWY6IDAsXG4gICAgaHJlZkxhbmc6IDAsXG4gICAgaHRtbEZvcjogMCxcbiAgICBodHRwRXF1aXY6IDAsXG4gICAgaWNvbjogMCxcbiAgICBpZDogMCxcbiAgICBpbnB1dE1vZGU6IDAsXG4gICAgaW50ZWdyaXR5OiAwLFxuICAgIGlzOiAwLFxuICAgIGtleVBhcmFtczogMCxcbiAgICBrZXlUeXBlOiAwLFxuICAgIGtpbmQ6IDAsXG4gICAgbGFiZWw6IDAsXG4gICAgbGFuZzogMCxcbiAgICBsaXN0OiAwLFxuICAgIGxvb3A6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGxvdzogMCxcbiAgICBtYW5pZmVzdDogMCxcbiAgICBtYXJnaW5IZWlnaHQ6IDAsXG4gICAgbWFyZ2luV2lkdGg6IDAsXG4gICAgbWF4OiAwLFxuICAgIG1heExlbmd0aDogMCxcbiAgICBtZWRpYTogMCxcbiAgICBtZWRpYUdyb3VwOiAwLFxuICAgIG1ldGhvZDogMCxcbiAgICBtaW46IDAsXG4gICAgbWluTGVuZ3RoOiAwLFxuICAgIC8vIENhdXRpb247IGBvcHRpb24uc2VsZWN0ZWRgIGlzIG5vdCB1cGRhdGVkIGlmIGBzZWxlY3QubXVsdGlwbGVgIGlzXG4gICAgLy8gZGlzYWJsZWQgd2l0aCBgcmVtb3ZlQXR0cmlidXRlYC5cbiAgICBtdWx0aXBsZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBuYW1lOiAwLFxuICAgIG5vbmNlOiAwLFxuICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wdGltdW06IDAsXG4gICAgcGF0dGVybjogMCxcbiAgICBwbGFjZWhvbGRlcjogMCxcbiAgICBwbGF5c0lubGluZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcG9zdGVyOiAwLFxuICAgIHByZWxvYWQ6IDAsXG4gICAgcHJvZmlsZTogMCxcbiAgICByYWRpb0dyb3VwOiAwLFxuICAgIHJlYWRPbmx5OiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZWZlcnJlclBvbGljeTogMCxcbiAgICByZWw6IDAsXG4gICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJldmVyc2VkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByb2xlOiAwLFxuICAgIHJvd3M6IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHJvd1NwYW46IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgIHNhbmRib3g6IDAsXG4gICAgc2NvcGU6IDAsXG4gICAgc2NvcGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzY3JvbGxpbmc6IDAsXG4gICAgc2VhbWxlc3M6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNlbGVjdGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNoYXBlOiAwLFxuICAgIHNpemU6IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNpemVzOiAwLFxuICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNwZWxsQ2hlY2s6IDAsXG4gICAgc3JjOiAwLFxuICAgIHNyY0RvYzogMCxcbiAgICBzcmNMYW5nOiAwLFxuICAgIHNyY1NldDogMCxcbiAgICBzdGFydDogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc3RlcDogMCxcbiAgICBzdHlsZTogMCxcbiAgICBzdW1tYXJ5OiAwLFxuICAgIHRhYkluZGV4OiAwLFxuICAgIHRhcmdldDogMCxcbiAgICB0aXRsZTogMCxcbiAgICAvLyBTZXR0aW5nIC50eXBlIHRocm93cyBvbiBub24tPGlucHV0PiB0YWdzXG4gICAgdHlwZTogMCxcbiAgICB1c2VNYXA6IDAsXG4gICAgdmFsdWU6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgd21vZGU6IDAsXG4gICAgd3JhcDogMCxcblxuICAgIC8qKlxuICAgICAqIFJERmEgUHJvcGVydGllc1xuICAgICAqL1xuICAgIGFib3V0OiAwLFxuICAgIGRhdGF0eXBlOiAwLFxuICAgIGlubGlzdDogMCxcbiAgICBwcmVmaXg6IDAsXG4gICAgLy8gcHJvcGVydHkgaXMgYWxzbyBzdXBwb3J0ZWQgZm9yIE9wZW5HcmFwaCBpbiBtZXRhIHRhZ3MuXG4gICAgcHJvcGVydHk6IDAsXG4gICAgcmVzb3VyY2U6IDAsXG4gICAgJ3R5cGVvZic6IDAsXG4gICAgdm9jYWI6IDAsXG5cbiAgICAvKipcbiAgICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIC8vIGF1dG9DYXBpdGFsaXplIGFuZCBhdXRvQ29ycmVjdCBhcmUgc3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yXG4gICAgLy8ga2V5Ym9hcmQgaGludHMuXG4gICAgYXV0b0NhcGl0YWxpemU6IDAsXG4gICAgYXV0b0NvcnJlY3Q6IDAsXG4gICAgLy8gYXV0b1NhdmUgYWxsb3dzIFdlYktpdC9CbGluayB0byBwZXJzaXN0IHZhbHVlcyBvZiBpbnB1dCBmaWVsZHMgb24gcGFnZSByZWxvYWRzXG4gICAgYXV0b1NhdmU6IDAsXG4gICAgLy8gY29sb3IgaXMgZm9yIFNhZmFyaSBtYXNrLWljb24gbGlua1xuICAgIGNvbG9yOiAwLFxuICAgIC8vIGl0ZW1Qcm9wLCBpdGVtU2NvcGUsIGl0ZW1UeXBlIGFyZSBmb3JcbiAgICAvLyBNaWNyb2RhdGEgc3VwcG9ydC4gU2VlIGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIGl0ZW1Qcm9wOiAwLFxuICAgIGl0ZW1TY29wZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaXRlbVR5cGU6IDAsXG4gICAgLy8gaXRlbUlEIGFuZCBpdGVtUmVmIGFyZSBmb3IgTWljcm9kYXRhIHN1cHBvcnQgYXMgd2VsbCBidXRcbiAgICAvLyBvbmx5IHNwZWNpZmllZCBpbiB0aGUgV0hBVFdHIHNwZWMgZG9jdW1lbnQuIFNlZVxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL21pY3JvZGF0YS5odG1sI21pY3JvZGF0YS1kb20tYXBpXG4gICAgaXRlbUlEOiAwLFxuICAgIGl0ZW1SZWY6IDAsXG4gICAgLy8gcmVzdWx0cyBzaG93IGxvb2tpbmcgZ2xhc3MgaWNvbiBhbmQgcmVjZW50IHNlYXJjaGVzIG9uIGlucHV0XG4gICAgLy8gc2VhcmNoIGZpZWxkcyBpbiBXZWJLaXQvQmxpbmtcbiAgICByZXN1bHRzOiAwLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgc3BlY2lmaWVzIHNlY3VyaXR5IHJlc3RyaWN0aW9ucyBvbiBhbiBpZnJhbWVcbiAgICAvLyBhcyBhbiBhbHRlcm5hdGl2ZSB0byB0aGUgc2FuZGJveCBhdHRyaWJ1dGUgb24gSUU8MTBcbiAgICBzZWN1cml0eTogMCxcbiAgICAvLyBJRS1vbmx5IGF0dHJpYnV0ZSB0aGF0IGNvbnRyb2xzIGZvY3VzIGJlaGF2aW9yXG4gICAgdW5zZWxlY3RhYmxlOiAwXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbiAgfSxcbiAgRE9NUHJvcGVydHlOYW1lczoge30sXG4gIERPTU11dGF0aW9uTWV0aG9kczoge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub2RlLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgLy8gTnVtYmVyIGlucHV0cyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgZHVlIHRvIHNvbWUgZWRnZSBjYXNlcyBpblxuICAgICAgLy8gQ2hyb21lLiBMZXQgZXZlcnl0aGluZyBlbHNlIGFzc2lnbiB0aGUgdmFsdWUgYXR0cmlidXRlIGFzIG5vcm1hbC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI1MyNpc3N1ZWNvbW1lbnQtMjM2MDc0MzI2XG4gICAgICBpZiAobm9kZS50eXBlICE9PSAnbnVtYmVyJyB8fCBub2RlLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudmFsaWRpdHkgJiYgIW5vZGUudmFsaWRpdHkuYmFkSW5wdXQgJiYgbm9kZS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IG5vZGUpIHtcbiAgICAgICAgLy8gRG9uJ3QgYXNzaWduIGFuIGF0dHJpYnV0ZSBpZiB2YWxpZGF0aW9uIHJlcG9ydHMgYmFkXG4gICAgICAgIC8vIGlucHV0LiBDaHJvbWUgd2lsbCBjbGVhciB0aGUgdmFsdWUuIEFkZGl0aW9uYWxseSwgZG9uJ3RcbiAgICAgICAgLy8gb3BlcmF0ZSBvbiBpbnB1dHMgdGhhdCBoYXZlIGZvY3VzLCBvdGhlcndpc2UgQ2hyb21lIG1pZ2h0XG4gICAgICAgIC8vIHN0cmlwIG9mZiB0cmFpbGluZyBkZWNpbWFsIHBsYWNlcyBhbmQgY2F1c2UgdGhlIHVzZXInc1xuICAgICAgICAvLyBjdXJzb3IgcG9zaXRpb24gdG8ganVtcCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBpbnB1dC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW4gUmVhY3RET01JbnB1dCwgd2UgaGF2ZSBhbiBvbkJsdXIgZXZlbnQgdGhhdCB3aWxsIHRyaWdnZXJcbiAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiBhZ2FpbiB3aGVuIGZvY3VzIGlzIGxvc3QuXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUHJvcGVydHlDb25maWc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlY29uY2lsZXIgdGhhdCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuIFRPRE86IFRoZXNlIGNhbGxlcnMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgdG8gYXZvaWQgdGhlXG4gKiBuZWVkIGZvciB0aGlzIGluamVjdGlvbi5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMsXG5cbiAgcmVwbGFjZU5vZGVXaXRoTWFya3VwOiBET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoJ2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCcpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBEYW5nZXIgPSB7XG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBfcHJvZEludmFyaWFudCgnNTYnKSA6IHZvaWQgMDtcbiAgICAhbWFya3VwID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogX3Byb2RJbnZhcmlhbnQoJzU3JykgOiB2b2lkIDA7XG4gICAgIShvbGRDaGlsZC5ub2RlTmFtZSAhPT0gJ0hUTUwnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlIDxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgYW5kL29yIHNsb3cuIElmIHlvdSB3YW50IHRvIHJlbmRlciB0byB0aGUgcm9vdCB5b3UgbXVzdCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkuJykgOiBfcHJvZEludmFyaWFudCgnNTgnKSA6IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBET01MYXp5VHJlZS5yZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGRDaGlsZCwgbWFya3VwKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFuZ2VyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBmYi13d3cvdW5zYWZlLWh0bWwqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJy4vY3JlYXRlQXJyYXlGcm9tTWl4ZWQnKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZSgnLi9nZXRNYXJrdXBXcmFwJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBEdW1teSBjb250YWluZXIgdXNlZCB0byByZW5kZXIgYWxsIG1hcmt1cC5cbiAqL1xudmFyIGR1bW15Tm9kZSA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDogbnVsbDtcblxuLyoqXG4gKiBQYXR0ZXJuIHVzZWQgYnkgYGdldE5vZGVOYW1lYC5cbiAqL1xudmFyIG5vZGVOYW1lUGF0dGVybiA9IC9eXFxzKjwoXFx3KykvO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHZhciBub2RlTmFtZU1hdGNoID0gbWFya3VwLm1hdGNoKG5vZGVOYW1lUGF0dGVybik7XG4gIHJldHVybiBub2RlTmFtZU1hdGNoICYmIG5vZGVOYW1lTWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG5vZGVzIHJlbmRlcmVkIGZyb20gdGhlIHN1cHBsaWVkIG1hcmt1cC4gVGhlXG4gKiBvcHRpb25hbGx5IHN1cHBsaWVkIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGZvciBlYWNoXG4gKiA8c2NyaXB0PiBlbGVtZW50IHRoYXQgaXMgcmVuZGVyZWQuIElmIG5vIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIGlzIHN1cHBsaWVkLFxuICogYW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiBhbnkgPHNjcmlwdD4gZWxlbWVudHMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgQSBzdHJpbmcgb2YgdmFsaWQgSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gaGFuZGxlU2NyaXB0IEludm9rZWQgb25jZSBmb3IgZWFjaCByZW5kZXJlZCA8c2NyaXB0Pi5cbiAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnR8RE9NVGV4dE5vZGU+fSBBbiBhcnJheSBvZiByZW5kZXJlZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgaGFuZGxlU2NyaXB0KSB7XG4gIHZhciBub2RlID0gZHVtbXlOb2RlO1xuICAhISFkdW1teU5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlTm9kZXNGcm9tTWFya3VwIGR1bW15IG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcblxuICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuICBpZiAod3JhcCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gd3JhcFsxXSArIG1hcmt1cCArIHdyYXBbMl07XG5cbiAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICB3aGlsZSAod3JhcERlcHRoLS0pIHtcbiAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gIH1cblxuICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAhaGFuZGxlU2NyaXB0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNyZWF0ZUFycmF5RnJvbU1peGVkKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcbiAgfVxuXG4gIHZhciBub2RlcyA9IEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKTtcbiAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7XG4gICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2VycyBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdFxuICAvLyBpbiBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKHR5cGVvZiBvYmouY2FsbGVlICE9PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgY2FuXFwndCBiZSBgYXJndW1lbnRzYC4gVXNlIHJlc3QgcGFyYW1zICcgKyAnKGZ1bmN0aW9uKC4uLmFyZ3MpIHt9KSBvciBBcnJheS5mcm9tKCkgaW5zdGVhZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiYgKFxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG4gICAgLy8gcXVhY2tzIGxpa2UgYW4gYXJyYXlcbiAgICAnbGVuZ3RoJyBpbiBvYmogJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoXG4gICAgLy8gYSByZWFsIGFycmF5XG4gICAgQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgLy8gYXJndW1lbnRzXG4gICAgJ2NhbGxlZScgaW4gb2JqIHx8XG4gICAgLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAnaXRlbScgaW4gb2JqKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCAqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbi8qKlxuICogT3BlcmF0aW9ucyB1c2VkIHRvIHByb2Nlc3MgdXBkYXRlcyB0byBET00gbm9kZXMuXG4gKi9cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHtcbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IGZ1bmN0aW9uIChwYXJlbnRJbnN0LCB1cGRhdGVzKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShwYXJlbnRJbnN0KTtcbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXMobm9kZSwgdXBkYXRlcyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JRE9wZXJhdGlvbnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbi8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgQXV0b0ZvY3VzVXRpbHMgPSByZXF1aXJlKCcuL0F1dG9Gb2N1c1V0aWxzJyk7XG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbnZhciBET01OYW1lc3BhY2VzID0gcmVxdWlyZSgnLi9ET01OYW1lc3BhY2VzJyk7XG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudEZsYWdzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdERPTUlucHV0ID0gcmVxdWlyZSgnLi9SZWFjdERPTUlucHV0Jyk7XG52YXIgUmVhY3RET01PcHRpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NT3B0aW9uJyk7XG52YXIgUmVhY3RET01TZWxlY3QgPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0Jyk7XG52YXIgUmVhY3RET01UZXh0YXJlYSA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0YXJlYScpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHJlcXVpcmUoJy4vUmVhY3RNdWx0aUNoaWxkJyk7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbnZhciBpbnB1dFZhbHVlVHJhY2tpbmcgPSByZXF1aXJlKCcuL2lucHV0VmFsdWVUcmFja2luZycpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIEZsYWdzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcbnZhciBkZWxldGVMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyO1xudmFyIGdldE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZTtcbnZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geyBzdHJpbmc6IHRydWUsIG51bWJlcjogdHJ1ZSB9O1xuXG52YXIgU1RZTEUgPSAnc3R5bGUnO1xudmFyIEhUTUwgPSAnX19odG1sJztcbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgY2hpbGRyZW46IG51bGwsXG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiBudWxsLFxuICBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmc6IG51bGxcbn07XG5cbi8vIE5vZGUgdHlwZSBmb3IgZG9jdW1lbnQgZnJhZ21lbnRzIChOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpLlxudmFyIERPQ19GUkFHTUVOVF9UWVBFID0gMTE7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgdmFyIG93bmVyID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIFRoaXMgRE9NIG5vZGUgd2FzIHJlbmRlcmVkIGJ5IGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZnJpZW5kbHlTdHJpbmdpZnkob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHJldHVybiAnWycgKyBvYmoubWFwKGZyaWVuZGx5U3RyaW5naWZ5KS5qb2luKCcsICcpICsgJ10nO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFpcnMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICB2YXIga2V5RXNjYXBlZCA9IC9eW2EteiRfXVtcXHckX10qJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSk7XG4gICAgICAgICAgcGFpcnMucHVzaChrZXlFc2NhcGVkICsgJzogJyArIGZyaWVuZGx5U3RyaW5naWZ5KG9ialtrZXldKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAneycgKyBwYWlycy5qb2luKCcsICcpICsgJ30nO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gJ1tmdW5jdGlvbiBvYmplY3RdJztcbiAgfVxuICAvLyBEaWZmZXJzIGZyb20gSlNPTi5zdHJpbmdpZnkgaW4gdGhhdCB1bmRlZmluZWQgYmVjYXVzZSB1bmRlZmluZWQgYW5kIHRoYXRcbiAgLy8gaW5mIGFuZCBuYW4gZG9uJ3QgYmVjb21lIG51bGxcbiAgcmV0dXJuIFN0cmluZyhvYmopO1xufVxuXG52YXIgc3R5bGVNdXRhdGlvbldhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFN0eWxlKHN0eWxlMSwgc3R5bGUyLCBjb21wb25lbnQpIHtcbiAgaWYgKHN0eWxlMSA9PSBudWxsIHx8IHN0eWxlMiA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzaGFsbG93RXF1YWwoc3R5bGUxLCBzdHlsZTIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuX3RhZztcbiAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gIHZhciBvd25lck5hbWU7XG4gIGlmIChvd25lcikge1xuICAgIG93bmVyTmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgfVxuXG4gIHZhciBoYXNoID0gb3duZXJOYW1lICsgJ3wnICsgY29tcG9uZW50TmFtZTtcblxuICBpZiAoc3R5bGVNdXRhdGlvbldhcm5pbmcuaGFzT3duUHJvcGVydHkoaGFzaCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdHlsZU11dGF0aW9uV2FybmluZ1toYXNoXSA9IHRydWU7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgJXNgIHdhcyBwYXNzZWQgYSBzdHlsZSBvYmplY3QgdGhhdCBoYXMgcHJldmlvdXNseSBiZWVuIG11dGF0ZWQuICcgKyAnTXV0YXRpbmcgYHN0eWxlYCBpcyBkZXByZWNhdGVkLiBDb25zaWRlciBjbG9uaW5nIGl0IGJlZm9yZWhhbmQuIENoZWNrICcgKyAndGhlIGByZW5kZXJgICVzLiBQcmV2aW91cyBzdHlsZTogJXMuIE11dGF0ZWQgc3R5bGU6ICVzLicsIGNvbXBvbmVudE5hbWUsIG93bmVyID8gJ29mIGAnICsgb3duZXJOYW1lICsgJ2AnIDogJ3VzaW5nIDwnICsgY29tcG9uZW50TmFtZSArICc+JywgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUxKSwgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUyKSkgOiB2b2lkIDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wc1xuICovXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICBpZiAodm9pZEVsZW1lbnRUYWdzW2NvbXBvbmVudC5fdGFnXSkge1xuICAgICEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCAmJiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcyBpcyBhIHZvaWQgZWxlbWVudCB0YWcgYW5kIG11c3QgbmVpdGhlciBoYXZlIGBjaGlsZHJlbmAgbm9yIHVzZSBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLiVzJywgY29tcG9uZW50Ll90YWcsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyID8gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAnICsgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIuZ2V0TmFtZSgpICsgJy4nIDogJycpIDogX3Byb2RJbnZhcmlhbnQoJzEzNycsIGNvbXBvbmVudC5fdGFnLCBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lciA/ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJyArIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJyA6ICcnKSA6IHZvaWQgMDtcbiAgfVxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiBfcHJvZEludmFyaWFudCgnNjAnKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiYgSFRNTCBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sIGZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogX3Byb2RJbnZhcmlhbnQoJzYxJykgOiB2b2lkIDA7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5pbm5lckhUTUwgPT0gbnVsbCwgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5zdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgfHwgIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLCAnQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLm9uRm9jdXNJbiA9PSBudWxsICYmIHByb3BzLm9uRm9jdXNPdXQgPT0gbnVsbCwgJ1JlYWN0IHVzZXMgb25Gb2N1cyBhbmQgb25CbHVyIGluc3RlYWQgb2Ygb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0LiAnICsgJ0FsbCBSZWFjdCBldmVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gYnViYmxlLCBzbyBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQgJyArICdhcmUgbm90IG5lZWRlZC9zdXBwb3J0ZWQgYnkgUmVhY3QuJykgOiB2b2lkIDA7XG4gIH1cbiAgIShwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiB1c2luZyBKU1guJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiBfcHJvZEludmFyaWFudCgnNjInLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGVucXVldWVQdXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lciwgdHJhbnNhY3Rpb24pIHtcbiAgaWYgKHRyYW5zYWN0aW9uIGluc3RhbmNlb2YgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIElFOCBoYXMgbm8gQVBJIGZvciBldmVudCBjYXB0dXJpbmcgYW5kIHRoZSBgb25TY3JvbGxgIGV2ZW50IGRvZXNuJ3RcbiAgICAvLyBidWJibGUuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocmVnaXN0cmF0aW9uTmFtZSAhPT0gJ29uU2Nyb2xsJyB8fCBpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSwgXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50XCIpIDogdm9pZCAwO1xuICB9XG4gIHZhciBjb250YWluZXJJbmZvID0gaW5zdC5faG9zdENvbnRhaW5lckluZm87XG4gIHZhciBpc0RvY3VtZW50RnJhZ21lbnQgPSBjb250YWluZXJJbmZvLl9ub2RlICYmIGNvbnRhaW5lckluZm8uX25vZGUubm9kZVR5cGUgPT09IERPQ19GUkFHTUVOVF9UWVBFO1xuICB2YXIgZG9jID0gaXNEb2N1bWVudEZyYWdtZW50ID8gY29udGFpbmVySW5mby5fbm9kZSA6IGNvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGRvYyk7XG4gIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocHV0TGlzdGVuZXIsIHtcbiAgICBpbnN0OiBpbnN0LFxuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IHJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwdXRMaXN0ZW5lcigpIHtcbiAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzO1xuICBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcihsaXN0ZW5lclRvUHV0Lmluc3QsIGxpc3RlbmVyVG9QdXQucmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXJUb1B1dC5saXN0ZW5lcik7XG59XG5cbmZ1bmN0aW9uIGlucHV0UG9zdE1vdW50KCkge1xuICB2YXIgaW5zdCA9IHRoaXM7XG4gIFJlYWN0RE9NSW5wdXQucG9zdE1vdW50V3JhcHBlcihpbnN0KTtcbn1cblxuZnVuY3Rpb24gdGV4dGFyZWFQb3N0TW91bnQoKSB7XG4gIHZhciBpbnN0ID0gdGhpcztcbiAgUmVhY3RET01UZXh0YXJlYS5wb3N0TW91bnRXcmFwcGVyKGluc3QpO1xufVxuXG5mdW5jdGlvbiBvcHRpb25Qb3N0TW91bnQoKSB7XG4gIHZhciBpbnN0ID0gdGhpcztcbiAgUmVhY3RET01PcHRpb24ucG9zdE1vdW50V3JhcHBlcihpbnN0KTtcbn1cblxudmFyIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2ID0gZW1wdHlGdW5jdGlvbjtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICB2YXIgaGFzRXhpc3RpbmdDb250ZW50ID0gdGhpcy5fY29udGVudERlYnVnSUQgIT0gbnVsbDtcbiAgICB2YXIgZGVidWdJRCA9IHRoaXMuX2RlYnVnSUQ7XG4gICAgLy8gVGhpcyBJRCByZXByZXNlbnRzIHRoZSBpbmxpbmVkIGNoaWxkIHRoYXQgaGFzIG5vIGJhY2tpbmcgaW5zdGFuY2U6XG4gICAgdmFyIGNvbnRlbnREZWJ1Z0lEID0gLWRlYnVnSUQ7XG5cbiAgICBpZiAoY29udGVudCA9PSBudWxsKSB7XG4gICAgICBpZiAoaGFzRXhpc3RpbmdDb250ZW50KSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQodGhpcy5fY29udGVudERlYnVnSUQpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhbGlkYXRlRE9NTmVzdGluZyhudWxsLCBTdHJpbmcoY29udGVudCksIHRoaXMsIHRoaXMuX2FuY2VzdG9ySW5mbyk7XG4gICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBjb250ZW50RGVidWdJRDtcbiAgICBpZiAoaGFzRXhpc3RpbmdDb250ZW50KSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVVcGRhdGVDb21wb25lbnQoY29udGVudERlYnVnSUQsIGNvbnRlbnQpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVXBkYXRlQ29tcG9uZW50KGNvbnRlbnREZWJ1Z0lEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlTW91bnRDb21wb25lbnQoY29udGVudERlYnVnSUQsIGNvbnRlbnQsIGRlYnVnSUQpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTW91bnRDb21wb25lbnQoY29udGVudERlYnVnSUQpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4oZGVidWdJRCwgW2NvbnRlbnREZWJ1Z0lEXSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBUaGVyZSBhcmUgc28gbWFueSBtZWRpYSBldmVudHMsIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3Rcbi8vIG1haW50YWluIGEgbGlzdCByYXRoZXIgdGhhbiBjcmVhdGUgYSBgdHJhcEJ1YmJsZWRFdmVudGAgZm9yIGVhY2hcbnZhciBtZWRpYUV2ZW50cyA9IHtcbiAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICB0b3BFbXB0aWVkOiAnZW1wdGllZCcsXG4gIHRvcEVuY3J5cHRlZDogJ2VuY3J5cHRlZCcsXG4gIHRvcEVuZGVkOiAnZW5kZWQnLFxuICB0b3BFcnJvcjogJ2Vycm9yJyxcbiAgdG9wTG9hZGVkRGF0YTogJ2xvYWRlZGRhdGEnLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgdG9wTG9hZFN0YXJ0OiAnbG9hZHN0YXJ0JyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gIHRvcFdhaXRpbmc6ICd3YWl0aW5nJ1xufTtcblxuZnVuY3Rpb24gdHJhY2tJbnB1dFZhbHVlKCkge1xuICBpbnB1dFZhbHVlVHJhY2tpbmcudHJhY2sodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnRzTG9jYWwoKSB7XG4gIHZhciBpbnN0ID0gdGhpcztcbiAgLy8gSWYgYSBjb21wb25lbnQgcmVuZGVycyB0byBudWxsIG9yIGlmIGFub3RoZXIgY29tcG9uZW50IGZhdGFscyBhbmQgY2F1c2VzXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgdHJlZSB0byBiZSBjb3JydXB0ZWQsIGBub2RlYCBoZXJlIGNhbiBiZSBudWxsLlxuICAhaW5zdC5fcm9vdE5vZGVJRCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHMnKSA6IF9wcm9kSW52YXJpYW50KCc2MycpIDogdm9pZCAwO1xuICB2YXIgbm9kZSA9IGdldE5vZGUoaW5zdCk7XG4gICFub2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXBCdWJibGVkRXZlbnQoLi4uKTogUmVxdWlyZXMgbm9kZSB0byBiZSByZW5kZXJlZC4nKSA6IF9wcm9kSW52YXJpYW50KCc2NCcpIDogdm9pZCAwO1xuXG4gIHN3aXRjaCAoaW5zdC5fdGFnKSB7XG4gICAgY2FzZSAnaWZyYW1lJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wTG9hZCcsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbXTtcbiAgICAgIC8vIENyZWF0ZSBsaXN0ZW5lciBmb3IgZWFjaCBtZWRpYSBldmVudFxuICAgICAgZm9yICh2YXIgZXZlbnQgaW4gbWVkaWFFdmVudHMpIHtcbiAgICAgICAgaWYgKG1lZGlhRXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50KSkge1xuICAgICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMucHVzaChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChldmVudCwgbWVkaWFFdmVudHNbZXZlbnRdLCBub2RlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BFcnJvcicsICdlcnJvcicsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ltZyc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BFcnJvcicsICdlcnJvcicsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wTG9hZCcsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZm9ybSc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BSZXNldCcsICdyZXNldCcsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wU3VibWl0JywgJ3N1Ym1pdCcsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEludmFsaWQnLCAnaW52YWxpZCcsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyKCkge1xuICBSZWFjdERPTVNlbGVjdC5wb3N0VXBkYXRlV3JhcHBlcih0aGlzKTtcbn1cblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsLWNhc2UgdGFncy5cblxudmFyIG9taXR0ZWRDbG9zZVRhZ3MgPSB7XG4gIGFyZWE6IHRydWUsXG4gIGJhc2U6IHRydWUsXG4gIGJyOiB0cnVlLFxuICBjb2w6IHRydWUsXG4gIGVtYmVkOiB0cnVlLFxuICBocjogdHJ1ZSxcbiAgaW1nOiB0cnVlLFxuICBpbnB1dDogdHJ1ZSxcbiAga2V5Z2VuOiB0cnVlLFxuICBsaW5rOiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBwYXJhbTogdHJ1ZSxcbiAgc291cmNlOiB0cnVlLFxuICB0cmFjazogdHJ1ZSxcbiAgd2JyOiB0cnVlXG4gIC8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG59O1xuXG52YXIgbmV3bGluZUVhdGluZ1RhZ3MgPSB7XG4gIGxpc3Rpbmc6IHRydWUsXG4gIHByZTogdHJ1ZSxcbiAgdGV4dGFyZWE6IHRydWVcbn07XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3MgY2Fubm90IGhhdmUgY2hpbGRyZW4uIFRoaXMgaGFzIHRoZSBzYW1lIHB1cnBvc2UgYXNcbi8vIGBvbWl0dGVkQ2xvc2VUYWdzYCBleGNlcHQgdGhhdCBgbWVudWl0ZW1gIHNob3VsZCBzdGlsbCBoYXZlIGl0cyBjbG9zaW5nIHRhZy5cblxudmFyIHZvaWRFbGVtZW50VGFncyA9IF9hc3NpZ24oe1xuICBtZW51aXRlbTogdHJ1ZVxufSwgb21pdHRlZENsb3NlVGFncyk7XG5cbi8vIFdlIGFjY2VwdCBhbnkgdGFnIHRvIGJlIHJlbmRlcmVkIGJ1dCBzaW5jZSB0aGlzIGdldHMgaW5qZWN0ZWQgaW50byBhcmJpdHJhcnlcbi8vIEhUTUwsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgaXQncyBhIHNhZmUgdGFnLlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVxuXG52YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87IC8vIFNpbXBsaWZpZWQgc3Vic2V0XG52YXIgdmFsaWRhdGVkVGFnQ2FjaGUgPSB7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpIHtcbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG4gICAgIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IF9wcm9kSW52YXJpYW50KCc2NScsIHRhZykgOiB2b2lkIDA7XG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgcmV0dXJuIHRhZ05hbWUuaW5kZXhPZignLScpID49IDAgfHwgcHJvcHMuaXMgIT0gbnVsbDtcbn1cblxudmFyIGdsb2JhbElkQ291bnRlciA9IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZWFjdCBjbGFzcyB0aGF0IGlzIGlkZW1wb3RlbnQgYW5kIGNhcGFibGUgb2YgY29udGFpbmluZyBvdGhlclxuICogUmVhY3QgY29tcG9uZW50cy4gSXQgYWNjZXB0cyBldmVudCBsaXN0ZW5lcnMgYW5kIERPTSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gKiB2YWxpZCBhY2NvcmRpbmcgdG8gYERPTVByb3BlcnR5YC5cbiAqXG4gKiAgLSBFdmVudCBsaXN0ZW5lcnM6IGBvbkNsaWNrYCwgYG9uTW91c2VEb3duYCwgZXRjLlxuICogIC0gRE9NIHByb3BlcnRpZXM6IGBjbGFzc05hbWVgLCBgbmFtZWAsIGB0aXRsZWAsIGV0Yy5cbiAqXG4gKiBUaGUgYHN0eWxlYCBwcm9wZXJ0eSBmdW5jdGlvbnMgZGlmZmVyZW50bHkgZnJvbSB0aGUgRE9NIEFQSS4gSXQgYWNjZXB0cyBhblxuICogb2JqZWN0IG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdE11bHRpQ2hpbGRcbiAqL1xuZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQoZWxlbWVudCkge1xuICB2YXIgdGFnID0gZWxlbWVudC50eXBlO1xuICB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpO1xuICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuX3RhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICB0aGlzLl9uYW1lc3BhY2VVUkkgPSBudWxsO1xuICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IG51bGw7XG4gIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgdGhpcy5faG9zdE5vZGUgPSBudWxsO1xuICB0aGlzLl9ob3N0UGFyZW50ID0gbnVsbDtcbiAgdGhpcy5fcm9vdE5vZGVJRCA9IDA7XG4gIHRoaXMuX2RvbUlEID0gMDtcbiAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBudWxsO1xuICB0aGlzLl93cmFwcGVyU3RhdGUgPSBudWxsO1xuICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuICB0aGlzLl9mbGFncyA9IDA7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdGhpcy5fYW5jZXN0b3JJbmZvID0gbnVsbDtcbiAgICBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldi5jYWxsKHRoaXMsIG51bGwpO1xuICB9XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG4gICAqIGlzIG5vdCBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P1JlYWN0RE9NQ29tcG9uZW50fSB0aGUgcGFyZW50IGNvbXBvbmVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IGluZm8gYWJvdXQgdGhlIGhvc3QgY29udGFpbmVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IGdsb2JhbElkQ291bnRlcisrO1xuICAgIHRoaXMuX2RvbUlEID0gaG9zdENvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gaG9zdENvbnRhaW5lckluZm87XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdhdWRpbyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICBjYXNlICdpbWcnOlxuICAgICAgY2FzZSAnbGluayc6XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICAgIGxpc3RlbmVyczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGhvc3RQYXJlbnQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFja0lucHV0VmFsdWUsIHRoaXMpO1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIFJlYWN0RE9NT3B0aW9uLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgaG9zdFBhcmVudCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0SG9zdFByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBSZWFjdERPTVNlbGVjdC5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGhvc3RQYXJlbnQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldEhvc3RQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBSZWFjdERPTVRleHRhcmVhLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgaG9zdFBhcmVudCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXRIb3N0UHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYWNrSW5wdXRWYWx1ZSwgdGhpcyk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgcHJvcHMpO1xuXG4gICAgLy8gV2UgY3JlYXRlIHRhZ3MgaW4gdGhlIG5hbWVzcGFjZSBvZiB0aGVpciBwYXJlbnQgY29udGFpbmVyLCBleGNlcHQgSFRNTFxuICAgIC8vIHRhZ3MgZ2V0IG5vIG5hbWVzcGFjZS5cbiAgICB2YXIgbmFtZXNwYWNlVVJJO1xuICAgIHZhciBwYXJlbnRUYWc7XG4gICAgaWYgKGhvc3RQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgbmFtZXNwYWNlVVJJID0gaG9zdFBhcmVudC5fbmFtZXNwYWNlVVJJO1xuICAgICAgcGFyZW50VGFnID0gaG9zdFBhcmVudC5fdGFnO1xuICAgIH0gZWxzZSBpZiAoaG9zdENvbnRhaW5lckluZm8uX3RhZykge1xuICAgICAgbmFtZXNwYWNlVVJJID0gaG9zdENvbnRhaW5lckluZm8uX25hbWVzcGFjZVVSSTtcbiAgICAgIHBhcmVudFRhZyA9IGhvc3RDb250YWluZXJJbmZvLl90YWc7XG4gICAgfVxuICAgIGlmIChuYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCBuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuc3ZnICYmIHBhcmVudFRhZyA9PT0gJ2ZvcmVpZ25vYmplY3QnKSB7XG4gICAgICBuYW1lc3BhY2VVUkkgPSBET01OYW1lc3BhY2VzLmh0bWw7XG4gICAgfVxuICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkge1xuICAgICAgaWYgKHRoaXMuX3RhZyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgbmFtZXNwYWNlVVJJID0gRE9NTmFtZXNwYWNlcy5zdmc7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3RhZyA9PT0gJ21hdGgnKSB7XG4gICAgICAgIG5hbWVzcGFjZVVSSSA9IERPTU5hbWVzcGFjZXMubWF0aG1sO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBhcmVudEluZm87XG4gICAgICBpZiAoaG9zdFBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgIHBhcmVudEluZm8gPSBob3N0UGFyZW50Ll9hbmNlc3RvckluZm87XG4gICAgICB9IGVsc2UgaWYgKGhvc3RDb250YWluZXJJbmZvLl90YWcpIHtcbiAgICAgICAgcGFyZW50SW5mbyA9IGhvc3RDb250YWluZXJJbmZvLl9hbmNlc3RvckluZm87XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50SW5mbykge1xuICAgICAgICAvLyBwYXJlbnRJbmZvIHNob3VsZCBhbHdheXMgYmUgcHJlc2VudCBleGNlcHQgZm9yIHRoZSB0b3AtbGV2ZWxcbiAgICAgICAgLy8gY29tcG9uZW50IHdoZW4gc2VydmVyIHJlbmRlcmluZ1xuICAgICAgICB2YWxpZGF0ZURPTU5lc3RpbmcodGhpcy5fdGFnLCBudWxsLCB0aGlzLCBwYXJlbnRJbmZvKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FuY2VzdG9ySW5mbyA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKHBhcmVudEluZm8sIHRoaXMuX3RhZywgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIG1vdW50SW1hZ2U7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gaG9zdENvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gICAgICB2YXIgZWw7XG4gICAgICBpZiAobmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RhZyA9PT0gJ3NjcmlwdCcpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNjcmlwdCB2aWEgLmlubmVySFRNTCBzbyBpdHMgXCJwYXJzZXItaW5zZXJ0ZWRcIiBmbGFnIGlzXG4gICAgICAgICAgLy8gc2V0IHRvIHRydWUgYW5kIGl0IGRvZXMgbm90IGV4ZWN1dGVcbiAgICAgICAgICB2YXIgZGl2ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgZGl2LmlubmVySFRNTCA9ICc8JyArIHR5cGUgKyAnPjwvJyArIHR5cGUgKyAnPic7XG4gICAgICAgICAgZWwgPSBkaXYucmVtb3ZlQ2hpbGQoZGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLmlzKSB7XG4gICAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSwgcHJvcHMuaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNlcGFyYXRlIGVsc2UgYnJhbmNoIGluc3RlYWQgb2YgdXNpbmcgYHByb3BzLmlzIHx8IHVuZGVmaW5lZGAgYWJvdmUgYmVjdWFzZSBvZiBhIEZpcmVmb3ggYnVnLlxuICAgICAgICAgIC8vIFNlZSBkaXNjdXNzaW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzY4OTZcbiAgICAgICAgICAvLyBhbmQgZGlzY3Vzc2lvbiBpbiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjc2MjQwXG4gICAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlKTtcbiAgICAgIH1cbiAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUodGhpcywgZWwpO1xuICAgICAgdGhpcy5fZmxhZ3MgfD0gRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2RlcztcbiAgICAgIGlmICghdGhpcy5faG9zdFBhcmVudCkge1xuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0QXR0cmlidXRlRm9yUm9vdChlbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKG51bGwsIHByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgICB2YXIgbGF6eVRyZWUgPSBET01MYXp5VHJlZShlbCk7XG4gICAgICB0aGlzLl9jcmVhdGVJbml0aWFsQ2hpbGRyZW4odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBsYXp5VHJlZSk7XG4gICAgICBtb3VudEltYWdlID0gbGF6eVRyZWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWdPcGVuID0gdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbiwgcHJvcHMpO1xuICAgICAgdmFyIHRhZ0NvbnRlbnQgPSB0aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCk7XG4gICAgICBpZiAoIXRhZ0NvbnRlbnQgJiYgb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddKSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJy8+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJz4nICsgdGFnQ29udGVudCArICc8LycgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlICsgJz4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5wdXRQb3N0TW91bnQsIHRoaXMpO1xuICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodGV4dGFyZWFQb3N0TW91bnQsIHRoaXMpO1xuICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKG9wdGlvblBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBtb3VudEltYWdlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIG9wZW4gdGFnIGFuZCBhbGwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgaXMgZmFzdGVyIHRoYW4gaXRlcmF0aW5nIG92ZXIgYXJyYXlzLlxuICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcykge1xuICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBTZWUgYF91cGRhdGVET01Qcm9wZXJ0aWVzYC4gc3R5bGUgYmxvY2tcbiAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IHByb3BWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gX2Fzc2lnbih7fSwgcHJvcHMuc3R5bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9wVmFsdWUgPSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yU3R5bGVzKHByb3BWYWx1ZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hcmt1cCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl90YWcgIT0gbnVsbCAmJiBpc0N1c3RvbUNvbXBvbmVudCh0aGlzLl90YWcsIHByb3BzKSkge1xuICAgICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICAgIG1hcmt1cCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclByb3BlcnR5KHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3Igc3RhdGljIHBhZ2VzLCBubyBuZWVkIHRvIHB1dCBSZWFjdCBJRCBhbmQgY2hlY2tzdW0uIFNhdmVzIGxvdHMgb2ZcbiAgICAvLyBieXRlcy5cbiAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9ob3N0UGFyZW50KSB7XG4gICAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclJvb3QoKTtcbiAgICB9XG4gICAgcmV0ICs9ICcgJyArIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRCh0aGlzLl9kb21JRCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIHRhZ3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7c3RyaW5nfSBDb250ZW50IG1hcmt1cC5cbiAgICovXG4gIF9jcmVhdGVDb250ZW50TWFya3VwOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIHJldCA9ICcnO1xuXG4gICAgLy8gSW50ZW50aW9uYWwgdXNlIG9mICE9IHRvIGF2b2lkIGNhdGNoaW5nIHplcm8vZmFsc2UuXG4gICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgIGlmIChpbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICByZXQgPSBpbm5lckhUTUwuX19odG1sO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgICByZXQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoY29udGVudFRvVXNlKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldi5jYWxsKHRoaXMsIGNvbnRlbnRUb1VzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIHJldCA9IG1vdW50SW1hZ2VzLmpvaW4oJycpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3bGluZUVhdGluZ1RhZ3NbdGhpcy5fdGFnXSAmJiByZXQuY2hhckF0KDApID09PSAnXFxuJykge1xuICAgICAgLy8gdGV4dC9odG1sIGlnbm9yZXMgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGVzZSB0YWdzIGlmIGl0J3MgYSBuZXdsaW5lXG4gICAgICAvLyBQcmVmZXIgdG8gYnJlYWsgYXBwbGljYXRpb24veG1sIG92ZXIgdGV4dC9odG1sIChmb3Igbm93KSBieSBhZGRpbmdcbiAgICAgIC8vIGEgbmV3bGluZSBzcGVjaWZpY2FsbHkgdG8gZ2V0IGVhdGVuIGJ5IHRoZSBwYXJzZXIuIChBbHRlcm5hdGVseSBmb3JcbiAgICAgIC8vIHRleHRhcmVhcywgcmVwbGFjaW5nIFwiXlxcblwiIHdpdGggXCJcXHJcXG5cIiBkb2Vzbid0IGdldCBlYXRlbiwgYW5kIHRoZSBmaXJzdFxuICAgICAgLy8gXFxyIGlzIG5vcm1hbGl6ZWQgb3V0IGJ5IEhUTUxUZXh0QXJlYUVsZW1lbnQjdmFsdWUuKVxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbC1wb2x5Z2xvdC8jbmV3bGluZXMtaW4tdGV4dGFyZWEtYW5kLXByZT5cbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnQtcmVzdHJpY3Rpb25zPlxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjbmV3bGluZXM+XG4gICAgICAvLyBTZWU6IFBhcnNpbmcgb2YgXCJ0ZXh0YXJlYVwiIFwibGlzdGluZ1wiIGFuZCBcInByZVwiIGVsZW1lbnRzXG4gICAgICAvLyAgZnJvbSA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keT5cbiAgICAgIHJldHVybiAnXFxuJyArIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sXG5cbiAgX2NyZWF0ZUluaXRpYWxDaGlsZHJlbjogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCwgbGF6eVRyZWUpIHtcbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIERPTUxhenlUcmVlLnF1ZXVlSFRNTChsYXp5VHJlZSwgaW5uZXJIVE1MLl9faHRtbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgLy8gVE9ETzogVmFsaWRhdGUgdGhhdCB0ZXh0IGlzIGFsbG93ZWQgYXMgYSBjaGlsZCBvZiB0aGlzIG5vZGVcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAvLyBBdm9pZCBzZXR0aW5nIHRleHRDb250ZW50IHdoZW4gdGhlIHRleHQgaXMgZW1wdHkuIEluIElFMTEgc2V0dGluZ1xuICAgICAgICAvLyB0ZXh0Q29udGVudCBvbiBhIHRleHQgYXJlYSB3aWxsIGNhdXNlIHRoZSBwbGFjZWhvbGRlciB0byBub3RcbiAgICAgICAgLy8gc2hvdyB3aXRoaW4gdGhlIHRleHRhcmVhIHVudGlsIGl0IGhhcyBiZWVuIGZvY3VzZWQgYW5kIGJsdXJyZWQgYWdhaW4uXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNjczMSNpc3N1ZWNvbW1lbnQtMjU0ODc0NTUzXG4gICAgICAgIGlmIChjb250ZW50VG9Vc2UgIT09ICcnKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgY29udGVudFRvVXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgRE9NTGF6eVRyZWUucXVldWVUZXh0KGxhenlUcmVlLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oY2hpbGRyZW5Ub1VzZSwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vdW50SW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgRE9NTGF6eVRyZWUucXVldWVDaGlsZChsYXp5VHJlZSwgbW91bnRJbWFnZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNlaXZlcyBhIG5leHQgZWxlbWVudCBhbmQgdXBkYXRlcyB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gY29tcG9uZW50IGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWxsb2NhdGVkIGFuZFxuICAgKiBhdHRhY2hlZCB0byB0aGUgRE9NLiBSZWNvbmNpbGVzIHRoZSByb290IERPTSBub2RlLCB0aGVuIHJlY3Vyc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCkge1xuICAgIHZhciBsYXN0UHJvcHMgPSBwcmV2RWxlbWVudC5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTUlucHV0LmdldEhvc3RQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTUlucHV0LmdldEhvc3RQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldEhvc3RQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXRIb3N0UHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXRIb3N0UHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01TZWxlY3QuZ2V0SG9zdFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldEhvc3RQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldEhvc3RQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyhsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24pO1xuICAgIHRoaXMuX3VwZGF0ZURPTUNoaWxkcmVuKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZXIgYXJvdW5kIGlucHV0cyAqYWZ0ZXIqIHVwZGF0aW5nIHByb3BzLiBUaGlzIGhhcyB0b1xuICAgICAgICAvLyBoYXBwZW4gYWZ0ZXIgYF91cGRhdGVET01Qcm9wZXJ0aWVzYC4gT3RoZXJ3aXNlIEhUTUw1IGlucHV0IHZhbGlkYXRpb25zXG4gICAgICAgIC8vIHJhaXNlIHdhcm5pbmdzIGFuZCBwcmV2ZW50IHRoZSBuZXcgdmFsdWUgZnJvbSBiZWluZyBhc3NpZ25lZC5cbiAgICAgICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIC8vIDxzZWxlY3Q+IHZhbHVlIHVwZGF0ZSBuZWVkcyB0byBvY2N1ciBhZnRlciA8b3B0aW9uPiBjaGlsZHJlblxuICAgICAgICAvLyByZWNvbmNpbGlhdGlvblxuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBwcm9wZXJ0aWVzIGJ5IGRldGVjdGluZyBkaWZmZXJlbmNlcyBpbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kXG4gICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuICAgKiBjcml0aWNhbCBwYXRoIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcbiAgICogICAgICAgaW1wcm92ZXMgcGVyZm9ybWFuY2UgKGVzcGVjaWFsbHkgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzKS5cbiAgICogVE9ETzogQmVuY2htYXJrIHRoZSBlZmZlY3RzIG9mIHB1dHRpbmcgdGhpcyBhdCB0aGUgdG9wIHNpbmNlIDk5JSBvZiBwcm9wc1xuICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgYXJlYXMgdGhhdCBjYW4gYmUgaW1wcm92ZWQgd2l0aCBjYWNoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uIChsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IGxhc3RQcm9wc1twcm9wS2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIHZhciBsYXN0U3R5bGUgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChsYXN0UHJvcHNbcHJvcEtleV0pIHtcbiAgICAgICAgICAvLyBPbmx5IGNhbGwgZGVsZXRlTGlzdGVuZXIgaWYgdGhlcmUgd2FzIGEgbGlzdGVuZXIgcHJldmlvdXNseSBvclxuICAgICAgICAgIC8vIGVsc2Ugd2lsbERlbGV0ZUxpc3RlbmVyIGdldHMgY2FsbGVkIHdoZW4gdGhlcmUgd2Fzbid0IGFjdHVhbGx5IGFcbiAgICAgICAgICAvLyBsaXN0ZW5lciAoZS5nLiwgb25DbGljaz17bnVsbH0pXG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcywgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBsYXN0UHJvcHMpKSB7XG4gICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGUoZ2V0Tm9kZSh0aGlzKSwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShnZXROb2RlKHRoaXMpLCBwcm9wS2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgPyB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6IGxhc3RQcm9wcyAhPSBudWxsID8gbGFzdFByb3BzW3Byb3BLZXldIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wIHx8IG5leHRQcm9wID09IG51bGwgJiYgbGFzdFByb3AgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFN0eWxlKHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5LCB0aGlzLl9wcmV2aW91c1N0eWxlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBuZXh0UHJvcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dFByb3AgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IF9hc3NpZ24oe30sIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmIGxhc3RQcm9wW3N0eWxlTmFtZV0gIT09IG5leHRQcm9wW3N0eWxlTmFtZV0pIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IG5leHRQcm9wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGVucXVldWVQdXRMaXN0ZW5lcih0aGlzLCBwcm9wS2V5LCBuZXh0UHJvcCwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcywgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZ2V0Tm9kZSh0aGlzKSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LnByb3BlcnRpZXNbcHJvcEtleV0gfHwgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUocHJvcEtleSkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBnZXROb2RlKHRoaXMpO1xuICAgICAgICAvLyBJZiB3ZSdyZSB1cGRhdGluZyB0byBudWxsIG9yIHVuZGVmaW5lZCwgd2Ugc2hvdWxkIHJlbW92ZSB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gZnJvbSB0aGUgRE9NIG5vZGUgaW5zdGVhZCBvZiBpbmFkdmVydGVudGx5IHNldHRpbmcgdG8gYSBzdHJpbmcuIFRoaXNcbiAgICAgICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMoZ2V0Tm9kZSh0aGlzKSwgc3R5bGVVcGRhdGVzLCB0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICovXG4gIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBsYXN0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuXG4gICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG5cbiAgICAvLyBOb3RlIHRoZSB1c2Ugb2YgYCE9YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBjaGlsZHJlbiB0byBjb250ZW50L2h0bWwgb3IgdmljZSB2ZXJzYSwgcmVtb3ZlXG4gICAgLy8gdGhlIG9sZCBjb250ZW50XG4gICAgdmFyIGxhc3RIYXNDb250ZW50T3JIdG1sID0gbGFzdENvbnRlbnQgIT0gbnVsbCB8fCBsYXN0SHRtbCAhPSBudWxsO1xuICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsIFtdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RDb250ZW50ICE9PSBuZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgbmV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgIHRoaXMudXBkYXRlTWFya3VwKCcnICsgbmV4dEh0bWwpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4odGhpcy5fZGVidWdJRCwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dENoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldE5vZGUodGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChzYWZlbHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgY2FzZSAnaW1nJzpcbiAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzO1xuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGlucHV0VmFsdWVUcmFja2luZy5zdG9wVHJhY2tpbmcodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAvKipcbiAgICAgICAgICogQ29tcG9uZW50cyBsaWtlIDxodG1sPiA8aGVhZD4gYW5kIDxib2R5PiBjYW4ndCBiZSByZW1vdmVkIG9yIGFkZGVkXG4gICAgICAgICAqIGVhc2lseSBpbiBhIGNyb3NzLWJyb3dzZXIgd2F5LCBob3dldmVyIGl0J3MgdmFsdWFibGUgdG8gYmUgYWJsZSB0b1xuICAgICAgICAgKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gICAgICAgICAqIG1hbmFnZW1lbnQuIFNvIHdlIGp1c3QgZG9jdW1lbnQgaXQgYW5kIHRocm93IGluIGRhbmdlcm91cyBjYXNlcy5cbiAgICAgICAgICovXG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICc8JXM+IHRyaWVkIHRvIHVubW91bnQuIEJlY2F1c2Ugb2YgY3Jvc3MtYnJvd3NlciBxdWlya3MgaXQgaXMgaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCBhbmQgPGJvZHk+KSByZWxpYWJseSBhbmQgZWZmaWNpZW50bHkuIFRvIGZpeCB0aGlzLCBoYXZlIGEgc2luZ2xlIHRvcC1sZXZlbCBjb21wb25lbnQgdGhhdCBuZXZlciB1bm1vdW50cyByZW5kZXIgdGhlc2UgZWxlbWVudHMuJywgdGhpcy5fdGFnKSA6IF9wcm9kSW52YXJpYW50KCc2NicsIHRoaXMuX3RhZykgOiB2b2lkIDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKHNhZmVseSk7XG4gICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICAgIEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzKTtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gMDtcbiAgICB0aGlzLl9kb21JRCA9IDA7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldi5jYWxsKHRoaXMsIG51bGwpO1xuICAgIH1cbiAgfSxcblxuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXROb2RlKHRoaXMpO1xuICB9XG59O1xuXG5fYXNzaWduKFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RET01Db21wb25lbnQuTWl4aW4sIFJlYWN0TXVsdGlDaGlsZC5NaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9mb2N1c05vZGUnKTtcblxudmFyIEF1dG9Gb2N1c1V0aWxzID0ge1xuICBmb2N1c0RPTUNvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIGZvY3VzTm9kZShSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b0ZvY3VzVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUnKTtcbnZhciBkYW5nZXJvdXNTdHlsZVZhbHVlID0gcmVxdWlyZSgnLi9kYW5nZXJvdXNTdHlsZVZhbHVlJyk7XG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lJyk7XG52YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSByZXF1aXJlKCdmYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seScpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG59KTtcblxudmFyIGhhc1Nob3J0aGFuZFByb3BlcnR5QnVnID0gZmFsc2U7XG52YXIgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ2Nzc0Zsb2F0JztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdmFyIHRlbXBTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB0cnkge1xuICAgIC8vIElFOCB0aHJvd3MgXCJJbnZhbGlkIGFyZ3VtZW50LlwiIGlmIHJlc2V0dGluZyBzaG9ydGhhbmQgc3R5bGUgcHJvcGVydGllcy5cbiAgICB0ZW1wU3R5bGUuZm9udCA9ICcnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSB0cnVlO1xuICB9XG4gIC8vIElFOCBvbmx5IHN1cHBvcnRzIGFjY2Vzc2luZyBjc3NGbG9hdCAoc3RhbmRhcmQpIGFzIHN0eWxlRmxvYXRcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5jc3NGbG9hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ3N0eWxlRmxvYXQnO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vICdtc1RyYW5zZm9ybScgaXMgY29ycmVjdCwgYnV0IHRoZSBvdGhlciBwcmVmaXhlcyBzaG91bGQgYmUgY2FwaXRhbGl6ZWRcbiAgdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiA9IC9eKD86d2Via2l0fG1venxvKVtBLVpdLztcblxuICAvLyBzdHlsZSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb25cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuXG4gIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG4gIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICB2YXIgd2FybmVkRm9yTmFOVmFsdWUgPSBmYWxzZTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzJywgbmFtZSwgY2FtZWxpemVTdHlsZU5hbWUobmFtZSksIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgXCJTdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb24uJXMgXCIgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVJc05hTiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRGb3JOYU5WYWx1ZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJXMnLCBuYW1lLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgY2hlY2tSZW5kZXJNZXNzYWdlID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgY29tcG9uZW50KSB7XG4gICAgdmFyIG93bmVyO1xuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgfVxuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lLCBvd25lcik7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZUlzTmFOKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgYSBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgZm9yIHVzZSBhcyBpbmxpbmUgc3R5bGVzOlxuICAgKlxuICAgKiAgID4gY3JlYXRlTWFya3VwRm9yU3R5bGVzKHt3aWR0aDogJzIwMHB4JywgaGVpZ2h0OiAwfSlcbiAgICogICBcIndpZHRoOjIwMHB4O2hlaWdodDowO1wiXG4gICAqXG4gICAqIFVuZGVmaW5lZCB2YWx1ZXMgYXJlIGlnbm9yZWQgc28gdGhhdCBkZWNsYXJhdGl2ZSBwcm9ncmFtbWluZyBpcyBlYXNpZXIuXG4gICAqIFRoZSByZXN1bHQgc2hvdWxkIGJlIEhUTUwtZXNjYXBlZCBiZWZvcmUgaW5zZXJ0aW9uIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICAgKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclN0eWxlczogZnVuY3Rpb24gKHN0eWxlcywgY29tcG9uZW50KSB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUsIGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2VyaWFsaXplZCArPSBwcm9jZXNzU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUsIGNvbXBvbmVudCwgaXNDdXN0b21Qcm9wZXJ0eSkgKyAnOyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkIHx8IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBtdWx0aXBsZSBzdHlsZXMgb24gYSBub2RlLiAgSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXNcbiAgICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKi9cbiAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uIChub2RlLCBzdHlsZXMsIGNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5zdGFuY2VJRDogY29tcG9uZW50Ll9kZWJ1Z0lELFxuICAgICAgICB0eXBlOiAndXBkYXRlIHN0eWxlcycsXG4gICAgICAgIHBheWxvYWQ6IHN0eWxlc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0sIGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBjb21wb25lbnQsIGlzQ3VzdG9tUHJvcGVydHkpO1xuICAgICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2Zsb2F0JyB8fCBzdHlsZU5hbWUgPT09ICdjc3NGbG9hdCcpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVGbG9hdEFjY2Vzc29yO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleHBhbnNpb24gPSBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyAmJiBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgaWYgKGV4cGFuc2lvbikge1xuICAgICAgICAgIC8vIFNob3J0aGFuZCBwcm9wZXJ0eSB0aGF0IElFOCB3b24ndCBsaWtlIHVuc2V0dGluZywgc28gdW5zZXQgZWFjaFxuICAgICAgICAgIC8vIGNvbXBvbmVudCB0byBwbGFjYXRlIGl0XG4gICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcbiAgICAgICAgICAgIHN0eWxlW2luZGl2aWR1YWxTdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1vei10cmFuc2l0aW9uJylcbiAqICAgPCBcIk1velRyYW5zaXRpb25cIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbXMtdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJtc1RyYW5zaXRpb25cIlxuICpcbiAqIEFzIEFuZGkgU21pdGggc3VnZ2VzdHNcbiAqIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gY2FtZWxpemUoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplU3R5bGVOYW1lOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyO1xudmFyIHN0eWxlV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBjb21wb25lbnQsIGlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuICAvLyB3aG9sZSBzdHJpbmcgd2lsbCBiZSBlc2NhcGVkIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBpbmplY3RlZCBpbnRvXG4gIC8vIHRoZSBtYXJrdXAuIElmIHlvdSBwcm92aWRlIHVuc2FmZSB1c2VyIGRhdGEgaGVyZSB0aGV5IGNhbiBpbmplY3RcbiAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0XG4gIC8vIGh0dHA6Ly93d3cudGhlc3Bhbm5lci5jby51ay8yMDA3LzExLzI2L3VsdGltYXRlLXhzcy1jc3MtaW5qZWN0aW9uL1xuICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG4gIC8vIHdoaWNoIGhhcyBsZWFkIHRvIGEgZ3JlYXRlciBkaXNjdXNzaW9uIGFib3V0IGhvdyB3ZSdyZSBnb2luZyB0b1xuICAvLyB0cnVzdCBVUkxzIG1vdmluZyBmb3J3YXJkLiBTZWUgIzIxMTU5MDFcblxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gIGlmIChpc0N1c3RvbVByb3BlcnR5IHx8IGlzTm9uTnVtZXJpYyB8fCB2YWx1ZSA9PT0gMCB8fCBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEFsbG93ICcwJyB0byBwYXNzIHRocm91Z2ggd2l0aG91dCB3YXJuaW5nLiAwIGlzIGFscmVhZHkgc3BlY2lhbCBhbmRcbiAgICAgIC8vIGRvZXNuJ3QgcmVxdWlyZSB1bml0cywgc28gd2UgZG9uJ3QgbmVlZCB0byB3YXJuIGFib3V0IGl0LlxuICAgICAgaWYgKGNvbXBvbmVudCAmJiB2YWx1ZSAhPT0gJzAnKSB7XG4gICAgICAgIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBvd25lci5nZXROYW1lKCkgOiBudWxsO1xuICAgICAgICBpZiAob3duZXJOYW1lICYmICFzdHlsZVdhcm5pbmdzW293bmVyTmFtZV0pIHtcbiAgICAgICAgICBzdHlsZVdhcm5pbmdzW293bmVyTmFtZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2FybmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgICB2YXIgd2FybmluZ3MgPSBzdHlsZVdhcm5pbmdzW293bmVyTmFtZV07XG4gICAgICAgICAgd2FybmVkID0gd2FybmluZ3NbbmFtZV07XG4gICAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICAgIHdhcm5pbmdzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2EgYCVzYCB0YWcgKG93bmVyOiBgJXNgKSB3YXMgcGFzc2VkIGEgbnVtZXJpYyBzdHJpbmcgdmFsdWUgJyArICdmb3IgQ1NTIHByb3BlcnR5IGAlc2AgKHZhbHVlOiBgJXNgKSB3aGljaCB3aWxsIGJlIHRyZWF0ZWQgJyArICdhcyBhIHVuaXRsZXNzIG51bWJlciBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LicsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQudHlwZSwgb3duZXJOYW1lIHx8ICd1bmtub3duJywgbmFtZSwgdmFsdWUpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZSArICdweCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cbiAqL1xuXG5mdW5jdGlvbiBtZW1vaXplU3RyaW5nT25seShjYWxsYmFjaykge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICBpZiAoIWNhY2hlLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVTdHJpbmdPbmx5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xuXG4vKipcbiAqIEVzY2FwZXMgYXR0cmlidXRlIHZhbHVlIHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSkge1xuICByZXR1cm4gJ1wiJyArIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcblxuZnVuY3Rpb24gcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnRzKTtcbiAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoZmFsc2UpO1xufVxuXG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFN0cmVhbXMgYSBmaXJlZCB0b3AtbGV2ZWwgZXZlbnQgdG8gYEV2ZW50UGx1Z2luSHViYCB3aGVyZSBwbHVnaW5zIGhhdmUgdGhlXG4gICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqL1xuICBoYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgbWFwcGluZyBvZiBzdGFuZGFyZCB2ZW5kb3IgcHJlZml4ZXMgdXNpbmcgdGhlIGRlZmluZWQgc3R5bGUgcHJvcGVydHkgYW5kIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlUHJvcFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcblxuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbJ1dlYmtpdCcgKyBzdHlsZVByb3BdID0gJ3dlYmtpdCcgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydNb3onICsgc3R5bGVQcm9wXSA9ICdtb3onICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1snbXMnICsgc3R5bGVQcm9wXSA9ICdNUycgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydPJyArIHN0eWxlUHJvcF0gPSAnbycgKyBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcblxuICByZXR1cm4gcHJlZml4ZXM7XG59XG5cbi8qKlxuICogQSBsaXN0IG9mIGV2ZW50IG5hbWVzIHRvIGEgY29uZmlndXJhYmxlIGxpc3Qgb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG52YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gIGFuaW1hdGlvbmVuZDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkVuZCcpLFxuICBhbmltYXRpb25pdGVyYXRpb246IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25JdGVyYXRpb24nKSxcbiAgYW5pbWF0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25TdGFydCcpLFxuICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdUcmFuc2l0aW9uJywgJ1RyYW5zaXRpb25FbmQnKVxufTtcblxuLyoqXG4gKiBFdmVudCBuYW1lcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGRldGVjdGVkIGFuZCBwcmVmaXhlZCAoaWYgYXBwbGljYWJsZSkuXG4gKi9cbnZhciBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fTtcblxuLyoqXG4gKiBFbGVtZW50IHRvIGNoZWNrIGZvciBwcmVmaXhlcyBvbi5cbiAqL1xudmFyIHN0eWxlID0ge307XG5cbi8qKlxuICogQm9vdHN0cmFwIGlmIGEgRE9NIGV4aXN0cy5cbiAqL1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuXG4gIC8vIE9uIHNvbWUgcGxhdGZvcm1zLCBpbiBwYXJ0aWN1bGFyIHNvbWUgcmVsZWFzZXMgb2YgQW5kcm9pZCA0LngsXG4gIC8vIHRoZSB1bi1wcmVmaXhlZCBcImFuaW1hdGlvblwiIGFuZCBcInRyYW5zaXRpb25cIiBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkIG9uIHRoZVxuICAvLyBzdHlsZSBvYmplY3QgYnV0IHRoZSBldmVudHMgdGhhdCBmaXJlIHdpbGwgc3RpbGwgYmUgcHJlZml4ZWQsIHNvIHdlIG5lZWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlIHVuLXByZWZpeGVkIGV2ZW50cyBhcmUgdXNhYmxlLCBhbmQgaWYgbm90IHJlbW92ZSB0aGVtIGZyb20gdGhlIG1hcC5cbiAgaWYgKCEoJ0FuaW1hdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb247XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbjtcbiAgfVxuXG4gIC8vIFNhbWUgYXMgYWJvdmVcbiAgaWYgKCEoJ1RyYW5zaXRpb25FdmVudCcgaW4gd2luZG93KSkge1xuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgdmVuZG9yIHByZWZpeGVkIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgfSBlbHNlIGlmICghdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybiBldmVudE5hbWU7XG4gIH1cblxuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXTtcblxuICBmb3IgKHZhciBzdHlsZVByb3AgaW4gcHJlZml4TWFwKSB7XG4gICAgaWYgKHByZWZpeE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSkge1xuICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdID0gcHJlZml4TWFwW3N0eWxlUHJvcF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FybkNoZWNrZWRMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG52YXIgZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCA9IGZhbHNlO1xudmFyIGRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQgPSBmYWxzZTtcbnZhciBkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQ29udHJvbGxlZChwcm9wcykge1xuICB2YXIgdXNlc0NoZWNrZWQgPSBwcm9wcy50eXBlID09PSAnY2hlY2tib3gnIHx8IHByb3BzLnR5cGUgPT09ICdyYWRpbyc7XG4gIHJldHVybiB1c2VzQ2hlY2tlZCA/IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA6IHByb3BzLnZhbHVlICE9IG51bGw7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgdGhlc2Ugb3B0aW9uYWxcbiAqIHByb3BzOiBgY2hlY2tlZGAsIGB2YWx1ZWAsIGBkZWZhdWx0Q2hlY2tlZGAsIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqXG4gKiBJZiBgY2hlY2tlZGAgb3IgYHZhbHVlYCBhcmUgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9uc1xuICogdGhhdCBhZmZlY3QgdGhlIGNoZWNrZWQgc3RhdGUgb3IgdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgdGhleSBhcmUgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIG5vdFxuICogdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgcHJvcHMgbXVzdCBjaGFuZ2UgaW4gb3JkZXIgZm9yXG4gKiB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgYXMgdW5jaGVja2VkIChvciBgZGVmYXVsdENoZWNrZWRgKVxuICogd2l0aCBhbiBlbXB0eSB2YWx1ZSAob3IgYGRlZmF1bHRWYWx1ZWApLlxuICpcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1odG1sNS0yMDEyMTAyNS90aGUtaW5wdXQtZWxlbWVudC5odG1sXG4gKi9cbnZhciBSZWFjdERPTUlucHV0ID0ge1xuICBnZXRIb3N0UHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHByb3BzKTtcblxuICAgIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBzZXQgLnR5cGUgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzIChzZXR0aW5nIC52YWx1ZVxuICAgICAgLy8gYmVmb3JlIC50eXBlIG1lYW5zIC52YWx1ZSBpcyBsb3N0IGluIElFMTEgYW5kIGJlbG93KVxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCAuc3RlcCBiZWZvcmUgLnZhbHVlIChzZXR0aW5nIC52YWx1ZSBiZWZvcmUgLnN0ZXBcbiAgICAgIC8vIG1lYW5zIC52YWx1ZSBpcyByb3VuZGVkIG9uIG1vdW50LCBiYXNlZCB1cG9uIHN0ZXAgcHJlY2lzaW9uKVxuICAgICAgc3RlcDogdW5kZWZpbmVkLFxuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCAubWluICYgLm1heCBiZWZvcmUgLnZhbHVlICh0byBlbnN1cmUgcHJvcGVyIG9yZGVyXG4gICAgICAvLyBpbiBjb3JuZXIgY2FzZXMgc3VjaCBhcyBtaW4gb3IgbWF4IGRlcml2aW5nIGZyb20gdmFsdWUsIGUuZy4gSXNzdWUgIzcxNzApXG4gICAgICBtaW46IHVuZGVmaW5lZCxcbiAgICAgIG1heDogdW5kZWZpbmVkXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBob3N0UHJvcHM7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnaW5wdXQnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcblxuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICBpZiAocHJvcHMudmFsdWVMaW5rICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZUxpbmspIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuY2hlY2tlZExpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWRMaW5rKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYGNoZWNrZWRMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FybkNoZWNrZWRMaW5rID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIGNoZWNrZWQgYW5kIGRlZmF1bHRDaGVja2VkIHByb3BzLiAnICsgJ0lucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSBjaGVja2VkIHByb3AsIG9yIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBvd25lciAmJiBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSkgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgIGluaXRpYWxWYWx1ZTogcHJvcHMudmFsdWUgIT0gbnVsbCA/IHByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlLFxuICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KSxcbiAgICAgIGNvbnRyb2xsZWQ6IGlzQ29udHJvbGxlZChwcm9wcylcbiAgICB9O1xuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBpc0NvbnRyb2xsZWQocHJvcHMpO1xuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICBpZiAoIWluc3QuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkICYmIGNvbnRyb2xsZWQgJiYgIWRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhbiB1bmNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSBjb250cm9sbGVkLiAnICsgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdC5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgIWNvbnRyb2xsZWQgJiYgIWRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBTaG91bGRuJ3QgdGhpcyBiZSBnZXRDaGVja2VkKHByb3BzKT9cbiAgICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gICAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCksICdjaGVja2VkJywgY2hlY2tlZCB8fCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmIG5vZGUudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSAnMCc7XG4gICAgICAgIC8vIE5vdGU6IElFOSByZXBvcnRzIGEgbnVtYmVyIGlucHV0cyBhcyAndGV4dCcsIHNvIGNoZWNrIHByb3BzIGluc3RlYWQuXG4gICAgICB9IGVsc2UgaWYgKHByb3BzLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIFNpbXVsYXRlIGBpbnB1dC52YWx1ZUFzTnVtYmVyYC4gSUU5IGRvZXMgbm90IHN1cHBvcnQgaXRcbiAgICAgICAgdmFyIHZhbHVlQXNOdW1iZXIgPSBwYXJzZUZsb2F0KG5vZGUudmFsdWUsIDEwKSB8fCAwO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhbHVlICE9IHZhbHVlQXNOdW1iZXIgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhbHVlID09IHZhbHVlQXNOdW1iZXIgJiYgbm9kZS52YWx1ZSAhPSB2YWx1ZSkge1xuICAgICAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgICAgIG5vZGUudmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgIT09ICcnICsgdmFsdWUpIHtcbiAgICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgICBub2RlLnZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnZhbHVlID09IG51bGwgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgLy8gSW4gQ2hyb21lLCBhc3NpZ25pbmcgZGVmYXVsdFZhbHVlIHRvIGNlcnRhaW4gaW5wdXQgdHlwZXMgdHJpZ2dlcnMgaW5wdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgLy8gRm9yIG51bWJlciBpbnB1dHMsIHRoZSBkaXNwbGF5IHZhbHVlIGxvc2VzIHRyYWlsaW5nIGRlY2ltYWwgcG9pbnRzLiBGb3IgZW1haWwgaW5wdXRzLFxuICAgICAgICAvLyBDaHJvbWUgcmFpc2VzIFwiVGhlIHNwZWNpZmllZCB2YWx1ZSA8eD4gaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLlxuICAgICAgICAvL1xuICAgICAgICAvLyBIZXJlIHdlIGNoZWNrIHRvIHNlZSBpZiB0aGUgZGVmYXVsdFZhbHVlIGhhcyBhY3R1YWxseSBjaGFuZ2VkLCBhdm9pZGluZyB0aGVzZSBwcm9ibGVtc1xuICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIGlzIGlucHV0dGluZyB0ZXh0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI1M1xuICAgICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWUgIT09ICcnICsgcHJvcHMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSAnJyArIHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIXByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwb3N0TW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gVGhpcyBpcyBpbiBwb3N0TW91bnQgYmVjYXVzZSB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgRE9NIG5vZGUsIHdoaWNoIGlzIG5vdFxuICAgIC8vIGF2YWlsYWJsZSB1bnRpbCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBtb3VudGVkLlxuICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG5cbiAgICAvLyBEZXRhY2ggdmFsdWUgZnJvbSBkZWZhdWx0VmFsdWUuIFdlIHdvbid0IGRvIGFueXRoaW5nIGlmIHdlJ3JlIHdvcmtpbmcgb25cbiAgICAvLyBzdWJtaXQgb3IgcmVzZXQgaW5wdXRzIGFzIHRob3NlIHZhbHVlcyAmIGRlZmF1bHRWYWx1ZXMgYXJlIGxpbmtlZC4gVGhleVxuICAgIC8vIGFyZSBub3QgcmVzZXRhYmxlIG5vZGVzIHNvIHRoaXMgb3BlcmF0aW9uIGRvZXNuJ3QgbWF0dGVyIGFuZCBhY3R1YWxseVxuICAgIC8vIHJlbW92ZXMgYnJvd3Nlci1kZWZhdWx0IHZhbHVlcyAoZWcgXCJTdWJtaXQgUXVlcnlcIikgd2hlbiBubyB2YWx1ZSBpc1xuICAgIC8vIHByb3ZpZGVkLlxuXG4gICAgc3dpdGNoIChwcm9wcy50eXBlKSB7XG4gICAgICBjYXNlICdzdWJtaXQnOlxuICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NvbG9yJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxuICAgICAgY2FzZSAnZGF0ZXRpbWUtbG9jYWwnOlxuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgY2FzZSAndGltZSc6XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgLy8gVGhpcyBmaXhlcyB0aGUgbm8tc2hvdyBpc3N1ZSBvbiBpT1MgU2FmYXJpIGFuZCBBbmRyb2lkIENocm9tZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjMzXG4gICAgICAgIG5vZGUudmFsdWUgPSAnJztcbiAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGUuZGVmYXVsdFZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG5vZGUudmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBOb3JtYWxseSwgd2UnZCBqdXN0IGRvIGBub2RlLmNoZWNrZWQgPSBub2RlLmNoZWNrZWRgIHVwb24gaW5pdGlhbCBtb3VudCwgbGVzcyB0aGlzIGJ1Z1xuICAgIC8vIHRoaXMgaXMgbmVlZGVkIHRvIHdvcmsgYXJvdW5kIGEgY2hyb21lIGJ1ZyB3aGVyZSBzZXR0aW5nIGRlZmF1bHRDaGVja2VkXG4gICAgLy8gd2lsbCBzb21ldGltZXMgaW5mbHVlbmNlIHRoZSB2YWx1ZSBvZiBjaGVja2VkIChldmVuIGFmdGVyIGRldGFjaG1lbnQpLlxuICAgIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjA4NDE2XG4gICAgLy8gV2UgbmVlZCB0byB0ZW1wb3JhcmlseSB1bnNldCBuYW1lIHRvIGF2b2lkIGRpc3J1cHRpbmcgcmFkaW8gYnV0dG9uIGdyb3Vwcy5cbiAgICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcbiAgICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICAgIG5vZGUubmFtZSA9ICcnO1xuICAgIH1cbiAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICFub2RlLmRlZmF1bHRDaGVja2VkO1xuICAgIGlmIChuYW1lICE9PSAnJykge1xuICAgICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAvLyBpcyBpbXBvcnRhbnQgd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIGlmIChwcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuICAgIHZhciByb290Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgcXVlcnlSb290ID0gcXVlcnlSb290LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgLy8gSWYgYHJvb3ROb2RlLmZvcm1gIHdhcyBub24tbnVsbCwgdGhlbiB3ZSBjb3VsZCB0cnkgYGZvcm0uZWxlbWVudHNgLFxuICAgIC8vIGJ1dCB0aGF0IHNvbWV0aW1lcyBiZWhhdmVzIHN0cmFuZ2VseSBpbiBJRTguIFdlIGNvdWxkIGFsc28gdHJ5IHVzaW5nXG4gICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgIC8vIGFuZCB3b24ndCBpbmNsdWRlIGlucHV0cyB0aGF0IHVzZSB0aGUgSFRNTDUgYGZvcm09YCBhdHRyaWJ1dGUuIFNpbmNlXG4gICAgLy8gdGhlIGlucHV0IG1pZ2h0IG5vdCBldmVuIGJlIGluIGEgZm9ybSwgbGV0J3MganVzdCB1c2UgdGhlIGdsb2JhbFxuICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICB2YXIgZ3JvdXAgPSBxdWVyeVJvb3QucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG90aGVyTm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHwgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgcmFkaW8gYnV0dG9ucyByZW5kZXJlZCBieSBkaWZmZXJlbnQgY29waWVzIG9mIFJlYWN0XG4gICAgICAvLyBhbmQgdGhlIHNhbWUgbmFtZSBhcmUgcmVuZGVyZWQgaW50byB0aGUgc2FtZSBmb3JtIChzYW1lIGFzICMxOTM5KS5cbiAgICAgIC8vIFRoYXQncyBwcm9iYWJseSBva2F5OyB3ZSBkb24ndCBzdXBwb3J0IGl0IGp1c3QgYXMgd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgLy8gbWl4aW5nIFJlYWN0IHJhZGlvIGJ1dHRvbnMgd2l0aCBub24tUmVhY3Qgb25lcy5cbiAgICAgIHZhciBvdGhlckluc3RhbmNlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUob3RoZXJOb2RlKTtcbiAgICAgICFvdGhlckluc3RhbmNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NSW5wdXQ6IE1peGluZyBSZWFjdCBhbmQgbm9uLVJlYWN0IHJhZGlvIGlucHV0cyB3aXRoIHRoZSBzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLicpIDogX3Byb2RJbnZhcmlhbnQoJzkwJykgOiB2b2lkIDA7XG4gICAgICAvLyBJZiB0aGlzIGlzIGEgY29udHJvbGxlZCByYWRpbyBidXR0b24gZ3JvdXAsIGZvcmNpbmcgdGhlIGlucHV0IHRoYXRcbiAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGNoZWNrZWQgdG8gdXBkYXRlIHdpbGwgY2F1c2UgaXQgdG8gYmUgY29tZSByZS1jaGVja2VkXG4gICAgICAvLyBhcyBhcHByb3ByaWF0ZS5cbiAgICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCBvdGhlckluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnB1dDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdCcpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RET01TZWxlY3QgPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xudmFyIGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4gPSBmYWxzZTtcblxuZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHZhciBjb250ZW50ID0gJyc7XG5cbiAgLy8gRmxhdHRlbiBjaGlsZHJlbiBhbmQgd2FybiBpZiB0aGV5IGFyZW4ndCBzdHJpbmdzIG9yIG51bWJlcnM7XG4gIC8vIGludmFsaWQgdHlwZXMgYXJlIGlnbm9yZWQuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnRlbnQgKz0gY2hpbGQ7XG4gICAgfSBlbHNlIGlmICghZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbikge1xuICAgICAgZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbiA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ09ubHkgc3RyaW5ncyBhbmQgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGFzIDxvcHRpb24+IGNoaWxkcmVuLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBob3N0IGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTU9wdGlvbiA9IHtcbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGhvc3RQYXJlbnQpIHtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuc2VsZWN0ZWQgPT0gbnVsbCwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgKyAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIC8vIExvb2sgdXAgd2hldGhlciB0aGlzIG9wdGlvbiBpcyAnc2VsZWN0ZWQnXG4gICAgdmFyIHNlbGVjdFZhbHVlID0gbnVsbDtcbiAgICBpZiAoaG9zdFBhcmVudCAhPSBudWxsKSB7XG4gICAgICB2YXIgc2VsZWN0UGFyZW50ID0gaG9zdFBhcmVudDtcblxuICAgICAgaWYgKHNlbGVjdFBhcmVudC5fdGFnID09PSAnb3B0Z3JvdXAnKSB7XG4gICAgICAgIHNlbGVjdFBhcmVudCA9IHNlbGVjdFBhcmVudC5faG9zdFBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdFBhcmVudCAhPSBudWxsICYmIHNlbGVjdFBhcmVudC5fdGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgICBzZWxlY3RWYWx1ZSA9IFJlYWN0RE9NU2VsZWN0LmdldFNlbGVjdFZhbHVlQ29udGV4dChzZWxlY3RQYXJlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBudWxsIChlLmcuLCBubyBzcGVjaWZpZWQgdmFsdWUgb3IgYWZ0ZXIgaW5pdGlhbCBtb3VudClcbiAgICAvLyBvciBtaXNzaW5nIChlLmcuLCBmb3IgPGRhdGFsaXN0PiksIHdlIGRvbid0IGNoYW5nZSBwcm9wcy5zZWxlY3RlZFxuICAgIHZhciBzZWxlY3RlZCA9IG51bGw7XG4gICAgaWYgKHNlbGVjdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUgKyAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZmxhdHRlbkNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgLy8gbXVsdGlwbGVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgnJyArIHNlbGVjdFZhbHVlW2ldID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZCA9ICcnICsgc2VsZWN0VmFsdWUgPT09IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHsgc2VsZWN0ZWQ6IHNlbGVjdGVkIH07XG4gIH0sXG5cbiAgcG9zdE1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICAvLyB2YWx1ZT1cIlwiIHNob3VsZCBtYWtlIGEgdmFsdWUgYXR0cmlidXRlICgjNjIxOSlcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICBpZiAocHJvcHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHByb3BzLnZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SG9zdFByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICB2YXIgaG9zdFByb3BzID0gX2Fzc2lnbih7IHNlbGVjdGVkOiB1bmRlZmluZWQsIGNoaWxkcmVuOiB1bmRlZmluZWQgfSwgcHJvcHMpO1xuXG4gICAgLy8gUmVhZCBzdGF0ZSBvbmx5IGZyb20gaW5pdGlhbCBtb3VudCBiZWNhdXNlIDxzZWxlY3Q+IHVwZGF0ZXMgdmFsdWVcbiAgICAvLyBtYW51YWxseTsgd2UgbmVlZCB0aGUgaW5pdGlhbCBzdGF0ZSBvbmx5IGZvciBzZXJ2ZXIgcmVuZGVyaW5nXG4gICAgaWYgKGluc3QuX3dyYXBwZXJTdGF0ZS5zZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICBob3N0UHJvcHMuc2VsZWN0ZWQgPSBpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSBmbGF0dGVuQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGhvc3RQcm9wcy5jaGlsZHJlbiA9IGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvc3RQcm9wcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5WYWx1ZUxpbmsgPSBmYWxzZTtcbnZhciBkaWRXYXJuVmFsRGVmYXVsdFZhbCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQpIHtcbiAgICAvLyBET00gY29tcG9uZW50IGlzIHN0aWxsIG1vdW50ZWQ7IHVwZGF0ZVxuICAgIFJlYWN0RE9NVGV4dGFyZWEudXBkYXRlV3JhcHBlcih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8dGV4dGFyZWE+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSB7XG4gIGdldEhvc3RQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgIShwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugb24gPHRleHRhcmVhPi4nKSA6IF9wcm9kSW52YXJpYW50KCc5MScpIDogdm9pZCAwO1xuXG4gICAgLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcbiAgICAvLyBnZXQgcmVzZXQgaWYgYHRleHRDb250ZW50YCBpcyBtdXRhdGVkLiAgV2UgY291bGQgYWRkIGEgY2hlY2sgaW4gc2V0VGV4dENvbnRlbnRcbiAgICAvLyB0byBvbmx5IHNldCB0aGUgdmFsdWUgaWYvd2hlbiB0aGUgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBub2RlIHZhbHVlICh3aGljaCB3b3VsZFxuICAgIC8vIGNvbXBsZXRlbHkgc29sdmUgdGhpcyBJRTkgYnVnKSwgYnV0IFNlYmFzdGlhbitCZW4gc2VlbWVkIHRvIGxpa2UgdGhpcyBzb2x1dGlvbi5cbiAgICAvLyBUaGUgdmFsdWUgY2FuIGJlIGEgYm9vbGVhbiBvciBvYmplY3Qgc28gdGhhdCdzIHdoeSBpdCdzIGZvcmNlZCB0byBiZSBhIHN0cmluZy5cbiAgICB2YXIgaG9zdFByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGNoaWxkcmVuOiAnJyArIGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsXG4gICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaG9zdFByb3BzO1xuICB9LFxuXG4gIG1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ3RleHRhcmVhJywgcHJvcHMsIGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICBpZiAocHJvcHMudmFsdWVMaW5rICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZUxpbmspIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGB0ZXh0YXJlYWAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbERlZmF1bHRWYWwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdUZXh0YXJlYSBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgdGV4dGFyZWEgJyArICdhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJykgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICB2YXIgaW5pdGlhbFZhbHVlID0gdmFsdWU7XG5cbiAgICAvLyBPbmx5IGJvdGhlciBmZXRjaGluZyBkZWZhdWx0IHZhbHVlIGlmIHdlJ3JlIGdvaW5nIHRvIHVzZSBpdFxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cbiAgICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArICdjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LicpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IF9wcm9kSW52YXJpYW50KCc5MicpIDogdm9pZCAwO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAhKGNoaWxkcmVuLmxlbmd0aCA8PSAxKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICc8dGV4dGFyZWE+IGNhbiBvbmx5IGhhdmUgYXQgbW9zdCBvbmUgY2hpbGQuJykgOiBfcHJvZEludmFyaWFudCgnOTMnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyBjaGlsZHJlbjtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBkZWZhdWx0VmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGluaXRpYWxWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICBpbml0aWFsVmFsdWU6ICcnICsgaW5pdGlhbFZhbHVlLFxuICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICB2YXIgbmV3VmFsdWUgPSAnJyArIHZhbHVlO1xuXG4gICAgICAvLyBUbyBhdm9pZCBzaWRlIGVmZmVjdHMgKHN1Y2ggYXMgbG9zaW5nIHRleHQgc2VsZWN0aW9uKSwgb25seSBzZXQgdmFsdWUgaWYgY2hhbmdlZFxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBub2RlLnZhbHVlKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5kZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfSxcblxuICBwb3N0TW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIC8vIFRoaXMgaXMgaW4gcG9zdE1vdW50IGJlY2F1c2Ugd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIERPTSBub2RlLCB3aGljaCBpcyBub3RcbiAgICAvLyBhdmFpbGFibGUgdW50aWwgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZC5cbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgIHZhciB0ZXh0Q29udGVudCA9IG5vZGUudGV4dENvbnRlbnQ7XG5cbiAgICAvLyBPbmx5IHNldCBub2RlLnZhbHVlIGlmIHRleHRDb250ZW50IGlzIGVxdWFsIHRvIHRoZSBleHBlY3RlZFxuICAgIC8vIGluaXRpYWwgdmFsdWUuIEluIElFMTAvSUUxMSB0aGVyZSBpcyBhIGJ1ZyB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgYXR0cmlidXRlXG4gICAgLy8gd2lsbCBwb3B1bGF0ZSB0ZXh0Q29udGVudCBhcyB3ZWxsLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzEwMTUyNS9cbiAgICBpZiAodGV4dENvbnRlbnQgPT09IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpIHtcbiAgICAgIG5vZGUudmFsdWUgPSB0ZXh0Q29udGVudDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dGFyZWE7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RDaGlsZFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRSZWNvbmNpbGVyJyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbkNoaWxkcmVuJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogTWFrZSBhbiB1cGRhdGUgZm9yIG1hcmt1cCB0byBiZSByZW5kZXJlZCBhbmQgaW5zZXJ0ZWQgYXQgYSBzdXBwbGllZCBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0aGF0IHJlbmRlcnMgaW50byBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXguXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYWtlSW5zZXJ0TWFya3VwKG1hcmt1cCwgYWZ0ZXJOb2RlLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnSU5TRVJUX01BUktVUCcsXG4gICAgY29udGVudDogbWFya3VwLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICBmcm9tTm9kZTogbnVsbCxcbiAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgIGFmdGVyTm9kZTogYWZ0ZXJOb2RlXG4gIH07XG59XG5cbi8qKlxuICogTWFrZSBhbiB1cGRhdGUgZm9yIG1vdmluZyBhbiBleGlzdGluZyBlbGVtZW50IHRvIGFub3RoZXIgaW5kZXguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBTb3VyY2UgaW5kZXggb2YgdGhlIGV4aXN0aW5nIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VNb3ZlKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX0VYSVNUSU5HJyxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogY2hpbGQuX21vdW50SW5kZXgsXG4gICAgZnJvbU5vZGU6IFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShjaGlsZCksXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICBhZnRlck5vZGU6IGFmdGVyTm9kZVxuICB9O1xufVxuXG4vKipcbiAqIE1ha2UgYW4gdXBkYXRlIGZvciByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZVJlbW92ZShjaGlsZCwgbm9kZSkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1JFTU9WRV9OT0RFJyxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogY2hpbGQuX21vdW50SW5kZXgsXG4gICAgZnJvbU5vZGU6IG5vZGUsXG4gICAgdG9JbmRleDogbnVsbCxcbiAgICBhZnRlck5vZGU6IG51bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBNYWtlIGFuIHVwZGF0ZSBmb3Igc2V0dGluZyB0aGUgbWFya3VwIG9mIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0aGF0IHJlbmRlcnMgaW50byBhbiBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZVNldE1hcmt1cChtYXJrdXApIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdTRVRfTUFSS1VQJyxcbiAgICBjb250ZW50OiBtYXJrdXAsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIGZyb21Ob2RlOiBudWxsLFxuICAgIHRvSW5kZXg6IG51bGwsXG4gICAgYWZ0ZXJOb2RlOiBudWxsXG4gIH07XG59XG5cbi8qKlxuICogTWFrZSBhbiB1cGRhdGUgZm9yIHNldHRpbmcgdGhlIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VUZXh0Q29udGVudCh0ZXh0Q29udGVudCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1RFWFRfQ09OVEVOVCcsXG4gICAgY29udGVudDogdGV4dENvbnRlbnQsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIGZyb21Ob2RlOiBudWxsLFxuICAgIHRvSW5kZXg6IG51bGwsXG4gICAgYWZ0ZXJOb2RlOiBudWxsXG4gIH07XG59XG5cbi8qKlxuICogUHVzaCBhbiB1cGRhdGUsIGlmIGFueSwgb250byB0aGUgcXVldWUuIENyZWF0ZXMgYSBuZXcgcXVldWUgaWYgbm9uZSBpc1xuICogcGFzc2VkIGFuZCBhbHdheXMgcmV0dXJucyB0aGUgcXVldWUuIE11dGF0aXZlLlxuICovXG5mdW5jdGlvbiBlbnF1ZXVlKHF1ZXVlLCB1cGRhdGUpIHtcbiAgaWYgKHVwZGF0ZSkge1xuICAgIHF1ZXVlID0gcXVldWUgfHwgW107XG4gICAgcXVldWUucHVzaCh1cGRhdGUpO1xuICB9XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKGluc3QsIHVwZGF0ZVF1ZXVlKSB7XG4gIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyhpbnN0LCB1cGRhdGVRdWV1ZSk7XG59XG5cbnZhciBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbiA9IGVtcHR5RnVuY3Rpb247XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgZ2V0RGVidWdJRCA9IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgaWYgKCFpbnN0Ll9kZWJ1Z0lEKSB7XG4gICAgICAvLyBDaGVjayBmb3IgQVJULWxpa2UgaW5zdGFuY2VzLiBUT0RPOiBUaGlzIGlzIHNpbGx5L2dyb3NzLlxuICAgICAgdmFyIGludGVybmFsO1xuICAgICAgaWYgKGludGVybmFsID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdCkpIHtcbiAgICAgICAgaW5zdCA9IGludGVybmFsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zdC5fZGVidWdJRDtcbiAgfTtcbiAgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24gPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgZGVidWdJRCA9IGdldERlYnVnSUQodGhpcyk7XG4gICAgLy8gVE9ETzogUmVhY3QgTmF0aXZlIGVtcHR5IGNvbXBvbmVudHMgYXJlIGFsc28gbXVsdGljaGlsZC5cbiAgICAvLyBUaGlzIG1lYW5zIHRoZXkgc3RpbGwgZ2V0IGludG8gdGhpcyBtZXRob2QgYnV0IGRvbid0IGhhdmUgX2RlYnVnSUQuXG4gICAgaWYgKGRlYnVnSUQgIT09IDApIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIGNoaWxkcmVuID8gT2JqZWN0LmtleXMoY2hpbGRyZW4pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltrZXldLl9kZWJ1Z0lEO1xuICAgICAgfSkgOiBbXSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFJlYWN0TXVsdGlDaGlsZCBhcmUgY2FwYWJsZSBvZiByZWNvbmNpbGluZyBtdWx0aXBsZSBjaGlsZHJlbi5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNdWx0aUNoaWxkXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG4gICAgX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgc2VsZkRlYnVnSUQgPSBnZXREZWJ1Z0lEKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCwgc2VsZkRlYnVnSUQpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIF9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBtb3VudEltYWdlcywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbjtcbiAgICAgIHZhciBzZWxmRGVidWdJRCA9IDA7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzZWxmRGVidWdJRCA9IGdldERlYnVnSUQodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBzZWxmRGVidWdJRCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIHRoaXMsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCk7XG4gICAgICAgICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBzZWxmRGVidWdJRCk7XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIHRoaXMsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCk7XG4gICAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICB2YXIgc2VsZkRlYnVnSUQgPSAwO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBzZWxmRGVidWdJRCA9IGdldERlYnVnSUQodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgdGhpcywgdGhpcy5faG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbi5jYWxsKHRoaXMsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uIChuZXh0Q29udGVudCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMTgnKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IG5ldyB0ZXh0IGNvbnRlbnQuXG4gICAgICB2YXIgdXBkYXRlcyA9IFttYWtlVGV4dENvbnRlbnQobmV4dENvbnRlbnQpXTtcbiAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW55IHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBtYXJrdXAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5leHRNYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVNYXJrdXA6IGZ1bmN0aW9uIChuZXh0TWFya3VwKSB7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBmYWxzZSk7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZVRleHRDb250ZW50IGNhbGxlZCBvbiBub24tZW1wdHkgY29tcG9uZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzExOCcpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlcyA9IFttYWtlU2V0TWFya3VwKG5leHRNYXJrdXApXTtcbiAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAvLyBIb29rIHVzZWQgYnkgUmVhY3QgQVJUXG4gICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIHJlbW92ZWROb2RlcyA9IHt9O1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIG1vdW50SW1hZ2VzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHVwZGF0ZXMgPSBudWxsO1xuICAgICAgdmFyIG5hbWU7XG4gICAgICAvLyBgbmV4dEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBjaGlsZCBpbiBgbmV4dENoaWxkcmVuYCwgYnV0XG4gICAgICAvLyBgbGFzdEluZGV4YCB3aWxsIGJlIHRoZSBsYXN0IGluZGV4IHZpc2l0ZWQgaW4gYHByZXZDaGlsZHJlbmAuXG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgICAgLy8gYG5leHRNb3VudEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBuZXdseSBtb3VudGVkIGNoaWxkLlxuICAgICAgdmFyIG5leHRNb3VudEluZGV4ID0gMDtcbiAgICAgIHZhciBsYXN0UGxhY2VkTm9kZSA9IG51bGw7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgIHVwZGF0ZXMgPSBlbnF1ZXVlKHVwZGF0ZXMsIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbGFzdFBsYWNlZE5vZGUsIG5leHRJbmRleCwgbGFzdEluZGV4KSk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgLy8gVGhlIGByZW1vdmVkTm9kZXNgIGxvb3AgYmVsb3cgd2lsbCBhY3R1YWxseSByZW1vdmUgdGhlIGNoaWxkLlxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLl9tb3VudENoaWxkQXRJbmRleChuZXh0Q2hpbGQsIG1vdW50SW1hZ2VzW25leHRNb3VudEluZGV4XSwgbGFzdFBsYWNlZE5vZGUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpKTtcbiAgICAgICAgICBuZXh0TW91bnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgICBsYXN0UGxhY2VkTm9kZSA9IFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShuZXh0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHJlbW92ZWROb2Rlcykge1xuICAgICAgICBpZiAocmVtb3ZlZE5vZGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdXBkYXRlcyA9IGVucXVldWUodXBkYXRlcywgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZHJlbltuYW1lXSwgcmVtb3ZlZE5vZGVzW25hbWVdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh1cGRhdGVzKSB7XG4gICAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgbmV4dENoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuIEl0IGRvZXMgbm90IGFjdHVhbGx5IHBlcmZvcm0gYW55XG4gICAgICogYmFja2VuZCBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAoc2FmZWx5KSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocmVuZGVyZWRDaGlsZHJlbiwgc2FmZWx5KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhIGNoaWxkIGNvbXBvbmVudCB0byB0aGUgc3VwcGxpZWQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW92ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEluZGV4IExhc3QgaW5kZXggdmlzaXRlZCBvZiB0aGUgc2libGluZ3Mgb2YgYGNoaWxkYC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbW92ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCwgbGFzdEluZGV4KSB7XG4gICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cbiAgICAgIC8vIGJlIG1vdmVkLiBPdGhlcndpc2UsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgaXQgYmVjYXVzZSBhIGNoaWxkIHdpbGwgYmVcbiAgICAgIC8vIGluc2VydGVkIG9yIG1vdmVkIGJlZm9yZSBgY2hpbGRgLlxuICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgIHJldHVybiBtYWtlTW92ZShjaGlsZCwgYWZ0ZXJOb2RlLCB0b0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgYWZ0ZXJOb2RlLCBtb3VudEltYWdlKSB7XG4gICAgICByZXR1cm4gbWFrZUluc2VydE1hcmt1cChtb3VudEltYWdlLCBhZnRlck5vZGUsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENoaWxkIHRvIHJlbW92ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3VudHMgYSBjaGlsZCB3aXRoIHRoZSBzdXBwbGllZCBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tb3VudENoaWxkQXRJbmRleDogZnVuY3Rpb24gKGNoaWxkLCBtb3VudEltYWdlLCBhZnRlck5vZGUsIGluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBhZnRlck5vZGUsIG1vdW50SW1hZ2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhIHJlbmRlcmVkIGNoaWxkLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdW5tb3VudENoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIG5vZGUpIHtcbiAgICAgIHZhciB1cGRhdGUgPSB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkLCBub2RlKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGU7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdGFuY2VzLCBjaGlsZCwgbmFtZSwgc2VsZkRlYnVnSUQpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG4gICAgfVxuICAgIGlmICgha2V5VW5pcXVlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLiVzJywgS2V5RXNjYXBlVXRpbHMudW5lc2NhcGUobmFtZSksIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoc2VsZkRlYnVnSUQpKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgaWYgKGNoaWxkICE9IG51bGwgJiYga2V5VW5pcXVlKSB7XG4gICAgY2hpbGRJbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCB0cnVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0Q2hpbGRSZWNvbmNpbGVyIHByb3ZpZGVzIGhlbHBlcnMgZm9yIGluaXRpYWxpemluZyBvciB1cGRhdGluZyBhIHNldCBvZlxuICogY2hpbGRyZW4uIEl0cyBvdXRwdXQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgaXQgb250byBSZWFjdE11bHRpQ2hpbGQgd2hpY2hcbiAqIGRvZXMgZGlmZmVkIHJlb3JkZXJpbmcgYW5kIGluc2VydGlvbi5cbiAqL1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCwgc2VsZkRlYnVnSUQpIC8vIDAgaW4gcHJvZHVjdGlvbiBhbmQgZm9yIHJvb3RzXG4gIHtcbiAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBmdW5jdGlvbiAoY2hpbGRJbnN0cywgY2hpbGQsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRlQ2hpbGQoY2hpbGRJbnN0cywgY2hpbGQsIG5hbWUsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgIH0sIGNoaWxkSW5zdGFuY2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBpbnN0YW50aWF0ZUNoaWxkLCBjaGlsZEluc3RhbmNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZEluc3RhbmNlcztcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gYW5kIHJldHVybnMgYSBuZXcgc2V0IG9mIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q2hpbGRyZW4gRmxhdCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH0gQSBuZXcgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCBtb3VudEltYWdlcywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKSAvLyAwIGluIHByb2R1Y3Rpb24gYW5kIGZvciByb290c1xuICB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgcHJldkNoaWxkO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgaWYgKHByZXZDaGlsZCAhPSBudWxsICYmIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQocHJldkNoaWxkLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBwcmV2Q2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgcmVtb3ZlZE5vZGVzW25hbWVdID0gUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHByZXZDaGlsZCk7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIHRydWUpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgICAgLy8gQ3JlYXRpbmcgbW91bnQgaW1hZ2Ugbm93IGVuc3VyZXMgcmVmcyBhcmUgcmVzb2x2ZWQgaW4gcmlnaHQgb3JkZXJcbiAgICAgICAgLy8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTAxIGZvciBleHBsYW5hdGlvbikuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRNb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KG5leHRDaGlsZEluc3RhbmNlLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgICAgbW91bnRJbWFnZXMucHVzaChuZXh0Q2hpbGRNb3VudEltYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICByZW1vdmVkTm9kZXNbbmFtZV0gPSBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUocHJldkNoaWxkKTtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcmVuZGVyZWRDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uIChyZW5kZXJlZENoaWxkcmVuLCBzYWZlbHkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIGlmIChyZW5kZXJlZENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocmVuZGVyZWRDaGlsZCwgc2FmZWx5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZFJlY29uY2lsZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBSZWFjdE5vZGVUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3ROb2RlVHlwZXMnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY2hlY2tSZWFjdFR5cGVTcGVjID0gcmVxdWlyZSgnLi9jaGVja1JlYWN0VHlwZVNwZWMnKTtcbn1cblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgQ29tcG9zaXRlVHlwZXMgPSB7XG4gIEltcHVyZUNsYXNzOiAwLFxuICBQdXJlQ2xhc3M6IDEsXG4gIFN0YXRlbGVzc0Z1bmN0aW9uYWw6IDJcbn07XG5cbmZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG5TdGF0ZWxlc3NDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICB2YXIgZWxlbWVudCA9IENvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMudXBkYXRlcik7XG4gIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgZWxlbWVudCk7XG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuZnVuY3Rpb24gd2FybklmSW52YWxpZEVsZW1lbnQoQ29tcG9uZW50LCBlbGVtZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSB8fCBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSwgJyVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcywgJyVzKC4uLik6IGNoaWxkQ29udGV4dFR5cGVzIGNhbm5vdCBiZSBkZWZpbmVkIG9uIGEgZnVuY3Rpb25hbCBjb21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHJldHVybiAhIShDb21wb25lbnQucHJvdG90eXBlICYmIENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGlzUHVyZUNvbXBvbmVudChDb21wb25lbnQpIHtcbiAgcmV0dXJuICEhKENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFNlcGFyYXRlZCBpbnRvIGEgZnVuY3Rpb24gdG8gY29udGFpbiBkZW9wdGltaXphdGlvbnMgY2F1c2VkIGJ5IHRyeS9maW5hbGx5LlxuZnVuY3Rpb24gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZm4sIGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICBpZiAoZGVidWdJRCA9PT0gMCkge1xuICAgIC8vIFRvcC1sZXZlbCB3cmFwcGVycyAoc2VlIFJlYWN0TW91bnQpIGFuZCBlbXB0eSBjb21wb25lbnRzIChzZWVcbiAgICAvLyBSZWFjdERPTUVtcHR5Q29tcG9uZW50KSBhcmUgaW52aXNpYmxlIHRvIGhvb2tzIGFuZCBkZXZ0b29scy5cbiAgICAvLyBCb3RoIGFyZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRoYXQgc2hvdWxkIGdvIGF3YXkgaW4gdGhlIGZ1dHVyZS5cbiAgICByZXR1cm4gZm4oKTtcbiAgfVxuXG4gIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSB7XG4gIC8qKlxuICAgKiBCYXNlIGNvbnN0cnVjdG9yIGZvciBhbGwgY29tcG9zaXRlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gMDtcbiAgICB0aGlzLl9jb21wb3NpdGVUeXBlID0gbnVsbDtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgdGhpcy5faG9zdFBhcmVudCA9IG51bGw7XG4gICAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBudWxsO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlUXVldWVcbiAgICB0aGlzLl91cGRhdGVCYXRjaE51bWJlciA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICB0aGlzLl9yZW5kZXJlZE5vZGVUeXBlID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRPcmRlciA9IDA7XG4gICAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcblxuICAgIC8vIFNlZSBSZWFjdFVwZGF0ZXMgYW5kIFJlYWN0VXBkYXRlUXVldWUuXG4gICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICAvLyBDb21wb25lbnRXaWxsVW5tb3VudCBzaGFsbCBvbmx5IGJlIGNhbGxlZCBvbmNlXG4gICAgdGhpcy5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQgPSBmYWxzZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBob3N0UGFyZW50XG4gICAqIEBwYXJhbSB7P29iamVjdH0gaG9zdENvbnRhaW5lckluZm9cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFJlbmRlcmVkIG1hcmt1cCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX21vdW50T3JkZXIgPSBuZXh0TW91bnRJRCsrO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gaG9zdENvbnRhaW5lckluZm87XG5cbiAgICB2YXIgcHVibGljUHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcHVibGljQ29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KGNvbnRleHQpO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICB2YXIgdXBkYXRlUXVldWUgPSB0cmFuc2FjdGlvbi5nZXRVcGRhdGVRdWV1ZSgpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgcHVibGljIGNsYXNzXG4gICAgdmFyIGRvQ29uc3RydWN0ID0gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCk7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnQoZG9Db25zdHJ1Y3QsIHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSk7XG4gICAgdmFyIHJlbmRlcmVkRWxlbWVudDtcblxuICAgIC8vIFN1cHBvcnQgZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gICAgaWYgKCFkb0NvbnN0cnVjdCAmJiAoaW5zdCA9PSBudWxsIHx8IGluc3QucmVuZGVyID09IG51bGwpKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSBpbnN0O1xuICAgICAgd2FybklmSW52YWxpZEVsZW1lbnQoQ29tcG9uZW50LCByZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgIShpbnN0ID09PSBudWxsIHx8IGluc3QgPT09IGZhbHNlIHx8IFJlYWN0LmlzVmFsaWRFbGVtZW50KGluc3QpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcyguLi4pOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQsIGFuIGFycmF5IG9yIHNvbWUgb3RoZXIgaW52YWxpZCBvYmplY3QuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMDUnLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgaW5zdCA9IG5ldyBTdGF0ZWxlc3NDb21wb25lbnQoQ29tcG9uZW50KTtcbiAgICAgIHRoaXMuX2NvbXBvc2l0ZVR5cGUgPSBDb21wb3NpdGVUeXBlcy5TdGF0ZWxlc3NGdW5jdGlvbmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNQdXJlQ29tcG9uZW50KENvbXBvbmVudCkpIHtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRlVHlwZSA9IENvbXBvc2l0ZVR5cGVzLlB1cmVDbGFzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0ZVR5cGUgPSBDb21wb3NpdGVUeXBlcy5JbXB1cmVDbGFzcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGxhdGVyIGluIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQsIGJ1dCBhZGQgYW4gZWFybHlcbiAgICAgIC8vIHdhcm5pbmcgbm93IHRvIGhlbHAgZGVidWdnaW5nXG4gICAgICBpZiAoaW5zdC5yZW5kZXIgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgLicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wc011dGF0ZWQgPSBpbnN0LnByb3BzICE9PSBwdWJsaWNQcm9wcztcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpbnN0LnByb3BzID09PSB1bmRlZmluZWQgfHwgIXByb3BzTXV0YXRlZCwgJyVzKC4uLik6IFdoZW4gY2FsbGluZyBzdXBlcigpIGluIGAlc2AsIG1ha2Ugc3VyZSB0byBwYXNzICcgKyBcInVwIHRoZSBzYW1lIHByb3BzIHRoYXQgeW91ciBjb21wb25lbnQncyBjb25zdHJ1Y3RvciB3YXMgcGFzc2VkLlwiLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgYmUgc2V0IHVwIGluIHRoZSBjb25zdHJ1Y3RvciwgYnV0IGFzIGEgY29udmVuaWVuY2UgZm9yXG4gICAgLy8gc2ltcGxlciBjbGFzcyBhYnN0cmFjdGlvbnMsIHdlIHNldCB0aGVtIHVwIGFmdGVyIHRoZSBmYWN0LlxuICAgIGluc3QucHJvcHMgPSBwdWJsaWNQcm9wcztcbiAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgIGluc3QucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgIGluc3QudXBkYXRlciA9IHVwZGF0ZVF1ZXVlO1xuXG4gICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0O1xuXG4gICAgLy8gU3RvcmUgYSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgYmFjayB0byB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICBSZWFjdEluc3RhbmNlTWFwLnNldChpbnN0LCB0aGlzKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBTaW5jZSBwbGFpbiBKUyBjbGFzc2VzIGFyZSBkZWZpbmVkIHdpdGhvdXQgYW55IHNwZWNpYWwgaW5pdGlhbGl6YXRpb25cbiAgICAgIC8vIGxvZ2ljLCB3ZSBjYW4gbm90IGNhdGNoIGNvbW1vbiBlcnJvcnMgZWFybHkuIFRoZXJlZm9yZSwgd2UgaGF2ZSB0b1xuICAgICAgLy8gY2F0Y2ggdGhlbSBoZXJlLCBhdCBpbml0aWFsaXphdGlvbiB0aW1lLCBpbnN0ZWFkLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuZ2V0SW5pdGlhbFN0YXRlIHx8IGluc3QuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkIHx8IGluc3Quc3RhdGUsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXREZWZhdWx0UHJvcHMgfHwgaW5zdC5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LnByb3BUeXBlcywgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuY29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICsgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnRTaG91bGRVcGRhdGUgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZFVubW91bnQgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgaWYgKGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbnN0LnN0YXRlID0gaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5zdGF0ZTogbXVzdCBiZSBzZXQgdG8gYW4gb2JqZWN0IG9yIG51bGwnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMDYnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcblxuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICB2YXIgbWFya3VwO1xuICAgIGlmIChpbnN0LnVuc3RhYmxlX2hhbmRsZUVycm9yKSB7XG4gICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnRXaXRoRXJyb3JIYW5kbGluZyhyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKGluc3QuY29tcG9uZW50RGlkTW91bnQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSwgX3RoaXMuX2RlYnVnSUQsICdjb21wb25lbnREaWRNb3VudCcpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRNb3VudCwgaW5zdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfSxcblxuICBfY29uc3RydWN0Q29tcG9uZW50OiBmdW5jdGlvbiAoZG9Db25zdHJ1Y3QsIHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXIoZG9Db25zdHJ1Y3QsIHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcihkb0NvbnN0cnVjdCwgcHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcjogZnVuY3Rpb24gKGRvQ29uc3RydWN0LCBwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpIHtcbiAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcblxuICAgIGlmIChkb0NvbnN0cnVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnY3RvcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGNhbiBzdGlsbCBiZSBhbiBpbnN0YW5jZSBpbiBjYXNlIG9mIGZhY3RvcnkgY29tcG9uZW50c1xuICAgIC8vIGJ1dCB3ZSdsbCBjb3VudCB0aGlzIGFzIHRpbWUgc3BlbnQgcmVuZGVyaW5nIGFzIHRoZSBtb3JlIGNvbW1vbiBjYXNlLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSk7XG4gICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAncmVuZGVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICB9XG4gIH0sXG5cbiAgcGVyZm9ybUluaXRpYWxNb3VudFdpdGhFcnJvckhhbmRsaW5nOiBmdW5jdGlvbiAocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya3VwO1xuICAgIHZhciBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuICAgIHRyeSB7XG4gICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFJvbGwgYmFjayB0byBjaGVja3BvaW50LCBoYW5kbGUgZXJyb3IgKHdoaWNoIG1heSBhZGQgaXRlbXMgdG8gdGhlIHRyYW5zYWN0aW9uKSwgYW5kIHRha2UgYSBuZXcgY2hlY2twb2ludFxuICAgICAgdHJhbnNhY3Rpb24ucm9sbGJhY2soY2hlY2twb2ludCk7XG4gICAgICB0aGlzLl9pbnN0YW5jZS51bnN0YWJsZV9oYW5kbGVFcnJvcihlKTtcbiAgICAgIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZS5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUodGhpcy5faW5zdGFuY2UucHJvcHMsIHRoaXMuX2luc3RhbmNlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgY2hlY2twb2ludCA9IHRyYW5zYWN0aW9uLmNoZWNrcG9pbnQoKTtcblxuICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQudW5tb3VudENvbXBvbmVudCh0cnVlKTtcbiAgICAgIHRyYW5zYWN0aW9uLnJvbGxiYWNrKGNoZWNrcG9pbnQpO1xuXG4gICAgICAvLyBUcnkgYWdhaW4gLSB3ZSd2ZSBpbmZvcm1lZCB0aGUgY29tcG9uZW50IGFib3V0IHRoZSBlcnJvciwgc28gdGhleSBjYW4gcmVuZGVyIGFuIGVycm9yIG1lc3NhZ2UgdGhpcyB0aW1lLlxuICAgICAgLy8gSWYgdGhpcyB0aHJvd3MgYWdhaW4sIHRoZSBlcnJvciB3aWxsIGJ1YmJsZSB1cCAoYW5kIGNhbiBiZSBjYXVnaHQgYnkgYSBoaWdoZXIgZXJyb3IgYm91bmRhcnkpLlxuICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50KHJlbmRlcmVkRWxlbWVudCwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfSxcblxuICBwZXJmb3JtSW5pdGlhbE1vdW50OiBmdW5jdGlvbiAocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgdmFyIGRlYnVnSUQgPSAwO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBkZWJ1Z0lEID0gdGhpcy5fZGVidWdJRDtcbiAgICB9XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsTW91bnQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgICAgfSwgZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxNb3VudCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIH1cbiAgICAgIC8vIFdoZW4gbW91bnRpbmcsIGNhbGxzIHRvIGBzZXRTdGF0ZWAgYnkgYGNvbXBvbmVudFdpbGxNb3VudGAgd2lsbCBzZXRcbiAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZWAgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyLlxuICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgIGluc3Quc3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKGluc3QucHJvcHMsIGluc3QuY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgbm90IGEgc3RhdGVsZXNzIGNvbXBvbmVudCwgd2Ugbm93IHJlbmRlclxuICAgIGlmIChyZW5kZXJlZEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGVUeXBlID0gUmVhY3ROb2RlVHlwZXMuZ2V0VHlwZShyZW5kZXJlZEVsZW1lbnQpO1xuICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBub2RlVHlwZTtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KHJlbmRlcmVkRWxlbWVudCwgbm9kZVR5cGUgIT09IFJlYWN0Tm9kZVR5cGVzLkVNUFRZIC8qIHNob3VsZEhhdmVEZWJ1Z0lEICovXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IGNoaWxkO1xuXG4gICAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjaGlsZCwgdHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpLCBkZWJ1Z0lEKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZGVidWdJRCAhPT0gMCkge1xuICAgICAgICB2YXIgY2hpbGREZWJ1Z0lEcyA9IGNoaWxkLl9kZWJ1Z0lEICE9PSAwID8gW2NoaWxkLl9kZWJ1Z0lEXSA6IFtdO1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihkZWJ1Z0lELCBjaGlsZERlYnVnSURzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZSh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChzYWZlbHkpIHtcbiAgICBpZiAoIXRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmICFpbnN0Ll9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCkge1xuICAgICAgaW5zdC5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQgPSB0cnVlO1xuXG4gICAgICBpZiAoc2FmZWx5KSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5nZXROYW1lKCkgKyAnLmNvbXBvbmVudFdpbGxVbm1vdW50KCknO1xuICAgICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrKG5hbWUsIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQuYmluZChpbnN0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICAgICAgfSwgdGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCwgc2FmZWx5KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBudWxsO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFJlc2V0IHBlbmRpbmcgZmllbGRzXG4gICAgLy8gRXZlbiBpZiB0aGlzIGNvbXBvbmVudCBpcyBzY2hlZHVsZWQgZm9yIGFub3RoZXIgdXBkYXRlIGluIFJlYWN0VXBkYXRlcyxcbiAgICAvLyBpdCB3b3VsZCBzdGlsbCBiZSBpZ25vcmVkIGJlY2F1c2UgdGhlc2UgZmllbGRzIGFyZSByZXNldC5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIC8vIFRoZXNlIGZpZWxkcyBkbyBub3QgcmVhbGx5IG5lZWQgdG8gYmUgcmVzZXQgc2luY2UgdGhpcyBvYmplY3QgaXMgbm9cbiAgICAvLyBsb25nZXIgYWNjZXNzaWJsZS5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gMDtcbiAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLy8gRGVsZXRlIHRoZSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgdG8gdGhpcyBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIC8vIHdoaWNoIGFsbG93IHRoZSBpbnRlcm5hbHMgdG8gYmUgcHJvcGVybHkgY2xlYW5lZCB1cCBldmVuIGlmIHRoZSB1c2VyXG4gICAgLy8gbGVha3MgYSByZWZlcmVuY2UgdG8gdGhlIHB1YmxpYyBpbnN0YW5jZS5cbiAgICBSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KTtcblxuICAgIC8vIFNvbWUgZXhpc3RpbmcgY29tcG9uZW50cyByZWx5IG9uIGluc3QucHJvcHMgZXZlbiBhZnRlciB0aGV5J3ZlIGJlZW5cbiAgICAvLyBkZXN0cm95ZWQgKGluIGV2ZW50IGhhbmRsZXJzKS5cbiAgICAvLyBUT0RPOiBpbnN0LnByb3BzID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LnN0YXRlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LmNvbnRleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2BcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYXNrQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICB2YXIgY29udGV4dFR5cGVzID0gQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgICBpZiAoIWNvbnRleHRUeXBlcykge1xuICAgICAgcmV0dXJuIGVtcHR5T2JqZWN0O1xuICAgIH1cbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHt9O1xuICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYCwgYW5kIGFzc2VydHMgdGhhdCB0aGV5IGFyZSB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChDb21wb25lbnQuY29udGV4dFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrQ29udGV4dFR5cGVzKENvbXBvbmVudC5jb250ZXh0VHlwZXMsIG1hc2tlZENvbnRleHQsICdjb250ZXh0Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VycmVudENvbnRleHRcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIChjdXJyZW50Q29udGV4dCkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIGNoaWxkQ29udGV4dDtcblxuICAgIGlmIChpbnN0LmdldENoaWxkQ29udGV4dCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkQ29udGV4dCA9IGluc3QuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgISh0eXBlb2YgQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byB1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMTA3JywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aGlzLl9jaGVja0NvbnRleHRUeXBlcyhDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgJ2NoaWxkIGNvbnRleHQnKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgICAgICEobmFtZSBpbiBDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsIG5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzEwOCcsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsIG5hbWUpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9hc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IHRoZSBjb250ZXh0IHR5cGVzIGFyZSB2YWxpZFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBjb250ZXh0IGZpZWxkIHRvIGEgUmVhY3RQcm9wVHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrQ29udGV4dFR5cGVzOiBmdW5jdGlvbiAodHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrUmVhY3RUeXBlU3BlYyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIHRoaXMuZ2V0TmFtZSgpLCBudWxsLCB0aGlzLl9kZWJ1Z0lEKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgbmV4dENvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgcHJldkNvbnRleHQgPSB0aGlzLl9jb250ZXh0O1xuXG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgcHJldkNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogSWYgYW55IG9mIGBfcGVuZGluZ0VsZW1lbnRgLCBgX3BlbmRpbmdTdGF0ZVF1ZXVlYCwgb3IgYF9wZW5kaW5nRm9yY2VVcGRhdGVgXG4gICAqIGlzIHNldCwgdXBkYXRlIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCAhPSBudWxsKSB7XG4gICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudCh0aGlzLCB0aGlzLl9wZW5kaW5nRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX2NvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgIT09IG51bGwgfHwgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jb250ZXh0LCB0aGlzLl9jb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUGVyZm9ybSBhbiB1cGRhdGUgdG8gYSBtb3VudGVkIGNvbXBvbmVudC4gVGhlIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgYW5kXG4gICAqIHNob3VsZENvbXBvbmVudFVwZGF0ZSBtZXRob2RzIGFyZSBjYWxsZWQsIHRoZW4gKGFzc3VtaW5nIHRoZSB1cGRhdGUgaXNuJ3RcbiAgICogc2tpcHBlZCkgdGhlIHJlbWFpbmluZyB1cGRhdGUgbGlmZWN5Y2xlIG1ldGhvZHMgYXJlIGNhbGxlZCBhbmQgdGhlIERPTVxuICAgKiByZXByZXNlbnRhdGlvbiBpcyB1cGRhdGVkLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZQYXJlbnRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0UGFyZW50RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJldlBhcmVudEVsZW1lbnQsIG5leHRQYXJlbnRFbGVtZW50LCBwcmV2VW5tYXNrZWRDb250ZXh0LCBuZXh0VW5tYXNrZWRDb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAhKGluc3QgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQXR0ZW1wdGVkIHRvIHVwZGF0ZSBjb21wb25lbnQgYCVzYCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gdW5tb3VudGVkIChvciBmYWlsZWQgdG8gbW91bnQpLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogX3Byb2RJbnZhcmlhbnQoJzEzNicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuXG4gICAgdmFyIHdpbGxSZWNlaXZlID0gZmFsc2U7XG4gICAgdmFyIG5leHRDb250ZXh0O1xuXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBjb250ZXh0IGhhcyBjaGFuZ2VkIG9yIG5vdFxuICAgIGlmICh0aGlzLl9jb250ZXh0ID09PSBuZXh0VW5tYXNrZWRDb250ZXh0KSB7XG4gICAgICBuZXh0Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dENvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dChuZXh0VW5tYXNrZWRDb250ZXh0KTtcbiAgICAgIHdpbGxSZWNlaXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJldlByb3BzID0gcHJldlBhcmVudEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IG5leHRQYXJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gTm90IGEgc2ltcGxlIHN0YXRlIHVwZGF0ZSBidXQgYSBwcm9wcyB1cGRhdGVcbiAgICBpZiAocHJldlBhcmVudEVsZW1lbnQgIT09IG5leHRQYXJlbnRFbGVtZW50KSB7XG4gICAgICB3aWxsUmVjZWl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQW4gdXBkYXRlIGhlcmUgd2lsbCBzY2hlZHVsZSBhbiB1cGRhdGUgYnV0IGltbWVkaWF0ZWx5IHNldFxuICAgIC8vIF9wZW5kaW5nU3RhdGVRdWV1ZSB3aGljaCB3aWxsIGVuc3VyZSB0aGF0IGFueSBzdGF0ZSB1cGRhdGVzIGdldHNcbiAgICAvLyBpbW1lZGlhdGVseSByZWNvbmNpbGVkIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIG5leHQgYmF0Y2guXG4gICAgaWYgKHdpbGxSZWNlaXZlICYmIGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IHRydWU7XG5cbiAgICBpZiAoIXRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSkge1xuICAgICAgaWYgKGluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgICAgICAgfSwgdGhpcy5fZGVidWdJRCwgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9jb21wb3NpdGVUeXBlID09PSBDb21wb3NpdGVUeXBlcy5QdXJlQ2xhc3MpIHtcbiAgICAgICAgICBzaG91bGRVcGRhdGUgPSAhc2hhbGxvd0VxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSB8fCAhc2hhbGxvd0VxdWFsKGluc3Quc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoc2hvdWxkVXBkYXRlICE9PSB1bmRlZmluZWQsICclcy5zaG91bGRDb21wb25lbnRVcGRhdGUoKTogUmV0dXJuZWQgdW5kZWZpbmVkIGluc3RlYWQgb2YgYSAnICsgJ2Jvb2xlYW4gdmFsdWUuIE1ha2Ugc3VyZSB0byByZXR1cm4gdHJ1ZSBvciBmYWxzZS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVCYXRjaE51bWJlciA9IG51bGw7XG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAvLyBXaWxsIHNldCBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAuXG4gICAgICB0aGlzLl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlKG5leHRQYXJlbnRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCBuZXh0VW5tYXNrZWRDb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBkZXRlcm1pbmVkIHRoYXQgYSBjb21wb25lbnQgc2hvdWxkIG5vdCB1cGRhdGUsIHdlIHN0aWxsIHdhbnRcbiAgICAgIC8vIHRvIHNldCBwcm9wcyBhbmQgc3RhdGUgYnV0IHdlIHNob3J0Y3V0IHRoZSByZXN0IG9mIHRoZSB1cGRhdGUuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRQYXJlbnRFbGVtZW50O1xuICAgICAgdGhpcy5fY29udGV4dCA9IG5leHRVbm1hc2tlZENvbnRleHQ7XG4gICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBfcHJvY2Vzc1BlbmRpbmdTdGF0ZTogZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcXVldWUgPSB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZTtcbiAgICB2YXIgcmVwbGFjZSA9IHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgIGlmICghcXVldWUpIHtcbiAgICAgIHJldHVybiBpbnN0LnN0YXRlO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlICYmIHF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHF1ZXVlWzBdO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSBfYXNzaWduKHt9LCByZXBsYWNlID8gcXVldWVbMF0gOiBpbnN0LnN0YXRlKTtcbiAgICBmb3IgKHZhciBpID0gcmVwbGFjZSA/IDEgOiAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWFsID0gcXVldWVbaV07XG4gICAgICBfYXNzaWduKG5leHRTdGF0ZSwgdHlwZW9mIHBhcnRpYWwgPT09ICdmdW5jdGlvbicgPyBwYXJ0aWFsLmNhbGwoaW5zdCwgbmV4dFN0YXRlLCBwcm9wcywgY29udGV4dCkgOiBwYXJ0aWFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJnZXMgbmV3IHByb3BzIGFuZCBzdGF0ZSwgbm90aWZpZXMgZGVsZWdhdGUgbWV0aG9kcyBvZiB1cGRhdGUgYW5kXG4gICAqIHBlcmZvcm1zIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IE5leHQgZWxlbWVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzIE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGUgTmV4dCBvYmplY3QgdG8gc2V0IGFzIHN0YXRlLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0IE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgY29udGV4dC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gez9vYmplY3R9IHVubWFza2VkQ29udGV4dFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BlcmZvcm1Db21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgdmFyIGhhc0NvbXBvbmVudERpZFVwZGF0ZSA9IEJvb2xlYW4oaW5zdC5jb21wb25lbnREaWRVcGRhdGUpO1xuICAgIHZhciBwcmV2UHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZTtcbiAgICB2YXIgcHJldkNvbnRleHQ7XG4gICAgaWYgKGhhc0NvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgICAgcHJldlByb3BzID0gaW5zdC5wcm9wcztcbiAgICAgIHByZXZTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgICBwcmV2Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICB9XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFVwZGF0ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLl9jb250ZXh0ID0gdW5tYXNrZWRDb250ZXh0O1xuICAgIGluc3QucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBpbnN0LmNvbnRleHQgPSBuZXh0Q29udGV4dDtcblxuICAgIHRoaXMuX3VwZGF0ZVJlbmRlcmVkQ29tcG9uZW50KHRyYW5zYWN0aW9uLCB1bm1hc2tlZENvbnRleHQpO1xuXG4gICAgaWYgKGhhc0NvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCBfdGhpczIuX2RlYnVnSUQsICdjb21wb25lbnREaWRVcGRhdGUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSwgaW5zdCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QgYW5kIHVwZGF0ZSB0aGUgRE9NIGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3VwZGF0ZVJlbmRlcmVkQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgdmFyIHByZXZSZW5kZXJlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBuZXh0UmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG5cbiAgICB2YXIgZGVidWdJRCA9IDA7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGRlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2UmVuZGVyZWRFbGVtZW50LCBuZXh0UmVuZGVyZWRFbGVtZW50KSkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQocHJldkNvbXBvbmVudEluc3RhbmNlLCBuZXh0UmVuZGVyZWRFbGVtZW50LCB0cmFuc2FjdGlvbiwgdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChjb250ZXh0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbGRIb3N0Tm9kZSA9IFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShwcmV2Q29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNvbXBvbmVudEluc3RhbmNlLCBmYWxzZSk7XG5cbiAgICAgIHZhciBub2RlVHlwZSA9IFJlYWN0Tm9kZVR5cGVzLmdldFR5cGUobmV4dFJlbmRlcmVkRWxlbWVudCk7XG4gICAgICB0aGlzLl9yZW5kZXJlZE5vZGVUeXBlID0gbm9kZVR5cGU7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRSZW5kZXJlZEVsZW1lbnQsIG5vZGVUeXBlICE9PSBSZWFjdE5vZGVUeXBlcy5FTVBUWSAvKiBzaG91bGRIYXZlRGVidWdJRCAqL1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gY2hpbGQ7XG5cbiAgICAgIHZhciBuZXh0TWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgdGhpcy5faG9zdFBhcmVudCwgdGhpcy5faG9zdENvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCksIGRlYnVnSUQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIHZhciBjaGlsZERlYnVnSURzID0gY2hpbGQuX2RlYnVnSUQgIT09IDAgPyBbY2hpbGQuX2RlYnVnSURdIDogW107XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4oZGVidWdJRCwgY2hpbGREZWJ1Z0lEcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZEhvc3ROb2RlLCBuZXh0TWFya3VwLCBwcmV2Q29tcG9uZW50SW5zdGFuY2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogT3ZlcnJpZGRlbiBpbiBzaGFsbG93IHJlbmRlcmluZy5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlcGxhY2VOb2RlV2l0aE1hcmt1cDogZnVuY3Rpb24gKG9sZEhvc3ROb2RlLCBuZXh0TWFya3VwLCBwcmV2SW5zdGFuY2UpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cChvbGRIb3N0Tm9kZSwgbmV4dE1hcmt1cCwgcHJldkluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIHJlbmRlcmVkRWxlbWVudDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnN0LnJlbmRlcigpO1xuICAgICAgfSwgdGhpcy5fZGVidWdJRCwgJ3JlbmRlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgIGlmIChyZW5kZXJlZEVsZW1lbnQgPT09IHVuZGVmaW5lZCAmJiBpbnN0LnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgcmVuZGVyZWRFbGVtZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyZWRFbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIHZhciByZW5kZXJlZEVsZW1lbnQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgfHwgdGhpcy5fY29tcG9zaXRlVHlwZSAhPT0gQ29tcG9zaXRlVHlwZXMuU3RhdGVsZXNzRnVuY3Rpb25hbCkge1xuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKTtcbiAgICB9XG4gICAgIShcbiAgICAvLyBUT0RPOiBBbiBgaXNWYWxpZE5vZGVgIGZ1bmN0aW9uIHdvdWxkIHByb2JhYmx5IGJlIG1vcmUgYXBwcm9wcmlhdGVcbiAgICByZW5kZXJlZEVsZW1lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRFbGVtZW50ID09PSBmYWxzZSB8fCBSZWFjdC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZEVsZW1lbnQpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5yZW5kZXIoKTogQSB2YWxpZCBSZWFjdCBlbGVtZW50IChvciBudWxsKSBtdXN0IGJlIHJldHVybmVkLiBZb3UgbWF5IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogX3Byb2RJbnZhcmlhbnQoJzEwOScsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuXG4gICAgcmV0dXJuIHJlbmRlcmVkRWxlbWVudDtcbiAgfSxcblxuICAvKipcbiAgICogTGF6aWx5IGFsbG9jYXRlcyB0aGUgcmVmcyBvYmplY3QgYW5kIHN0b3JlcyBgY29tcG9uZW50YCBhcyBgcmVmYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBSZWZlcmVuY2UgbmFtZS5cbiAgICogQHBhcmFtIHtjb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gc3RvcmUgYXMgYHJlZmAuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXR0YWNoUmVmOiBmdW5jdGlvbiAocmVmLCBjb21wb25lbnQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAhKGluc3QgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy4nKSA6IF9wcm9kSW52YXJpYW50KCcxMTAnKSA6IHZvaWQgMDtcbiAgICB2YXIgcHVibGljQ29tcG9uZW50SW5zdGFuY2UgPSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQgJiYgY29tcG9uZW50LmdldE5hbWUgPyBjb21wb25lbnQuZ2V0TmFtZSgpIDogJ2EgY29tcG9uZW50JztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHB1YmxpY0NvbXBvbmVudEluc3RhbmNlICE9IG51bGwgfHwgY29tcG9uZW50Ll9jb21wb3NpdGVUeXBlICE9PSBDb21wb3NpdGVUeXBlcy5TdGF0ZWxlc3NGdW5jdGlvbmFsLCAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMgJyArICcoU2VlIHJlZiBcIiVzXCIgaW4gJXMgY3JlYXRlZCBieSAlcykuICcgKyAnQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4nLCByZWYsIGNvbXBvbmVudE5hbWUsIHRoaXMuZ2V0TmFtZSgpKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdmFyIHJlZnMgPSBpbnN0LnJlZnMgPT09IGVtcHR5T2JqZWN0ID8gaW5zdC5yZWZzID0ge30gOiBpbnN0LnJlZnM7XG4gICAgcmVmc1tyZWZdID0gcHVibGljQ29tcG9uZW50SW5zdGFuY2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGFjaGVzIGEgcmVmZXJlbmNlIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSB0byBkZXJlZmVyZW5jZS5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkZXRhY2hSZWY6IGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIgcmVmcyA9IHRoaXMuZ2V0UHVibGljSW5zdGFuY2UoKS5yZWZzO1xuICAgIGRlbGV0ZSByZWZzW3JlZl07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBhIHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IGl0XG4gICAqIGluIGVycm9yIG1lc3NhZ2VzLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9yIG51bGwuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0TmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB0eXBlID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgY29uc3RydWN0b3IgJiYgY29uc3RydWN0b3IubmFtZSB8fCBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHB1YmxpY2x5IGFjY2Vzc2libGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb21wb25lbnQgLSBpLmUuIHdoYXRcbiAgICogaXMgZXhwb3NlZCBieSByZWZzIGFuZCByZXR1cm5lZCBieSByZW5kZXIuIENhbiBiZSBudWxsIGZvciBzdGF0ZWxlc3NcbiAgICogY29tcG9uZW50cy5cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IHRoZSBwdWJsaWMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldFB1YmxpY0luc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICBpZiAodGhpcy5fY29tcG9zaXRlVHlwZSA9PT0gQ29tcG9zaXRlVHlwZXMuU3RhdGVsZXNzRnVuY3Rpb25hbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbnN0O1xuICB9LFxuXG4gIC8vIFN0dWJcbiAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IG51bGxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbmV4dERlYnVnSUQgPSAxO1xuXG5mdW5jdGlvbiBnZXROZXh0RGVidWdJRCgpIHtcbiAgcmV0dXJuIG5leHREZWJ1Z0lEKys7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmV4dERlYnVnSUQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQgdHlwZS4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG5cbm1vZHVsZS5leHBvcnRzID0gUkVBQ1RfRUxFTUVOVF9UWVBFOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuXG52YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gKlxuICogQmUgc3VyZSB0byBpbnZva2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGl0ZXJhYmxlIGFzIGNvbnRleHQ6XG4gKlxuICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAqICAgICBpZiAoaXRlcmF0b3JGbikge1xuICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICogICAgICAgLi4uXG4gKiAgICAgfVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICogQHJldHVybiB7P2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgdmFyIGl0ZXJhdG9yRm4gPSBtYXliZUl0ZXJhYmxlICYmIChJVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtJVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJdGVyYXRvckZuOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gIC8vIFRlbXBvcmFyeSBoYWNrLlxuICAvLyBJbmxpbmUgcmVxdWlyZXMgZG9uJ3Qgd29yayB3ZWxsIHdpdGggSmVzdDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjQwXG4gIC8vIFJlbW92ZSB0aGUgaW5saW5lIHJlcXVpcmVzIHdoZW4gd2UgZG9uJ3QgbmVlZCB0aGVtIGFueW1vcmU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcxNzhcbiAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgcGFzc2VkIHRocm91Z2ggdHJhdmVyc2FsLlxuICogQHBhcmFtIHs/UmVhY3RDb21wb25lbnR9IGNoaWxkIFJlYWN0IGNoaWxkIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBTdHJpbmcgbmFtZSBvZiBrZXkgcGF0aCB0byBjaGlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc2VsZkRlYnVnSUQgT3B0aW9uYWwgZGVidWdJRCBvZiB0aGUgY3VycmVudCBpbnRlcm5hbCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgc2VsZkRlYnVnSUQpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIGlmICh0cmF2ZXJzZUNvbnRleHQgJiYgdHlwZW9mIHRyYXZlcnNlQ29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICAgIHZhciBrZXlVbmlxdWUgPSByZXN1bHRbbmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFSZWFjdENvbXBvbmVudFRyZWVIb29rKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xuICAgICAgfVxuICAgICAgaWYgKCFrZXlVbmlxdWUpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICsgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgKyAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4lcycsIEtleUVzY2FwZVV0aWxzLnVuZXNjYXBlKG5hbWUpLCBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKHNlbGZEZWJ1Z0lEKSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlVbmlxdWUgJiYgY2hpbGQgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRmxhdHRlbnMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLiBBbnkgbnVsbFxuICogY2hpbGRyZW4gd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBvYmplY3QuXG4gKiBAcmV0dXJuIHshb2JqZWN0fSBmbGF0dGVuZWQgY2hpbGRyZW4ga2V5ZWQgYnkgbmFtZS5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuLCBzZWxmRGVidWdJRCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICAgICAgcmV0dXJuIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIHNlbGZEZWJ1Z0lEKTtcbiAgICB9LCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkNoaWxkcmVuOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZScpO1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVFJBTlNBQ1RJT05fV1JBUFBFUlMucHVzaCh7XG4gICAgaW5pdGlhbGl6ZTogUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5GbHVzaCxcbiAgICBjbG9zZTogUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kRmx1c2hcbiAgfSk7XG59XG5cbnZhciBub29wQ2FsbGJhY2tRdWV1ZSA9IHtcbiAgZW5xdWV1ZTogZnVuY3Rpb24gKCkge31cbn07XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAqL1xuZnVuY3Rpb24gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbihyZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gZmFsc2U7XG4gIHRoaXMudXBkYXRlUXVldWUgPSBuZXcgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSh0aGlzKTtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5fSBFbXB0eSBsaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZHVyZXMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBub29wQ2FsbGJhY2tRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBSZWFjdCBhc3luYyBldmVudHMuXG4gICAqL1xuICBnZXRVcGRhdGVRdWV1ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXVzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7fSxcblxuICBjaGVja3BvaW50OiBmdW5jdGlvbiAoKSB7fSxcblxuICByb2xsYmFjazogZnVuY3Rpb24gKCkge31cbn07XG5cbl9hc3NpZ24oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvdXRzaWRlIGNvbXBvbmVudFdpbGxNb3VudCgpIG9uIHRoZSBzZXJ2ZXIuICcgKyAnVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY2FsbGVyTmFtZSwgY29uc3RydWN0b3IgJiYgKGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yLm5hbWUpIHx8ICdSZWFjdENsYXNzJykgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB1cGRhdGUgcXVldWUgdXNlZCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqIEl0IGRlbGVnYXRlcyB0byBSZWFjdFVwZGF0ZVF1ZXVlIHdoaWxlIHNlcnZlciByZW5kZXJpbmcgaXMgaW4gcHJvZ3Jlc3MgYW5kXG4gKiBzd2l0Y2hlcyB0byBSZWFjdE5vb3BVcGRhdGVRdWV1ZSBhZnRlciB0aGUgdHJhbnNhY3Rpb24gaGFzIGNvbXBsZXRlZC5cbiAqIEBjbGFzcyBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICovXG5cbnZhciBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlKHRyYW5zYWN0aW9uKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0U2VydmVyVXBkYXRlUXVldWUpO1xuXG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG5cblxuICBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5pc01vdW50ZWQgPSBmdW5jdGlvbiBpc01vdW50ZWQocHVibGljSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEVucXVldWUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIHVwZGF0ZXNcbiAgICogaGF2ZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHVzZSBhcyBgdGhpc2AgY29udGV4dC5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlQ2FsbGJhY2sgPSBmdW5jdGlvbiBlbnF1ZXVlQ2FsbGJhY2socHVibGljSW5zdGFuY2UsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb24uaXNJblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlRm9yY2VVcGRhdGUgPSBmdW5jdGlvbiBlbnF1ZXVlRm9yY2VVcGRhdGUocHVibGljSW5zdGFuY2UpIHtcbiAgICBpZiAodGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKSkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRm9yY2VVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmVucXVldWVSZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiBlbnF1ZXVlUmVwbGFjZVN0YXRlKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb24uaXNJblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VTdGF0ZShwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmVucXVldWVTZXRTdGF0ZSA9IGZ1bmN0aW9uIGVucXVldWVTZXRTdGF0ZShwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb24uaXNJblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVNldFN0YXRlKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyVXBkYXRlUXVldWU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuXG52YXIgUmVhY3RET01FbXB0eUNvbXBvbmVudCA9IGZ1bmN0aW9uIChpbnN0YW50aWF0ZSkge1xuICAvLyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCB1c2VzIHRoaXM6XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgLy8gUmVhY3RET01Db21wb25lbnRUcmVlIHVzZXMgdGhlc2U6XG4gIHRoaXMuX2hvc3ROb2RlID0gbnVsbDtcbiAgdGhpcy5faG9zdFBhcmVudCA9IG51bGw7XG4gIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gbnVsbDtcbiAgdGhpcy5fZG9tSUQgPSAwO1xufTtcbl9hc3NpZ24oUmVhY3RET01FbXB0eUNvbXBvbmVudC5wcm90b3R5cGUsIHtcbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQpIHtcbiAgICB2YXIgZG9tSUQgPSBob3N0Q29udGFpbmVySW5mby5faWRDb3VudGVyKys7XG4gICAgdGhpcy5fZG9tSUQgPSBkb21JRDtcbiAgICB0aGlzLl9ob3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICB0aGlzLl9ob3N0Q29udGFpbmVySW5mbyA9IGhvc3RDb250YWluZXJJbmZvO1xuXG4gICAgdmFyIG5vZGVWYWx1ZSA9ICcgcmVhY3QtZW1wdHk6ICcgKyB0aGlzLl9kb21JRCArICcgJztcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBob3N0Q29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KG5vZGVWYWx1ZSk7XG4gICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsIG5vZGUpO1xuICAgICAgcmV0dXJuIERPTUxhenlUcmVlKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgICAgLy8gTm9ybWFsbHkgd2UnZCBpbnNlcnQgYSBjb21tZW50IG5vZGUsIGJ1dCBzaW5jZSB0aGlzIGlzIGEgc2l0dWF0aW9uXG4gICAgICAgIC8vIHdoZXJlIFJlYWN0IHdvbid0IHRha2Ugb3ZlciAoc3RhdGljIHBhZ2VzKSwgd2UgY2FuIHNpbXBseSByZXR1cm5cbiAgICAgICAgLy8gbm90aGluZy5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICc8IS0tJyArIG5vZGVWYWx1ZSArICctLT4nO1xuICAgIH1cbiAgfSxcbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKCkge30sXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICB9LFxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUVtcHR5Q29tcG9uZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxvd2VzdCBjb21tb24gYW5jZXN0b3Igb2YgQSBhbmQgQiwgb3IgbnVsbCBpZiB0aGV5IGFyZSBpblxuICogZGlmZmVyZW50IHRyZWVzLlxuICovXG5mdW5jdGlvbiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0QSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczMycpIDogdm9pZCAwO1xuICAhKCdfaG9zdE5vZGUnIGluIGluc3RCKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzMzJykgOiB2b2lkIDA7XG5cbiAgdmFyIGRlcHRoQSA9IDA7XG4gIGZvciAodmFyIHRlbXBBID0gaW5zdEE7IHRlbXBBOyB0ZW1wQSA9IHRlbXBBLl9ob3N0UGFyZW50KSB7XG4gICAgZGVwdGhBKys7XG4gIH1cbiAgdmFyIGRlcHRoQiA9IDA7XG4gIGZvciAodmFyIHRlbXBCID0gaW5zdEI7IHRlbXBCOyB0ZW1wQiA9IHRlbXBCLl9ob3N0UGFyZW50KSB7XG4gICAgZGVwdGhCKys7XG4gIH1cblxuICAvLyBJZiBBIGlzIGRlZXBlciwgY3Jhd2wgdXAuXG4gIHdoaWxlIChkZXB0aEEgLSBkZXB0aEIgPiAwKSB7XG4gICAgaW5zdEEgPSBpbnN0QS5faG9zdFBhcmVudDtcbiAgICBkZXB0aEEtLTtcbiAgfVxuXG4gIC8vIElmIEIgaXMgZGVlcGVyLCBjcmF3bCB1cC5cbiAgd2hpbGUgKGRlcHRoQiAtIGRlcHRoQSA+IDApIHtcbiAgICBpbnN0QiA9IGluc3RCLl9ob3N0UGFyZW50O1xuICAgIGRlcHRoQi0tO1xuICB9XG5cbiAgLy8gV2FsayBpbiBsb2Nrc3RlcCB1bnRpbCB3ZSBmaW5kIGEgbWF0Y2guXG4gIHZhciBkZXB0aCA9IGRlcHRoQTtcbiAgd2hpbGUgKGRlcHRoLS0pIHtcbiAgICBpZiAoaW5zdEEgPT09IGluc3RCKSB7XG4gICAgICByZXR1cm4gaW5zdEE7XG4gICAgfVxuICAgIGluc3RBID0gaW5zdEEuX2hvc3RQYXJlbnQ7XG4gICAgaW5zdEIgPSBpbnN0Qi5faG9zdFBhcmVudDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gaWYgQSBpcyBhbiBhbmNlc3RvciBvZiBCLlxuICovXG5mdW5jdGlvbiBpc0FuY2VzdG9yKGluc3RBLCBpbnN0Qikge1xuICAhKCdfaG9zdE5vZGUnIGluIGluc3RBKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0FuY2VzdG9yOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzM1JykgOiB2b2lkIDA7XG4gICEoJ19ob3N0Tm9kZScgaW4gaW5zdEIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2lzQW5jZXN0b3I6IEludmFsaWQgYXJndW1lbnQuJykgOiBfcHJvZEludmFyaWFudCgnMzUnKSA6IHZvaWQgMDtcblxuICB3aGlsZSAoaW5zdEIpIHtcbiAgICBpZiAoaW5zdEIgPT09IGluc3RBKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW5zdEIgPSBpbnN0Qi5faG9zdFBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBwYXJlbnQgaW5zdGFuY2Ugb2YgdGhlIHBhc3NlZC1pbiBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50SW5zdGFuY2UoaW5zdCkge1xuICAhKCdfaG9zdE5vZGUnIGluIGluc3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldFBhcmVudEluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzM2JykgOiB2b2lkIDA7XG5cbiAgcmV0dXJuIGluc3QuX2hvc3RQYXJlbnQ7XG59XG5cbi8qKlxuICogU2ltdWxhdGVzIHRoZSB0cmF2ZXJzYWwgb2YgYSB0d28tcGhhc2UsIGNhcHR1cmUvYnViYmxlIGV2ZW50IGRpc3BhdGNoLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZVR3b1BoYXNlKGluc3QsIGZuLCBhcmcpIHtcbiAgdmFyIHBhdGggPSBbXTtcbiAgd2hpbGUgKGluc3QpIHtcbiAgICBwYXRoLnB1c2goaW5zdCk7XG4gICAgaW5zdCA9IGluc3QuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgdmFyIGk7XG4gIGZvciAoaSA9IHBhdGgubGVuZ3RoOyBpLS0gPiAwOykge1xuICAgIGZuKHBhdGhbaV0sICdjYXB0dXJlZCcsIGFyZyk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoW2ldLCAnYnViYmxlZCcsIGFyZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgdGhlIElEIGhpZXJhcmNoeSBhbmQgaW52b2tlcyB0aGUgc3VwcGxpZWQgYGNiYCBvbiBhbnkgSURzIHRoYXRcbiAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cbiAqXG4gKiBEb2VzIG5vdCBpbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBiZWNhdXNlIG5vdGhpbmdcbiAqIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBmbiwgYXJnRnJvbSwgYXJnVG8pIHtcbiAgdmFyIGNvbW1vbiA9IGZyb20gJiYgdG8gPyBnZXRMb3dlc3RDb21tb25BbmNlc3Rvcihmcm9tLCB0bykgOiBudWxsO1xuICB2YXIgcGF0aEZyb20gPSBbXTtcbiAgd2hpbGUgKGZyb20gJiYgZnJvbSAhPT0gY29tbW9uKSB7XG4gICAgcGF0aEZyb20ucHVzaChmcm9tKTtcbiAgICBmcm9tID0gZnJvbS5faG9zdFBhcmVudDtcbiAgfVxuICB2YXIgcGF0aFRvID0gW107XG4gIHdoaWxlICh0byAmJiB0byAhPT0gY29tbW9uKSB7XG4gICAgcGF0aFRvLnB1c2godG8pO1xuICAgIHRvID0gdG8uX2hvc3RQYXJlbnQ7XG4gIH1cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBwYXRoRnJvbS5sZW5ndGg7IGkrKykge1xuICAgIGZuKHBhdGhGcm9tW2ldLCAnYnViYmxlZCcsIGFyZ0Zyb20pO1xuICB9XG4gIGZvciAoaSA9IHBhdGhUby5sZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgZm4ocGF0aFRvW2ldLCAnY2FwdHVyZWQnLCBhcmdUbyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQW5jZXN0b3I6IGlzQW5jZXN0b3IsXG4gIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcixcbiAgZ2V0UGFyZW50SW5zdGFuY2U6IGdldFBhcmVudEluc3RhbmNlLFxuICB0cmF2ZXJzZVR3b1BoYXNlOiB0cmF2ZXJzZVR3b1BoYXNlLFxuICB0cmF2ZXJzZUVudGVyTGVhdmU6IHRyYXZlcnNlRW50ZXJMZWF2ZVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgYmV0d2VlbiBjb21tZW50IG5vZGVzIHNvIHRoYXQgdGhleVxuICogY2FuIHVuZGVyZ28gdGhlIHNhbWUgcmVjb25jaWxpYXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVsZW1lbnRzLlxuICpcbiAqIFRPRE86IEludmVzdGlnYXRlIHJlcHJlc2VudGluZyBSZWFjdCBjb21wb25lbnRzIGluIHRoZSBET00gd2l0aCB0ZXh0IG5vZGVzLlxuICpcbiAqIEBjbGFzcyBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIC8vIFRPRE86IFRoaXMgaXMgcmVhbGx5IGEgUmVhY3RUZXh0IChSZWFjdE5vZGUpLCBub3QgYSBSZWFjdEVsZW1lbnRcbiAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICB0aGlzLl9zdHJpbmdUZXh0ID0gJycgKyB0ZXh0O1xuICAvLyBSZWFjdERPTUNvbXBvbmVudFRyZWUgdXNlcyB0aGVzZTpcbiAgdGhpcy5faG9zdE5vZGUgPSBudWxsO1xuICB0aGlzLl9ob3N0UGFyZW50ID0gbnVsbDtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHRoaXMuX2RvbUlEID0gMDtcbiAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIHRoaXMuX2Nsb3NpbmdDb21tZW50ID0gbnVsbDtcbiAgdGhpcy5fY29tbWVudE5vZGVzID0gbnVsbDtcbn07XG5cbl9hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgbWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS4gVGhpcyBub2RlIGlzIG5vdCBpbnRlbmRlZCB0byBoYXZlXG4gICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBwYXJlbnRJbmZvO1xuICAgICAgaWYgKGhvc3RQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBwYXJlbnRJbmZvID0gaG9zdFBhcmVudC5fYW5jZXN0b3JJbmZvO1xuICAgICAgfSBlbHNlIGlmIChob3N0Q29udGFpbmVySW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHBhcmVudEluZm8gPSBob3N0Q29udGFpbmVySW5mby5fYW5jZXN0b3JJbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudEluZm8pIHtcbiAgICAgICAgLy8gcGFyZW50SW5mbyBzaG91bGQgYWx3YXlzIGJlIHByZXNlbnQgZXhjZXB0IGZvciB0aGUgdG9wLWxldmVsXG4gICAgICAgIC8vIGNvbXBvbmVudCB3aGVuIHNlcnZlciByZW5kZXJpbmdcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKG51bGwsIHRoaXMuX3N0cmluZ1RleHQsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkb21JRCA9IGhvc3RDb250YWluZXJJbmZvLl9pZENvdW50ZXIrKztcbiAgICB2YXIgb3BlbmluZ1ZhbHVlID0gJyByZWFjdC10ZXh0OiAnICsgZG9tSUQgKyAnICc7XG4gICAgdmFyIGNsb3NpbmdWYWx1ZSA9ICcgL3JlYWN0LXRleHQgJztcbiAgICB0aGlzLl9kb21JRCA9IGRvbUlEO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGhvc3RDb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICAgICAgdmFyIG9wZW5pbmdDb21tZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KG9wZW5pbmdWYWx1ZSk7XG4gICAgICB2YXIgY2xvc2luZ0NvbW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoY2xvc2luZ1ZhbHVlKTtcbiAgICAgIHZhciBsYXp5VHJlZSA9IERPTUxhenlUcmVlKG93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTtcbiAgICAgIERPTUxhenlUcmVlLnF1ZXVlQ2hpbGQobGF6eVRyZWUsIERPTUxhenlUcmVlKG9wZW5pbmdDb21tZW50KSk7XG4gICAgICBpZiAodGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuX3N0cmluZ1RleHQpKSk7XG4gICAgICB9XG4gICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShjbG9zaW5nQ29tbWVudCkpO1xuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBvcGVuaW5nQ29tbWVudCk7XG4gICAgICB0aGlzLl9jbG9zaW5nQ29tbWVudCA9IGNsb3NpbmdDb21tZW50O1xuICAgICAgcmV0dXJuIGxhenlUcmVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXNjYXBlZFRleHQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGhpcy5fc3RyaW5nVGV4dCk7XG5cbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBiZXR3ZWVuIGNvbW1lbnQgbm9kZXMgZm9yIHRoZSByZWFzb25zIHN0YXRlZFxuICAgICAgICAvLyBhYm92ZSwgYnV0IHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyXG4gICAgICAgIC8vIChzdGF0aWMgcGFnZXMpLCB3ZSBjYW4gc2ltcGx5IHJldHVybiB0aGUgdGV4dCBhcyBpdCBpcy5cbiAgICAgICAgcmV0dXJuIGVzY2FwZWRUZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJzwhLS0nICsgb3BlbmluZ1ZhbHVlICsgJy0tPicgKyBlc2NhcGVkVGV4dCArICc8IS0tJyArIGNsb3NpbmdWYWx1ZSArICctLT4nO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGlzIGNvbXBvbmVudCBieSB1cGRhdGluZyB0aGUgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gbmV4dFRleHQgVGhlIG5leHQgdGV4dCBjb250ZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dFRleHQsIHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKG5leHRUZXh0ICE9PSB0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0VGV4dDtcbiAgICAgIHZhciBuZXh0U3RyaW5nVGV4dCA9ICcnICsgbmV4dFRleHQ7XG4gICAgICBpZiAobmV4dFN0cmluZ1RleHQgIT09IHRoaXMuX3N0cmluZ1RleHQpIHtcbiAgICAgICAgLy8gVE9ETzogU2F2ZSB0aGlzIGFzIHBlbmRpbmcgcHJvcHMgYW5kIHVzZSBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnlcbiAgICAgICAgLy8gYW5kL29yIHVwZGF0ZUNvbXBvbmVudCB0byBkbyB0aGUgYWN0dWFsIHVwZGF0ZSBmb3IgY29uc2lzdGVuY3kgd2l0aFxuICAgICAgICAvLyBvdGhlciBjb21wb25lbnQgdHlwZXM/XG4gICAgICAgIHRoaXMuX3N0cmluZ1RleHQgPSBuZXh0U3RyaW5nVGV4dDtcbiAgICAgICAgdmFyIGNvbW1lbnROb2RlcyA9IHRoaXMuZ2V0SG9zdE5vZGUoKTtcbiAgICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnJlcGxhY2VEZWxpbWl0ZWRUZXh0KGNvbW1lbnROb2Rlc1swXSwgY29tbWVudE5vZGVzWzFdLCBuZXh0U3RyaW5nVGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3ROb2RlID0gdGhpcy5fY29tbWVudE5vZGVzO1xuICAgIGlmIChob3N0Tm9kZSkge1xuICAgICAgcmV0dXJuIGhvc3ROb2RlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2Nsb3NpbmdDb21tZW50KSB7XG4gICAgICB2YXIgb3BlbmluZ0NvbW1lbnQgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKTtcbiAgICAgIHZhciBub2RlID0gb3BlbmluZ0NvbW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAhKG5vZGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBjbG9zaW5nIGNvbW1lbnQgZm9yIHRleHQgY29tcG9uZW50ICVzJywgdGhpcy5fZG9tSUQpIDogX3Byb2RJbnZhcmlhbnQoJzY3JywgdGhpcy5fZG9tSUQpIDogdm9pZCAwO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyAvcmVhY3QtdGV4dCAnKSB7XG4gICAgICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgICBob3N0Tm9kZSA9IFt0aGlzLl9ob3N0Tm9kZSwgdGhpcy5fY2xvc2luZ0NvbW1lbnRdO1xuICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IGhvc3ROb2RlO1xuICAgIHJldHVybiBob3N0Tm9kZTtcbiAgfSxcblxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG51bGw7XG4gICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBGTFVTSF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuXG5fYXNzaWduKFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH1cbn0pO1xuXG52YXIgdHJhbnNhY3Rpb24gPSBuZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCk7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuICBpc0JhdGNoaW5nVXBkYXRlczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aXRoaW4gd2hpY2ggY2FsbHMgdG8gYHNldFN0YXRlYFxuICAgKiBhbmQgZnJpZW5kcyBhcmUgYmF0Y2hlZCBzdWNoIHRoYXQgY29tcG9uZW50cyBhcmVuJ3QgdXBkYXRlZCB1bm5lY2Vzc2FyaWx5LlxuICAgKi9cbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICAgIHZhciBhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcztcblxuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuXG4gICAgLy8gVGhlIGNvZGUgaXMgd3JpdHRlbiB0aGlzIHdheSB0byBhdm9pZCBleHRyYSBhbGxvY2F0aW9uc1xuICAgIGlmIChhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soYSwgYiwgYywgZCwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGNhbGxiYWNrLCBudWxsLCBhLCBiLCBjLCBkLCBlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9FdmVudExpc3RlbmVyJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24nKTtcblxuLyoqXG4gKiBGaW5kIHRoZSBkZWVwZXN0IFJlYWN0IGNvbXBvbmVudCBjb21wbGV0ZWx5IGNvbnRhaW5pbmcgdGhlIHJvb3Qgb2YgdGhlXG4gKiBwYXNzZWQtaW4gaW5zdGFuY2UgKGZvciB1c2Ugd2hlbiBlbnRpcmUgUmVhY3QgdHJlZXMgYXJlIG5lc3RlZCB3aXRoaW4gZWFjaFxuICogb3RoZXIpLiBJZiBSZWFjdCB0cmVlcyBhcmUgbm90IG5lc3RlZCwgcmV0dXJucyBudWxsLlxuICovXG5mdW5jdGlvbiBmaW5kUGFyZW50KGluc3QpIHtcbiAgLy8gVE9ETzogSXQgbWF5IGJlIGEgZ29vZCBpZGVhIHRvIGNhY2hlIHRoaXMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBET01cbiAgLy8gdHJhdmVyc2FsLCBidXQgY2FjaGluZyBpcyBkaWZmaWN1bHQgdG8gZG8gY29ycmVjdGx5IHdpdGhvdXQgdXNpbmcgYVxuICAvLyBtdXRhdGlvbiBvYnNlcnZlciB0byBsaXN0ZW4gZm9yIGFsbCBET00gY2hhbmdlcy5cbiAgd2hpbGUgKGluc3QuX2hvc3RQYXJlbnQpIHtcbiAgICBpbnN0ID0gaW5zdC5faG9zdFBhcmVudDtcbiAgfVxuICB2YXIgcm9vdE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgdmFyIGNvbnRhaW5lciA9IHJvb3ROb2RlLnBhcmVudE5vZGU7XG4gIHJldHVybiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbn1cblxuLy8gVXNlZCB0byBzdG9yZSBhbmNlc3RvciBoaWVyYXJjaHkgaW4gdG9wIGxldmVsIGNhbGxiYWNrXG5mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xufVxuX2Fzc2lnbihUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucHJvdG90eXBlLCB7XG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRvcExldmVsVHlwZSA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gICAgdGhpcy5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgfVxufSk7XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLCBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGhhbmRsZVRvcExldmVsSW1wbChib29rS2VlcGluZykge1xuICB2YXIgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCk7XG4gIHZhciB0YXJnZXRJbnN0ID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdGFyZ2V0SW5zdDtcbiAgZG8ge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGFuY2VzdG9yICYmIGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9IHdoaWxlIChhbmNlc3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB0YXJnZXRJbnN0ID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzW2ldO1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBib29rS2VlcGluZy5uYXRpdmVFdmVudCwgZ2V0RXZlbnRUYXJnZXQoYm9va0tlZXBpbmcubmF0aXZlRXZlbnQpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY3JvbGxWYWx1ZU1vbml0b3IoY2IpIHtcbiAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcbiAgY2Ioc2Nyb2xsUG9zaXRpb24pO1xufVxuXG52YXIgUmVhY3RFdmVudExpc3RlbmVyID0ge1xuICBfZW5hYmxlZDogdHJ1ZSxcbiAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuXG4gIFdJTkRPV19IQU5ETEU6IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHdpbmRvdyA6IG51bGwsXG5cbiAgc2V0SGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uIChoYW5kbGVUb3BMZXZlbCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwgPSBoYW5kbGVUb3BMZXZlbDtcbiAgfSxcblxuICBzZXRFbmFibGVkOiBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCA9ICEhZW5hYmxlZDtcbiAgfSxcblxuICBpc0VuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFwcyB0b3AtbGV2ZWwgZXZlbnRzIGJ5IHVzaW5nIGV2ZW50IGJ1YmJsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyQmFzZU5hbWUgRXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudCBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5saXN0ZW4oZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLCBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFwcyBhIHRvcC1sZXZlbCBldmVudCBieSB1c2luZyBldmVudCBjYXB0dXJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50IEVsZW1lbnQgb24gd2hpY2ggdG8gYXR0YWNoIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uIChyZWZyZXNoKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gc2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCwgcmVmcmVzaCk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAnc2Nyb2xsJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKCFSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgIHRyeSB7XG4gICAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlLldpbmRvdyAmJiBzY3JvbGxhYmxlIGluc3RhbmNlb2Ygc2Nyb2xsYWJsZS5XaW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogc2Nyb2xsYWJsZS5wYWdlWE9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogc2Nyb2xsYWJsZS5wYWdlWU9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudCcpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyk7XG52YXIgUmVhY3RIb3N0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEhvc3RDb21wb25lbnQnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgUmVhY3RJbmplY3Rpb24gPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5VdGlsczogRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24sXG4gIEV2ZW50RW1pdHRlcjogUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmluamVjdGlvbixcbiAgSG9zdENvbXBvbmVudDogUmVhY3RIb3N0Q29tcG9uZW50LmluamVjdGlvbixcbiAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKCcuL0NhbGxiYWNrUXVldWUnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5wdXRTZWxlY3Rpb24nKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZVF1ZXVlJyk7XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0LCB3aGVuIHBvc3NpYmxlLCB0aGUgc2VsZWN0aW9uIHJhbmdlIChjdXJyZW50bHkgc2VsZWN0ZWQgdGV4dFxuICogaW5wdXQpIGlzIG5vdCBkaXN0dXJiZWQgYnkgcGVyZm9ybWluZyB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBTRUxFQ1RJT05fUkVTVE9SQVRJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtTZWxlY3Rpb259IFNlbGVjdGlvbiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IFJlYWN0SW5wdXRTZWxlY3Rpb24uZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24sXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NlbGVjdGlvbn0gc2VsIFNlbGVjdGlvbiBpbmZvcm1hdGlvbiByZXR1cm5lZCBmcm9tIGBpbml0aWFsaXplYC5cbiAgICovXG4gIGNsb3NlOiBSZWFjdElucHV0U2VsZWN0aW9uLnJlc3RvcmVTZWxlY3Rpb25cbn07XG5cbi8qKlxuICogU3VwcHJlc3NlcyBldmVudHMgKGJsdXIvZm9jdXMpIHRoYXQgY291bGQgYmUgaW5hZHZlcnRlbnRseSBkaXNwYXRjaGVkIGR1ZSB0b1xuICogaGlnaCBsZXZlbCBET00gbWFuaXB1bGF0aW9ucyAobGlrZSB0ZW1wb3JhcmlseSByZW1vdmluZyBhIHRleHQgaW5wdXQgZnJvbSB0aGVcbiAqIERPTSkuXG4gKi9cbnZhciBFVkVOVF9TVVBQUkVTU0lPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBlbmFibGVkIHN0YXR1cyBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmVcbiAgICogdGhlIHJlY29uY2lsaWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50bHlFbmFibGVkID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmlzRW5hYmxlZCgpO1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICByZXR1cm4gY3VycmVudGx5RW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBwcmV2aW91c2x5RW5hYmxlZCBFbmFibGVkIHN0YXR1cyBvZlxuICAgKiAgIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZSB0aGUgcmVjb25jaWxpYXRpb24gb2NjdXJyZWQuIGBjbG9zZWBcbiAgICogICByZXN0b3JlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24gKHByZXZpb3VzbHlFbmFibGVkKSB7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQocHJldmlvdXNseUVuYWJsZWQpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgcXVldWUgZm9yIGNvbGxlY3RpbmcgYGNvbXBvbmVudERpZE1vdW50YCBhbmRcbiAqIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBkdXJpbmcgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZnRlciBET00gaXMgZmx1c2hlZCwgaW52b2tlIGFsbCByZWdpc3RlcmVkIGBvbkRPTVJlYWR5YCBjYWxsYmFja3MuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbU0VMRUNUSU9OX1JFU1RPUkFUSU9OLCBFVkVOVF9TVVBQUkVTU0lPTiwgT05fRE9NX1JFQURZX1FVRVVFSU5HXTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVFJBTlNBQ1RJT05fV1JBUFBFUlMucHVzaCh7XG4gICAgaW5pdGlhbGl6ZTogUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5GbHVzaCxcbiAgICBjbG9zZTogUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kRmx1c2hcbiAgfSk7XG59XG5cbi8qKlxuICogQ3VycmVudGx5OlxuICogLSBUaGUgb3JkZXIgdGhhdCB0aGVzZSBhcmUgbGlzdGVkIGluIHRoZSB0cmFuc2FjdGlvbiBpcyBjcml0aWNhbDpcbiAqIC0gU3VwcHJlc3NlcyBldmVudHMuXG4gKiAtIFJlc3RvcmVzIHNlbGVjdGlvbiByYW5nZS5cbiAqXG4gKiBGdXR1cmU6XG4gKiAtIFJlc3RvcmUgZG9jdW1lbnQvb3ZlcmZsb3cgc2Nyb2xsIHBvc2l0aW9ucyB0aGF0IHdlcmUgdW5pbnRlbnRpb25hbGx5XG4gKiAgIG1vZGlmaWVkIHZpYSBET00gaW5zZXJ0aW9ucyBhYm92ZSB0aGUgdG9wIHZpZXdwb3J0IGJvdW5kYXJ5LlxuICogLSBJbXBsZW1lbnQvaW50ZWdyYXRlIHdpdGggY3VzdG9taXplZCBjb25zdHJhaW50IGJhc2VkIGxheW91dCBzeXN0ZW0gYW5kIGtlZXBcbiAqICAgdHJhY2sgb2Ygd2hpY2ggZGltZW5zaW9ucyBtdXN0IGJlIHJlbWVhc3VyZWQuXG4gKlxuICogQGNsYXNzIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cbiAqL1xuZnVuY3Rpb24gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbih1c2VDcmVhdGVFbGVtZW50KSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgLy8gT25seSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcmVhbGx5IG5lZWRzIHRoaXMgb3B0aW9uIChzZWVcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nYCksIGJ1dCBzZXJ2ZXItc2lkZSB1c2VzXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uYCBpbnN0ZWFkLiBUaGlzIG9wdGlvbiBpcyBoZXJlIHNvIHRoYXQgaXQnc1xuICAvLyBhY2Nlc3NpYmxlIGFuZCBkZWZhdWx0cyB0byBmYWxzZSB3aGVuIGBSZWFjdERPTUNvbXBvbmVudGAgYW5kXG4gIC8vIGBSZWFjdERPTVRleHRDb21wb25lbnRgIGNoZWNrcyBpdCBpbiBgbW91bnRDb21wb25lbnRgLmBcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSB1c2VDcmVhdGVFbGVtZW50O1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKiAgIFRPRE86IGNvbnZlcnQgdG8gYXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgUmVhY3QgYXN5bmMgZXZlbnRzLlxuICAgKi9cbiAgZ2V0VXBkYXRlUXVldWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3RVcGRhdGVRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50IHRyYW5zYWN0aW9uIHN0YXRlIC0tIGlmIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGlzIG1ldGhvZCBpc1xuICAgKiBwYXNzZWQgdG8gYHJvbGxiYWNrYCwgdGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcmVzZXQgdG8gdGhhdCBzdGF0ZS5cbiAgICovXG4gIGNoZWNrcG9pbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyByZWFjdE1vdW50UmVhZHkgaXMgdGhlIG91ciBvbmx5IHN0YXRlZnVsIHdyYXBwZXJcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHkuY2hlY2twb2ludCgpO1xuICB9LFxuXG4gIHJvbGxiYWNrOiBmdW5jdGlvbiAoY2hlY2twb2ludCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJvbGxiYWNrKGNoZWNrcG9pbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXVzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG4gIH1cbn07XG5cbl9hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZSgnLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Jyk7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcicpO1xuXG4vKipcbiAqIFdoaWxlIGBpc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG9uIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGFuZCBgY29sbGFwc2VkYFxuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBSYW5nZSBvYmplY3QsIElFMTEgc29tZXRpbWVzIGdldHMgdGhlbSB3cm9uZy5cbiAqIElmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYW5kIG9mZnNldHMgYXJlIHRoZSBzYW1lLCB0aGUgcmFuZ2UgaXMgY29sbGFwc2VkLlxuICovXG5mdW5jdGlvbiBpc0NvbGxhcHNlZChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgcmV0dXJuIGFuY2hvck5vZGUgPT09IGZvY3VzTm9kZSAmJiBhbmNob3JPZmZzZXQgPT09IGZvY3VzT2Zmc2V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgYW5jaG9yIGFuZCBmb2N1cyBub2RlL29mZnNldCBwYWlycyBmb3IgSUUuXG4gKlxuICogVGhlIGNhdGNoIGhlcmUgaXMgdGhhdCBJRSdzIHNlbGVjdGlvbiBBUEkgZG9lc24ndCBwcm92aWRlIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZm9yd2FyZCBvciBiYWNrd2FyZCwgc28gd2UgaGF2ZSB0b1xuICogYmVoYXZlIGFzIHRob3VnaCBpdCdzIGFsd2F5cyBmb3J3YXJkLlxuICpcbiAqIElFIHRleHQgZGlmZmVycyBmcm9tIG1vZGVybiBzZWxlY3Rpb24gaW4gdGhhdCBpdCBiZWhhdmVzIGFzIHRob3VnaFxuICogYmxvY2sgZWxlbWVudHMgZW5kIHdpdGggYSBuZXcgbGluZS4gVGhpcyBtZWFucyBjaGFyYWN0ZXIgb2Zmc2V0cyB3aWxsXG4gKiBkaWZmZXIgYmV0d2VlbiB0aGUgdHdvIEFQSXMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldElFT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb247XG4gIHZhciBzZWxlY3RlZFJhbmdlID0gc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gIHZhciBzZWxlY3RlZExlbmd0aCA9IHNlbGVjdGVkUmFuZ2UudGV4dC5sZW5ndGg7XG5cbiAgLy8gRHVwbGljYXRlIHNlbGVjdGlvbiBzbyB3ZSBjYW4gbW92ZSByYW5nZSB3aXRob3V0IGJyZWFraW5nIHVzZXIgc2VsZWN0aW9uLlxuICB2YXIgZnJvbVN0YXJ0ID0gc2VsZWN0ZWRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgZnJvbVN0YXJ0Lm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcblxuICB2YXIgc3RhcnRPZmZzZXQgPSBmcm9tU3RhcnQudGV4dC5sZW5ndGg7XG4gIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIHNlbGVjdGVkTGVuZ3RoO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0T2Zmc2V0LFxuICAgIGVuZDogZW5kT2Zmc2V0XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgdmFyIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG5cbiAgLy8gSW4gRmlyZWZveCwgcmFuZ2Uuc3RhcnRDb250YWluZXIgYW5kIHJhbmdlLmVuZENvbnRhaW5lciBjYW4gYmUgXCJhbm9ueW1vdXNcbiAgLy8gZGl2c1wiLCBlLmcuIHRoZSB1cC9kb3duIGJ1dHRvbnMgb24gYW4gPGlucHV0IHR5cGU9XCJudW1iZXJcIj4uIEFub255bW91c1xuICAvLyBkaXZzIGRvIG5vdCBzZWVtIHRvIGV4cG9zZSBwcm9wZXJ0aWVzLCB0cmlnZ2VyaW5nIGEgXCJQZXJtaXNzaW9uIGRlbmllZFxuICAvLyBlcnJvclwiIGlmIGFueSBvZiBpdHMgcHJvcGVydGllcyBhcmUgYWNjZXNzZWQuIFRoZSBvbmx5IHNlZW1pbmdseSBwb3NzaWJsZVxuICAvLyB3YXkgdG8gYXZvaWQgZXJyb3JpbmcgaXMgdG8gYWNjZXNzIGEgcHJvcGVydHkgdGhhdCB0eXBpY2FsbHkgd29ya3MgZm9yXG4gIC8vIG5vbi1hbm9ueW1vdXMgZGl2cyBhbmQgY2F0Y2ggYW55IGVycm9yIHRoYXQgbWF5IG90aGVyd2lzZSBhcmlzZS4gU2VlXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICBjdXJyZW50UmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuXG4gIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblxuICB2YXIgdGVtcFJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgdGVtcFJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgdGVtcFJhbmdlLnNldEVuZChjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIsIGN1cnJlbnRSYW5nZS5zdGFydE9mZnNldCk7XG5cbiAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQodGVtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsIHRlbXBSYW5nZS5lbmRDb250YWluZXIsIHRlbXBSYW5nZS5lbmRPZmZzZXQpO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAob2Zmc2V0cy5lbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG4gKiB2ZXJzaW9ucywgd2UgdXNlIHRoZSBvbGQgSUUgQVBJIHRvIGNyZWF0ZSBvdXIgc2VsZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldE1vZGVybk9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICBpZiAoIXdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICB2YXIgbGVuZ3RoID0gbm9kZVtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IG9mZnNldHMuZW5kID09PSB1bmRlZmluZWQgPyBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdzZWxlY3Rpb24nIGluIGRvY3VtZW50ICYmICEoJ2dldFNlbGVjdGlvbicgaW4gd2luZG93KTtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAgICovXG4gIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhbnkgbm9kZSByZXR1cm4gdGhlIGZpcnN0IGxlYWYgbm9kZSB3aXRob3V0IGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOUyA9IHtcbiAgeGxpbms6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xufTtcblxuLy8gV2UgdXNlIGF0dHJpYnV0ZXMgZm9yIGV2ZXJ5dGhpbmcgU1ZHIHNvIGxldCdzIGF2b2lkIHNvbWUgZHVwbGljYXRpb24gYW5kIHJ1blxuLy8gY29kZSBpbnN0ZWFkLlxuLy8gVGhlIGZvbGxvd2luZyBhcmUgYWxsIHNwZWNpZmllZCBpbiB0aGUgSFRNTCBjb25maWcgYWxyZWFkeSBzbyB3ZSBleGNsdWRlIGhlcmUuXG4vLyAtIGNsYXNzIChhcyBjbGFzc05hbWUpXG4vLyAtIGNvbG9yXG4vLyAtIGhlaWdodFxuLy8gLSBpZFxuLy8gLSBsYW5nXG4vLyAtIG1heFxuLy8gLSBtZWRpYVxuLy8gLSBtZXRob2Rcbi8vIC0gbWluXG4vLyAtIG5hbWVcbi8vIC0gc3R5bGVcbi8vIC0gdGFyZ2V0XG4vLyAtIHR5cGVcbi8vIC0gd2lkdGhcbnZhciBBVFRSUyA9IHtcbiAgYWNjZW50SGVpZ2h0OiAnYWNjZW50LWhlaWdodCcsXG4gIGFjY3VtdWxhdGU6IDAsXG4gIGFkZGl0aXZlOiAwLFxuICBhbGlnbm1lbnRCYXNlbGluZTogJ2FsaWdubWVudC1iYXNlbGluZScsXG4gIGFsbG93UmVvcmRlcjogJ2FsbG93UmVvcmRlcicsXG4gIGFscGhhYmV0aWM6IDAsXG4gIGFtcGxpdHVkZTogMCxcbiAgYXJhYmljRm9ybTogJ2FyYWJpYy1mb3JtJyxcbiAgYXNjZW50OiAwLFxuICBhdHRyaWJ1dGVOYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZVR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b1JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6IDAsXG4gIGJhc2VGcmVxdWVuY3k6ICdiYXNlRnJlcXVlbmN5JyxcbiAgYmFzZVByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJhc2VsaW5lU2hpZnQ6ICdiYXNlbGluZS1zaGlmdCcsXG4gIGJib3g6IDAsXG4gIGJlZ2luOiAwLFxuICBiaWFzOiAwLFxuICBieTogMCxcbiAgY2FsY01vZGU6ICdjYWxjTW9kZScsXG4gIGNhcEhlaWdodDogJ2NhcC1oZWlnaHQnLFxuICBjbGlwOiAwLFxuICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gIGNsaXBSdWxlOiAnY2xpcC1ydWxlJyxcbiAgY2xpcFBhdGhVbml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjb2xvckludGVycG9sYXRpb246ICdjb2xvci1pbnRlcnBvbGF0aW9uJyxcbiAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gIGNvbG9yUHJvZmlsZTogJ2NvbG9yLXByb2ZpbGUnLFxuICBjb2xvclJlbmRlcmluZzogJ2NvbG9yLXJlbmRlcmluZycsXG4gIGNvbnRlbnRTY3JpcHRUeXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICBjb250ZW50U3R5bGVUeXBlOiAnY29udGVudFN0eWxlVHlwZScsXG4gIGN1cnNvcjogMCxcbiAgY3g6IDAsXG4gIGN5OiAwLFxuICBkOiAwLFxuICBkZWNlbGVyYXRlOiAwLFxuICBkZXNjZW50OiAwLFxuICBkaWZmdXNlQ29uc3RhbnQ6ICdkaWZmdXNlQ29uc3RhbnQnLFxuICBkaXJlY3Rpb246IDAsXG4gIGRpc3BsYXk6IDAsXG4gIGRpdmlzb3I6IDAsXG4gIGRvbWluYW50QmFzZWxpbmU6ICdkb21pbmFudC1iYXNlbGluZScsXG4gIGR1cjogMCxcbiAgZHg6IDAsXG4gIGR5OiAwLFxuICBlZGdlTW9kZTogJ2VkZ2VNb2RlJyxcbiAgZWxldmF0aW9uOiAwLFxuICBlbmFibGVCYWNrZ3JvdW5kOiAnZW5hYmxlLWJhY2tncm91bmQnLFxuICBlbmQ6IDAsXG4gIGV4cG9uZW50OiAwLFxuICBleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gIGZpbGw6IDAsXG4gIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgZmlsbFJ1bGU6ICdmaWxsLXJ1bGUnLFxuICBmaWx0ZXI6IDAsXG4gIGZpbHRlclJlczogJ2ZpbHRlclJlcycsXG4gIGZpbHRlclVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICBmbG9vZENvbG9yOiAnZmxvb2QtY29sb3InLFxuICBmbG9vZE9wYWNpdHk6ICdmbG9vZC1vcGFjaXR5JyxcbiAgZm9jdXNhYmxlOiAwLFxuICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gIGZvbnRTaXplQWRqdXN0OiAnZm9udC1zaXplLWFkanVzdCcsXG4gIGZvbnRTdHJldGNoOiAnZm9udC1zdHJldGNoJyxcbiAgZm9udFN0eWxlOiAnZm9udC1zdHlsZScsXG4gIGZvbnRWYXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgZm9udFdlaWdodDogJ2ZvbnQtd2VpZ2h0JyxcbiAgZm9ybWF0OiAwLFxuICBmcm9tOiAwLFxuICBmeDogMCxcbiAgZnk6IDAsXG4gIGcxOiAwLFxuICBnMjogMCxcbiAgZ2x5cGhOYW1lOiAnZ2x5cGgtbmFtZScsXG4gIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsXG4gIGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbDogJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJyxcbiAgZ2x5cGhSZWY6ICdnbHlwaFJlZicsXG4gIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gIGhhbmdpbmc6IDAsXG4gIGhvcml6QWR2WDogJ2hvcml6LWFkdi14JyxcbiAgaG9yaXpPcmlnaW5YOiAnaG9yaXotb3JpZ2luLXgnLFxuICBpZGVvZ3JhcGhpYzogMCxcbiAgaW1hZ2VSZW5kZXJpbmc6ICdpbWFnZS1yZW5kZXJpbmcnLFxuICAnaW4nOiAwLFxuICBpbjI6IDAsXG4gIGludGVyY2VwdDogMCxcbiAgazogMCxcbiAgazE6IDAsXG4gIGsyOiAwLFxuICBrMzogMCxcbiAgazQ6IDAsXG4gIGtlcm5lbE1hdHJpeDogJ2tlcm5lbE1hdHJpeCcsXG4gIGtlcm5lbFVuaXRMZW5ndGg6ICdrZXJuZWxVbml0TGVuZ3RoJyxcbiAga2VybmluZzogMCxcbiAga2V5UG9pbnRzOiAna2V5UG9pbnRzJyxcbiAga2V5U3BsaW5lczogJ2tleVNwbGluZXMnLFxuICBrZXlUaW1lczogJ2tleVRpbWVzJyxcbiAgbGVuZ3RoQWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgbGV0dGVyU3BhY2luZzogJ2xldHRlci1zcGFjaW5nJyxcbiAgbGlnaHRpbmdDb2xvcjogJ2xpZ2h0aW5nLWNvbG9yJyxcbiAgbGltaXRpbmdDb25lQW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gIGxvY2FsOiAwLFxuICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgbWFya2VySGVpZ2h0OiAnbWFya2VySGVpZ2h0JyxcbiAgbWFya2VyVW5pdHM6ICdtYXJrZXJVbml0cycsXG4gIG1hcmtlcldpZHRoOiAnbWFya2VyV2lkdGgnLFxuICBtYXNrOiAwLFxuICBtYXNrQ29udGVudFVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gIG1hc2tVbml0czogJ21hc2tVbml0cycsXG4gIG1hdGhlbWF0aWNhbDogMCxcbiAgbW9kZTogMCxcbiAgbnVtT2N0YXZlczogJ251bU9jdGF2ZXMnLFxuICBvZmZzZXQ6IDAsXG4gIG9wYWNpdHk6IDAsXG4gIG9wZXJhdG9yOiAwLFxuICBvcmRlcjogMCxcbiAgb3JpZW50OiAwLFxuICBvcmllbnRhdGlvbjogMCxcbiAgb3JpZ2luOiAwLFxuICBvdmVyZmxvdzogMCxcbiAgb3ZlcmxpbmVQb3NpdGlvbjogJ292ZXJsaW5lLXBvc2l0aW9uJyxcbiAgb3ZlcmxpbmVUaGlja25lc3M6ICdvdmVybGluZS10aGlja25lc3MnLFxuICBwYWludE9yZGVyOiAncGFpbnQtb3JkZXInLFxuICBwYW5vc2UxOiAncGFub3NlLTEnLFxuICBwYXRoTGVuZ3RoOiAncGF0aExlbmd0aCcsXG4gIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgcGF0dGVyblRyYW5zZm9ybTogJ3BhdHRlcm5UcmFuc2Zvcm0nLFxuICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICBwb2ludGVyRXZlbnRzOiAncG9pbnRlci1ldmVudHMnLFxuICBwb2ludHM6IDAsXG4gIHBvaW50c0F0WDogJ3BvaW50c0F0WCcsXG4gIHBvaW50c0F0WTogJ3BvaW50c0F0WScsXG4gIHBvaW50c0F0WjogJ3BvaW50c0F0WicsXG4gIHByZXNlcnZlQWxwaGE6ICdwcmVzZXJ2ZUFscGhhJyxcbiAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICBwcmltaXRpdmVVbml0czogJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgcjogMCxcbiAgcmFkaXVzOiAwLFxuICByZWZYOiAncmVmWCcsXG4gIHJlZlk6ICdyZWZZJyxcbiAgcmVuZGVyaW5nSW50ZW50OiAncmVuZGVyaW5nLWludGVudCcsXG4gIHJlcGVhdENvdW50OiAncmVwZWF0Q291bnQnLFxuICByZXBlYXREdXI6ICdyZXBlYXREdXInLFxuICByZXF1aXJlZEV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICByZXF1aXJlZEZlYXR1cmVzOiAncmVxdWlyZWRGZWF0dXJlcycsXG4gIHJlc3RhcnQ6IDAsXG4gIHJlc3VsdDogMCxcbiAgcm90YXRlOiAwLFxuICByeDogMCxcbiAgcnk6IDAsXG4gIHNjYWxlOiAwLFxuICBzZWVkOiAwLFxuICBzaGFwZVJlbmRlcmluZzogJ3NoYXBlLXJlbmRlcmluZycsXG4gIHNsb3BlOiAwLFxuICBzcGFjaW5nOiAwLFxuICBzcGVjdWxhckNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gIHNwZWN1bGFyRXhwb25lbnQ6ICdzcGVjdWxhckV4cG9uZW50JyxcbiAgc3BlZWQ6IDAsXG4gIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gIHN0YXJ0T2Zmc2V0OiAnc3RhcnRPZmZzZXQnLFxuICBzdGREZXZpYXRpb246ICdzdGREZXZpYXRpb24nLFxuICBzdGVtaDogMCxcbiAgc3RlbXY6IDAsXG4gIHN0aXRjaFRpbGVzOiAnc3RpdGNoVGlsZXMnLFxuICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICBzdHJpa2V0aHJvdWdoUG9zaXRpb246ICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJyxcbiAgc3RyaWtldGhyb3VnaFRoaWNrbmVzczogJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJyxcbiAgc3RyaW5nOiAwLFxuICBzdHJva2U6IDAsXG4gIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICBzdHJva2VEYXNob2Zmc2V0OiAnc3Ryb2tlLWRhc2hvZmZzZXQnLFxuICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICBzdHJva2VMaW5lam9pbjogJ3N0cm9rZS1saW5lam9pbicsXG4gIHN0cm9rZU1pdGVybGltaXQ6ICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgc3VyZmFjZVNjYWxlOiAnc3VyZmFjZVNjYWxlJyxcbiAgc3lzdGVtTGFuZ3VhZ2U6ICdzeXN0ZW1MYW5ndWFnZScsXG4gIHRhYmxlVmFsdWVzOiAndGFibGVWYWx1ZXMnLFxuICB0YXJnZXRYOiAndGFyZ2V0WCcsXG4gIHRhcmdldFk6ICd0YXJnZXRZJyxcbiAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgdGV4dERlY29yYXRpb246ICd0ZXh0LWRlY29yYXRpb24nLFxuICB0ZXh0UmVuZGVyaW5nOiAndGV4dC1yZW5kZXJpbmcnLFxuICB0ZXh0TGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gIHRvOiAwLFxuICB0cmFuc2Zvcm06IDAsXG4gIHUxOiAwLFxuICB1MjogMCxcbiAgdW5kZXJsaW5lUG9zaXRpb246ICd1bmRlcmxpbmUtcG9zaXRpb24nLFxuICB1bmRlcmxpbmVUaGlja25lc3M6ICd1bmRlcmxpbmUtdGhpY2tuZXNzJyxcbiAgdW5pY29kZTogMCxcbiAgdW5pY29kZUJpZGk6ICd1bmljb2RlLWJpZGknLFxuICB1bmljb2RlUmFuZ2U6ICd1bmljb2RlLXJhbmdlJyxcbiAgdW5pdHNQZXJFbTogJ3VuaXRzLXBlci1lbScsXG4gIHZBbHBoYWJldGljOiAndi1hbHBoYWJldGljJyxcbiAgdkhhbmdpbmc6ICd2LWhhbmdpbmcnLFxuICB2SWRlb2dyYXBoaWM6ICd2LWlkZW9ncmFwaGljJyxcbiAgdk1hdGhlbWF0aWNhbDogJ3YtbWF0aGVtYXRpY2FsJyxcbiAgdmFsdWVzOiAwLFxuICB2ZWN0b3JFZmZlY3Q6ICd2ZWN0b3ItZWZmZWN0JyxcbiAgdmVyc2lvbjogMCxcbiAgdmVydEFkdlk6ICd2ZXJ0LWFkdi15JyxcbiAgdmVydE9yaWdpblg6ICd2ZXJ0LW9yaWdpbi14JyxcbiAgdmVydE9yaWdpblk6ICd2ZXJ0LW9yaWdpbi15JyxcbiAgdmlld0JveDogJ3ZpZXdCb3gnLFxuICB2aWV3VGFyZ2V0OiAndmlld1RhcmdldCcsXG4gIHZpc2liaWxpdHk6IDAsXG4gIHdpZHRoczogMCxcbiAgd29yZFNwYWNpbmc6ICd3b3JkLXNwYWNpbmcnLFxuICB3cml0aW5nTW9kZTogJ3dyaXRpbmctbW9kZScsXG4gIHg6IDAsXG4gIHhIZWlnaHQ6ICd4LWhlaWdodCcsXG4gIHgxOiAwLFxuICB4MjogMCxcbiAgeENoYW5uZWxTZWxlY3RvcjogJ3hDaGFubmVsU2VsZWN0b3InLFxuICB4bGlua0FjdHVhdGU6ICd4bGluazphY3R1YXRlJyxcbiAgeGxpbmtBcmNyb2xlOiAneGxpbms6YXJjcm9sZScsXG4gIHhsaW5rSHJlZjogJ3hsaW5rOmhyZWYnLFxuICB4bGlua1JvbGU6ICd4bGluazpyb2xlJyxcbiAgeGxpbmtTaG93OiAneGxpbms6c2hvdycsXG4gIHhsaW5rVGl0bGU6ICd4bGluazp0aXRsZScsXG4gIHhsaW5rVHlwZTogJ3hsaW5rOnR5cGUnLFxuICB4bWxCYXNlOiAneG1sOmJhc2UnLFxuICB4bWxuczogMCxcbiAgeG1sbnNYbGluazogJ3htbG5zOnhsaW5rJyxcbiAgeG1sTGFuZzogJ3htbDpsYW5nJyxcbiAgeG1sU3BhY2U6ICd4bWw6c3BhY2UnLFxuICB5OiAwLFxuICB5MTogMCxcbiAgeTI6IDAsXG4gIHlDaGFubmVsU2VsZWN0b3I6ICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgejogMCxcbiAgem9vbUFuZFBhbjogJ3pvb21BbmRQYW4nXG59O1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHt9LFxuICBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiB7XG4gICAgeGxpbmtBY3R1YXRlOiBOUy54bGluayxcbiAgICB4bGlua0FyY3JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rSHJlZjogTlMueGxpbmssXG4gICAgeGxpbmtSb2xlOiBOUy54bGluayxcbiAgICB4bGlua1Nob3c6IE5TLnhsaW5rLFxuICAgIHhsaW5rVGl0bGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rVHlwZTogTlMueGxpbmssXG4gICAgeG1sQmFzZTogTlMueG1sLFxuICAgIHhtbExhbmc6IE5TLnhtbCxcbiAgICB4bWxTcGFjZTogTlMueG1sXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7fVxufTtcblxuT2JqZWN0LmtleXMoQVRUUlMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBTVkdET01Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzW2tleV0gPSAwO1xuICBpZiAoQVRUUlNba2V5XSkge1xuICAgIFNWR0RPTVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzW2tleV0gPSBBVFRSU1trZXldO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTVkdET01Qcm9wZXJ0eUNvbmZpZzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5wdXRTZWxlY3Rpb24nKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZSgnLi9pc1RleHRJbnB1dEVsZW1lbnQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcblxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTE7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uU2VsZWN0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25TZWxlY3RDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29udGV4dE1lbnUnLCAndG9wRm9jdXMnLCAndG9wS2V5RG93bicsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nLCAndG9wTW91c2VVcCcsICd0b3BTZWxlY3Rpb25DaGFuZ2UnXVxuICB9XG59O1xuXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vLyBUcmFjayB3aGV0aGVyIGEgbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIHBsdWdpbi4gSWYgbm9uZSBleGlzdCwgd2UgZG9cbi8vIG5vdCBleHRyYWN0IGV2ZW50cy4gU2VlICMzNjM5LlxudmFyIGhhc0xpc3RlbmVyID0gZmFsc2U7XG5cbi8qKlxuICogR2V0IGFuIG9iamVjdCB3aGljaCBpcyBhIHVuaXF1ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIG5vdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBub2RlcyBvciBicm93c2VycywgYnV0XG4gKiB0d28gaWRlbnRpY2FsIHNlbGVjdGlvbnMgb24gdGhlIHNhbWUgbm9kZSB3aWxsIHJldHVybiBpZGVudGljYWwgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRFbGVtZW50OiByYW5nZS5wYXJlbnRFbGVtZW50KCksXG4gICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcbiAgICAgIGxlZnQ6IHJhbmdlLmJvdW5kaW5nTGVmdFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQb2xsIHNlbGVjdGlvbiB0byBzZWUgd2hldGhlciBpdCdzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICBpZiAobW91c2VEb3duIHx8IGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fCBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oYWN0aXZlRWxlbWVudCk7XG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG5cbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5zZWxlY3QsIGFjdGl2ZUVsZW1lbnRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICghaGFzTGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBpbnB1dCBub2RlIHRoYXQgaGFzIGZvY3VzLlxuICAgICAgY2FzZSAndG9wRm9jdXMnOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpIHx8IHRhcmdldE5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BCbHVyJzpcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ29udGV4dE1lbnUnOlxuICAgICAgY2FzZSAndG9wTW91c2VVcCc6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLiBJRSdzIGV2ZW50IGZpcmVzIG91dCBvZiBvcmRlciB3aXRoIHJlc3BlY3RcbiAgICAgIC8vIHRvIGtleSBhbmQgaW5wdXQgZXZlbnRzIG9uIGRlbGV0aW9uLCBzbyB3ZSBkaXNjYXJkIGl0LlxuICAgICAgLy9cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIC8vIFRoaXMgaXMgYWxzbyBvdXIgYXBwcm9hY2ggZm9yIElFIGhhbmRsaW5nLCBmb3IgdGhlIHJlYXNvbiBhYm92ZS5cbiAgICAgIGNhc2UgJ3RvcFNlbGVjdGlvbkNoYW5nZSc6XG4gICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbiAoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uU2VsZWN0Jykge1xuICAgICAgaGFzTGlzdGVuZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RFdmVudFBsdWdpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNBbmltYXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0ZvY3VzRXZlbnQnKTtcbnZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50Jyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRHJhZ0V2ZW50Jyk7XG52YXIgU3ludGhldGljVG91Y2hFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVG91Y2hFdmVudCcpO1xudmFyIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVHJhbnNpdGlvbkV2ZW50Jyk7XG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1doZWVsRXZlbnQnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFR1cm5zXG4gKiBbJ2Fib3J0JywgLi4uXVxuICogaW50b1xuICogZXZlbnRUeXBlcyA9IHtcbiAqICAgJ2Fib3J0Jzoge1xuICogICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gKiAgICAgICBidWJibGVkOiAnb25BYm9ydCcsXG4gKiAgICAgICBjYXB0dXJlZDogJ29uQWJvcnRDYXB0dXJlJyxcbiAqICAgICB9LFxuICogICAgIGRlcGVuZGVuY2llczogWyd0b3BBYm9ydCddLFxuICogICB9LFxuICogICAuLi5cbiAqIH07XG4gKiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gKiAgICd0b3BBYm9ydCc6IHsgc2FtZUNvbmZpZyB9XG4gKiB9O1xuICovXG52YXIgZXZlbnRUeXBlcyA9IHt9O1xudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHt9O1xuWydhYm9ydCcsICdhbmltYXRpb25FbmQnLCAnYW5pbWF0aW9uSXRlcmF0aW9uJywgJ2FuaW1hdGlvblN0YXJ0JywgJ2JsdXInLCAnY2FuUGxheScsICdjYW5QbGF5VGhyb3VnaCcsICdjbGljaycsICdjb250ZXh0TWVudScsICdjb3B5JywgJ2N1dCcsICdkb3VibGVDbGljaycsICdkcmFnJywgJ2RyYWdFbmQnLCAnZHJhZ0VudGVyJywgJ2RyYWdFeGl0JywgJ2RyYWdMZWF2ZScsICdkcmFnT3ZlcicsICdkcmFnU3RhcnQnLCAnZHJvcCcsICdkdXJhdGlvbkNoYW5nZScsICdlbXB0aWVkJywgJ2VuY3J5cHRlZCcsICdlbmRlZCcsICdlcnJvcicsICdmb2N1cycsICdpbnB1dCcsICdpbnZhbGlkJywgJ2tleURvd24nLCAna2V5UHJlc3MnLCAna2V5VXAnLCAnbG9hZCcsICdsb2FkZWREYXRhJywgJ2xvYWRlZE1ldGFkYXRhJywgJ2xvYWRTdGFydCcsICdtb3VzZURvd24nLCAnbW91c2VNb3ZlJywgJ21vdXNlT3V0JywgJ21vdXNlT3ZlcicsICdtb3VzZVVwJywgJ3Bhc3RlJywgJ3BhdXNlJywgJ3BsYXknLCAncGxheWluZycsICdwcm9ncmVzcycsICdyYXRlQ2hhbmdlJywgJ3Jlc2V0JywgJ3Njcm9sbCcsICdzZWVrZWQnLCAnc2Vla2luZycsICdzdGFsbGVkJywgJ3N1Ym1pdCcsICdzdXNwZW5kJywgJ3RpbWVVcGRhdGUnLCAndG91Y2hDYW5jZWwnLCAndG91Y2hFbmQnLCAndG91Y2hNb3ZlJywgJ3RvdWNoU3RhcnQnLCAndHJhbnNpdGlvbkVuZCcsICd2b2x1bWVDaGFuZ2UnLCAnd2FpdGluZycsICd3aGVlbCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciBjYXBpdGFsaXplZEV2ZW50ID0gZXZlbnRbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICB2YXIgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuICB2YXIgdG9wRXZlbnQgPSAndG9wJyArIGNhcGl0YWxpemVkRXZlbnQ7XG5cbiAgdmFyIHR5cGUgPSB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IG9uRXZlbnQsXG4gICAgICBjYXB0dXJlZDogb25FdmVudCArICdDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wRXZlbnRdXG4gIH07XG4gIGV2ZW50VHlwZXNbZXZlbnRdID0gdHlwZTtcbiAgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcEV2ZW50XSA9IHR5cGU7XG59KTtcblxudmFyIG9uQ2xpY2tMaXN0ZW5lcnMgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGljdGlvbmFyeUtleShpbnN0KSB7XG4gIC8vIFByZXZlbnRzIFY4IHBlcmZvcm1hbmNlIGlzc3VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MjMyXG4gIHJldHVybiAnLicgKyBpbnN0Ll9yb290Tm9kZUlEO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ3RvcEFib3J0JzpcbiAgICAgIGNhc2UgJ3RvcENhblBsYXknOlxuICAgICAgY2FzZSAndG9wQ2FuUGxheVRocm91Z2gnOlxuICAgICAgY2FzZSAndG9wRHVyYXRpb25DaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wRW1wdGllZCc6XG4gICAgICBjYXNlICd0b3BFbmNyeXB0ZWQnOlxuICAgICAgY2FzZSAndG9wRW5kZWQnOlxuICAgICAgY2FzZSAndG9wRXJyb3InOlxuICAgICAgY2FzZSAndG9wSW5wdXQnOlxuICAgICAgY2FzZSAndG9wSW52YWxpZCc6XG4gICAgICBjYXNlICd0b3BMb2FkJzpcbiAgICAgIGNhc2UgJ3RvcExvYWRlZERhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZGVkTWV0YWRhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZFN0YXJ0JzpcbiAgICAgIGNhc2UgJ3RvcFBhdXNlJzpcbiAgICAgIGNhc2UgJ3RvcFBsYXknOlxuICAgICAgY2FzZSAndG9wUGxheWluZyc6XG4gICAgICBjYXNlICd0b3BQcm9ncmVzcyc6XG4gICAgICBjYXNlICd0b3BSYXRlQ2hhbmdlJzpcbiAgICAgIGNhc2UgJ3RvcFJlc2V0JzpcbiAgICAgIGNhc2UgJ3RvcFNlZWtlZCc6XG4gICAgICBjYXNlICd0b3BTZWVraW5nJzpcbiAgICAgIGNhc2UgJ3RvcFN0YWxsZWQnOlxuICAgICAgY2FzZSAndG9wU3VibWl0JzpcbiAgICAgIGNhc2UgJ3RvcFN1c3BlbmQnOlxuICAgICAgY2FzZSAndG9wVGltZVVwZGF0ZSc6XG4gICAgICBjYXNlICd0b3BWb2x1bWVDaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wV2FpdGluZyc6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgY2FzZSAndG9wRm9jdXMnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDbGljayc6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wRG91YmxlQ2xpY2snOlxuICAgICAgY2FzZSAndG9wTW91c2VEb3duJzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlTW92ZSc6XG4gICAgICBjYXNlICd0b3BNb3VzZVVwJzpcbiAgICAgIC8vIFRPRE86IERpc2FibGVkIGVsZW1lbnRzIHNob3VsZCBub3QgcmVzcG9uZCB0byBtb3VzZSBldmVudHNcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3V0JzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3Zlcic6XG4gICAgICBjYXNlICd0b3BDb250ZXh0TWVudSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcERyYWcnOlxuICAgICAgY2FzZSAndG9wRHJhZ0VuZCc6XG4gICAgICBjYXNlICd0b3BEcmFnRW50ZXInOlxuICAgICAgY2FzZSAndG9wRHJhZ0V4aXQnOlxuICAgICAgY2FzZSAndG9wRHJhZ0xlYXZlJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdPdmVyJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdTdGFydCc6XG4gICAgICBjYXNlICd0b3BEcm9wJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BUb3VjaENhbmNlbCc6XG4gICAgICBjYXNlICd0b3BUb3VjaEVuZCc6XG4gICAgICBjYXNlICd0b3BUb3VjaE1vdmUnOlxuICAgICAgY2FzZSAndG9wVG91Y2hTdGFydCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEFuaW1hdGlvbkVuZCc6XG4gICAgICBjYXNlICd0b3BBbmltYXRpb25JdGVyYXRpb24nOlxuICAgICAgY2FzZSAndG9wQW5pbWF0aW9uU3RhcnQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wVHJhbnNpdGlvbkVuZCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wU2Nyb2xsJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wV2hlZWwnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDb3B5JzpcbiAgICAgIGNhc2UgJ3RvcEN1dCc6XG4gICAgICBjYXNlICd0b3BQYXN0ZSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgICFFdmVudENvbnN0cnVjdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLCB0b3BMZXZlbFR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzg2JywgdG9wTGV2ZWxUeXBlKSA6IHZvaWQgMDtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgLy8gTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb25cbiAgICAvLyBub24taW50ZXJhY3RpdmUgZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90XG4gICAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAgIC8vIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAgICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25DbGljaycgJiYgIWlzSW50ZXJhY3RpdmUoaW5zdC5fdGFnKSkge1xuICAgICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgaWYgKCFvbkNsaWNrTGlzdGVuZXJzW2tleV0pIHtcbiAgICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldID0gRXZlbnRMaXN0ZW5lci5saXN0ZW4obm9kZSwgJ2NsaWNrJywgZW1wdHlGdW5jdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHdpbGxEZWxldGVMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uQ2xpY2snICYmICFpc0ludGVyYWN0aXZlKGluc3QuX3RhZykpIHtcbiAgICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlIG9uQ2xpY2tMaXN0ZW5lcnNba2V5XTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlRXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zLyNBbmltYXRpb25FdmVudC1pbnRlcmZhY2VcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0FuaW1hdGlvbkV2ZW50XG4gKi9cbnZhciBBbmltYXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgYW5pbWF0aW9uTmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNBbmltYXRpb25FdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNBbmltYXRpb25FdmVudCwgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NsaXBib2FyZC1hcGlzL1xuICovXG52YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgPyBldmVudC5jbGlwYm9hcmREYXRhIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50LCBDbGlwYm9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZSgnLi9nZXRFdmVudEtleScpO1xudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRNb2RpZmllclN0YXRlJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBLZXlib2FyZEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGtleTogZ2V0RXZlbnRLZXksXG4gIGxvY2F0aW9uOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICByZXBlYXQ6IG51bGwsXG4gIGxvY2FsZTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAvLyBMZWdhY3kgSW50ZXJmYWNlXG4gIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYGtleUNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlEb3duL1VwIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHBoeXNpY2FsIGtleWJvYXJkIGtleS5cblxuICAgIC8vIFRoZSBhY3R1YWwgbWVhbmluZyBvZiB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgdXNlcnMnIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHdoaWNoIGNhbm5vdCBiZSBkZXRlY3RlZC4gQXNzdW1pbmcgdGhhdCBpdCBpcyBhIFVTIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cbiAgICAvLyBEdWUgdG8gdGhpcywgaXQgaXMgbGVmdCB0byB0aGUgdXNlciB0byBpbXBsZW1lbnQgYXQgdGhpcyB0aW1lLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYHdoaWNoYCBpcyBhbiBhbGlhcyBmb3IgZWl0aGVyIGBrZXlDb2RlYCBvciBgY2hhckNvZGVgIGRlcGVuZGluZyBvbiB0aGVcbiAgICAvLyB0eXBlIG9mIHRoZSBldmVudC5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljS2V5Ym9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljS2V5Ym9hcmRFdmVudCwgS2V5Ym9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xuXG4vKipcbiAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciBub3JtYWxpemVLZXkgPSB7XG4gIEVzYzogJ0VzY2FwZScsXG4gIFNwYWNlYmFyOiAnICcsXG4gIExlZnQ6ICdBcnJvd0xlZnQnLFxuICBVcDogJ0Fycm93VXAnLFxuICBSaWdodDogJ0Fycm93UmlnaHQnLFxuICBEb3duOiAnQXJyb3dEb3duJyxcbiAgRGVsOiAnRGVsZXRlJyxcbiAgV2luOiAnT1MnLFxuICBNZW51OiAnQ29udGV4dE1lbnUnLFxuICBBcHBzOiAnQ29udGV4dE1lbnUnLFxuICBTY3JvbGw6ICdTY3JvbGxMb2NrJyxcbiAgTW96UHJpbnRhYmxlS2V5OiAnVW5pZGVudGlmaWVkJ1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIGxlZ2FjeSBga2V5Q29kZWAgdG8gSFRNTDUgYGtleWBcbiAqIE9ubHkgc3BlY2lhbCBrZXlzIHN1cHBvcnRlZCwgYWxsIG90aGVycyBkZXBlbmQgb24ga2V5Ym9hcmQgbGF5b3V0IG9yIGJyb3dzZXJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciB0cmFuc2xhdGVUb0tleSA9IHtcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAzMjogJyAnLFxuICAzMzogJ1BhZ2VVcCcsXG4gIDM0OiAnUGFnZURvd24nLFxuICAzNTogJ0VuZCcsXG4gIDM2OiAnSG9tZScsXG4gIDM3OiAnQXJyb3dMZWZ0JyxcbiAgMzg6ICdBcnJvd1VwJyxcbiAgMzk6ICdBcnJvd1JpZ2h0JyxcbiAgNDA6ICdBcnJvd0Rvd24nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgMTEyOiAnRjEnLFxuICAxMTM6ICdGMicsXG4gIDExNDogJ0YzJyxcbiAgMTE1OiAnRjQnLFxuICAxMTY6ICdGNScsXG4gIDExNzogJ0Y2JyxcbiAgMTE4OiAnRjcnLFxuICAxMTk6ICdGOCcsXG4gIDEyMDogJ0Y5JyxcbiAgMTIxOiAnRjEwJyxcbiAgMTIyOiAnRjExJyxcbiAgMTIzOiAnRjEyJyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAyMjQ6ICdNZXRhJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpO1xuXG4gICAgLy8gVGhlIGVudGVyLWtleSBpcyB0ZWNobmljYWxseSBib3RoIHByaW50YWJsZSBhbmQgbm9uLXByaW50YWJsZSBhbmQgY2FuXG4gICAgLy8gdGh1cyBiZSBjYXB0dXJlZCBieSBga2V5cHJlc3NgLCBubyBvdGhlciBub24tcHJpbnRhYmxlIGtleSBzaG91bGQuXG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50S2V5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNNb3VzZUV2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhVHJhbnNmZXI6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWNzczMtdHJhbnNpdGlvbnMtMjAwOTAzMjAvI3RyYW5zaXRpb24tZXZlbnRzLVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVHJhbnNpdGlvbkV2ZW50XG4gKi9cbnZhciBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHByb3BlcnR5TmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVHJhbnNpdGlvbkV2ZW50LCBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgV2hlZWxFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWGAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChyaWdodCBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFYJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWCA6IDA7XG4gIH0sXG4gIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVknIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFZIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFZYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhWScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVkgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY01vdXNlRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1doZWVsRXZlbnQsIFdoZWVsRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG5cbnZhciBET0NfTk9ERV9UWVBFID0gOTtcblxuZnVuY3Rpb24gUmVhY3RET01Db250YWluZXJJbmZvKHRvcExldmVsV3JhcHBlciwgbm9kZSkge1xuICB2YXIgaW5mbyA9IHtcbiAgICBfdG9wTGV2ZWxXcmFwcGVyOiB0b3BMZXZlbFdyYXBwZXIsXG4gICAgX2lkQ291bnRlcjogMSxcbiAgICBfb3duZXJEb2N1bWVudDogbm9kZSA/IG5vZGUubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUgPyBub2RlIDogbm9kZS5vd25lckRvY3VtZW50IDogbnVsbCxcbiAgICBfbm9kZTogbm9kZSxcbiAgICBfdGFnOiBub2RlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbCxcbiAgICBfbmFtZXNwYWNlVVJJOiBub2RlID8gbm9kZS5uYW1lc3BhY2VVUkkgOiBudWxsXG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaW5mby5fYW5jZXN0b3JJbmZvID0gbm9kZSA/IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKG51bGwsIGluZm8uX3RhZywgbnVsbCkgOiBudWxsO1xuICB9XG4gIHJldHVybiBpbmZvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29udGFpbmVySW5mbzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01GZWF0dXJlRmxhZ3MgPSB7XG4gIHVzZUNyZWF0ZUVsZW1lbnQ6IHRydWUsXG4gIHVzZUZpYmVyOiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZlYXR1cmVGbGFnczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xuXG52YXIgVEFHX0VORCA9IC9cXC8/Pi87XG52YXIgQ09NTUVOVF9TVEFSVCA9IC9ePFxcIVxcLVxcLS87XG5cbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0ge1xuICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZyB3aXRoIGNoZWNrc3VtIGF0dHJpYnV0ZSBhdHRhY2hlZFxuICAgKi9cbiAgYWRkQ2hlY2tzdW1Ub01hcmt1cDogZnVuY3Rpb24gKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcblxuICAgIC8vIEFkZCBjaGVja3N1bSAoaGFuZGxlIGJvdGggcGFyZW50IHRhZ3MsIGNvbW1lbnRzIGFuZCBzZWxmLWNsb3NpbmcgdGFncylcbiAgICBpZiAoQ09NTUVOVF9TVEFSVC50ZXN0KG1hcmt1cCkpIHtcbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXJrdXAucmVwbGFjZShUQUdfRU5ELCAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCIkJicpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHJvb3QgUmVhY3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgdGhlIG1hcmt1cCBpcyB0aGUgc2FtZVxuICAgKi9cbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE1PRCA9IDY1NTIxO1xuXG4vLyBhZGxlcjMyIGlzIG5vdCBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIGFuZCBpcyBvbmx5IHVzZWQgdG8gc2FuaXR5IGNoZWNrIHRoYXRcbi8vIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBtYXRjaGVzIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBjbGllbnQuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIChhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIFNoZWV0SlMgdmVyc2lvbikgaGFzIGJlZW4gb3B0aW1pemVkXG4vLyBmb3Igb3VyIHVzZSBjYXNlLCBhdCB0aGUgZXhwZW5zZSBvZiBjb25mb3JtaW5nIHRvIHRoZSBhZGxlcjMyIHNwZWNpZmljYXRpb25cbi8vIGZvciBub24tYXNjaWkgaW5wdXRzLlxuZnVuY3Rpb24gYWRsZXIzMihkYXRhKSB7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0gZGF0YS5sZW5ndGg7XG4gIHZhciBtID0gbCAmIH4weDM7XG4gIHdoaWxlIChpIDwgbSkge1xuICAgIHZhciBuID0gTWF0aC5taW4oaSArIDQwOTYsIG0pO1xuICAgIGZvciAoOyBpIDwgbjsgaSArPSA0KSB7XG4gICAgICBiICs9IChhICs9IGRhdGEuY2hhckNvZGVBdChpKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDEpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMikpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAzKSk7XG4gICAgfVxuICAgIGEgJT0gTU9EO1xuICAgIGIgJT0gTU9EO1xuICB9XG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgYiArPSBhICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgfVxuICBhICU9IE1PRDtcbiAgYiAlPSBNT0Q7XG4gIHJldHVybiBhIHwgYiA8PCAxNjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzE1LjYuMSc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG5cbnZhciBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZSA9IHJlcXVpcmUoJy4vZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgZWxlbWVudC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3Rkb20uZmluZGRvbW5vZGVcbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fERPTUVsZW1lbnR9IGNvbXBvbmVudE9yRWxlbWVudFxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9IFRoZSByb290IG5vZGUgb2YgdGhpcyBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBmaW5kRE9NTm9kZShjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIGlmIChvd25lciAhPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcob3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbiAgfVxuXG4gIHZhciBpbnN0ID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoY29tcG9uZW50T3JFbGVtZW50KTtcbiAgaWYgKGluc3QpIHtcbiAgICBpbnN0ID0gZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUoaW5zdCk7XG4gICAgcmV0dXJuIGluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KSA6IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZmluZERPTU5vZGUgd2FzIGNhbGxlZCBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzQ0JykgOiB2b2lkIDA7XG4gIH0gZWxzZSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLCBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKSA6IF9wcm9kSW52YXJpYW50KCc0NScsIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudCkpIDogdm9pZCAwO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZERPTU5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50LnJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOyIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJ1xuaW1wb3J0IHtBbGdvcml0aG1zfSBmcm9tICdlZ3JhcGgvYWxnb3JpdGhtcydcbmltcG9ydCB7QWxsb2NhdG9yfSBmcm9tICdlZ3JhcGgvYWxsb2NhdG9yJ1xuaW1wb3J0IHtTaW11bGF0aW9ufSBmcm9tICdlZ3JhcGgvbGF5b3V0L2ZvcmNlLWRpcmVjdGVkJ1xuaW1wb3J0IHtHcmFwaH0gZnJvbSAnZWdyYXBoL2dyYXBoJ1xuaW1wb3J0IHtFZGdlQnVuZGxpbmd9IGZyb20gJ2VncmFwaC9lZGdlLWJ1bmRsaW5nJ1xuaW1wb3J0IHtsb2FkTW9kdWxlfSBmcm9tICcuL21vZHVsZSdcbmltcG9ydCBFR3JhcGggZnJvbSAnLi9lZ3JhcGgvZ3JhcGgnXG5pbXBvcnQgRWRnZUNvbmNlbnRyYXRpb25UcmFuc2Zvcm1lciBmcm9tICcuL2VncmFwaC90cmFuc2Zvcm1lci9lZGdlLWNvbmNlbnRyYXRpb24nXG5pbXBvcnQgcXVhc2lCaWNsaXF1ZU1pbmluZyBmcm9tICcuL2VncmFwaC90cmFuc2Zvcm1lci9lZGdlLWNvbmNlbnRyYXRpb24vcXVhc2ktYmljbGlxdWUtbWluaW5nJ1xuXG5jb25zdCBjb3VudEdyb3VwcyA9IChub2Rlcywga2V5KSA9PiB7XG4gIGNvbnN0IGdyb3VwQ291bnQgPSBuZXcgTWFwKClcbiAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgaWYgKCFncm91cENvdW50Lmhhcyhub2RlLnByb3BlcnRpZXNba2V5XSkpIHtcbiAgICAgIGdyb3VwQ291bnQuc2V0KG5vZGUucHJvcGVydGllc1trZXldLCAwKVxuICAgIH1cbiAgICBncm91cENvdW50LnNldChub2RlLnByb3BlcnRpZXNba2V5XSwgZ3JvdXBDb3VudC5nZXQobm9kZS5wcm9wZXJ0aWVzW2tleV0pICsgMSlcbiAgfVxuICBjb25zdCBncm91cHMgPSBBcnJheS5mcm9tKGdyb3VwQ291bnQuZW50cmllcygpKS5tYXAoKFtuYW1lLCBjb3VudF0pID0+ICh7bmFtZSwgY291bnR9KSlcbiAgZ3JvdXBzLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KVxuICByZXR1cm4gZ3JvdXBzXG59XG5cbmNvbnN0IHJlY3RHcm91cHMgPSAoZ3JvdXBzLCB3aWR0aCwgaGVpZ2h0LCBNb2R1bGUpID0+IHtcbiAgY29uc3QgYWxnb3JpdGhtcyA9IG5ldyBBbGdvcml0aG1zKE1vZHVsZSlcbiAgY29uc3QgdmFsdWVzID0gZ3JvdXBzLm1hcCgoe2NvdW50fSkgPT4gY291bnQpXG4gIGNvbnN0IHN1bVZhbHVlcyA9IHZhbHVlcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKVxuICBjb25zdCBub3JtYWxpemVkVmFsdWVzID0gdmFsdWVzLm1hcCgodikgPT4gdiAvIHN1bVZhbHVlcyAqIHdpZHRoICogaGVpZ2h0KVxuICByZXR1cm4gYWxnb3JpdGhtcy5zcXVhcmlmaWVkVHJlZW1hcCh3aWR0aCwgaGVpZ2h0LCBub3JtYWxpemVkVmFsdWVzKVxufVxuXG5jb25zdCBjaXJjbGVHcm91cHMgPSAoZ3JvdXBzLCB3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gIGNvbnN0IHRyZWUgPSB7XG4gICAgbmFtZTogJycsXG4gICAgY2hpbGRyZW46IGdyb3Vwcy5tYXAoKHtuYW1lLCBjb3VudH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHNpemU6IGNvdW50XG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBjb25zdCByb290ID0gZDMuaGllcmFyY2h5KHRyZWUpXG4gICAgLnN1bSgoZCkgPT4gZC5zaXplKVxuICAgIC5zb3J0KChhLCBiKSA9PiBiLnZhbHVlIC0gYS52YWx1ZSlcbiAgY29uc3QgcGFjayA9IGQzLnBhY2soKS5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcbiAgY29uc3QgdGlsZXMgPSBwYWNrKHJvb3QpLmRlc2NlbmRhbnRzKClcbiAgICAubWFwKChub2RlKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBub2RlLnggLSBub2RlLnIsXG4gICAgICAgIHk6IG5vZGUueSAtIG5vZGUucixcbiAgICAgICAgd2lkdGg6IG5vZGUuciAqIDIsXG4gICAgICAgIGhlaWdodDogbm9kZS5yICogMlxuICAgICAgfVxuICAgIH0pXG4gIHRpbGVzLnNoaWZ0KDApXG4gIHJldHVybiB0aWxlc1xufVxuXG5jb25zdCBncm91cExheW91dCA9ICh0eXBlLCBncm91cHMsIHdpZHRoLCBoZWlnaHQsIE1vZHVsZSkgPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdjaXJjbGUtcGFjayc6XG4gICAgICByZXR1cm4gY2lyY2xlR3JvdXBzKGdyb3Vwcywgd2lkdGgsIGhlaWdodClcbiAgICBjYXNlICd0cmVlbWFwJzpcbiAgICAgIHJldHVybiByZWN0R3JvdXBzKGdyb3Vwcywgd2lkdGgsIGhlaWdodCwgTW9kdWxlKVxuICB9XG4gIHJldHVybiByZWN0R3JvdXBzKGdyb3Vwcywgd2lkdGgsIGhlaWdodCwgTW9kdWxlKVxufVxuXG5jb25zdCBncm91cFR5cGUgPSBuZXcgTWFwKFtcbiAgWydjaXJjbGUtcGFjaycsICdjaXJjbGUnXSxcbiAgWyd0cmVlbWFwJywgJ3JlY3QnXVxuXSlcblxuY29uc3QgYXBwbHlFZGdlQ29uY2VudHJhdGlvbiA9IChkYXRhLCBncm91cHMsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZ3JhcGggPSBuZXcgRUdyYXBoKClcbiAgZm9yIChjb25zdCBub2RlIG9mIGRhdGEubm9kZXMpIHtcbiAgICBncmFwaC5hZGRWZXJ0ZXgobm9kZS5pZCwgbm9kZSlcbiAgfVxuICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZGF0YS5yZWxhdGlvbnNoaXBzKSB7XG4gICAgY29uc3Qge3N0YXJ0Tm9kZSwgZW5kTm9kZX0gPSBlZGdlXG4gICAgY29uc3Qgc291cmNlR3JvdXAgPSBncmFwaC52ZXJ0ZXgoc3RhcnROb2RlKS5wcm9wZXJ0aWVzW29wdGlvbnMuZ3JvdXBQcm9wZXJ0eV1cbiAgICBjb25zdCB0YXJnZXRHcm91cCA9IGdyYXBoLnZlcnRleChlbmROb2RlKS5wcm9wZXJ0aWVzW29wdGlvbnMuZ3JvdXBQcm9wZXJ0eV1cbiAgICBpZiAoc291cmNlR3JvdXAgPT09IHRhcmdldEdyb3VwKSB7XG4gICAgICBncmFwaC5hZGRFZGdlKHN0YXJ0Tm9kZSwgZW5kTm9kZSwgZWRnZSlcbiAgICB9XG4gIH1cblxuICBjb25zdCBncm91cE5vZGVzID0gZ3JvdXBzLm1hcCgoe25hbWV9KSA9PiB7XG4gICAgcmV0dXJuIGRhdGEubm9kZXMuZmlsdGVyKChub2RlKSA9PiBub2RlLnByb3BlcnRpZXNbb3B0aW9ucy5ncm91cFByb3BlcnR5XSA9PT0gbmFtZSlcbiAgfSlcblxuICBjb25zdCB0cmFuc2Zvcm1lciA9IG5ldyBFZGdlQ29uY2VudHJhdGlvblRyYW5zZm9ybWVyKClcbiAgICAubWV0aG9kKChncmFwaCwgaDEsIGgyKSA9PiBxdWFzaUJpY2xpcXVlTWluaW5nKGdyYXBoLCBoMSwgaDIsIG9wdGlvbnMubXUsIG9wdGlvbnMubWluQ291bnQpKVxuICAgIC5pZEdlbmVyYXRvcigoZ3JhcGgsIHNvdXJjZSwgdGFyZ2V0KSA9PiB7XG4gICAgICBzb3VyY2UgPSBBcnJheS5mcm9tKHNvdXJjZSlcbiAgICAgIHNvdXJjZS5zb3J0KClcbiAgICAgIHRhcmdldCA9IEFycmF5LmZyb20odGFyZ2V0KVxuICAgICAgdGFyZ2V0LnNvcnQoKVxuICAgICAgcmV0dXJuIGAke3NvdXJjZS5qb2luKCcsJyl9OiR7dGFyZ2V0LmpvaW4oJywnKX1gXG4gICAgfSlcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGcxID0gZ3JvdXBOb2Rlc1tpXVxuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGdyb3Vwcy5sZW5ndGg7ICsraikge1xuICAgICAgY29uc3QgZzIgPSBncm91cE5vZGVzW2pdXG5cbiAgICAgIGNvbnN0IHN1YkdyYXBoID0gbmV3IEVHcmFwaCgpXG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZzEpIHtcbiAgICAgICAgc3ViR3JhcGguYWRkVmVydGV4KG5vZGUuaWQsIG5vZGUpXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZzIpIHtcbiAgICAgICAgc3ViR3JhcGguYWRkVmVydGV4KG5vZGUuaWQsIG5vZGUpXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZGF0YS5yZWxhdGlvbnNoaXBzKSB7XG4gICAgICAgIGNvbnN0IHtzdGFydE5vZGUsIGVuZE5vZGV9ID0gZWRnZVxuICAgICAgICBjb25zdCBzb3VyY2VHcm91cCA9IGdyYXBoLnZlcnRleChzdGFydE5vZGUpLnByb3BlcnRpZXNbb3B0aW9ucy5ncm91cFByb3BlcnR5XVxuICAgICAgICBjb25zdCB0YXJnZXRHcm91cCA9IGdyYXBoLnZlcnRleChlbmROb2RlKS5wcm9wZXJ0aWVzW29wdGlvbnMuZ3JvdXBQcm9wZXJ0eV1cbiAgICAgICAgaWYgKHNvdXJjZUdyb3VwID09PSBncm91cHNbaV0ubmFtZSAmJiB0YXJnZXRHcm91cCA9PT0gZ3JvdXBzW2pdLm5hbWUpIHtcbiAgICAgICAgICBzdWJHcmFwaC5hZGRFZGdlKHN0YXJ0Tm9kZSwgZW5kTm9kZSwgZWRnZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlR3JvdXAgPT09IGdyb3Vwc1tqXS5uYW1lICYmIHRhcmdldEdyb3VwID09PSBncm91cHNbaV0ubmFtZSkge1xuICAgICAgICAgIHN1YkdyYXBoLmFkZEVkZ2UoZW5kTm9kZSwgc3RhcnROb2RlLCBlZGdlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybWVyLmR1bW15KChzb3VyY2UsIHRhcmdldCkgPT4ge1xuICAgICAgICBjb25zdCBlZGdlcyA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgdSBvZiBzb3VyY2UpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdGFyZ2V0KSB7XG4gICAgICAgICAgICBjb25zdCBlZGdlID0gc3ViR3JhcGguZWRnZSh1LCB2KVxuICAgICAgICAgICAgaWYgKGVkZ2UpIHtcbiAgICAgICAgICAgICAgZWRnZXMucHVzaChlZGdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGR1bW15OiB0cnVlLFxuICAgICAgICAgIGF2ZXJhZ2U6IGVkZ2VzLnJlZHVjZSgoYSwgZSkgPT4gYSArIGUucHJvcGVydGllcy52YWx1ZSwgMCkgLyBlZGdlcy5sZW5ndGgsXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6ICdibGFjaycsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXG4gICAgICAgICAgZmlsbE9wYWNpdHk6IDBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkR3JhcGggPSB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oc3ViR3JhcGgpXG4gICAgICBmb3IgKGNvbnN0IHUgb2YgdHJhbnNmb3JtZWRHcmFwaC52ZXJ0aWNlcygpKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0cmFuc2Zvcm1lZEdyYXBoLnZlcnRleCh1KVxuICAgICAgICBpZiAobm9kZS5kdW1teSkge1xuICAgICAgICAgIGdyYXBoLmFkZFZlcnRleChgJHt1fS1sYCwgT2JqZWN0LmFzc2lnbih7fSwgbm9kZSwge1xuICAgICAgICAgICAgaWQ6IGAke3V9LWxgLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBbb3B0aW9ucy5ncm91cFByb3BlcnR5XTogZ3JvdXBzW2ldLm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSlcbiAgICAgICAgICBncmFwaC5hZGRWZXJ0ZXgoYCR7dX0tcmAsIE9iamVjdC5hc3NpZ24oe30sIG5vZGUsIHtcbiAgICAgICAgICAgIGlkOiBgJHt1fS1yYCxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgW29wdGlvbnMuZ3JvdXBQcm9wZXJ0eV06IGdyb3Vwc1tqXS5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpXG4gICAgICAgICAgZ3JhcGguYWRkRWRnZShgJHt1fS1sYCwgYCR7dX0tcmAsIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IG5vZGUuYXZlcmFnZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgW3UsIHZdIG9mIHRyYW5zZm9ybWVkR3JhcGguZWRnZXMoKSkge1xuICAgICAgICBjb25zdCB1Tm9kZSA9IHRyYW5zZm9ybWVkR3JhcGgudmVydGV4KHUpXG4gICAgICAgIGNvbnN0IHZOb2RlID0gdHJhbnNmb3JtZWRHcmFwaC52ZXJ0ZXgodilcbiAgICAgICAgaWYgKCF1Tm9kZS5kdW1teSAmJiAhdk5vZGUuZHVtbXkpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5zaG93U2luZ2xlRWRnZSkge1xuICAgICAgICAgICAgZ3JhcGguYWRkRWRnZSh1LCB2KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodU5vZGUuZHVtbXkgJiYgIXZOb2RlLmR1bW15KSB7XG4gICAgICAgICAgZ3JhcGguYWRkRWRnZShgJHt1fS1yYCwgdiwge1xuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICB2YWx1ZTogdU5vZGUuYXZlcmFnZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF1Tm9kZS5kdW1teSAmJiB2Tm9kZS5kdW1teSkge1xuICAgICAgICAgIGdyYXBoLmFkZEVkZ2UodSwgYCR7dn0tbGAsIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IHZOb2RlLmF2ZXJhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBub2RlczogZ3JhcGgudmVydGljZXMoKS5tYXAoKHUpID0+IGdyYXBoLnZlcnRleCh1KSksXG4gICAgcmVsYXRpb25zaGlwczogZ3JhcGguZWRnZXMoKS5tYXAoKFt1LCB2XSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgZ3JhcGguZWRnZSh1LCB2KSwge3N0YXJ0Tm9kZTogdSwgZW5kTm9kZTogdn0pKVxuICB9XG59XG5cbmNvbnN0IG1ha2VHcmFwaCA9IChNb2R1bGUsIGRhdGEsIGdyb3Vwcywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBncmFwaCA9IG5ldyBHcmFwaChNb2R1bGUpXG4gIGxldCB2ZXJ0ZXhJZCA9IDBcbiAgY29uc3Qgbm9kZUlkcyA9IG5ldyBNYXAoKVxuICBmb3IgKGNvbnN0IG5vZGUgb2YgZGF0YS5ub2Rlcykge1xuICAgIGdyYXBoLmFkZE5vZGUoKVxuICAgIG5vZGVJZHMuc2V0KG5vZGUuaWQsIHZlcnRleElkKyspXG4gIH1cbiAgZm9yIChjb25zdCB7c3RhcnROb2RlLCBlbmROb2RlfSBvZiBkYXRhLnJlbGF0aW9uc2hpcHMpIHtcbiAgICBncmFwaC5hZGRFZGdlKG5vZGVJZHMuZ2V0KHN0YXJ0Tm9kZSksIG5vZGVJZHMuZ2V0KGVuZE5vZGUpKVxuICB9XG4gIHJldHVybiBncmFwaFxufVxuXG5jb25zdCBjYWxjTGF5b3V0ID0gKE1vZHVsZSwgZGF0YSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB3aWR0aCA9IDIwMDBcbiAgY29uc3QgaGVpZ2h0ID0gMjAwMFxuICBjb25zdCBhbGxvY2F0b3IgPSBuZXcgQWxsb2NhdG9yKE1vZHVsZSlcblxuICBjb25zdCBncm91cHMgPSBjb3VudEdyb3VwcyhkYXRhLm5vZGVzLCBvcHRpb25zLmdyb3VwUHJvcGVydHkpXG4gIGNvbnN0IHRpbGVzID0gZ3JvdXBMYXlvdXQob3B0aW9ucy50eXBlLCBncm91cHMsIHdpZHRoLCBoZWlnaHQsIE1vZHVsZSlcblxuICBjb25zdCBncm91cHNQb2ludGVyID0gYWxsb2NhdG9yLmFsbG9jKDE2ICogZ3JvdXBzLmxlbmd0aClcbiAgdGlsZXMuZm9yRWFjaCgodGlsZSwgaSkgPT4ge1xuICAgIE1vZHVsZS5IRUFQRjMyW2dyb3Vwc1BvaW50ZXIgLyA0ICsgMiAqIGldID0gdGlsZS54ICsgdGlsZS53aWR0aCAvIDJcbiAgICBNb2R1bGUuSEVBUEYzMltncm91cHNQb2ludGVyIC8gNCArIDIgKiBpICsgMV0gPSB0aWxlLnkgKyB0aWxlLmhlaWdodCAvIDJcbiAgfSlcblxuICBjb25zdCBsYXlvdXREYXRhID0gb3B0aW9ucy51c2VFZGdlQ29uY2VudHJhdGlvbiA/IGFwcGx5RWRnZUNvbmNlbnRyYXRpb24oZGF0YSwgZ3JvdXBzLCBvcHRpb25zKSA6IGRhdGFcbiAgY29uc3QgZ3JhcGggPSBtYWtlR3JhcGgoTW9kdWxlLCBsYXlvdXREYXRhLCBncm91cHMsIG9wdGlvbnMpXG4gIGNvbnN0IGdyb3VwTWFwID0gbmV3IE1hcChncm91cHMubWFwKCh7bmFtZX0sIGkpID0+IFtuYW1lLCBpXSkpXG4gIGNvbnN0IG5vZGVHcm91cHNQb2ludGVyID0gYWxsb2NhdG9yLmFsbG9jKDQgKiBncmFwaC5ub2RlQ291bnQoKSlcbiAgbGF5b3V0RGF0YS5ub2Rlcy5mb3JFYWNoKChub2RlLCBpKSA9PiB7XG4gICAgTW9kdWxlLkhFQVBVMzJbbm9kZUdyb3Vwc1BvaW50ZXIgLyA0ICsgaV0gPSBncm91cE1hcC5nZXQobm9kZS5wcm9wZXJ0aWVzW29wdGlvbnMuZ3JvdXBQcm9wZXJ0eV0pXG4gIH0pXG5cbiAgY29uc3Qgc2ltdWxhdGlvbiA9IG5ldyBTaW11bGF0aW9uKE1vZHVsZSlcbiAgY29uc3QgZjEgPSBzaW11bGF0aW9uLmFkZEdyb3VwTWFueUJvZHlGb3JjZShncm91cHNQb2ludGVyLCBncm91cHMubGVuZ3RoLCBub2RlR3JvdXBzUG9pbnRlciwgZ3JhcGgubm9kZUNvdW50KCkpXG4gIGNvbnN0IGYyID0gc2ltdWxhdGlvbi5hZGRHcm91cExpbmtGb3JjZShncmFwaCwgbm9kZUdyb3Vwc1BvaW50ZXIsIG9wdGlvbnMuaW50cmFHcm91cCwgb3B0aW9ucy5pbnRlckdyb3VwKVxuICBjb25zdCBmMyA9IHNpbXVsYXRpb24uYWRkR3JvdXBDZW50ZXJGb3JjZShncm91cHNQb2ludGVyLCBncm91cHMubGVuZ3RoLCBub2RlR3JvdXBzUG9pbnRlciwgZ3JhcGgubm9kZUNvdW50KCkpXG4gIHNpbXVsYXRpb24uc2V0U3RyZW5ndGgoZjEsIG9wdGlvbnMubWFueUJvZHlGb3JjZSlcbiAgc2ltdWxhdGlvbi5zZXRTdHJlbmd0aChmMiwgb3B0aW9ucy5saW5rRm9yY2UpXG4gIHNpbXVsYXRpb24uc2V0U3RyZW5ndGgoZjMsIG9wdGlvbnMuY2VudGVyRm9yY2UpXG4gIHNpbXVsYXRpb24uc3RhcnQoZ3JhcGgpXG5cbiAgY29uc3QgZWRnZUJ1bmRsaW5nID0gbmV3IEVkZ2VCdW5kbGluZyhNb2R1bGUpXG4gIGVkZ2VCdW5kbGluZy5jeWNsZXMgPSBvcHRpb25zLmN5Y2xlc1xuICBlZGdlQnVuZGxpbmcuczAgPSBvcHRpb25zLnMwXG4gIGVkZ2VCdW5kbGluZy5pMCA9IG9wdGlvbnMuaTBcbiAgZWRnZUJ1bmRsaW5nLnNTdGVwID0gb3B0aW9ucy5zU3RlcFxuICBlZGdlQnVuZGxpbmcuaVN0ZXAgPSBvcHRpb25zLmlTdGVwXG4gIGNvbnN0IGxpbmVzID0gZWRnZUJ1bmRsaW5nLmNhbGwoZ3JhcGgpXG5cbiAgdGlsZXMuZm9yRWFjaCgodGlsZSwgaSkgPT4ge1xuICAgIHRpbGUudHlwZSA9IGdyb3VwVHlwZS5nZXQob3B0aW9ucy50eXBlKVxuICAgIHRpbGUubGFiZWwgPSBncm91cHNbaV0ubmFtZS50b1N0cmluZygpXG4gICAgdGlsZS54ICs9IHRpbGUud2lkdGggLyAyXG4gICAgdGlsZS55ICs9IHRpbGUuaGVpZ2h0IC8gMlxuICB9KVxuICBsYXlvdXREYXRhLmdyb3VwcyA9IHRpbGVzXG5cbiAgbGF5b3V0RGF0YS5ub2Rlcy5mb3JFYWNoKChub2RlLCBpKSA9PiB7XG4gICAgbm9kZS54ID0gZ3JhcGguZ2V0WChpKVxuICAgIG5vZGUueSA9IGdyYXBoLmdldFkoaSlcbiAgfSlcblxuICBsYXlvdXREYXRhLnJlbGF0aW9uc2hpcHMuZm9yRWFjaCgobGluaywgaSkgPT4ge1xuICAgIGxpbmsuYmVuZHMgPSBsaW5lc1tpXS5tYXAoKHt4LCB5fSkgPT4gW3gsIHldKVxuICB9KVxuXG4gIHJldHVybiBsYXlvdXREYXRhXG59XG5cbmV4cG9ydCBjb25zdCBsYXlvdXQgPSAoZGF0YSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gbG9hZE1vZHVsZSgpLnRoZW4oKHtNb2R1bGV9KSA9PiB7XG4gICAgcmV0dXJuIGNhbGNMYXlvdXQoTW9kdWxlLCBkYXRhLCBvcHRpb25zKVxuICB9KVxufVxuIiwiaW1wb3J0IHtBbGxvY2F0b3J9IGZyb20gJy4vYWxsb2NhdG9yJ1xuXG5leHBvcnQgY2xhc3MgQWxnb3JpdGhtcyB7XG4gIGNvbnN0cnVjdG9yIChNb2R1bGUpIHtcbiAgICB0aGlzLk1vZHVsZSA9IE1vZHVsZVxuICAgIHRoaXMubW9kdWxlID0ge1xuICAgICAgY29ubmVjdGVkQ29tcG9uZW50czogTW9kdWxlLmN3cmFwKCdjb25uZWN0ZWRfY29tcG9uZW50cycsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIHNxdWFyaWZpZWRUcmVlbWFwOiBNb2R1bGUuY3dyYXAoJ3NxdWFyaWZpZWRfdHJlZW1hcCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKVxuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3RlZENvbXBvbmVudHMgKGdyYXBoKSB7XG4gICAgY29uc3QgYWxsb2NhdG9yID0gbmV3IEFsbG9jYXRvcih0aGlzLk1vZHVsZSlcbiAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy5tb2R1bGUuY29ubmVjdGVkQ29tcG9uZW50cyhncmFwaC5wb2ludGVyKVxuICAgIGNvbnN0IG4gPSBncmFwaC5ub2RlQ291bnQoKVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShuKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICByZXN1bHRbaV0gPSB0aGlzLk1vZHVsZS5IRUFQVTMyW2NvbXBvbmVudHMgLyA0ICsgaV1cbiAgICB9XG4gICAgYWxsb2NhdG9yLmZyZWUoY29tcG9uZW50cylcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBzcXVhcmlmaWVkVHJlZW1hcCAod2lkdGgsIGhlaWdodCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYWxsb2NhdG9yID0gbmV3IEFsbG9jYXRvcih0aGlzLk1vZHVsZSlcbiAgICBjb25zdCBwb2ludGVyID0gYWxsb2NhdG9yLmFsbG9jKDggKiB2YWx1ZXMubGVuZ3RoKVxuICAgIHZhbHVlcy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICB0aGlzLk1vZHVsZS5IRUFQRjY0W3BvaW50ZXIgLyA4ICsgaV0gPSB2XG4gICAgfSlcbiAgICBjb25zdCB0aWxlcyA9IHRoaXMubW9kdWxlLnNxdWFyaWZpZWRUcmVlbWFwKHdpZHRoLCBoZWlnaHQsIHBvaW50ZXIsIHZhbHVlcy5sZW5ndGgpXG4gICAgY29uc3QgcmVzdWx0ID0gdmFsdWVzLm1hcCgoXywgaSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogdGhpcy5Nb2R1bGUuSEVBUEY2NFt0aWxlcyAvIDggKyBpICogNF0sXG4gICAgICAgIHk6IHRoaXMuTW9kdWxlLkhFQVBGNjRbdGlsZXMgLyA4ICsgaSAqIDQgKyAxXSxcbiAgICAgICAgd2lkdGg6IHRoaXMuTW9kdWxlLkhFQVBGNjRbdGlsZXMgLyA4ICsgaSAqIDQgKyAyXSxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLk1vZHVsZS5IRUFQRjY0W3RpbGVzIC8gOCArIGkgKiA0ICsgM11cbiAgICAgIH1cbiAgICB9KVxuICAgIGFsbG9jYXRvci5mcmVlKHRpbGVzKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFNpbXVsYXRpb24ge1xuICBjb25zdHJ1Y3RvciAoTW9kdWxlKSB7XG4gICAgdGhpcy5tb2R1bGUgPSB7XG4gICAgICBzaW11bGF0aW9uTmV3OiBNb2R1bGUuY3dyYXAoJ3NpbXVsYXRpb25fbmV3JywgJ251bWJlcicsIFtdKSxcbiAgICAgIHNpbXVsYXRpb25BZGRDZW50ZXJGb3JjZTogTW9kdWxlLmN3cmFwKCdzaW11bGF0aW9uX2FkZF9jZW50ZXJfZm9yY2UnLCAnbnVtYmVyJywgWydudW1iZXInXSksXG4gICAgICBzaW11bGF0aW9uQWRkR3JvdXBDZW50ZXJGb3JjZTogTW9kdWxlLmN3cmFwKCdzaW11bGF0aW9uX2FkZF9ncm91cF9jZW50ZXJfZm9yY2UnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pLFxuICAgICAgc2ltdWxhdGlvbkFkZEdyb3VwTGlua0ZvcmNlOiBNb2R1bGUuY3dyYXAoJ3NpbXVsYXRpb25fYWRkX2dyb3VwX2xpbmtfZm9yY2UnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pLFxuICAgICAgc2ltdWxhdGlvbkFkZEdyb3VwTWFueUJvZHlGb3JjZTogTW9kdWxlLmN3cmFwKCdzaW11bGF0aW9uX2FkZF9ncm91cF9tYW55X2JvZHlfZm9yY2UnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pLFxuICAgICAgc2ltdWxhdGlvbkFkZExpbmtGb3JjZTogTW9kdWxlLmN3cmFwKCdzaW11bGF0aW9uX2FkZF9saW5rX2ZvcmNlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKSxcbiAgICAgIHNpbXVsYXRpb25BZGRNYW55Qm9keUZvcmNlOiBNb2R1bGUuY3dyYXAoJ3NpbXVsYXRpb25fYWRkX21hbnlfYm9keV9mb3JjZScsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIHNpbXVsYXRpb25TdGFydDogTW9kdWxlLmN3cmFwKCdzaW11bGF0aW9uX3N0YXJ0JywgJ3ZvaWQnLCBbJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBzaW11bGF0aW9uR2V0U3RyZW5ndGg6IE1vZHVsZS5jd3JhcCgnc2ltdWxhdGlvbl9nZXRfc3RyZW5ndGgnLCAnbnVtYmVyJywgWydudW1iZXInXSksXG4gICAgICBzaW11bGF0aW9uU2V0U3RyZW5ndGg6IE1vZHVsZS5jd3JhcCgnc2ltdWxhdGlvbl9zZXRfc3RyZW5ndGgnLCAndm9pZCcsIFsnbnVtYmVyJywgJ251bWJlciddKVxuICAgIH1cbiAgICB0aGlzLnBvaW50ZXIgPSB0aGlzLm1vZHVsZS5zaW11bGF0aW9uTmV3KClcbiAgfVxuXG4gIGFkZENlbnRlckZvcmNlICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuc2ltdWxhdGlvbkFkZENlbnRlckZvcmNlKHRoaXMucG9pbnRlcilcbiAgfVxuXG4gIGFkZEdyb3VwQ2VudGVyRm9yY2UgKGdyb3VwcywgbnVtR3JvdXBzLCBub2RlR3JvdXBzLCBudW1Ob2Rlcykge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5zaW11bGF0aW9uQWRkR3JvdXBDZW50ZXJGb3JjZSh0aGlzLnBvaW50ZXIsIGdyb3VwcywgbnVtR3JvdXBzLCBub2RlR3JvdXBzLCBudW1Ob2RlcylcbiAgfVxuXG4gIGFkZEdyb3VwTGlua0ZvcmNlIChncmFwaCwgbm9kZUdyb3VwcywgaW50cmFHcm91cCA9IDAuNSwgaW50ZXJHcm91cCA9IDAuMDEpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuc2ltdWxhdGlvbkFkZEdyb3VwTGlua0ZvcmNlKHRoaXMucG9pbnRlciwgZ3JhcGgucG9pbnRlciwgbm9kZUdyb3VwcywgaW50cmFHcm91cCwgaW50ZXJHcm91cClcbiAgfVxuXG4gIGFkZEdyb3VwTWFueUJvZHlGb3JjZSAoZ3JvdXBzLCBudW1Hcm91cHMsIG5vZGVHcm91cHMsIG51bU5vZGVzKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLnNpbXVsYXRpb25BZGRHcm91cE1hbnlCb2R5Rm9yY2UodGhpcy5wb2ludGVyLCBncm91cHMsIG51bUdyb3Vwcywgbm9kZUdyb3VwcywgbnVtTm9kZXMpXG4gIH1cblxuICBhZGRMaW5rRm9yY2UgKGdyYXBoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLnNpbXVsYXRpb25BZGRMaW5rRm9yY2UodGhpcy5wb2ludGVyLCBncmFwaC5wb2ludGVyKVxuICB9XG5cbiAgYWRkTWFueUJvZHlGb3JjZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLnNpbXVsYXRpb25BZGRNYW55Qm9keUZvcmNlKHRoaXMucG9pbnRlcilcbiAgfVxuXG4gIHN0YXJ0IChncmFwaCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIHRoaXMubW9kdWxlLnNpbXVsYXRpb25TdGFydCh0aGlzLnBvaW50ZXIsIGdyYXBoLnBvaW50ZXIpXG4gICAgY29uc3Qgc3RvcCA9IERhdGUubm93KClcbiAgICBjb25zb2xlLmxvZyhzdG9wIC0gc3RhcnQpXG4gIH1cblxuICBnZXRTdHJlbmd0aCAoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuc2ltdWxhdGlvbkdldFN0cmVuZ3RoKHRoaXMucG9pbnRlciwgaW5kZXgpXG4gIH1cblxuICBzZXRTdHJlbmd0aCAoaW5kZXgsIHN0cmVuZ3RoKSB7XG4gICAgdGhpcy5tb2R1bGUuc2ltdWxhdGlvblNldFN0cmVuZ3RoKHRoaXMucG9pbnRlciwgaW5kZXgsIHN0cmVuZ3RoKVxuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgR3JhcGgge1xuICBjb25zdHJ1Y3RvciAoTW9kdWxlKSB7XG4gICAgdGhpcy5tb2R1bGUgPSB7XG4gICAgICBncmFwaE5ldzogTW9kdWxlLmN3cmFwKCdncmFwaF9uZXcnLCAnbnVtYmVyJywgW10pLFxuICAgICAgZ3JhcGhBZGROb2RlOiBNb2R1bGUuY3dyYXAoJ2dyYXBoX2FkZF9ub2RlJywgJ251bWJlcicsIFsnbnVtYmVyJ10pLFxuICAgICAgZ3JhcGhBZGRFZGdlOiBNb2R1bGUuY3dyYXAoJ2dyYXBoX2FkZF9lZGdlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBncmFwaE5vZGVDb3VudDogTW9kdWxlLmN3cmFwKCdncmFwaF9ub2RlX2NvdW50JywgJ251bWJlcicsIFsnbnVtYmVyJ10pLFxuICAgICAgZ3JhcGhFZGdlQ291bnQ6IE1vZHVsZS5jd3JhcCgnZ3JhcGhfZWRnZV9jb3VudCcsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIGdyYXBoR2V0WDogTW9kdWxlLmN3cmFwKCdncmFwaF9nZXRfeCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBncmFwaEdldFk6IE1vZHVsZS5jd3JhcCgnZ3JhcGhfZ2V0X3knLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pXG4gICAgfVxuICAgIHRoaXMucG9pbnRlciA9IHRoaXMubW9kdWxlLmdyYXBoTmV3KClcbiAgfVxuXG4gIGFkZE5vZGUgKCkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5ncmFwaEFkZE5vZGUodGhpcy5wb2ludGVyKVxuICB9XG5cbiAgYWRkRWRnZSAodSwgdikge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5ncmFwaEFkZEVkZ2UodGhpcy5wb2ludGVyLCB1LCB2KVxuICB9XG5cbiAgbm9kZUNvdW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuZ3JhcGhOb2RlQ291bnQodGhpcy5wb2ludGVyKVxuICB9XG5cbiAgZWRnZUNvdW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuZ3JhcGhFZGdlQ291bnQodGhpcy5wb2ludGVyKVxuICB9XG5cbiAgZ2V0WCAodSkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5ncmFwaEdldFgodGhpcy5wb2ludGVyLCB1KVxuICB9XG5cbiAgZ2V0WSAodSkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5ncmFwaEdldFkodGhpcy5wb2ludGVyLCB1KVxuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgRWRnZUJ1bmRsaW5nIHtcbiAgY29uc3RydWN0b3IgKE1vZHVsZSkge1xuICAgIHRoaXMuTW9kdWxlID0gTW9kdWxlXG4gICAgdGhpcy5tb2R1bGUgPSB7XG4gICAgICBlZGdlQnVuZGxpbmdOZXc6IE1vZHVsZS5jd3JhcCgnZWRnZV9idW5kbGluZ19uZXcnLCAnbnVtYmVyJywgW10pLFxuICAgICAgZWRnZUJ1bmRsaW5nQ2FsbDogTW9kdWxlLmN3cmFwKCdlZGdlX2J1bmRsaW5nX2NhbGwnLCAnbnVtYmVyJywgWydudW1iZXInXSksXG4gICAgICBlZGdlQnVuZGxpbmdHZXRDeWNsZXM6IE1vZHVsZS5jd3JhcCgnZWRnZV9idW5kbGluZ19nZXRfY3ljbGVzJywgJ251bWJlcicsIFsnbnVtYmVyJ10pLFxuICAgICAgZWRnZUJ1bmRsaW5nR2V0UzA6IE1vZHVsZS5jd3JhcCgnZWRnZV9idW5kbGluZ19nZXRfczAnLCAnbnVtYmVyJywgWydudW1iZXInXSksXG4gICAgICBlZGdlQnVuZGxpbmdHZXRJMDogTW9kdWxlLmN3cmFwKCdlZGdlX2J1bmRsaW5nX2dldF9pMCcsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIGVkZ2VCdW5kbGluZ0dldFNTdGVwOiBNb2R1bGUuY3dyYXAoJ2VkZ2VfYnVuZGxpbmdfZ2V0X3Nfc3RlcCcsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIGVkZ2VCdW5kbGluZ0dldElTdGVwOiBNb2R1bGUuY3dyYXAoJ2VkZ2VfYnVuZGxpbmdfZ2V0X2lfc3RlcCcsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIGVkZ2VCdW5kbGluZ1NldEN5Y2xlczogTW9kdWxlLmN3cmFwKCdlZGdlX2J1bmRsaW5nX3NldF9jeWNsZXMnLCAndm9pZCcsIFsnbnVtYmVyJywgJ251bWJlciddKSxcbiAgICAgIGVkZ2VCdW5kbGluZ1NldFMwOiBNb2R1bGUuY3dyYXAoJ2VkZ2VfYnVuZGxpbmdfc2V0X3MwJywgJ3ZvaWQnLCBbJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBlZGdlQnVuZGxpbmdTZXRJMDogTW9kdWxlLmN3cmFwKCdlZGdlX2J1bmRsaW5nX3NldF9pMCcsICd2b2lkJywgWydudW1iZXInLCAnbnVtYmVyJ10pLFxuICAgICAgZWRnZUJ1bmRsaW5nU2V0U1N0ZXA6IE1vZHVsZS5jd3JhcCgnZWRnZV9idW5kbGluZ19zZXRfc19zdGVwJywgJ3ZvaWQnLCBbJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBlZGdlQnVuZGxpbmdTZXRJU3RlcDogTW9kdWxlLmN3cmFwKCdlZGdlX2J1bmRsaW5nX3NldF9pX3N0ZXAnLCAndm9pZCcsIFsnbnVtYmVyJywgJ251bWJlciddKSxcbiAgICAgIGxpbmVzQXQ6IE1vZHVsZS5jd3JhcCgnbGluZXNfYXQnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pLFxuICAgICAgbGluZVBvaW50czogTW9kdWxlLmN3cmFwKCdsaW5lX3BvaW50cycsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIGxpbmVQb2ludHNBdDogTW9kdWxlLmN3cmFwKCdsaW5lX3BvaW50c19hdCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSksXG4gICAgICBsaW5lUG9pbnRzTGVuZ3RoOiBNb2R1bGUuY3dyYXAoJ2xpbmVfcG9pbnRzX2xlbmd0aCcsICdudW1iZXInLCBbJ251bWJlciddKSxcbiAgICAgIHBvaW50WDogTW9kdWxlLmN3cmFwKCdwb2ludF94JywgJ251bWJlcicsIFsnbnVtYmVyJ10pLFxuICAgICAgcG9pbnRZOiBNb2R1bGUuY3dyYXAoJ3BvaW50X3knLCAnbnVtYmVyJywgWydudW1iZXInXSlcbiAgICB9XG4gICAgdGhpcy5wb2ludGVyID0gdGhpcy5tb2R1bGUuZWRnZUJ1bmRsaW5nTmV3KClcbiAgfVxuXG4gIGNhbGwgKGdyYXBoKSB7XG4gICAgY29uc3QgbGluZXNQb2ludGVyID0gdGhpcy5tb2R1bGUuZWRnZUJ1bmRsaW5nQ2FsbCh0aGlzLnBvaW50ZXIsIGdyYXBoLnBvaW50ZXIpXG4gICAgY29uc3QgbiA9IGdyYXBoLmVkZ2VDb3VudCgpXG4gICAgY29uc3QgbGluZXMgPSBuZXcgQXJyYXkobilcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29uc3QgbGluZVBvaW50ZXIgPSB0aGlzLm1vZHVsZS5saW5lc0F0KGxpbmVzUG9pbnRlciwgaSlcbiAgICAgIGNvbnN0IGxlbiA9IHRoaXMubW9kdWxlLmxpbmVQb2ludHNMZW5ndGgobGluZVBvaW50ZXIpXG4gICAgICBsaW5lc1tpXSA9IG5ldyBBcnJheShsZW4gLSAyKVxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBsZW4gLSAxOyArK2opIHtcbiAgICAgICAgY29uc3QgcG9pbnRQb2ludGVyID0gdGhpcy5tb2R1bGUubGluZVBvaW50c0F0KGxpbmVQb2ludGVyLCBqKVxuICAgICAgICBsaW5lc1tpXVtqIC0gMV0gPSB7XG4gICAgICAgICAgeDogdGhpcy5tb2R1bGUucG9pbnRYKHBvaW50UG9pbnRlciksXG4gICAgICAgICAgeTogdGhpcy5tb2R1bGUucG9pbnRZKHBvaW50UG9pbnRlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZXNcbiAgfVxuXG4gIGdldCBjeWNsZXMgKCkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5lZGdlQnVuZGxpbmdHZXRDeWNsZXModGhpcy5wb2ludGVyKVxuICB9XG5cbiAgc2V0IGN5Y2xlcyAodmFsdWUpIHtcbiAgICB0aGlzLm1vZHVsZS5lZGdlQnVuZGxpbmdTZXRDeWNsZXModGhpcy5wb2ludGVyLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBzMCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLmVkZ2VCdW5kbGluZ0dldFMwKHRoaXMucG9pbnRlcilcbiAgfVxuXG4gIHNldCBzMCAodmFsdWUpIHtcbiAgICB0aGlzLm1vZHVsZS5lZGdlQnVuZGxpbmdTZXRTMCh0aGlzLnBvaW50ZXIsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGkwICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGUuZWRnZUJ1bmRsaW5nR2V0STAodGhpcy5wb2ludGVyKVxuICB9XG5cbiAgc2V0IGkwICh2YWx1ZSkge1xuICAgIHRoaXMubW9kdWxlLmVkZ2VCdW5kbGluZ1NldEkwKHRoaXMucG9pbnRlciwgdmFsdWUpXG4gIH1cblxuICBnZXQgc1N0ZXAgKCkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZS5lZGdlQnVuZGxpbmdHZXRTU3RlcCh0aGlzLnBvaW50ZXIpXG4gIH1cblxuICBzZXQgc1N0ZXAgKHZhbHVlKSB7XG4gICAgdGhpcy5tb2R1bGUuZWRnZUJ1bmRsaW5nU2V0U1N0ZXAodGhpcy5wb2ludGVyLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBpU3RlcCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLmVkZ2VCdW5kbGluZ0dldElTdGVwKHRoaXMucG9pbnRlcilcbiAgfVxuXG4gIHNldCBpU3RlcCAodmFsdWUpIHtcbiAgICB0aGlzLm1vZHVsZS5lZGdlQnVuZGxpbmdTZXRJU3RlcCh0aGlzLnBvaW50ZXIsIHZhbHVlKVxuICB9XG59XG4iLCJpbXBvcnQge2VncmFwaH0gZnJvbSAnZWdyYXBoL2xvYWRlcidcblxuY29uc3QgbW9kID0gZWdyYXBoKCdlZ3JhcGgud2FzbScpXG5cbmV4cG9ydCBjb25zdCBsb2FkTW9kdWxlID0gKCkgPT4gbW9kXG4iLCJpbXBvcnQgYmFzZSBmcm9tICcuJ1xuXG5leHBvcnQgY29uc3QgZWdyYXBoID0gKHVybCA9ICdlZ3JhcGgud2FzbScpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB3aW5kb3cuZmV0Y2godXJsKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oKHdhc21CaW5hcnkpID0+IHtcbiAgICAgICAgYmFzZSh7d2FzbUJpbmFyeX0pLnRoZW4oKE1vZHVsZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoe01vZHVsZX0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9KVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJjb25zdCBBYnN0cmFjdEdyYXBoID0gcmVxdWlyZSgnLi9hYnN0cmFjdC1ncmFwaCcpXG5cbmNvbnN0IHByaXZhdGVzID0gbmV3IFdlYWtNYXAoKVxuXG5jb25zdCBwID0gKHNlbGYpID0+IHByaXZhdGVzLmdldChzZWxmKVxuXG5jb25zdCBjaGVja1ZlcnRleCA9IChncmFwaCwgdSkgPT4ge1xuICBpZiAoZ3JhcGgudmVydGV4KHUpID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZlcnRleDogJHt1fWApXG4gIH1cbn1cblxuY2xhc3MgTXV0YWJsZUdyYXBoIGV4dGVuZHMgQWJzdHJhY3RHcmFwaCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgcHJpdmF0ZXMuc2V0KHRoaXMsIHtcbiAgICAgIHZlcnRpY2VzOiBuZXcgTWFwKCksXG4gICAgICBudW1WZXJ0aWNlczogMCxcbiAgICAgIG51bUVkZ2VzOiAwXG4gICAgfSlcbiAgfVxuXG4gIHZlcnRleCAodSkge1xuICAgIGNvbnN0IHZlcnRpY2VzID0gcCh0aGlzKS52ZXJ0aWNlc1xuICAgIGlmICh2ZXJ0aWNlcy5nZXQodSkpIHtcbiAgICAgIHJldHVybiB2ZXJ0aWNlcy5nZXQodSkuZGF0YVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZWRnZSAodSwgdikge1xuICAgIGNvbnN0IHZlcnRpY2VzID0gcCh0aGlzKS52ZXJ0aWNlc1xuICAgIGlmICh2ZXJ0aWNlcy5nZXQodSkgJiYgdmVydGljZXMuZ2V0KHUpLm91dFZlcnRpY2VzLmdldCh2KSkge1xuICAgICAgcmV0dXJuIHZlcnRpY2VzLmdldCh1KS5vdXRWZXJ0aWNlcy5nZXQodilcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZlcnRpY2VzICgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwKHRoaXMpLnZlcnRpY2VzLmtleXMoKSlcbiAgfVxuXG4gIG91dFZlcnRpY2VzICh1KSB7XG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdSlcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwKHRoaXMpLnZlcnRpY2VzLmdldCh1KS5vdXRWZXJ0aWNlcy5rZXlzKCkpXG4gIH1cblxuICBpblZlcnRpY2VzICh1KSB7XG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdSlcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwKHRoaXMpLnZlcnRpY2VzLmdldCh1KS5pblZlcnRpY2VzLmtleXMoKSlcbiAgfVxuXG4gIHBhcmVudCAodSkge1xuICAgIGNoZWNrVmVydGV4KHRoaXMsIHUpXG4gICAgcmV0dXJuIHAodGhpcykudmVydGljZXMuZ2V0KHUpLnBhcmVudFxuICB9XG5cbiAgY2hpbGRyZW4gKHUpIHtcbiAgICBjaGVja1ZlcnRleCh0aGlzLCB1KVxuICAgIHJldHVybiBBcnJheS5mcm9tKHAodGhpcykudmVydGljZXMuZ2V0KHUpLmNoaWxkcmVuKVxuICB9XG5cbiAgbnVtVmVydGljZXMgKCkge1xuICAgIHJldHVybiBwKHRoaXMpLm51bVZlcnRpY2VzXG4gIH1cblxuICBudW1FZGdlcyAoKSB7XG4gICAgcmV0dXJuIHAodGhpcykubnVtRWRnZXNcbiAgfVxuXG4gIG91dERlZ3JlZSAodSkge1xuICAgIGNoZWNrVmVydGV4KHRoaXMsIHUpXG4gICAgcmV0dXJuIHAodGhpcykudmVydGljZXMuZ2V0KHUpLm91dFZlcnRpY2VzLnNpemVcbiAgfVxuXG4gIGluRGVncmVlICh1KSB7XG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdSlcbiAgICByZXR1cm4gcCh0aGlzKS52ZXJ0aWNlcy5nZXQodSkuaW5WZXJ0aWNlcy5zaXplXG4gIH1cblxuICBhZGRWZXJ0ZXggKHUsIG9iaiA9IHt9KSB7XG4gICAgaWYgKHRoaXMudmVydGV4KHUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZWQgdmVydGV4OiAke3V9YClcbiAgICB9XG4gICAgcCh0aGlzKS52ZXJ0aWNlcy5zZXQodSwge1xuICAgICAgb3V0VmVydGljZXM6IG5ldyBNYXAoKSxcbiAgICAgIGluVmVydGljZXM6IG5ldyBNYXAoKSxcbiAgICAgIGNoaWxkcmVuOiBuZXcgU2V0KCksXG4gICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICBkYXRhOiBvYmpcbiAgICB9KVxuICAgIHAodGhpcykubnVtVmVydGljZXMrK1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhZGRFZGdlICh1LCB2LCBvYmogPSB7fSkge1xuICAgIGNoZWNrVmVydGV4KHRoaXMsIHUpXG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdilcbiAgICBpZiAodGhpcy5lZGdlKHUsIHYpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZWQgZWRnZTogKCR7dX0sICR7dn0pYClcbiAgICB9XG4gICAgcCh0aGlzKS5udW1FZGdlcysrXG4gICAgcCh0aGlzKS52ZXJ0aWNlcy5nZXQodSkub3V0VmVydGljZXMuc2V0KHYsIG9iailcbiAgICBwKHRoaXMpLnZlcnRpY2VzLmdldCh2KS5pblZlcnRpY2VzLnNldCh1LCBvYmopXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHNldENoaWxkICh1LCB2KSB7XG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdSlcbiAgICBjaGVja1ZlcnRleCh0aGlzLCB2KVxuICAgIHAodGhpcykudmVydGljZXMuZ2V0KHUpLmNoaWxkcmVuLmFkZCh2KVxuICAgIHAodGhpcykudmVydGljZXMuZ2V0KHYpLnBhcmVudCA9IHVcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVtb3ZlVmVydGV4ICh1KSB7XG4gICAgZm9yIChjb25zdCB2IG9mIHRoaXMub3V0VmVydGljZXModSkpIHtcbiAgICAgIHRoaXMucmVtb3ZlRWRnZSh1LCB2KVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHYgb2YgdGhpcy5pblZlcnRpY2VzKHUpKSB7XG4gICAgICB0aGlzLnJlbW92ZUVkZ2UodiwgdSlcbiAgICB9XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQodSlcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB0aGlzLnVuc2V0Q2hpbGQocGFyZW50LCB1KVxuICAgIH1cbiAgICBwKHRoaXMpLnZlcnRpY2VzLmRlbGV0ZSh1KVxuICAgIHAodGhpcykubnVtVmVydGljZXMtLVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZW1vdmVFZGdlICh1LCB2KSB7XG4gICAgaWYgKHRoaXMuZWRnZSh1LCB2KSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgZWRnZTogKCR7dX0sICR7dn0pYClcbiAgICB9XG4gICAgcCh0aGlzKS52ZXJ0aWNlcy5nZXQodSkub3V0VmVydGljZXMuZGVsZXRlKHYpXG4gICAgcCh0aGlzKS52ZXJ0aWNlcy5nZXQodikuaW5WZXJ0aWNlcy5kZWxldGUodSlcbiAgICBwKHRoaXMpLm51bUVkZ2VzLS1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdW5zZXRDaGlsZCAodSwgdikge1xuICAgIGNoZWNrVmVydGV4KHRoaXMsIHUpXG4gICAgY2hlY2tWZXJ0ZXgodGhpcywgdilcbiAgICBwKHRoaXMpLnZlcnRpY2VzLmdldCh1KS5jaGlsZHJlbi5kZWxldGUodilcbiAgICBwKHRoaXMpLnZlcnRpY2VzLmdldCh2KS5wYXJlbnQgPSBudWxsXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11dGFibGVHcmFwaFxuIiwiY2xhc3MgQWJzdHJhY3RHcmFwaCB7XG4gIGVkZ2VzICgpIHtcbiAgICBjb25zdCBlZGdlcyA9IFtdXG4gICAgZm9yIChjb25zdCB1IG9mIHRoaXMudmVydGljZXMoKSkge1xuICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMub3V0VmVydGljZXModSkpIHtcbiAgICAgICAgZWRnZXMucHVzaChbdSwgdl0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlZGdlc1xuICB9XG5cbiAgb3V0RWRnZXMgKHUpIHtcbiAgICByZXR1cm4gdGhpcy5vdXRWZXJ0aWNlcyh1KS5tYXAoKHYpID0+IFt1LCB2XSlcbiAgfVxuXG4gIGluRWRnZXMgKHYpIHtcbiAgICByZXR1cm4gdGhpcy5vdXRWZXJ0aWNlcyh2KS5tYXAoKHUpID0+IFt1LCB2XSlcbiAgfVxuXG4gIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRpY2VzOiB0aGlzLnZlcnRpY2VzKCkubWFwKCh1KSA9PiAoe3UsIGQ6IHRoaXMudmVydGV4KHUpfSkpLFxuICAgICAgZWRnZXM6IHRoaXMuZWRnZXMoKS5tYXAoKFt1LCB2XSkgPT4gKHt1LCB2LCBkOiB0aGlzLmVkZ2UodSwgdil9KSlcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdEdyYXBoXG4iLCJjb25zdCBHcmFwaCA9IHJlcXVpcmUoJy4uLy4uL2dyYXBoJylcbmNvbnN0IGFjY2Vzc29yID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWNjZXNzb3InKVxuY29uc3QgbGF5ZXJBc3NpZ25tZW50ID0gcmVxdWlyZSgnLi4vLi4vbGF5b3V0ZXIvc3VnaXlhbWEvbGF5ZXItYXNzaWdubWVudCcpXG5jb25zdCBncm91cExheWVycyA9IHJlcXVpcmUoJy4uLy4uL2xheW91dGVyL3N1Z2l5YW1hL21pc2MvZ3JvdXAtbGF5ZXJzJylcbmNvbnN0IHJlY3Rhbmd1bGFyID0gcmVxdWlyZSgnLi9yZWN0YW5ndWxhcicpXG5cbmNvbnN0IGVkZ2VDb25jZW50cmF0aW9uID0gKGcsIGgxLCBoMiwgbWV0aG9kLCBkdW1teSwgaWRHZW5lcmF0b3IpID0+IHtcbiAgY29uc3Qgc3ViZ3JhcGggPSBuZXcgR3JhcGgoKVxuICBmb3IgKGNvbnN0IHUgb2YgaDEpIHtcbiAgICBzdWJncmFwaC5hZGRWZXJ0ZXgodSwgZy52ZXJ0ZXgodSkpXG4gIH1cbiAgZm9yIChjb25zdCB1IG9mIGgyKSB7XG4gICAgc3ViZ3JhcGguYWRkVmVydGV4KHUsIGcudmVydGV4KHUpKVxuICB9XG4gIGZvciAoY29uc3QgdSBvZiBoMSkge1xuICAgIGZvciAoY29uc3QgdiBvZiBoMikge1xuICAgICAgaWYgKGcuZWRnZSh1LCB2KSkge1xuICAgICAgICBzdWJncmFwaC5hZGRFZGdlKHUsIHYsIGcuZWRnZSh1LCB2KSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGNvbmNlbnRyYXRpb24gb2YgbWV0aG9kKHN1YmdyYXBoLCBoMSwgaDIpKSB7XG4gICAgY29uc3QgdyA9IGlkR2VuZXJhdG9yKGcsIGNvbmNlbnRyYXRpb24uc291cmNlLCBjb25jZW50cmF0aW9uLnRhcmdldClcbiAgICBpZiAoZy52ZXJ0ZXgodykpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGcuYWRkVmVydGV4KHcsIGR1bW15KGNvbmNlbnRyYXRpb24uc291cmNlLCBjb25jZW50cmF0aW9uLnRhcmdldCkpXG4gICAgZm9yIChjb25zdCB1IG9mIGNvbmNlbnRyYXRpb24uc291cmNlKSB7XG4gICAgICBnLmFkZEVkZ2UodSwgdylcbiAgICB9XG4gICAgZm9yIChjb25zdCB2IG9mIGNvbmNlbnRyYXRpb24udGFyZ2V0KSB7XG4gICAgICBnLmFkZEVkZ2UodywgdilcbiAgICB9XG4gICAgZm9yIChjb25zdCB1IG9mIGcuaW5WZXJ0aWNlcyh3KSkge1xuICAgICAgZm9yIChjb25zdCB2IG9mIGcub3V0VmVydGljZXModykpIHtcbiAgICAgICAgaWYgKGcuZWRnZSh1LCB2KSkge1xuICAgICAgICAgIGcucmVtb3ZlRWRnZSh1LCB2KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHByaXZhdGVzID0gbmV3IFdlYWtNYXAoKVxuXG5jbGFzcyBFZGdlQ29uY2VudHJhdGlvblRyYW5zZm9ybWVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHByaXZhdGVzLnNldCh0aGlzLCB7XG4gICAgICBsYXllckFzc2lnbm1lbnQ6IG5ldyBsYXllckFzc2lnbm1lbnQuUXVhZEhldXJpc3RpYygpLFxuICAgICAgbWV0aG9kOiByZWN0YW5ndWxhcixcbiAgICAgIGR1bW15OiAoKSA9PiAoe2R1bW15OiB0cnVlfSksXG4gICAgICBpZEdlbmVyYXRvcjogKCkgPT4gU3ltYm9sKCcnKVxuICAgIH0pXG4gIH1cblxuICB0cmFuc2Zvcm0gKGcpIHtcbiAgICBjb25zdCBsYXllck1hcCA9IHRoaXMubGF5ZXJBc3NpZ25tZW50KCkuY2FsbChnKVxuICAgIGNvbnN0IGxheWVycyA9IGdyb3VwTGF5ZXJzKGcsIGxheWVyTWFwKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgY29uc3QgaDEgPSBsYXllcnNbaV1cbiAgICAgIGNvbnN0IGgyID0gbmV3IFNldCgpXG4gICAgICBmb3IgKGNvbnN0IHUgb2YgaDEpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIGcub3V0VmVydGljZXModSkpIHtcbiAgICAgICAgICBoMi5hZGQodilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWRnZUNvbmNlbnRyYXRpb24oZywgaDEsIEFycmF5LmZyb20oaDIudmFsdWVzKCkpLCB0aGlzLm1ldGhvZCgpLCB0aGlzLmR1bW15KCksIHRoaXMuaWRHZW5lcmF0b3IoKSlcbiAgICB9XG4gICAgcmV0dXJuIGdcbiAgfVxuXG4gIGxheWVyQXNzaWdubWVudCAoKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yKHRoaXMsIHByaXZhdGVzLCAnbGF5ZXJBc3NpZ25tZW50JywgYXJndW1lbnRzKVxuICB9XG5cbiAgbWV0aG9kICgpIHtcbiAgICByZXR1cm4gYWNjZXNzb3IodGhpcywgcHJpdmF0ZXMsICdtZXRob2QnLCBhcmd1bWVudHMpXG4gIH1cblxuICBkdW1teSAoKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yKHRoaXMsIHByaXZhdGVzLCAnZHVtbXknLCBhcmd1bWVudHMpXG4gIH1cblxuICBpZEdlbmVyYXRvciAoKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yKHRoaXMsIHByaXZhdGVzLCAnaWRHZW5lcmF0b3InLCBhcmd1bWVudHMpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFZGdlQ29uY2VudHJhdGlvblRyYW5zZm9ybWVyXG4iLCJjb25zdCBMb25nZXN0UGF0aCA9IHJlcXVpcmUoJy4vbG9uZ2VzdC1wYXRoJylcbmNvbnN0IFF1YWRIZXVyaXN0aWMgPSByZXF1aXJlKCcuL3F1YWQtaGV1cmlzdGljJylcblxubW9kdWxlLmV4cG9ydHMgPSB7TG9uZ2VzdFBhdGgsIFF1YWRIZXVyaXN0aWN9XG4iLCJjb25zdCBhY2Nlc3NvciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2FjY2Vzc29yJylcbmNvbnN0IExvbmdlc3RQYXRoID0gcmVxdWlyZSgnLi9sb25nZXN0LXBhdGgnKVxuXG5jb25zdCBxdWFkSGV1cmlzdGljID0gKGcsIHJlcGVhdCkgPT4ge1xuICBjb25zdCBsYXllcnMgPSBuZXcgTG9uZ2VzdFBhdGgoKS5jYWxsKGcpXG5cbiAgbGV0IG1pbkxheWVyID0gSW5maW5pdHlcbiAgbGV0IG1heExheWVyID0gLUluZmluaXR5XG4gIGZvciAoY29uc3QgdSBvZiBnLnZlcnRpY2VzKCkpIHtcbiAgICBtaW5MYXllciA9IE1hdGgubWluKG1pbkxheWVyLCBsYXllcnNbdV0pXG4gICAgbWF4TGF5ZXIgPSBNYXRoLm1heChtYXhMYXllciwgbGF5ZXJzW3VdKVxuICB9XG4gIGZvciAoY29uc3QgdSBvZiBnLnZlcnRpY2VzKCkpIHtcbiAgICBpZiAoZy5pbkRlZ3JlZSh1KSA9PT0gMCkge1xuICAgICAgbGF5ZXJzW3VdID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICBsYXllcnNbdV0gLT0gbWluTGF5ZXJcbiAgICB9XG4gIH1cblxuICBjb25zdCB2ZXJ0aWNlcyA9IGcudmVydGljZXMoKS5maWx0ZXIodSA9PiBnLmluRGVncmVlKHUpID4gMCAmJiBnLm91dERlZ3JlZSh1KSA+IDApXG4gIGNvbnN0IHdlaWdodHMgPSB7fVxuICBjb25zdCBjbXAgPSAodSwgdikgPT4gd2VpZ2h0c1t2XSAtIHdlaWdodHNbdV1cbiAgZm9yIChsZXQgbG9vcCA9IDA7IGxvb3AgPCByZXBlYXQ7ICsrbG9vcCkge1xuICAgIGZvciAoY29uc3QgdSBvZiBnLnZlcnRpY2VzKCkpIHtcbiAgICAgIHdlaWdodHNbdV0gPSAwXG4gICAgfVxuICAgIGZvciAoY29uc3QgW3UsIHZdIG9mIGcuZWRnZXMoKSkge1xuICAgICAgY29uc3QgbCA9IGxheWVyc1t2XSAtIGxheWVyc1t1XVxuICAgICAgd2VpZ2h0c1t1XSArPSBsXG4gICAgICB3ZWlnaHRzW3ZdICs9IGxcbiAgICB9XG5cbiAgICB2ZXJ0aWNlcy5zb3J0KGNtcClcbiAgICBmb3IgKGNvbnN0IHUgb2YgdmVydGljZXMpIHtcbiAgICAgIGxldCBzdW0gPSAwXG4gICAgICBsZXQgY291bnQgPSAwXG4gICAgICBsZXQgbGVmdE1heCA9IC1JbmZpbml0eVxuICAgICAgbGV0IHJpZ2h0TWluID0gSW5maW5pdHlcbiAgICAgIGZvciAoY29uc3QgdiBvZiBnLmluVmVydGljZXModSkpIHtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBsYXllcnNbdl1cbiAgICAgICAgbGVmdE1heCA9IE1hdGgubWF4KGxlZnRNYXgsIGxheWVyKVxuICAgICAgICBzdW0gKz0gbGF5ZXJcbiAgICAgICAgY291bnQgKz0gMVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB2IG9mIGcub3V0VmVydGljZXModSkpIHtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBsYXllcnNbdl1cbiAgICAgICAgcmlnaHRNaW4gPSBNYXRoLm1pbihyaWdodE1pbiwgbGF5ZXIpXG4gICAgICAgIHN1bSArPSBsYXllclxuICAgICAgICBjb3VudCArPSAxXG4gICAgICB9XG4gICAgICBsYXllcnNbdV0gPSBNYXRoLm1pbihyaWdodE1pbiAtIDEsIE1hdGgubWF4KGxlZnRNYXggKyAxLCBNYXRoLnJvdW5kKHN1bSAvIGNvdW50KSkpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxheWVyc1xufVxuXG5jb25zdCBwcml2YXRlcyA9IG5ldyBXZWFrTWFwKClcblxuY2xhc3MgUXVhZEhldXJpc3RpYyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBwcml2YXRlcy5zZXQodGhpcywge1xuICAgICAgcmVwZWF0OiA0XG4gICAgfSlcbiAgfVxuXG4gIGNhbGwgKGcpIHtcbiAgICByZXR1cm4gcXVhZEhldXJpc3RpYyhnLCB0aGlzLnJlcGVhdCgpKVxuICB9XG5cbiAgcmVwZWF0ICgpIHtcbiAgICByZXR1cm4gYWNjZXNzb3IodGhpcywgcHJpdmF0ZXMsICdyZXBlYXQnLCBhcmd1bWVudHMpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWFkSGV1cmlzdGljXG4iLCJjb25zdCBncm91cExheWVycyA9IChnLCBsYXllcnMsIGFsbG93RW1wdHlMYXllcikgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXVxuICBmb3IgKGNvbnN0IHUgb2YgZy52ZXJ0aWNlcygpKSB7XG4gICAgY29uc3QgbGF5ZXIgPSBsYXllcnNbdV1cbiAgICBpZiAocmVzdWx0W2xheWVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRbbGF5ZXJdID0gW11cbiAgICB9XG4gICAgcmVzdWx0W2xheWVyXS5wdXNoKHUpXG4gIH1cbiAgaWYgKGFsbG93RW1wdHlMYXllcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAocmVzdWx0W2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0W2ldID0gW11cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXN1bHQuZmlsdGVyKChoKSA9PiBoICE9PSB1bmRlZmluZWQpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBncm91cExheWVyc1xuIiwiY29uc3QgbGF5ZXJWZXJ0aWNlcyA9IChnLCBoMSwgaDIpID0+IHtcbiAgY29uc3QgdXMgPSBuZXcgU2V0KGgxKVxuICBjb25zdCB2ZXJ0aWNlcyA9IHt9XG4gIGZvciAoY29uc3QgdiBvZiBoMikge1xuICAgIHZlcnRpY2VzW3ZdID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCB1IG9mIGcuaW5WZXJ0aWNlcyh2KSkge1xuICAgICAgaWYgKHVzLmhhcyh1KSkge1xuICAgICAgICB2ZXJ0aWNlc1t2XS5hZGQodSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlcnRpY2VzXG59XG5cbmNvbnN0IHJlY3Rhbmd1bGFyID0gKGcsIGgxLCBoMikgPT4ge1xuICBpZiAoaDEubGVuZ3RoID09PSAwIHx8IGgyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIGNvbnN0IGsgPSBnLm51bUVkZ2VzKClcbiAgY29uc3QgYWN0aXZlID0ge31cbiAgY29uc3QgdmVydGljZXMgPSBsYXllclZlcnRpY2VzKGcsIGgxLCBoMilcbiAgY29uc3QgaXNBY3RpdmUgPSAodSkgPT4gYWN0aXZlW3VdXG4gIGNvbnN0IGNtcCA9ICh2MSwgdjIpID0+IHZlcnRpY2VzW3YyXS5zaXplIC0gdmVydGljZXNbdjFdLnNpemVcbiAgY29uc3QgZCA9IChzLCB0KSA9PiB7XG4gICAgbGV0IGNvdW50ID0gMFxuICAgIGZvciAoY29uc3QgdSBvZiBzKSB7XG4gICAgICBmb3IgKGNvbnN0IHYgb2YgdCkge1xuICAgICAgICBpZiAodmVydGljZXNbdl0uaGFzKHUpKSB7XG4gICAgICAgICAgY291bnQgKz0gMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudCAtIHMubGVuZ3RoIC0gdC5sZW5ndGhcbiAgfVxuICBoMiA9IEFycmF5LmZyb20oaDIpXG5cbiAgY29uc3QgY29uY2VudHJhdGlvbnMgPSBbXVxuICBsZXQgak9mZnNldCA9IDBcbiAgZm9yIChsZXQgbCA9IDA7IGwgPCBrOyArK2wpIHtcbiAgICBmb3IgKGNvbnN0IHUgb2YgaDEpIHtcbiAgICAgIGFjdGl2ZVt1XSA9IHRydWVcbiAgICB9XG5cbiAgICBoMi5zb3J0KGNtcClcbiAgICBpZiAodmVydGljZXNbaDJbak9mZnNldF1dLnNpemUgPD0gMCkge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBsZXQgbWF4RCA9IC0xXG4gICAgbGV0IG1heEgxXG4gICAgbGV0IG1heEgyXG4gICAgbGV0IHRtcEgyID0gW11cbiAgICBmb3IgKGxldCBqID0gak9mZnNldDsgaiA8IGgyLmxlbmd0aDsgKytqKSB7XG4gICAgICBjb25zdCB2ID0gaDJbal1cbiAgICAgIGZvciAoY29uc3QgdSBvZiBoMSkge1xuICAgICAgICBpZiAoYWN0aXZlW3VdKSB7XG4gICAgICAgICAgaWYgKCFnLmVkZ2UodSwgdikpIHtcbiAgICAgICAgICAgIGFjdGl2ZVt1XSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0bXBIMi5wdXNoKHYpXG4gICAgICBsZXQgdG1wSDEgPSBoMS5maWx0ZXIoaXNBY3RpdmUpXG4gICAgICBsZXQgdG1wRCA9IGQodG1wSDEsIHRtcEgyKVxuICAgICAgaWYgKHRtcEQgPiBtYXhEKSB7XG4gICAgICAgIG1heEQgPSB0bXBEXG4gICAgICAgIG1heEgxID0gdG1wSDFcbiAgICAgICAgbWF4SDIgPSBBcnJheS5mcm9tKHRtcEgyKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXhEID4gLTEpIHtcbiAgICAgIGZvciAoY29uc3QgdiBvZiBtYXhIMikge1xuICAgICAgICBmb3IgKGNvbnN0IHUgb2YgbWF4SDEpIHtcbiAgICAgICAgICB2ZXJ0aWNlc1t2XS5kZWxldGUodSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uY2VudHJhdGlvbnMucHVzaCh7XG4gICAgICAgIHNvdXJjZTogQXJyYXkuZnJvbShtYXhIMSksXG4gICAgICAgIHRhcmdldDogQXJyYXkuZnJvbShtYXhIMilcbiAgICAgIH0pXG4gICAgICBqT2Zmc2V0ID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICBqT2Zmc2V0ICs9IDFcbiAgICB9XG5cbiAgICBpZiAoak9mZnNldCA+PSBoMi5sZW5ndGgpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmNlbnRyYXRpb25zXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVjdGFuZ3VsYXJcbiIsImNvbnN0IGhhc2hLZXkgPSAodmVydGljZXMpID0+IHtcbiAgdmVydGljZXMuc29ydCgpXG4gIHJldHVybiB2ZXJ0aWNlcy5tYXAoKHUpID0+IHUudG9TdHJpbmcoKSkuam9pbignLCcpXG59XG5cbmNvbnN0IG1heGltYWxCaWNsaXF1ZXMgPSAoYmljbGlxdWVzKSA9PiB7XG4gIGNvbnN0IGJzID0gQXJyYXkuZnJvbShiaWNsaXF1ZXMpXG4gIGJzLnNvcnQoKGIxLCBiMikgPT4gKGIyLnNvdXJjZS5sZW5ndGggKyBiMi50YXJnZXQubGVuZ3RoKSAtIChiMS5zb3VyY2UubGVuZ3RoICsgYjEudGFyZ2V0Lmxlbmd0aCkpXG4gIGNvbnN0IHJlbW92ZWQgPSBicy5tYXAoKCkgPT4gZmFsc2UpXG4gIGNvbnN0IG4gPSBicy5sZW5ndGhcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAocmVtb3ZlZFtpXSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgY29uc3QgYjEgPSBic1tpXVxuICAgIGNvbnN0IHNvdXJjZVNldCA9IG5ldyBTZXQoYjEuc291cmNlKVxuICAgIGNvbnN0IHRhcmdldFNldCA9IG5ldyBTZXQoYjEudGFyZ2V0KVxuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IG47ICsraikge1xuICAgICAgY29uc3QgYjIgPSBic1tqXVxuICAgICAgaWYgKGIyLnNvdXJjZS5ldmVyeSgodSkgPT4gc291cmNlU2V0Lmhhcyh1KSkgJiYgYjIudGFyZ2V0LmV2ZXJ5KCh2KSA9PiB0YXJnZXRTZXQuaGFzKHYpKSkge1xuICAgICAgICByZW1vdmVkW2pdID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYnMuZmlsdGVyKChiLCBpKSA9PiAhcmVtb3ZlZFtpXSlcbn1cblxuY29uc3QgcXVhc2lCaWNsaXF1ZU1pbmluZyA9IChncmFwaCwgUywgVCwgbXUsIG1pbkNvdW50KSA9PiB7XG4gIGNvbnN0IEMgPSBuZXcgTWFwKClcbiAgZm9yIChjb25zdCB1IG9mIFMpIHtcbiAgICBjb25zdCBvdXRWZXJ0aWNlcyA9IGdyYXBoLm91dFZlcnRpY2VzKHUpXG4gICAgY29uc3QgdG1wUyA9IG5ldyBTZXQoKVxuICAgIGNvbnN0IHRtcFQgPSBuZXcgU2V0KG91dFZlcnRpY2VzKVxuICAgIEMuc2V0KGhhc2hLZXkob3V0VmVydGljZXMpLCB7c291cmNlOiB0bXBTLCB0YXJnZXQ6IHRtcFR9KVxuICB9XG4gIC8vIGZvciAoY29uc3QgdiBvZiBUKSB7XG4gIC8vICAgY29uc3QgaW5WZXJ0aWNlcyA9IGdyYXBoLmluVmVydGljZXModilcbiAgLy8gICBjb25zdCB0bXBTID0gbmV3IFNldChpblZlcnRpY2VzKVxuICAvLyAgIGNvbnN0IHRtcFQgPSBuZXcgU2V0KClcbiAgLy8gICBDLnNldChoYXNoS2V5KGluVmVydGljZXMpLCB7c291cmNlOiB0bXBTLCB0YXJnZXQ6IHRtcFR9KVxuICAvLyB9XG4gIGZvciAoY29uc3Qga2V5IG9mIEMua2V5cygpKSB7XG4gICAgY29uc3QgTSA9IG5ldyBNYXAoKVxuICAgIGNvbnN0IHtzb3VyY2UsIHRhcmdldH0gPSBDLmdldChrZXkpXG4gICAgaWYgKHNvdXJjZS5zaXplID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHYgb2YgdGFyZ2V0KSB7XG4gICAgICAgIGZvciAoY29uc3QgdSBvZiBncmFwaC5pblZlcnRpY2VzKHYpKSB7XG4gICAgICAgICAgaWYgKCFNLmhhcyh1KSkge1xuICAgICAgICAgICAgTS5zZXQodSwgMClcbiAgICAgICAgICB9XG4gICAgICAgICAgTS5zZXQodSwgTS5nZXQodSkgKyAxKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHUgb2YgTS5rZXlzKCkpIHtcbiAgICAgICAgaWYgKE0uZ2V0KHUpID49IG11ICogdGFyZ2V0LnNpemUpIHtcbiAgICAgICAgICBzb3VyY2UuYWRkKHUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCB1IG9mIHNvdXJjZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgZ3JhcGgub3V0VmVydGljZXModSkpIHtcbiAgICAgICAgICBpZiAoIU0uaGFzKHYpKSB7XG4gICAgICAgICAgICBNLnNldCh2LCAwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBNLnNldCh2LCBNLmdldCh2KSArIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgdiBvZiBNLmtleXMoKSkge1xuICAgICAgICBpZiAoTS5nZXQodikgPj0gbXUgKiBzb3VyY2Uuc2l6ZSkge1xuICAgICAgICAgIHRhcmdldC5hZGQodilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IEFycmF5LmZyb20oQy52YWx1ZXMoKSlcbiAgICAuZmlsdGVyKCh7c291cmNlLCB0YXJnZXR9KSA9PiB7XG4gICAgICBsZXQgY291bnQgPSAwXG4gICAgICBmb3IgKGNvbnN0IHUgb2Ygc291cmNlKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiB0YXJnZXQpIHtcbiAgICAgICAgICBpZiAoZ3JhcGguZWRnZSh1LCB2KSkge1xuICAgICAgICAgICAgY291bnQgKz0gMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50ID49IG1pbkNvdW50XG4gICAgfSlcbiAgICAubWFwKCh7c291cmNlLCB0YXJnZXR9KSA9PiAoe3NvdXJjZTogQXJyYXkuZnJvbShzb3VyY2UpLCB0YXJnZXQ6IEFycmF5LmZyb20odGFyZ2V0KX0pKVxuICByZXR1cm4gbWF4aW1hbEJpY2xpcXVlcyhyZXN1bHQpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVhc2lCaWNsaXF1ZU1pbmluZ1xuIiwiZXhwb3J0IGNvbnN0IGxheW91dFJlY3QgPSAoaXRlbXMpID0+IHtcbiAgaWYgKGl0ZW1zLnNpemUgPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxheW91dFdpZHRoOiAwLFxuICAgICAgbGF5b3V0SGVpZ2h0OiAwXG4gICAgfVxuICB9XG4gIGl0ZW1zID0gQXJyYXkuZnJvbShpdGVtcy52YWx1ZXMoKSlcbiAgY29uc3QgbGVmdCA9IE1hdGgubWluKC4uLml0ZW1zLm1hcCgoe3gsIHdpZHRofSkgPT4geCAtIHdpZHRoIC8gMikpXG4gIGNvbnN0IHJpZ2h0ID0gTWF0aC5tYXgoLi4uaXRlbXMubWFwKCh7eCwgd2lkdGh9KSA9PiB4ICsgd2lkdGggLyAyKSlcbiAgY29uc3QgdG9wID0gTWF0aC5taW4oLi4uaXRlbXMubWFwKCh7eSwgaGVpZ2h0fSkgPT4geSAtIGhlaWdodCAvIDIpKVxuICBjb25zdCBib3R0b20gPSBNYXRoLm1heCguLi5pdGVtcy5tYXAoKHt5LCBoZWlnaHR9KSA9PiB5ICsgaGVpZ2h0IC8gMikpXG4gIHJldHVybiB7XG4gICAgbGVmdDogbGVmdCxcbiAgICB0b3A6IHRvcCxcbiAgICBsYXlvdXRXaWR0aDogcmlnaHQgLSBsZWZ0LFxuICAgIGxheW91dEhlaWdodDogYm90dG9tIC0gdG9wXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNlbnRlclRyYW5zZm9ybSA9IChsV2lkdGgsIGxIZWlnaHQsIGxlZnQsIHRvcCwgY1dpZHRoLCBjSGVpZ2h0LCBtYXJnaW4pID0+IHtcbiAgaWYgKGxXaWR0aCA9PT0gMCB8fCBsSGVpZ2h0ID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgazogMVxuICAgIH1cbiAgfVxuICBjb25zdCBhV2lkdGggPSBjV2lkdGggLSAyICogbWFyZ2luXG4gIGNvbnN0IGFIZWlnaHQgPSBjSGVpZ2h0IC0gMiAqIG1hcmdpblxuICBjb25zdCBoU2NhbGUgPSBhV2lkdGggLyBsV2lkdGhcbiAgY29uc3QgdlNjYWxlID0gYUhlaWdodCAvIGxIZWlnaHRcbiAgY29uc3Qgc2NhbGUgPSBNYXRoLm1pbihoU2NhbGUsIHZTY2FsZSlcbiAgY29uc3QgeCA9IGhTY2FsZSA8IHZTY2FsZSA/IDAgOiAoYVdpZHRoIC0gbFdpZHRoICogc2NhbGUpIC8gMlxuICBjb25zdCB5ID0gdlNjYWxlIDwgaFNjYWxlID8gMCA6IChhSGVpZ2h0IC0gbEhlaWdodCAqIHNjYWxlKSAvIDJcbiAgcmV0dXJuIHt4LCB5LCBrOiBzY2FsZX1cbn1cbiIsImltcG9ydCB7XG4gIGludGVycG9sYXRlUmdiIGFzIGQzSW50ZXJwb2xhdGVSZ2Jcbn0gZnJvbSAnZDMtaW50ZXJwb2xhdGUnXG5cbmNvbnN0IGludGVycG9sYXRlID0gKGN1cnJlbnQsIG5leHQsIHIpID0+IHtcbiAgcmV0dXJuIChuZXh0IC0gY3VycmVudCkgKiByICsgY3VycmVudFxufVxuXG5leHBvcnQgY29uc3QgaW50ZXJwb2xhdGVHcm91cCA9IChjdXJyZW50LCBuZXh0LCByKSA9PiB7XG4gIHJldHVybiBpbnRlcnBvbGF0ZVZlcnRleChjdXJyZW50LCBuZXh0LCByKVxufVxuXG5leHBvcnQgY29uc3QgaW50ZXJwb2xhdGVWZXJ0ZXggPSAoY3VycmVudCwgbmV4dCwgcikgPT4ge1xuICBjb25zdCBjb3B5UHJvcGVydGllcyA9IFtcbiAgICAndScsXG4gICAgJ3R5cGUnLFxuICAgICdsYWJlbCcsXG4gICAgJ2xhYmVsRm9udEZhbWlseScsXG4gICAgJ2QnXG4gIF1cbiAgY29uc3QgaW50ZXJwb2xhdGVQcm9wZXJ0aWVzID0gW1xuICAgICd4JyxcbiAgICAneScsXG4gICAgJ3dpZHRoJyxcbiAgICAnaGVpZ2h0JyxcbiAgICAnc3Ryb2tlV2lkdGgnLFxuICAgICdsYWJlbFN0cm9rZVdpZHRoJyxcbiAgICAnbGFiZWxGb250U2l6ZScsXG4gICAgJ2FscGhhJ1xuICBdXG4gIGNvbnN0IGNvbG9ySW50ZXJwb2xhdGVQcm9wZXJ0aWVzID0gW1xuICAgICdmaWxsQ29sb3InLFxuICAgICdzdHJva2VDb2xvcicsXG4gICAgJ2xhYmVsRmlsbENvbG9yJyxcbiAgICAnbGFiZWxTdHJva2VDb2xvcidcbiAgXVxuICBjb25zdCByZXN1bHQgPSB7fVxuICBmb3IgKGNvbnN0IHAgb2YgY29weVByb3BlcnRpZXMpIHtcbiAgICByZXN1bHRbcF0gPSBuZXh0W3BdXG4gIH1cbiAgZm9yIChjb25zdCBwIG9mIGludGVycG9sYXRlUHJvcGVydGllcykge1xuICAgIHJlc3VsdFtwXSA9IGludGVycG9sYXRlKGN1cnJlbnRbcF0sIG5leHRbcF0sIHIpXG4gIH1cbiAgZm9yIChjb25zdCBwIG9mIGNvbG9ySW50ZXJwb2xhdGVQcm9wZXJ0aWVzKSB7XG4gICAgcmVzdWx0W3BdID0gZDNJbnRlcnBvbGF0ZVJnYihjdXJyZW50W3BdLCBuZXh0W3BdKShyKVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGNvbnN0IGludGVycG9sYXRlRWRnZSA9IChjdXJyZW50LCBuZXh0LCByKSA9PiB7XG4gIGNvbnN0IGNvcHlQcm9wZXJ0aWVzID0gW1xuICAgICd1JyxcbiAgICAndicsXG4gICAgJ3R5cGUnLFxuICAgICdzb3VyY2VNYXJrZXJTaGFwZScsXG4gICAgJ3RhcmdldE1hcmtlclNoYXBlJyxcbiAgICAnbGFiZWwnLFxuICAgICdsYWJlbEZvbnRGYW1pbHknLFxuICAgICdkJ1xuICBdXG4gIGNvbnN0IGludGVycG9sYXRlUHJvcGVydGllcyA9IFtcbiAgICAnc3Ryb2tlV2lkdGgnLFxuICAgICdzb3VyY2VNYXJrZXJTaXplJyxcbiAgICAndGFyZ2V0TWFya2VyU2l6ZScsXG4gICAgJ2xhYmVsU3Ryb2tlV2lkdGgnLFxuICAgICdsYWJlbEZvbnRTaXplJyxcbiAgICAnYWxwaGEnXG4gIF1cbiAgY29uc3QgY29sb3JJbnRlcnBvbGF0ZVByb3BlcnRpZXMgPSBbXG4gICAgJ3N0cm9rZUNvbG9yJyxcbiAgICAnbGFiZWxGaWxsQ29sb3InLFxuICAgICdsYWJlbFN0cm9rZUNvbG9yJ1xuICBdXG4gIGNvbnN0IHJlc3VsdCA9IHt9XG4gIGZvciAoY29uc3QgcCBvZiBjb3B5UHJvcGVydGllcykge1xuICAgIHJlc3VsdFtwXSA9IG5leHRbcF1cbiAgfVxuICBmb3IgKGNvbnN0IHAgb2YgaW50ZXJwb2xhdGVQcm9wZXJ0aWVzKSB7XG4gICAgcmVzdWx0W3BdID0gaW50ZXJwb2xhdGUoY3VycmVudFtwXSwgbmV4dFtwXSwgcilcbiAgfVxuICBmb3IgKGNvbnN0IHAgb2YgY29sb3JJbnRlcnBvbGF0ZVByb3BlcnRpZXMpIHtcbiAgICByZXN1bHRbcF0gPSBkM0ludGVycG9sYXRlUmdiKGN1cnJlbnRbcF0sIG5leHRbcF0pKHIpXG4gIH1cbiAgcmVzdWx0LnBvaW50cyA9IGN1cnJlbnQucG9pbnRzLm1hcCgoW3gsIHldLCBpKSA9PiBbaW50ZXJwb2xhdGUoeCwgbmV4dC5wb2ludHNbaV1bMF0sIHIpLCBpbnRlcnBvbGF0ZSh5LCBuZXh0LnBvaW50c1tpXVsxXSwgcildKVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBjb25zdCBkaWZmID0gKGN1cnJlbnQsIG5leHQpID0+IHtcbiAgY29uc3QgdXBkYXRlID0ge1xuICAgIGdyb3VwczogbmV4dC5ncm91cElkc1xuICAgICAgLmZpbHRlcigoZykgPT4gY3VycmVudC5ncm91cHMuaGFzKGcpKVxuICAgICAgLm1hcCgoZykgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnQuZ3JvdXBzLmdldChnKSxcbiAgICAgICAgICBuZXh0OiBuZXh0Lmdyb3Vwcy5nZXQoZylcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgdmVydGljZXM6IG5leHQudmVydGV4SWRzXG4gICAgICAuZmlsdGVyKCh1KSA9PiBjdXJyZW50LnZlcnRpY2VzLmhhcyh1KSlcbiAgICAgIC5tYXAoKHUpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjdXJyZW50OiBjdXJyZW50LnZlcnRpY2VzLmdldCh1KSxcbiAgICAgICAgICBuZXh0OiBuZXh0LnZlcnRpY2VzLmdldCh1KVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICBlZGdlczogbmV4dC5lZGdlSWRzXG4gICAgICAuZmlsdGVyKChbdSwgdl0pID0+IHtcbiAgICAgICAgaWYgKCFjdXJyZW50LmVkZ2VzLmhhcyh1KSB8fCAhY3VycmVudC5lZGdlcy5nZXQodSkuaGFzKHYpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dEVkZ2UgPSBuZXh0LmVkZ2VzLmdldCh1KS5nZXQodilcbiAgICAgICAgY29uc3QgY3VycmVudEVkZ2UgPSBjdXJyZW50LmVkZ2VzLmdldCh1KS5nZXQodilcbiAgICAgICAgcmV0dXJuIG5leHRFZGdlLnR5cGUgPT09IGN1cnJlbnRFZGdlLnR5cGUgJiYgbmV4dEVkZ2UucG9pbnRzLmxlbmd0aCA9PT0gY3VycmVudEVkZ2UucG9pbnRzLmxlbmd0aFxuICAgICAgfSlcbiAgICAgIC5tYXAoKFt1LCB2XSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnQuZWRnZXMuZ2V0KHUpLmdldCh2KSxcbiAgICAgICAgICBuZXh0OiBuZXh0LmVkZ2VzLmdldCh1KS5nZXQodilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuICBjb25zdCBlbnRlciA9IHtcbiAgICBncm91cHM6IG5leHQuZ3JvdXBJZHNcbiAgICAgIC5maWx0ZXIoKGcpID0+ICFjdXJyZW50Lmdyb3Vwcy5oYXMoZykpXG4gICAgICAubWFwKChnKSA9PiBuZXh0Lmdyb3Vwcy5nZXQoZykpLFxuICAgIHZlcnRpY2VzOiBuZXh0LnZlcnRleElkc1xuICAgICAgLmZpbHRlcigodSkgPT4gIWN1cnJlbnQudmVydGljZXMuaGFzKHUpKVxuICAgICAgLm1hcCgodSkgPT4gbmV4dC52ZXJ0aWNlcy5nZXQodSkpLFxuICAgIGVkZ2VzOiBuZXh0LmVkZ2VJZHNcbiAgICAgIC5maWx0ZXIoKFt1LCB2XSkgPT4ge1xuICAgICAgICBpZiAoIWN1cnJlbnQuZWRnZXMuaGFzKHUpIHx8ICFjdXJyZW50LmVkZ2VzLmdldCh1KS5oYXModikpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRFZGdlID0gbmV4dC5lZGdlcy5nZXQodSkuZ2V0KHYpXG4gICAgICAgIGNvbnN0IGN1cnJlbnRFZGdlID0gY3VycmVudC5lZGdlcy5nZXQodSkuZ2V0KHYpXG4gICAgICAgIHJldHVybiBuZXh0RWRnZS50eXBlICE9PSBjdXJyZW50RWRnZS50eXBlIHx8IG5leHRFZGdlLnBvaW50cy5sZW5ndGggIT09IGN1cnJlbnRFZGdlLnBvaW50cy5sZW5ndGhcbiAgICAgIH0pXG4gICAgICAubWFwKChbdSwgdl0pID0+IG5leHQuZWRnZXMuZ2V0KHUpLmdldCh2KSlcbiAgfVxuICBjb25zdCBleGl0ID0ge1xuICAgIGdyb3VwczogY3VycmVudC5ncm91cElkc1xuICAgICAgLmZpbHRlcigoZykgPT4gIW5leHQuZ3JvdXBzLmhhcyhnKSlcbiAgICAgIC5tYXAoKGcpID0+IGN1cnJlbnQuZ3JvdXBzLmdldChnKSksXG4gICAgdmVydGljZXM6IGN1cnJlbnQudmVydGV4SWRzXG4gICAgICAuZmlsdGVyKCh1KSA9PiAhbmV4dC52ZXJ0aWNlcy5oYXModSkpXG4gICAgICAubWFwKCh1KSA9PiBjdXJyZW50LnZlcnRpY2VzLmdldCh1KSksXG4gICAgZWRnZXM6IGN1cnJlbnQuZWRnZUlkc1xuICAgICAgLmZpbHRlcigoW3UsIHZdKSA9PiB7XG4gICAgICAgIGlmICghbmV4dC5lZGdlcy5oYXModSkgfHwgIW5leHQuZWRnZXMuZ2V0KHUpLmhhcyh2KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dEVkZ2UgPSBuZXh0LmVkZ2VzLmdldCh1KS5nZXQodilcbiAgICAgICAgY29uc3QgY3VycmVudEVkZ2UgPSBjdXJyZW50LmVkZ2VzLmdldCh1KS5nZXQodilcbiAgICAgICAgcmV0dXJuIG5leHRFZGdlLnR5cGUgIT09IGN1cnJlbnRFZGdlLnR5cGUgfHwgbmV4dEVkZ2UucG9pbnRzLmxlbmd0aCAhPT0gY3VycmVudEVkZ2UucG9pbnRzLmxlbmd0aFxuICAgICAgfSlcbiAgICAgIC5tYXAoKFt1LCB2XSkgPT4gY3VycmVudC5lZGdlcy5nZXQodSkuZ2V0KHYpKVxuICB9XG4gIHJldHVybiB7dXBkYXRlLCBlbnRlciwgZXhpdH1cbn1cbiIsImNvbnN0IHdpdGhDb250ZXh0ID0gKGN0eCwgZikgPT4ge1xuICBjdHguc2F2ZSgpXG4gIGYoKVxuICBjdHgucmVzdG9yZSgpXG59XG5cbmNvbnN0IHNldFZlcnRleFN0eWxlcyA9IChjdHgsIGFyZ3MpID0+IHtcbiAgY29uc3Qge1xuICAgIGZpbGxDb2xvcixcbiAgICBzdHJva2VDb2xvcixcbiAgICBzdHJva2VXaWR0aFxuICB9ID0gYXJnc1xuICBjdHguZmlsbFN0eWxlID0gZmlsbENvbG9yLnRvU3RyaW5nKClcbiAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3IudG9TdHJpbmcoKVxuICBjdHgubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhcbn1cblxuY29uc3Qgc2V0RWRnZVN0eWxlcyA9IChjdHgsIGFyZ3MpID0+IHtcbiAgY29uc3Qge1xuICAgIHN0cm9rZUNvbG9yLFxuICAgIHN0cm9rZVdpZHRoXG4gIH0gPSBhcmdzXG4gIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yLnRvU3RyaW5nKClcbiAgY3R4LmxpbmVXaWR0aCA9IHN0cm9rZVdpZHRoXG59XG5cbmNvbnN0IHNldExhYmVsU3R5bGVzID0gKGN0eCwgYXJncykgPT4ge1xuICBjb25zdCB7XG4gICAgbGFiZWxGaWxsQ29sb3IsXG4gICAgbGFiZWxTdHJva2VDb2xvcixcbiAgICBsYWJlbFN0cm9rZVdpZHRoLFxuICAgIGxhYmVsRm9udFNpemUsXG4gICAgbGFiZWxGb250RmFtaWx5XG4gIH0gPSBhcmdzXG4gIGN0eC5maWxsU3R5bGUgPSBsYWJlbEZpbGxDb2xvci50b1N0cmluZygpXG4gIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsU3Ryb2tlQ29sb3IudG9TdHJpbmcoKVxuICBjdHgubGluZVdpZHRoID0gbGFiZWxTdHJva2VXaWR0aFxuICBjdHguZm9udCA9IGAke2xhYmVsRm9udFNpemV9cHggJHtsYWJlbEZvbnRGYW1pbHl9YFxufVxuXG5jb25zdCByZW5kZXJSZWN0VmVydGV4ID0gKGN0eCwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICBjdHgubW92ZVRvKC13aWR0aCAvIDIsIC1oZWlnaHQgLyAyKVxuICBjdHgubGluZVRvKHdpZHRoIC8gMiwgLWhlaWdodCAvIDIpXG4gIGN0eC5saW5lVG8od2lkdGggLyAyLCBoZWlnaHQgLyAyKVxuICBjdHgubGluZVRvKC13aWR0aCAvIDIsIGhlaWdodCAvIDIpXG4gIGN0eC5jbG9zZVBhdGgoKVxufVxuXG5jb25zdCByZW5kZXJDaXJjbGVWZXJ0ZXggPSAoY3R4LCB3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gIGN0eC5lbGxpcHNlKDAsIDAsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgMCwgMCwgMiAqIE1hdGguUEkpXG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJHcm91cExhYmVsID0gKGN0eCwgYXJncykgPT4ge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICB4LFxuICAgIHksXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGxhYmVsXG4gIH0gPSBhcmdzXG4gIGlmICghbGFiZWwpIHtcbiAgICByZXR1cm5cbiAgfVxuICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICBzZXRMYWJlbFN0eWxlcyhjdHgsIGFyZ3MpXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcidcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnXG4gICAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSAtIGhlaWdodCAvIDIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdyZWN0JzpcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0J1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCdcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSh4IC0gd2lkdGggLyAyICsgNSwgeSAtIGhlaWdodCAvIDIgKyA1KVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoYXJncy5sYWJlbFN0cm9rZVdpZHRoID4gMCkge1xuICAgICAgY3R4LnN0cm9rZVRleHQobGFiZWwsIDAsIDApXG4gICAgfVxuICAgIGN0eC5maWxsVGV4dChsYWJlbCwgMCwgMClcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlclZlcnRleCA9IChjdHgsIGFyZ3MpID0+IHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgdSxcbiAgICB4LFxuICAgIHksXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHN0cm9rZVdpZHRoXG4gIH0gPSBhcmdzXG4gIHdpdGhDb250ZXh0KGN0eCwgKCkgPT4ge1xuICAgIGN0eC50cmFuc2xhdGUoeCwgeSlcbiAgICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICAgIHNldFZlcnRleFN0eWxlcyhjdHgsIGFyZ3MpXG4gICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICAgIHJlbmRlckNpcmNsZVZlcnRleChjdHgsIHdpZHRoLCBoZWlnaHQpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAncmVjdCc6XG4gICAgICAgICAgcmVuZGVyUmVjdFZlcnRleChjdHgsIHdpZHRoLCBoZWlnaHQpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZSBcIiR7dHlwZX1cImApXG4gICAgICB9XG4gICAgICBjdHguY2xvc2VQYXRoKClcbiAgICAgIGN0eC5maWxsKClcbiAgICAgIGlmIChzdHJva2VXaWR0aCA+IDApIHtcbiAgICAgICAgY3R4LnN0cm9rZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICBpZiAoY3R4LmFkZEhpdFJlZ2lvbikge1xuICAgICAgY3R4LmFkZEhpdFJlZ2lvbih7aWQ6IEpTT04uc3RyaW5naWZ5KHtpZDogdX0pfSlcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJWZXJ0ZXhMYWJlbCA9IChjdHgsIGFyZ3MpID0+IHtcbiAgY29uc3Qge1xuICAgIHgsXG4gICAgeSxcbiAgICBsYWJlbFxuICB9ID0gYXJnc1xuICBpZiAoIWxhYmVsKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgd2l0aENvbnRleHQoY3R4LCAoKSA9PiB7XG4gICAgc2V0TGFiZWxTdHlsZXMoY3R4LCBhcmdzKVxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJ1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJ1xuICAgIGlmIChhcmdzLmxhYmVsU3Ryb2tlV2lkdGggPiAwKSB7XG4gICAgICBjdHguc3Ryb2tlVGV4dChsYWJlbCwgeCwgeSlcbiAgICB9XG4gICAgY3R4LmZpbGxUZXh0KGxhYmVsLCB4LCB5KVxuICB9KVxufVxuXG5jb25zdCByZW5kZXJMaW5lRWRnZSA9IChjdHgsIHBvaW50cykgPT4ge1xuICBjdHgubW92ZVRvKHBvaW50c1swXVswXSwgcG9pbnRzWzBdWzFdKVxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIGN0eC5saW5lVG8ocG9pbnRzW2ldWzBdLCBwb2ludHNbaV1bMV0pXG4gIH1cbn1cblxuY29uc3QgcmVuZGVyUXVhZHJhdGljQ3VydmVFZGdlID0gKGN0eCwgcG9pbnRzKSA9PiB7XG4gIGNvbnN0IG4gPSBwb2ludHMubGVuZ3RoXG4gIGN0eC5tb3ZlVG8ocG9pbnRzWzBdWzBdLCBwb2ludHNbMF1bMV0pXG4gIGlmIChuID09PSAyKSB7XG4gICAgY3R4LmxpbmVUbyhwb2ludHNbMV1bMF0sIHBvaW50c1sxXVsxXSlcbiAgICByZXR1cm5cbiAgfVxuICBmb3IgKGxldCBpID0gMjsgaSA8IG4gLSAxOyArK2kpIHtcbiAgICBjb25zdCBbeDEsIHkxXSA9IHBvaW50c1tpIC0gMV1cbiAgICBjb25zdCBbeDIsIHkyXSA9IHBvaW50c1tpXVxuICAgIGNvbnN0IGR4ID0gKHgyIC0geDEpIC8gMlxuICAgIGNvbnN0IGR5ID0gKHkyIC0geTEpIC8gMlxuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgxLCB5MSwgeDEgKyBkeCwgeTEgKyBkeSlcbiAgfVxuICBjdHgucXVhZHJhdGljQ3VydmVUbyhwb2ludHNbbiAtIDJdWzBdLCBwb2ludHNbbiAtIDJdWzFdLCBwb2ludHNbbiAtIDFdWzBdLCBwb2ludHNbbiAtIDFdWzFdKVxufVxuXG5jb25zdCByZW5kZXJBcmNFZGdlID0gKGN0eCwgcG9pbnRzKSA9PiB7XG4gIGNvbnN0IGR4ID0gcG9pbnRzWzFdWzBdIC0gcG9pbnRzWzBdWzBdXG4gIGNvbnN0IGR5ID0gcG9pbnRzWzFdWzFdIC0gcG9pbnRzWzBdWzFdXG4gIGNvbnN0IHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpIC8gMlxuICBjb25zdCBjeCA9IChwb2ludHNbMF1bMF0gKyBwb2ludHNbMV1bMF0pIC8gMlxuICBjb25zdCBjeSA9IChwb2ludHNbMF1bMV0gKyBwb2ludHNbMV1bMV0pIC8gMlxuICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIoZHksIGR4KVxuICBjdHguYXJjKGN4LCBjeSwgciwgdGhldGEsIHRoZXRhICsgTWF0aC5QSSlcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlckVkZ2VSZWdpb24gPSAoY3R4LCBhcmdzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB1LFxuICAgIHYsXG4gICAgcG9pbnRzXG4gIH0gPSBhcmdzXG4gIHdpdGhDb250ZXh0KGN0eCwgKCkgPT4ge1xuICAgIGNvbnN0IHgxID0gcG9pbnRzWzBdWzBdXG4gICAgY29uc3QgeTEgPSBwb2ludHNbMF1bMV1cbiAgICBjb25zdCB4MiA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1bMF1cbiAgICBjb25zdCB5MiA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1bMV1cbiAgICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIoeTIgLSB5MSwgeDIgLSB4MSkgKyBNYXRoLlBJIC8gMlxuICAgIGNvbnN0IGQgPSA1XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZmYnXG4gICAgY3R4Lm1vdmVUbyh4MSArIGQgKiBNYXRoLmNvcyh0aGV0YSksIHkxICsgZCAqIE1hdGguc2luKHRoZXRhKSlcbiAgICBjdHgubGluZVRvKHgyICsgZCAqIE1hdGguY29zKHRoZXRhKSwgeTIgKyBkICogTWF0aC5zaW4odGhldGEpKVxuICAgIGN0eC5saW5lVG8oeDIgKyBkICogTWF0aC5jb3ModGhldGEgKyBNYXRoLlBJKSwgeTIgKyBkICogTWF0aC5zaW4odGhldGEgKyBNYXRoLlBJKSlcbiAgICBjdHgubGluZVRvKHgxICsgZCAqIE1hdGguY29zKHRoZXRhICsgTWF0aC5QSSksIHkxICsgZCAqIE1hdGguc2luKHRoZXRhICsgTWF0aC5QSSkpXG4gICAgY3R4LmNsb3NlUGF0aCgpXG4gICAgY3R4LnN0cm9rZSgpXG4gICAgaWYgKGN0eC5hZGRIaXRSZWdpb24pIHtcbiAgICAgIGN0eC5hZGRIaXRSZWdpb24oe2lkOiBKU09OLnN0cmluZ2lmeSh7c291cmNlOiB1LCB0YXJnZXQ6IHZ9KX0pXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyRWRnZSA9IChjdHgsIGFyZ3MpID0+IHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgcG9pbnRzLFxuICAgIHNvdXJjZU1hcmtlclNoYXBlLFxuICAgIHNvdXJjZU1hcmtlclNpemUsXG4gICAgdGFyZ2V0TWFya2VyU2hhcGUsXG4gICAgdGFyZ2V0TWFya2VyU2l6ZVxuICB9ID0gYXJnc1xuICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICAgIHNldEVkZ2VTdHlsZXMoY3R4LCBhcmdzKVxuICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnYXJjJzpcbiAgICAgICAgICByZW5kZXJBcmNFZGdlKGN0eCwgcG9pbnRzKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3F1YWRyYXRpYyc6XG4gICAgICAgICAgcmVuZGVyUXVhZHJhdGljQ3VydmVFZGdlKGN0eCwgcG9pbnRzKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2xpbmUnOlxuICAgICAgICAgIHJlbmRlckxpbmVFZGdlKGN0eCwgcG9pbnRzKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGUgXCIke3R5cGV9XCJgKVxuICAgICAgfVxuICAgICAgY3R4LnN0cm9rZSgpXG4gICAgfSlcblxuICAgIHN3aXRjaCAoc291cmNlTWFya2VyU2hhcGUpIHtcbiAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgIHdpdGhDb250ZXh0KGN0eCwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IHBvaW50c1swXVxuICAgICAgICAgIGNvbnN0IHIgPSBzb3VyY2VNYXJrZXJTaXplIC8gMlxuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBhcmdzLnN0cm9rZUNvbG9yLnRvU3RyaW5nKClcbiAgICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpXG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgICAgY3R4LmVsbGlwc2UoMCwgMCwgciwgciwgMCwgMCwgMiAqIE1hdGguUEkpXG4gICAgICAgICAgY3R4LmZpbGwoKVxuICAgICAgICB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICAgICAgICBjb25zdCBbeCwgeV0gPSBwb2ludHNbMF1cbiAgICAgICAgICBjb25zdCBbeDAsIHkwXSA9IHBvaW50c1sxXVxuICAgICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuMih5IC0geTAsIHggLSB4MClcbiAgICAgICAgICBjb25zdCByID0gc291cmNlTWFya2VyU2l6ZSAqIDIgLyAzXG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGFyZ3Muc3Ryb2tlQ29sb3IudG9TdHJpbmcoKVxuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguY29zKHRoZXRhKSAqIHIsIHkgKyBNYXRoLnNpbih0aGV0YSkgKiByKVxuICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHRoZXRhICsgTWF0aC5QSSAqIDIgLyAzKSAqIHIsIHkgKyBNYXRoLnNpbih0aGV0YSArIE1hdGguUEkgKiAyIC8gMykgKiByKVxuICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHRoZXRhICsgTWF0aC5QSSAqIDQgLyAzKSAqIHIsIHkgKyBNYXRoLnNpbih0aGV0YSArIE1hdGguUEkgKiA0IC8gMykgKiByKVxuICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKVxuICAgICAgICAgIGN0eC5maWxsKClcbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRhcmdldE1hcmtlclNoYXBlKSB7XG4gICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICAgICAgICBjb25zdCBbeCwgeV0gPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgICAgY29uc3QgciA9IHRhcmdldE1hcmtlclNpemUgLyAyXG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGFyZ3Muc3Ryb2tlQ29sb3IudG9TdHJpbmcoKVxuICAgICAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSlcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICBjdHguZWxsaXBzZSgwLCAwLCByLCByLCAwLCAwLCAyICogTWF0aC5QSSlcbiAgICAgICAgICBjdHguZmlsbCgpXG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgIHdpdGhDb250ZXh0KGN0eCwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cbiAgICAgICAgICBjb25zdCBbeDAsIHkwXSA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl1cbiAgICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIoeSAtIHkwLCB4IC0geDApXG4gICAgICAgICAgY29uc3QgciA9IHRhcmdldE1hcmtlclNpemUgKiAyIC8gM1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBhcmdzLnN0cm9rZUNvbG9yLnRvU3RyaW5nKClcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICBjdHgubW92ZVRvKHggKyBNYXRoLmNvcyh0aGV0YSkgKiByLCB5ICsgTWF0aC5zaW4odGhldGEpICogcilcbiAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyh0aGV0YSArIE1hdGguUEkgKiAyIC8gMykgKiByLCB5ICsgTWF0aC5zaW4odGhldGEgKyBNYXRoLlBJICogMiAvIDMpICogcilcbiAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyh0aGV0YSArIE1hdGguUEkgKiA0IC8gMykgKiByLCB5ICsgTWF0aC5zaW4odGhldGEgKyBNYXRoLlBJICogNCAvIDMpICogcilcbiAgICAgICAgICBjdHguY2xvc2VQYXRoKClcbiAgICAgICAgICBjdHguZmlsbCgpXG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyRWRnZUxhYmVsID0gKGN0eCwgYXJncykgPT4ge1xuICBjb25zdCB7XG4gICAgcG9pbnRzLFxuICAgIGxhYmVsXG4gIH0gPSBhcmdzXG4gIGlmICghbGFiZWwpIHtcbiAgICByZXR1cm5cbiAgfVxuICB3aXRoQ29udGV4dChjdHgsICgpID0+IHtcbiAgICBjb25zdCB4ID0gKHBvaW50c1swXVswXSArIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1bMF0pIC8gMlxuICAgIGNvbnN0IHkgPSAocG9pbnRzWzBdWzFdICsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVsxXSkgLyAyXG4gICAgc2V0TGFiZWxTdHlsZXMoY3R4LCBhcmdzKVxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJ1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJ1xuICAgIGlmIChhcmdzLmxhYmVsU3Ryb2tlV2lkdGggPiAwKSB7XG4gICAgICBjdHguc3Ryb2tlVGV4dChsYWJlbCwgeCwgeSlcbiAgICB9XG4gICAgY3R4LmZpbGxUZXh0KGxhYmVsLCB4LCB5KVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyR3JvdXAgPSAoY3R4LCBhcmdzKSA9PiB7XG4gIHJlbmRlclZlcnRleChjdHgsIGFyZ3MpXG59XG4iLCJjb25zdCBiYXNlQ2lyY2xlVG9SZWN0TWFya2VyUG9zaXRpb24gPSAoeDAsIHkwLCB4MSwgeTEsIHdpZHRoLCBoZWlnaHQsIHNpemUpID0+IHtcbiAgY29uc3QgciA9IHNpemUgLyAyXG4gIGlmICh4MCA9PT0geDEpIHtcbiAgICByZXR1cm4gWzAsIGhlaWdodCAvIDIgKyByXVxuICB9XG4gIGNvbnN0IGEgPSBNYXRoLmFicygoeTAgLSB5MSkgLyAoeDAgLSB4MSkpXG4gIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuKGEpXG4gIGlmICh0aGV0YSA8IE1hdGguYXRhbjIoaGVpZ2h0IC8gMiwgd2lkdGggLyAyICsgcikpIHtcbiAgICByZXR1cm4gW1xuICAgICAgd2lkdGggLyAyICsgcixcbiAgICAgIE1hdGgudGFuKHRoZXRhKSAqICh3aWR0aCAvIDIgKyByKVxuICAgIF1cbiAgfVxuICBpZiAodGhldGEgPiBNYXRoLmF0YW4yKGhlaWdodCAvIDIgKyByLCB3aWR0aCAvIDIpKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIE1hdGgudGFuKE1hdGguUEkgLyAyIC0gdGhldGEpICogKGhlaWdodCAvIDIgKyByKSxcbiAgICAgIGhlaWdodCAvIDIgKyByXG4gICAgXVxuICB9XG4gIGNvbnN0IGIgPSAtMVxuICBjb25zdCBjID0geTAgLSBhICogeDBcbiAgY29uc3QgcHggPSB4MCArIHdpZHRoIC8gMlxuICBjb25zdCBweSA9IHkwICsgaGVpZ2h0IC8gMlxuICBjb25zdCBkID0gYSAqIHB4ICsgYiAqIHB5ICsgY1xuICBjb25zdCBEID0gTWF0aC5zcXJ0KChhICoqIDIgKyBiICoqIDIpICogciAqKiAyIC0gZCAqKiAyKVxuICByZXR1cm4gW1xuICAgICgtYSAqIGQgLSBiICogRCkgLyAoYSAqKiAyICsgYiAqKiAyKSArIHB4IC0geDAsXG4gICAgKC1iICogZCArIGEgKiBEKSAvIChhICoqIDIgKyBiICoqIDIpICsgcHkgLSB5MFxuICBdXG59XG5cbmNvbnN0IGJhc2VUcmlhbmdsZVRvUmVjdE1hcmtlclBvc2l0aW9uID0gKHgwLCB5MCwgeDEsIHkxLCB3aWR0aCwgaGVpZ2h0LCBzaXplKSA9PiB7XG4gIGNvbnN0IHIgPSBzaXplICogMiAvIDNcbiAgaWYgKHgwID09PSB4MSkge1xuICAgIHJldHVybiBbMCwgaGVpZ2h0IC8gMiArIHJdXG4gIH1cbiAgY29uc3QgYSA9IE1hdGguYWJzKCh5MCAtIHkxKSAvICh4MCAtIHgxKSlcbiAgY29uc3QgdGhldGEgPSBNYXRoLmF0YW4oYSlcbiAgaWYgKHRoZXRhIDwgTWF0aC5hdGFuMihoZWlnaHQgLyAyLCB3aWR0aCAvIDIpKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHdpZHRoIC8gMiArIE1hdGguY29zKHRoZXRhKSAqIHIsXG4gICAgICBNYXRoLnRhbih0aGV0YSkgKiB3aWR0aCAvIDIgKyBNYXRoLnNpbih0aGV0YSkgKiByXG4gICAgXVxuICB9XG4gIHJldHVybiBbXG4gICAgTWF0aC50YW4oTWF0aC5QSSAvIDIgLSB0aGV0YSkgKiBoZWlnaHQgLyAyICsgTWF0aC5zaW4oTWF0aC5QSSAvIDIgLSB0aGV0YSkgKiByLFxuICAgIGhlaWdodCAvIDIgKyBNYXRoLmNvcyhNYXRoLlBJIC8gMiAtIHRoZXRhKSAqIHJcbiAgXVxufVxuXG5jb25zdCBiYXNlQ2lyY2xlVG9DaXJjbGVNYXJrZXJQb3NpdGlvbiA9ICh4MCwgeTAsIHgxLCB5MSwgd2lkdGgsIGhlaWdodCwgc2l6ZSkgPT4ge1xuICBjb25zdCByID0gc2l6ZSAvIDJcbiAgaWYgKHgwID09PSB4MSkge1xuICAgIHJldHVybiBbMCwgaGVpZ2h0IC8gMiArIHJdXG4gIH1cbiAgY29uc3QgcnggPSB3aWR0aCAvIDJcbiAgY29uc3QgcnkgPSBoZWlnaHQgLyAyXG4gIGNvbnN0IGEgPSBNYXRoLmFicygoeTAgLSB5MSkgLyAoeDAgLSB4MSkpXG4gIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuKGEpXG4gIGNvbnN0IHB4ID0gcnggKiByeSAvIE1hdGguc3FydChhICoqIDIgKiByeCAqKiAyICsgcnkgKiogMilcbiAgY29uc3QgcHkgPSBhICogcHhcbiAgcmV0dXJuIFtcbiAgICBweCArIHIgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgcHkgKyByICogTWF0aC5zaW4odGhldGEpXG4gIF1cbn1cblxuY29uc3QgYmFzZVRyaWFuZ2xlVG9DaXJjbGVNYXJrZXJQb3NpdGlvbiA9ICh4MCwgeTAsIHgxLCB5MSwgd2lkdGgsIGhlaWdodCwgc2l6ZSkgPT4ge1xuICBjb25zdCByID0gc2l6ZSAqIDIgLyAzXG4gIGlmICh4MCA9PT0geDEpIHtcbiAgICByZXR1cm4gWzAsIGhlaWdodCAvIDIgKyByXVxuICB9XG4gIGNvbnN0IHJ4ID0gd2lkdGggLyAyXG4gIGNvbnN0IHJ5ID0gaGVpZ2h0IC8gMlxuICBjb25zdCBhID0gTWF0aC5hYnMoKHkwIC0geTEpIC8gKHgwIC0geDEpKVxuICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbihhKVxuICBjb25zdCBweCA9IHJ4ICogcnkgLyBNYXRoLnNxcnQoYSAqKiAyICogcnggKiogMiArIHJ5ICoqIDIpXG4gIGNvbnN0IHB5ID0gYSAqIHB4XG4gIHJldHVybiBbXG4gICAgcHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgIHB5ICsgciAqIE1hdGguc2luKHRoZXRhKVxuICBdXG59XG5cbmNvbnN0IG1hcmtlclBvc2l0aW9uID0gKHgsIHksIHgwLCB5MCwgeDEsIHkxKSA9PiB7XG4gIGlmICh4MCA8IHgxKSB7XG4gICAgaWYgKHkwIDwgeTEpIHtcbiAgICAgIHJldHVybiBbeDAgKyB4LCB5MCArIHldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbeDAgKyB4LCB5MCAtIHldXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh5MCA8IHkxKSB7XG4gICAgICByZXR1cm4gW3gwIC0geCwgeTAgKyB5XVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3gwIC0geCwgeTAgLSB5XVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBiYXNlRnVuY3Rpb24gPSAobWFya2VyU2hhcGUsIG5vZGVUeXBlLCBsaW5rVHlwZSkgPT4ge1xuICBpZiAobGlua1R5cGUgPT09ICdhcmMnKSB7XG4gICAgcmV0dXJuICgpID0+IFswLCAwXVxuICB9XG4gIGlmIChtYXJrZXJTaGFwZSA9PT0gJ2NpcmNsZScgJiYgbm9kZVR5cGUgPT09ICdyZWN0Jykge1xuICAgIHJldHVybiBiYXNlQ2lyY2xlVG9SZWN0TWFya2VyUG9zaXRpb25cbiAgfVxuICBpZiAobWFya2VyU2hhcGUgPT09ICd0cmlhbmdsZScgJiYgbm9kZVR5cGUgPT09ICdyZWN0Jykge1xuICAgIHJldHVybiBiYXNlVHJpYW5nbGVUb1JlY3RNYXJrZXJQb3NpdGlvblxuICB9XG4gIGlmIChtYXJrZXJTaGFwZSA9PT0gJ2NpcmNsZScgJiYgbm9kZVR5cGUgPT09ICdjaXJjbGUnKSB7XG4gICAgcmV0dXJuIGJhc2VDaXJjbGVUb0NpcmNsZU1hcmtlclBvc2l0aW9uXG4gIH1cbiAgaWYgKG1hcmtlclNoYXBlID09PSAndHJpYW5nbGUnICYmIG5vZGVUeXBlID09PSAnY2lyY2xlJykge1xuICAgIHJldHVybiBiYXNlVHJpYW5nbGVUb0NpcmNsZU1hcmtlclBvc2l0aW9uXG4gIH1cbiAgcmV0dXJuICgpID0+IFswLCAwXVxufVxuXG5leHBvcnQgY29uc3QgYWRqdXN0RWRnZSA9IChlZGdlLCBzb3VyY2UsIHRhcmdldCkgPT4ge1xuICBjb25zdCB7cG9pbnRzLCBzb3VyY2VNYXJrZXJTaGFwZSwgc291cmNlTWFya2VyU2l6ZSwgdGFyZ2V0TWFya2VyU2hhcGUsIHRhcmdldE1hcmtlclNpemV9ID0gZWRnZVxuICBjb25zdCBuID0gcG9pbnRzLmxlbmd0aFxuICBjb25zdCBzb3VyY2VCYXNlRnVuY3Rpb24gPSBiYXNlRnVuY3Rpb24oc291cmNlTWFya2VyU2hhcGUsIHNvdXJjZS50eXBlLCBlZGdlLnR5cGUpXG4gIGNvbnN0IFt4MCwgeTBdID0gc291cmNlQmFzZUZ1bmN0aW9uKHNvdXJjZS54LCBzb3VyY2UueSwgcG9pbnRzWzFdWzBdLCBwb2ludHNbMV1bMV0sIHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCwgc291cmNlTWFya2VyU2l6ZSlcbiAgcG9pbnRzWzBdID0gbWFya2VyUG9zaXRpb24oeDAsIHkwLCBzb3VyY2UueCwgc291cmNlLnksIHBvaW50c1sxXVswXSwgcG9pbnRzWzFdWzFdKVxuICBjb25zdCB0YXJnZXRCYXNlRnVuY3Rpb24gPSBiYXNlRnVuY3Rpb24odGFyZ2V0TWFya2VyU2hhcGUsIHRhcmdldC50eXBlLCBlZGdlLnR5cGUpXG4gIGNvbnN0IFt4MSwgeTFdID0gdGFyZ2V0QmFzZUZ1bmN0aW9uKHRhcmdldC54LCB0YXJnZXQueSwgcG9pbnRzW24gLSAyXVswXSwgcG9pbnRzW24gLSAyXVsxXSwgdGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0LCB0YXJnZXRNYXJrZXJTaXplKVxuICBwb2ludHNbbiAtIDFdID0gbWFya2VyUG9zaXRpb24oeDEsIHkxLCB0YXJnZXQueCwgdGFyZ2V0LnksIHBvaW50c1tuIC0gMl1bMF0sIHBvaW50c1tuIC0gMl1bMV0pXG59XG4iLCJpbXBvcnQge1xuICBldmVudCBhcyBkM0V2ZW50LFxuICBzZWxlY3QgYXMgZDNTZWxlY3Rcbn0gZnJvbSAnZDMtc2VsZWN0aW9uJ1xuaW1wb3J0IHtcbiAgem9vbSBhcyBkM1pvb20sXG4gIHpvb21JZGVudGl0eSBhcyBkM1pvb21JZGVudGl0eVxufSBmcm9tICdkMy16b29tJ1xuaW1wb3J0IHthZGp1c3RFZGdlfSBmcm9tICcuL21hcmtlci1wb2ludCdcblxuY29uc3QgZGlzcGF0Y2hOb2RlTW92ZVN0YXJ0RXZlbnQgPSAoZWxlbWVudCwgdSkgPT4ge1xuICBjb25zdCBldmVudCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ25vZGVtb3Zlc3RhcnQnLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpZDogdVxuICAgIH1cbiAgfSlcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxufVxuXG5jb25zdCBkaXNwYXRjaE5vZGVNb3ZlRXZlbnQgPSAoZWxlbWVudCwge3UsIHgsIHl9KSA9PiB7XG4gIGNvbnN0IGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgnbm9kZW1vdmUnLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpZDogdSxcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfVxuICB9KVxuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpXG59XG5cbmNvbnN0IGRpc3BhdGNoTm9kZU1vdmVFbmRFdmVudCA9IChlbGVtZW50LCB1KSA9PiB7XG4gIGNvbnN0IGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgnbm9kZW1vdmVlbmQnLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpZDogdVxuICAgIH1cbiAgfSlcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxufVxuXG5leHBvcnQgY29uc3Qgem9vbSA9IChlbGVtZW50LCBhdHRycykgPT4ge1xuICBjb25zdCBwb3MgPSB7XG4gICAgcmVnaW9uOiBudWxsLFxuICAgIHgwOiAwLFxuICAgIHkwOiAwXG4gIH1cbiAgbGV0IHJlc3RvcmVUcmFuc2Zvcm0gPSBmYWxzZVxuICBjb25zdCB6b29tID0gZDNab29tKClcbiAgem9vbVxuICAgIC5vbignc3RhcnQnLCAoKSA9PiB7XG4gICAgICBpZiAoIWVsZW1lbnQuY2FuWm9vbSB8fCAoZWxlbWVudC5jYW5EcmFnTm9kZSAmJiBkM0V2ZW50LnNvdXJjZUV2ZW50ICYmIGQzRXZlbnQuc291cmNlRXZlbnQucmVnaW9uKSkge1xuICAgICAgICBjb25zdCB1ID0gZDNFdmVudC5zb3VyY2VFdmVudCA/IEpTT04ucGFyc2UoZDNFdmVudC5zb3VyY2VFdmVudC5yZWdpb24pLmlkIDogbnVsbFxuICAgICAgICBjb25zdCB7eCwgeSwga30gPSBkM0V2ZW50LnRyYW5zZm9ybVxuICAgICAgICBwb3MucmVnaW9uID0gdVxuICAgICAgICBwb3MueDAgPSB4IC8ga1xuICAgICAgICBwb3MueTAgPSB5IC8ga1xuICAgICAgICBpZiAodSkge1xuICAgICAgICAgIGRpc3BhdGNoTm9kZU1vdmVTdGFydEV2ZW50KGVsZW1lbnQsIHUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignem9vbScsICgpID0+IHtcbiAgICAgIGNvbnN0IHt4LCB5LCBrfSA9IGQzRXZlbnQudHJhbnNmb3JtXG4gICAgICBpZiAoZWxlbWVudC5jYW5EcmFnTm9kZSAmJiBwb3MucmVnaW9uKSB7XG4gICAgICAgIGNvbnN0IHUgPSBwb3MucmVnaW9uXG4gICAgICAgIGNvbnN0IGR4ID0geCAvIGsgLSBwb3MueDBcbiAgICAgICAgY29uc3QgZHkgPSB5IC8gayAtIHBvcy55MFxuICAgICAgICBjb25zdCB7ZGF0YX0gPSBhdHRyc1xuICAgICAgICBjb25zdCB2ZXJ0ZXggPSBkYXRhLnZlcnRpY2VzLmdldCh1KVxuICAgICAgICB2ZXJ0ZXgueCArPSBkeFxuICAgICAgICB2ZXJ0ZXgueSArPSBkeVxuICAgICAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgdmVydGV4Lm91dEVkZ2VzKSB7XG4gICAgICAgICAgY29uc3Qge3BvaW50c30gPSBlZGdlXG4gICAgICAgICAgcG9pbnRzWzBdWzBdICs9IGR4XG4gICAgICAgICAgcG9pbnRzWzBdWzFdICs9IGR5XG4gICAgICAgICAgYWRqdXN0RWRnZShlZGdlLCB2ZXJ0ZXgsIGRhdGEudmVydGljZXMuZ2V0KGVkZ2UudikpXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBlZGdlIG9mIHZlcnRleC5pbkVkZ2VzKSB7XG4gICAgICAgICAgY29uc3Qge3BvaW50c30gPSBlZGdlXG4gICAgICAgICAgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVswXSArPSBkeFxuICAgICAgICAgIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1bMV0gKz0gZHlcbiAgICAgICAgICBhZGp1c3RFZGdlKGVkZ2UsIGRhdGEudmVydGljZXMuZ2V0KGVkZ2UudSksIHZlcnRleClcbiAgICAgICAgfVxuICAgICAgICBwb3MueDAgPSB4IC8ga1xuICAgICAgICBwb3MueTAgPSB5IC8ga1xuICAgICAgICBkaXNwYXRjaE5vZGVNb3ZlRXZlbnQoZWxlbWVudCwgdmVydGV4KVxuICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNhblpvb20gfHwgIWQzRXZlbnQuc291cmNlRXZlbnQpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRycy50cmFuc2Zvcm0sIHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHksXG4gICAgICAgICAga1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXJlc3RvcmVUcmFuc2Zvcm0gJiYgKCFlbGVtZW50LmNhblpvb20gfHwgcG9zLnJlZ2lvbikpIHtcbiAgICAgICAgY29uc3QgdSA9IHBvcy5yZWdpb25cbiAgICAgICAgcG9zLnJlZ2lvbiA9IG51bGxcbiAgICAgICAgcmVzdG9yZVRyYW5zZm9ybSA9IHRydWVcbiAgICAgICAgZDNTZWxlY3QodGhpcylcbiAgICAgICAgICAuY2FsbCh6b29tLnRyYW5zZm9ybSwgZDNab29tSWRlbnRpdHkudHJhbnNsYXRlKGF0dHJzLnRyYW5zZm9ybS54LCBhdHRycy50cmFuc2Zvcm0ueSkuc2NhbGUoYXR0cnMudHJhbnNmb3JtLmspKVxuICAgICAgICByZXN0b3JlVHJhbnNmb3JtID0gZmFsc2VcbiAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICBkaXNwYXRjaE5vZGVNb3ZlRW5kRXZlbnQoZWxlbWVudCwgdSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiB6b29tXG59XG4iLCJpbXBvcnQge1xuICBlYXNlQ3ViaWMgYXMgZDNFYXNlQ3ViaWNcbn0gZnJvbSAnZDMtZWFzZSdcbmltcG9ydCB7XG4gIGNvbG9yIGFzIGQzQ29sb3Jcbn0gZnJvbSAnZDMtY29sb3InXG5pbXBvcnQge1xuICBzZWxlY3QgYXMgZDNTZWxlY3Rcbn0gZnJvbSAnZDMtc2VsZWN0aW9uJ1xuaW1wb3J0IHtcbiAgem9vbUlkZW50aXR5IGFzIGQzWm9vbUlkZW50aXR5XG59IGZyb20gJ2QzLXpvb20nXG5pbXBvcnQge1xuICBjZW50ZXJUcmFuc2Zvcm0sXG4gIGxheW91dFJlY3Rcbn0gZnJvbSAnLi9jZW50ZXJpbmcnXG5pbXBvcnQge1xuICBpbnRlcnBvbGF0ZUdyb3VwLFxuICBpbnRlcnBvbGF0ZVZlcnRleCxcbiAgaW50ZXJwb2xhdGVFZGdlLFxuICBkaWZmXG59IGZyb20gJy4vaW50ZXJwb2xhdGUnXG5pbXBvcnQge1xuICByZW5kZXJHcm91cCxcbiAgcmVuZGVyR3JvdXBMYWJlbCxcbiAgcmVuZGVyRWRnZSxcbiAgcmVuZGVyRWRnZUxhYmVsLFxuICByZW5kZXJFZGdlUmVnaW9uLFxuICByZW5kZXJWZXJ0ZXgsXG4gIHJlbmRlclZlcnRleExhYmVsXG59IGZyb20gJy4vcmVuZGVyJ1xuaW1wb3J0IHt6b29tfSBmcm9tICcuL3pvb20nXG5pbXBvcnQge2FkanVzdEVkZ2V9IGZyb20gJy4vbWFya2VyLXBvaW50J1xuXG5jb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gKCkgPT4ge1xuICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMS4wXG59XG5cbmNvbnN0IGdldCA9ICguLi5hcmdzKSA9PiB7XG4gIGxldCBkID0gYXJnc1swXVxuICBjb25zdCBrZXkgPSBhcmdzWzFdXG4gIGNvbnN0IGF0dHJzID0ga2V5LnNwbGl0KCcuJylcbiAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJzKSB7XG4gICAgaWYgKCFkLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPYmplY3QgZG9lc24ndCBoYXZlIGFuIGF0dHJpYnV0ZSAke2tleX1gKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFyZ3NbMl1cbiAgICB9XG4gICAgZCA9IGRbYXR0cl1cbiAgfVxuICByZXR1cm4gZFxufVxuXG5jb25zdCBwcml2YXRlcyA9IG5ldyBXZWFrTWFwKClcblxuY29uc3Qgc2V0V2lkdGggPSAoZSwgd2lkdGgpID0+IHtcbiAgY29uc3QgcCA9IHByaXZhdGVzLmdldChlKVxuICBwLmNhbnZhcy53aWR0aCA9IHdpZHRoICogZGV2aWNlUGl4ZWxSYXRpbygpXG4gIHAuY2FudmFzLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgXG59XG5cbmNvbnN0IHNldEhlaWdodCA9IChlLCBoZWlnaHQpID0+IHtcbiAgY29uc3QgcCA9IHByaXZhdGVzLmdldChlKVxuICBwLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiBkZXZpY2VQaXhlbFJhdGlvKClcbiAgcC5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YFxufVxuXG5jb25zdCBnZXR0ZXIgPSAoZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIGlmICghZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG59XG5cbmNvbnN0IHJlbmRlck9iamVjdHMgPSAoY3R4LCByLCBleGl0LCBlbnRlciwgdXBkYXRlLCByZW5kZXIsIGludGVycG9sYXRlKSA9PiB7XG4gIGlmIChyIDwgMSkge1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IDEgLSByXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGV4aXQpIHtcbiAgICAgIHJlbmRlcihjdHgsIGl0ZW0pXG4gICAgfVxuICB9XG4gIGN0eC5nbG9iYWxBbHBoYSA9IE1hdGgubWluKDEsIHIpXG4gIGZvciAoY29uc3QgaXRlbSBvZiBlbnRlcikge1xuICAgIHJlbmRlcihjdHgsIGl0ZW0pXG4gIH1cbiAgY3R4Lmdsb2JhbEFscGhhID0gMVxuICBmb3IgKGNvbnN0IHtjdXJyZW50LCBuZXh0fSBvZiB1cGRhdGUpIHtcbiAgICBpZiAociA8IDEpIHtcbiAgICAgIHJlbmRlcihjdHgsIGludGVycG9sYXRlKGN1cnJlbnQsIG5leHQsIHIpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW5kZXIoY3R4LCBuZXh0KVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBFZ1JlbmRlcmVyRWxlbWVudCBleHRlbmRzIHdpbmRvdy5IVE1MRWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzICgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ3NyYycsXG4gICAgICAnd2lkdGgnLFxuICAgICAgJ2hlaWdodCcsXG4gICAgICAnZ3JhcGgtZ3JvdXBzLXByb3BlcnR5JyxcbiAgICAgICdncmFwaC1ub2Rlcy1wcm9wZXJ0eScsXG4gICAgICAnZ3JhcGgtbGlua3MtcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLXgtcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLXktcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLXdpZHRoLXByb3BlcnR5JyxcbiAgICAgICdncm91cC1oZWlnaHQtcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLXR5cGUtcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLXZpc2liaWxpdHktcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLWZpbGwtY29sb3ItcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsXG4gICAgICAnZ3JvdXAtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JyxcbiAgICAgICdncm91cC1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsXG4gICAgICAnZ3JvdXAtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JyxcbiAgICAgICdncm91cC1sYWJlbC1wcm9wZXJ0eScsXG4gICAgICAnZ3JvdXAtbGFiZWwtZmlsbC1jb2xvci1wcm9wZXJ0eScsXG4gICAgICAnZ3JvdXAtbGFiZWwtZmlsbC1vcGFjaXR5LXByb3BlcnR5JyxcbiAgICAgICdncm91cC1sYWJlbC1zdHJva2UtY29sb3ItcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLWxhYmVsLXN0cm9rZS1vcGFjaXR5LXByb3BlcnR5JyxcbiAgICAgICdncm91cC1sYWJlbC1zdHJva2Utd2lkdGgtcHJvcGVydHknLFxuICAgICAgJ2dyb3VwLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsXG4gICAgICAnZ3JvdXAtbGFiZWwtZm9udC1mYW1pbHktcHJvcGVydHknLFxuICAgICAgJ25vZGUtaWQtcHJvcGVydHknLFxuICAgICAgJ25vZGUteC1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS15LXByb3BlcnR5JyxcbiAgICAgICdub2RlLXdpZHRoLXByb3BlcnR5JyxcbiAgICAgICdub2RlLWhlaWdodC1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS10eXBlLXByb3BlcnR5JyxcbiAgICAgICdub2RlLXZpc2liaWxpdHktcHJvcGVydHknLFxuICAgICAgJ25vZGUtZmlsbC1jb2xvci1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS1maWxsLW9wYWNpdHktcHJvcGVydHknLFxuICAgICAgJ25vZGUtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JyxcbiAgICAgICdub2RlLXN0cm9rZS1vcGFjaXR5LXByb3BlcnR5JyxcbiAgICAgICdub2RlLXN0cm9rZS13aWR0aC1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS1sYWJlbC1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS1sYWJlbC1maWxsLWNvbG9yLXByb3BlcnR5JyxcbiAgICAgICdub2RlLWxhYmVsLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS1sYWJlbC1zdHJva2UtY29sb3ItcHJvcGVydHknLFxuICAgICAgJ25vZGUtbGFiZWwtc3Ryb2tlLW9wYWNpdHktcHJvcGVydHknLFxuICAgICAgJ25vZGUtbGFiZWwtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JyxcbiAgICAgICdub2RlLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsXG4gICAgICAnbm9kZS1sYWJlbC1mb250LWZhbWlseS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1zb3VyY2UtcHJvcGVydHknLFxuICAgICAgJ2xpbmstdGFyZ2V0LXByb3BlcnR5JyxcbiAgICAgICdsaW5rLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsXG4gICAgICAnbGluay1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1zdHJva2Utd2lkdGgtcHJvcGVydHknLFxuICAgICAgJ2xpbmstdmlzaWJpbGl0eS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1zb3VyY2UtbWFya2VyLXNoYXBlLXByb3BlcnR5JyxcbiAgICAgICdsaW5rLXNvdXJjZS1tYXJrZXItc2l6ZS1wcm9wZXJ0eScsXG4gICAgICAnbGluay10YXJnZXQtbWFya2VyLXNoYXBlLXByb3BlcnR5JyxcbiAgICAgICdsaW5rLXRhcmdldC1tYXJrZXItc2l6ZS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1sYWJlbC1wcm9wZXJ0eScsXG4gICAgICAnbGluay1sYWJlbC1maWxsLWNvbG9yLXByb3BlcnR5JyxcbiAgICAgICdsaW5rLWxhYmVsLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1sYWJlbC1zdHJva2UtY29sb3ItcHJvcGVydHknLFxuICAgICAgJ2xpbmstbGFiZWwtc3Ryb2tlLW9wYWNpdHktcHJvcGVydHknLFxuICAgICAgJ2xpbmstbGFiZWwtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JyxcbiAgICAgICdsaW5rLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsXG4gICAgICAnbGluay1sYWJlbC1mb250LWZhbWlseS1wcm9wZXJ0eScsXG4gICAgICAnZGVmYXVsdC1ncm91cC14JyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLXknLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtd2lkdGgnLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtaGVpZ2h0JyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLXR5cGUnLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtdmlzaWJpbGl0eScsXG4gICAgICAnZGVmYXVsdC1ncm91cC1maWxsLWNvbG9yJyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLWZpbGwtb3BhY2l0eScsXG4gICAgICAnZGVmYXVsdC1ncm91cC1zdHJva2UtY29sb3InLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtc3Ryb2tlLW9wYWNpdHknLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtc3Ryb2tlLXdpZHRoJyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLWxhYmVsLWZpbGwtY29sb3InLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZmlsbC1vcGFjaXR5JyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLWxhYmVsLXN0cm9rZS1jb2xvcicsXG4gICAgICAnZGVmYXVsdC1ncm91cC1sYWJlbC1zdHJva2Utb3BhY2l0eScsXG4gICAgICAnZGVmYXVsdC1ncm91cC1sYWJlbC1zdHJva2Utd2lkdGgnLFxuICAgICAgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZm9udC1zaXplJyxcbiAgICAgICdkZWZhdWx0LWdyb3VwLWxhYmVsLWZvbnQtZmFtaWx5JyxcbiAgICAgICdkZWZhdWx0LW5vZGUteCcsXG4gICAgICAnZGVmYXVsdC1ub2RlLXknLFxuICAgICAgJ2RlZmF1bHQtbm9kZS13aWR0aCcsXG4gICAgICAnZGVmYXVsdC1ub2RlLWhlaWdodCcsXG4gICAgICAnZGVmYXVsdC1ub2RlLXR5cGUnLFxuICAgICAgJ2RlZmF1bHQtbm9kZS12aXNpYmlsaXR5JyxcbiAgICAgICdkZWZhdWx0LW5vZGUtZmlsbC1jb2xvcicsXG4gICAgICAnZGVmYXVsdC1ub2RlLWZpbGwtb3BhY2l0eScsXG4gICAgICAnZGVmYXVsdC1ub2RlLXN0cm9rZS1jb2xvcicsXG4gICAgICAnZGVmYXVsdC1ub2RlLXN0cm9rZS1vcGFjaXR5JyxcbiAgICAgICdkZWZhdWx0LW5vZGUtc3Ryb2tlLXdpZHRoJyxcbiAgICAgICdkZWZhdWx0LW5vZGUtbGFiZWwnLFxuICAgICAgJ2RlZmF1bHQtbm9kZS1sYWJlbC1maWxsLWNvbG9yJyxcbiAgICAgICdkZWZhdWx0LW5vZGUtbGFiZWwtZmlsbC1vcGFjaXR5JyxcbiAgICAgICdkZWZhdWx0LW5vZGUtbGFiZWwtc3Ryb2tlLWNvbG9yJyxcbiAgICAgICdkZWZhdWx0LW5vZGUtbGFiZWwtc3Ryb2tlLW9wYWNpdHknLFxuICAgICAgJ2RlZmF1bHQtbm9kZS1sYWJlbC1zdHJva2Utd2lkdGgnLFxuICAgICAgJ2RlZmF1bHQtbm9kZS1sYWJlbC1mb250LXNpemUnLFxuICAgICAgJ2RlZmF1bHQtbm9kZS1sYWJlbC1mb250LWZhbWlseScsXG4gICAgICAnZGVmYXVsdC1saW5rLXN0cm9rZS1jb2xvcicsXG4gICAgICAnZGVmYXVsdC1saW5rLXN0cm9rZS1vcGFjaXR5JyxcbiAgICAgICdkZWZhdWx0LWxpbmstc3Ryb2tlLXdpZHRoJyxcbiAgICAgICdkZWZhdWx0LWxpbmstdmlzaWJpbGl0eScsXG4gICAgICAnZGVmYXVsdC1saW5rLXNvdXJjZS1tYXJrZXItc2hhcGUnLFxuICAgICAgJ2RlZmF1bHQtbGluay1zb3VyY2UtbWFya2VyLXNpemUnLFxuICAgICAgJ2RlZmF1bHQtbGluay10YXJnZXQtbWFya2VyLXNoYXBlJyxcbiAgICAgICdkZWZhdWx0LWxpbmstdGFyZ2V0LW1hcmtlci1zaXplJyxcbiAgICAgICdkZWZhdWx0LWxpbmstbGFiZWwnLFxuICAgICAgJ2RlZmF1bHQtbGluay1sYWJlbC1maWxsLWNvbG9yJyxcbiAgICAgICdkZWZhdWx0LWxpbmstbGFiZWwtZmlsbC1vcGFjaXR5JyxcbiAgICAgICdkZWZhdWx0LWxpbmstbGFiZWwtc3Ryb2tlLWNvbG9yJyxcbiAgICAgICdkZWZhdWx0LWxpbmstbGFiZWwtc3Ryb2tlLW9wYWNpdHknLFxuICAgICAgJ2RlZmF1bHQtbGluay1sYWJlbC1zdHJva2Utd2lkdGgnLFxuICAgICAgJ2RlZmF1bHQtbGluay1sYWJlbC1mb250LXNpemUnLFxuICAgICAgJ2RlZmF1bHQtbGluay1sYWJlbC1mb250LWZhbWlseSdcbiAgICBdXG4gIH1cblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIGNvbnN0IHAgPSB7XG4gICAgICBpbnZhbGlkYXRlOiBmYWxzZSxcbiAgICAgIGludmFsaWRhdGVQb3NpdGlvbnM6IGZhbHNlLFxuICAgICAgb3JpZ2luYWxEYXRhOiBudWxsLFxuICAgICAgY2FudmFzOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZ3JvdXBJZHM6IFtdLFxuICAgICAgICBncm91cHM6IG5ldyBNYXAoKSxcbiAgICAgICAgdmVydGV4SWRzOiBbXSxcbiAgICAgICAgdmVydGljZXM6IG5ldyBNYXAoKSxcbiAgICAgICAgZWRnZUlkczogW10sXG4gICAgICAgIGVkZ2VzOiBuZXcgTWFwKClcbiAgICAgIH0sXG4gICAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgazogMVxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRSZWdpb246IG51bGwsXG4gICAgICBsYXlvdXQ6IHtcbiAgICAgICAgdXBkYXRlOiB7XG4gICAgICAgICAgZ3JvdXBzOiBbXSxcbiAgICAgICAgICB2ZXJ0aWNlczogW10sXG4gICAgICAgICAgZWRnZXM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGVudGVyOiB7XG4gICAgICAgICAgZ3JvdXBzOiBbXSxcbiAgICAgICAgICB2ZXJ0aWNlczogW10sXG4gICAgICAgICAgZWRnZXM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGV4aXQ6IHtcbiAgICAgICAgICBncm91cHM6IFtdLFxuICAgICAgICAgIHZlcnRpY2VzOiBbXSxcbiAgICAgICAgICBlZGdlczogW11cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1hcmdpbjogMTAsXG4gICAgICBsYXlvdXRUaW1lOiAwLFxuICAgICAgZWFzZTogZDNFYXNlQ3ViaWNcbiAgICB9XG4gICAgcC56b29tID0gem9vbSh0aGlzLCBwKVxuICAgIHByaXZhdGVzLnNldCh0aGlzLCBwKVxuXG4gICAgZDNTZWxlY3QocC5jYW52YXMpXG4gICAgICAuY2FsbChwLnpvb20pXG5cbiAgICBwLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5yZWdpb24pIHtcbiAgICAgICAgY29uc3Qgb2JqID0gSlNPTi5wYXJzZShldmVudC5yZWdpb24pXG4gICAgICAgIGlmIChwLmN1cnJlbnRSZWdpb24gPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChvYmouaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHtpZH0gPSBvYmpcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdub2RlbW91c2VlbnRlcicsIHtcbiAgICAgICAgICAgICAgZGV0YWlsOiB7aWR9XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9IGVsc2UgaWYgKG9iai5zb3VyY2UgJiYgb2JqLnRhcmdldCkge1xuICAgICAgICAgICAgY29uc3Qge3NvdXJjZSwgdGFyZ2V0fSA9IG9ialxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ2xpbmttb3VzZWVudGVyJywge1xuICAgICAgICAgICAgICBkZXRhaWw6IHtzb3VyY2UsIHRhcmdldH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwLmN1cnJlbnRSZWdpb24gPSBvYmpcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwLmN1cnJlbnRSZWdpb24pIHtcbiAgICAgICAgICBjb25zdCBvYmogPSBwLmN1cnJlbnRSZWdpb25cbiAgICAgICAgICBpZiAob2JqLmlkKSB7XG4gICAgICAgICAgICBjb25zdCB7aWR9ID0gb2JqXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5DdXN0b21FdmVudCgnbm9kZW1vdXNlbGVhdmUnLCB7XG4gICAgICAgICAgICAgIGRldGFpbDoge2lkfVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSBlbHNlIGlmIChvYmouc291cmNlICYmIG9iai50YXJnZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHtzb3VyY2UsIHRhcmdldH0gPSBvYmpcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdsaW5rbW91c2VsZWF2ZScsIHtcbiAgICAgICAgICAgICAgZGV0YWlsOiB7c291cmNlLCB0YXJnZXR9XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcC5jdXJyZW50UmVnaW9uID0gbnVsbFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2FuRHJhZ05vZGUgJiYgZXZlbnQucmVnaW9uKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoZXZlbnQucmVnaW9uKVxuICAgICAgICBpZiAob2JqLmlkKSB7XG4gICAgICAgICAgcC5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jYW5ab29tKSB7XG4gICAgICAgIHAuY2FudmFzLnN0eWxlLmN1cnNvciA9ICdtb3ZlJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcC5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnXG4gICAgICB9XG4gICAgfSlcblxuICAgIHAuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQucmVnaW9uKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoZXZlbnQucmVnaW9uKVxuICAgICAgICBpZiAob2JqLmlkKSB7XG4gICAgICAgICAgY29uc3Qge2lkfSA9IG9ialxuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdub2RlY2xpY2snLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtpZH1cbiAgICAgICAgICB9KSlcbiAgICAgICAgfSBlbHNlIGlmIChvYmouc291cmNlICYmIG9iai50YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCB7c291cmNlLCB0YXJnZXR9ID0gb2JqXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ2xpbmtjbGljaycsIHtcbiAgICAgICAgICAgIGRldGFpbDoge3NvdXJjZSwgdGFyZ2V0fVxuICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zdCBwID0gcHJpdmF0ZXMuZ2V0KHRoaXMpXG4gICAgdGhpcy5hcHBlbmRDaGlsZChwLmNhbnZhcylcblxuICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICAgIGlmIChwLmludmFsaWRhdGUgJiYgcC5vcmlnaW5hbERhdGEpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoIXAuaW52YWxpZGF0ZVBvc2l0aW9ucylcbiAgICAgIH1cbiAgICAgIHAuaW52YWxpZGF0ZSA9IGZhbHNlXG4gICAgICBwLmludmFsaWRhdGVQb3NpdGlvbnMgPSBmYWxzZVxuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgIGNvbnN0IHQgPSBub3cgPiBwLmxheW91dFRpbWUgPyAobm93IC0gcC5sYXlvdXRUaW1lKSAvIHRyYW5zaXRpb25EdXJhdGlvbiA6IDEgLyB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgIGNvbnN0IHIgPSBwLmVhc2UodClcbiAgICAgIGNvbnN0IGN0eCA9IHAuY2FudmFzLmdldENvbnRleHQoJzJkJylcbiAgICAgIGN0eC5zYXZlKClcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgcC5jYW52YXMud2lkdGgsIHAuY2FudmFzLmhlaWdodClcbiAgICAgIGN0eC5zY2FsZShkZXZpY2VQaXhlbFJhdGlvKCksIGRldmljZVBpeGVsUmF0aW8oKSlcbiAgICAgIGN0eC50cmFuc2xhdGUocC5tYXJnaW4sIHAubWFyZ2luKVxuICAgICAgY3R4LnRyYW5zbGF0ZShwLnRyYW5zZm9ybS54LCBwLnRyYW5zZm9ybS55KVxuICAgICAgY3R4LnNjYWxlKHAudHJhbnNmb3JtLmssIHAudHJhbnNmb3JtLmspXG5cbiAgICAgIHJlbmRlck9iamVjdHMoY3R4LCByLCBwLmxheW91dC5leGl0Lmdyb3VwcywgcC5sYXlvdXQuZW50ZXIuZ3JvdXBzLCBwLmxheW91dC51cGRhdGUuZ3JvdXBzLCByZW5kZXJHcm91cCwgaW50ZXJwb2xhdGVHcm91cClcbiAgICAgIHJlbmRlck9iamVjdHMoY3R4LCByLCBwLmxheW91dC5leGl0Lmdyb3VwcywgcC5sYXlvdXQuZW50ZXIuZ3JvdXBzLCBwLmxheW91dC51cGRhdGUuZ3JvdXBzLCByZW5kZXJHcm91cExhYmVsLCBpbnRlcnBvbGF0ZUdyb3VwKVxuICAgICAgaWYgKHRoaXMuZW5hYmxlTGlua0V2ZW50cykge1xuICAgICAgICByZW5kZXJPYmplY3RzKGN0eCwgciwgcC5sYXlvdXQuZXhpdC5lZGdlcywgcC5sYXlvdXQuZW50ZXIuZWRnZXMsIHAubGF5b3V0LnVwZGF0ZS5lZGdlcywgcmVuZGVyRWRnZVJlZ2lvbiwgaW50ZXJwb2xhdGVFZGdlKVxuICAgICAgfVxuICAgICAgcmVuZGVyT2JqZWN0cyhjdHgsIHIsIHAubGF5b3V0LmV4aXQuZWRnZXMsIHAubGF5b3V0LmVudGVyLmVkZ2VzLCBwLmxheW91dC51cGRhdGUuZWRnZXMsIHJlbmRlckVkZ2UsIGludGVycG9sYXRlRWRnZSlcbiAgICAgIHJlbmRlck9iamVjdHMoY3R4LCByLCBwLmxheW91dC5leGl0LmVkZ2VzLCBwLmxheW91dC5lbnRlci5lZGdlcywgcC5sYXlvdXQudXBkYXRlLmVkZ2VzLCByZW5kZXJFZGdlTGFiZWwsIGludGVycG9sYXRlRWRnZSlcbiAgICAgIHJlbmRlck9iamVjdHMoY3R4LCByLCBwLmxheW91dC5leGl0LnZlcnRpY2VzLCBwLmxheW91dC5lbnRlci52ZXJ0aWNlcywgcC5sYXlvdXQudXBkYXRlLnZlcnRpY2VzLCByZW5kZXJWZXJ0ZXgsIGludGVycG9sYXRlVmVydGV4KVxuICAgICAgcmVuZGVyT2JqZWN0cyhjdHgsIHIsIHAubGF5b3V0LmV4aXQudmVydGljZXMsIHAubGF5b3V0LmVudGVyLnZlcnRpY2VzLCBwLmxheW91dC51cGRhdGUudmVydGljZXMsIHJlbmRlclZlcnRleExhYmVsLCBpbnRlcnBvbGF0ZVZlcnRleClcblxuICAgICAgY3R4LnJlc3RvcmUoKVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpXG4gICAgfVxuICAgIHJlbmRlcigpXG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgKGF0dHIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIHN3aXRjaCAoYXR0cikge1xuICAgICAgY2FzZSAnc3JjJzpcbiAgICAgICAgd2luZG93LmZldGNoKG5ld1ZhbHVlKVxuICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5DdXN0b21FdmVudCgnZGF0YWZldGNoZW5kJywge2RldGFpbDogZGF0YX0pKVxuICAgICAgICAgICAgdGhpcy5sb2FkKGRhdGEpXG4gICAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3dpZHRoJzpcbiAgICAgICAgc2V0V2lkdGgodGhpcywgbmV3VmFsdWUpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdoZWlnaHQnOlxuICAgICAgICBzZXRIZWlnaHQodGhpcywgbmV3VmFsdWUpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmludmFsaWRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIGNlbnRlciAoKSB7XG4gICAgY29uc3Qge2NhbnZhcywgZGF0YSwgbWFyZ2luLCB6b29tfSA9IHByaXZhdGVzLmdldCh0aGlzKVxuICAgIGNvbnN0IGl0ZW1zID0gW10uY29uY2F0KEFycmF5LmZyb20oZGF0YS52ZXJ0aWNlcy52YWx1ZXMoKSksIEFycmF5LmZyb20oZGF0YS5ncm91cHMudmFsdWVzKCkpKVxuICAgIGNvbnN0IHtsYXlvdXRXaWR0aCwgbGF5b3V0SGVpZ2h0LCBsZWZ0LCB0b3B9ID0gbGF5b3V0UmVjdChpdGVtcylcbiAgICBjb25zdCBjYW52YXNXaWR0aCA9IGNhbnZhcy53aWR0aCAvIGRldmljZVBpeGVsUmF0aW8oKVxuICAgIGNvbnN0IGNhbnZhc0hlaWdodCA9IGNhbnZhcy5oZWlnaHQgLyBkZXZpY2VQaXhlbFJhdGlvKClcbiAgICBjb25zdCB7eCwgeSwga30gPSBjZW50ZXJUcmFuc2Zvcm0obGF5b3V0V2lkdGgsIGxheW91dEhlaWdodCwgbGVmdCwgdG9wLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBtYXJnaW4pXG4gICAgem9vbS50cmFuc2Zvcm0oZDNTZWxlY3QoY2FudmFzKSwgZDNab29tSWRlbnRpdHkudHJhbnNsYXRlKHgsIHkpLnNjYWxlKGspLnRyYW5zbGF0ZSgtbGVmdCwgLXRvcCkpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGxvYWQgKGRhdGEpIHtcbiAgICBwcml2YXRlcy5nZXQodGhpcykub3JpZ2luYWxEYXRhID0gZGF0YVxuICAgIHJldHVybiB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICB1cGRhdGUgKHByZXNlcnZlUG9zaXRpb25zID0gZmFsc2UpIHtcbiAgICBjb25zdCBwID0gcHJpdmF0ZXMuZ2V0KHRoaXMpXG4gICAgcC5wcmV2RGF0YSA9IHAuZGF0YVxuICAgIGNvbnN0IGRhdGEgPSBwLm9yaWdpbmFsRGF0YVxuICAgIGNvbnN0IGdyb3VwcyA9IGdldChkYXRhLCB0aGlzLmdyYXBoR3JvdXBzUHJvcGVydHksIFtdKVxuICAgICAgLmZpbHRlcigoZ3JvdXApID0+IGdldChncm91cCwgdGhpcy5ncm91cFZpc2liaWxpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBWaXNpYmlsaXR5KSlcbiAgICAgIC5tYXAoKGdyb3VwLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IGQzQ29sb3IoZ2V0KGdyb3VwLCB0aGlzLmdyb3VwRmlsbENvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdEdyb3VwRmlsbENvbG9yKSlcbiAgICAgICAgZmlsbENvbG9yLm9wYWNpdHkgPSArZ2V0KGdyb3VwLCB0aGlzLmdyb3VwRmlsbE9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBGaWxsT3BhY2l0eSlcbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBkM0NvbG9yKGdldChncm91cCwgdGhpcy5ncm91cFN0cm9rZUNvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdEdyb3VwU3Ryb2tlQ29sb3IpKVxuICAgICAgICBzdHJva2VDb2xvci5vcGFjaXR5ID0gK2dldChncm91cCwgdGhpcy5ncm91cFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBTdHJva2VPcGFjaXR5KVxuICAgICAgICBjb25zdCBsYWJlbEZpbGxDb2xvciA9IGQzQ29sb3IoZ2V0KGdyb3VwLCB0aGlzLmdyb3VwTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBMYWJlbEZpbGxDb2xvcikpXG4gICAgICAgIGxhYmVsRmlsbENvbG9yLm9wYWNpdHkgPSArZ2V0KGdyb3VwLCB0aGlzLmdyb3VwTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cExhYmVsRmlsbE9wYWNpdHkpXG4gICAgICAgIGNvbnN0IGxhYmVsU3Ryb2tlQ29sb3IgPSBkM0NvbG9yKGdldChncm91cCwgdGhpcy5ncm91cExhYmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBMYWJlbFN0cm9rZUNvbG9yKSlcbiAgICAgICAgbGFiZWxTdHJva2VDb2xvci5vcGFjaXR5ID0gK2dldChncm91cCwgdGhpcy5ncm91cExhYmVsU3Ryb2tlT3BhY2l0eVByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cExhYmVsU3Ryb2tlT3BhY2l0eSlcbiAgICAgICAgY29uc3QgZyA9IGkudG9TdHJpbmcoKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGcsXG4gICAgICAgICAgeDogcHJlc2VydmVQb3NpdGlvbnMgJiYgcC5wcmV2RGF0YS5ncm91cHMuaGFzKGcpID8gcC5wcmV2RGF0YS5ncm91cHMuZ2V0KGcpLnggOiArZ2V0KGdyb3VwLCB0aGlzLmdyb3VwWFByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cFgpLFxuICAgICAgICAgIHk6IHByZXNlcnZlUG9zaXRpb25zICYmIHAucHJldkRhdGEuZ3JvdXBzLmhhcyhnKSA/IHAucHJldkRhdGEuZ3JvdXBzLmdldChnKS55IDogK2dldChncm91cCwgdGhpcy5ncm91cFlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBZKSxcbiAgICAgICAgICB3aWR0aDogK2dldChncm91cCwgdGhpcy5ncm91cFdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdEdyb3VwV2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogK2dldChncm91cCwgdGhpcy5ncm91cEhlaWdodFByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cEhlaWdodCksXG4gICAgICAgICAgdHlwZTogZ2V0KGdyb3VwLCB0aGlzLmdyb3VwVHlwZVByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cFR5cGUpLFxuICAgICAgICAgIGZpbGxDb2xvcixcbiAgICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgICBzdHJva2VXaWR0aDogK2dldChncm91cCwgdGhpcy5ncm91cFN0cm9rZVdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdEdyb3VwU3Ryb2tlV2lkdGgpLFxuICAgICAgICAgIGxhYmVsOiBnZXQoZ3JvdXAsIHRoaXMuZ3JvdXBMYWJlbFByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cExhYmVsKSxcbiAgICAgICAgICBsYWJlbEZpbGxDb2xvcixcbiAgICAgICAgICBsYWJlbFN0cm9rZUNvbG9yLFxuICAgICAgICAgIGxhYmVsU3Ryb2tlV2lkdGg6ICtnZXQoZ3JvdXAsIHRoaXMuZ3JvdXBMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdEdyb3VwTGFiZWxTdHJva2VXaWR0aCksXG4gICAgICAgICAgbGFiZWxGb250U2l6ZTogK2dldChncm91cCwgdGhpcy5ncm91cExhYmVsRm9udFNpemVQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0R3JvdXBMYWJlbEZvbnRTaXplKSxcbiAgICAgICAgICBsYWJlbEZvbnRGYW1pbHk6IGdldChncm91cCwgdGhpcy5ncm91cExhYmVsRm9udEZhbWlseVByb3BlcnR5LCB0aGlzLmRlZmF1bHRHcm91cExhYmVsRm9udEZhbWlseSksXG4gICAgICAgICAgZDogZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IGdldChkYXRhLCB0aGlzLmdyYXBoTm9kZXNQcm9wZXJ0eSlcbiAgICAgIC5maWx0ZXIoKG5vZGUpID0+IGdldChub2RlLCB0aGlzLm5vZGVWaXNpYmlsaXR5UHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVWaXNpYmlsaXR5KSlcbiAgICAgIC5tYXAoKG5vZGUsIGkpID0+IHtcbiAgICAgICAgY29uc3QgZmlsbENvbG9yID0gZDNDb2xvcihnZXQobm9kZSwgdGhpcy5ub2RlRmlsbENvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVGaWxsQ29sb3IpKVxuICAgICAgICBmaWxsQ29sb3Iub3BhY2l0eSA9ICtnZXQobm9kZSwgdGhpcy5ub2RlRmlsbE9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZUZpbGxPcGFjaXR5KVxuICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IGQzQ29sb3IoZ2V0KG5vZGUsIHRoaXMubm9kZVN0cm9rZUNvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVTdHJva2VDb2xvcikpXG4gICAgICAgIHN0cm9rZUNvbG9yLm9wYWNpdHkgPSArZ2V0KG5vZGUsIHRoaXMubm9kZVN0cm9rZU9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZVN0cm9rZU9wYWNpdHkpXG4gICAgICAgIGNvbnN0IGxhYmVsRmlsbENvbG9yID0gZDNDb2xvcihnZXQobm9kZSwgdGhpcy5ub2RlTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZUxhYmVsRmlsbENvbG9yKSlcbiAgICAgICAgbGFiZWxGaWxsQ29sb3Iub3BhY2l0eSA9ICtnZXQobm9kZSwgdGhpcy5ub2RlTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlTGFiZWxGaWxsT3BhY2l0eSlcbiAgICAgICAgY29uc3QgbGFiZWxTdHJva2VDb2xvciA9IGQzQ29sb3IoZ2V0KG5vZGUsIHRoaXMubm9kZUxhYmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZUxhYmVsU3Ryb2tlQ29sb3IpKVxuICAgICAgICBsYWJlbFN0cm9rZUNvbG9yLm9wYWNpdHkgPSArZ2V0KG5vZGUsIHRoaXMubm9kZUxhYmVsU3Ryb2tlT3BhY2l0eVByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlTGFiZWxTdHJva2VPcGFjaXR5KVxuICAgICAgICBjb25zdCB1ID0gKHRoaXMubm9kZUlkUHJvcGVydHkgPT09ICckaW5kZXgnID8gaSA6IGdldChub2RlLCB0aGlzLm5vZGVJZFByb3BlcnR5KSkudG9TdHJpbmcoKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHUsXG4gICAgICAgICAgeDogcHJlc2VydmVQb3NpdGlvbnMgJiYgcC5wcmV2RGF0YS52ZXJ0aWNlcy5oYXModSkgPyBwLnByZXZEYXRhLnZlcnRpY2VzLmdldCh1KS54IDogK2dldChub2RlLCB0aGlzLm5vZGVYUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVYKSxcbiAgICAgICAgICB5OiBwcmVzZXJ2ZVBvc2l0aW9ucyAmJiBwLnByZXZEYXRhLnZlcnRpY2VzLmhhcyh1KSA/IHAucHJldkRhdGEudmVydGljZXMuZ2V0KHUpLnkgOiArZ2V0KG5vZGUsIHRoaXMubm9kZVlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZVkpLFxuICAgICAgICAgIHdpZHRoOiArZ2V0KG5vZGUsIHRoaXMubm9kZVdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVXaWR0aCksXG4gICAgICAgICAgaGVpZ2h0OiArZ2V0KG5vZGUsIHRoaXMubm9kZUhlaWdodFByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlSGVpZ2h0KSxcbiAgICAgICAgICB0eXBlOiBnZXQobm9kZSwgdGhpcy5ub2RlVHlwZVByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlVHlwZSksXG4gICAgICAgICAgZmlsbENvbG9yLFxuICAgICAgICAgIHN0cm9rZUNvbG9yLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiArZ2V0KG5vZGUsIHRoaXMubm9kZVN0cm9rZVdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVTdHJva2VXaWR0aCksXG4gICAgICAgICAgbGFiZWw6IGdldChub2RlLCB0aGlzLm5vZGVMYWJlbFByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlTGFiZWwpLFxuICAgICAgICAgIGxhYmVsRmlsbENvbG9yLFxuICAgICAgICAgIGxhYmVsU3Ryb2tlQ29sb3IsXG4gICAgICAgICAgbGFiZWxTdHJva2VXaWR0aDogK2dldChub2RlLCB0aGlzLm5vZGVMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHksIHRoaXMuZGVmYXVsdE5vZGVMYWJlbFN0cm9rZVdpZHRoKSxcbiAgICAgICAgICBsYWJlbEZvbnRTaXplOiArZ2V0KG5vZGUsIHRoaXMubm9kZUxhYmVsRm9udFNpemVQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0Tm9kZUxhYmVsRm9udFNpemUpLFxuICAgICAgICAgIGxhYmVsRm9udEZhbWlseTogZ2V0KG5vZGUsIHRoaXMubm9kZUxhYmVsRm9udEZhbWlseVByb3BlcnR5LCB0aGlzLmRlZmF1bHROb2RlTGFiZWxGb250RmFtaWx5KSxcbiAgICAgICAgICBpbkVkZ2VzOiBbXSxcbiAgICAgICAgICBvdXRFZGdlczogW10sXG4gICAgICAgICAgZDogbm9kZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIGNvbnN0IGluZGljZXMgPSBuZXcgTWFwKHZlcnRpY2VzLm1hcCgoe3V9LCBpKSA9PiBbdSwgaV0pKVxuICAgIGNvbnN0IGVkZ2VzID0gZ2V0KGRhdGEsIHRoaXMuZ3JhcGhMaW5rc1Byb3BlcnR5KVxuICAgICAgLmZpbHRlcigobGluaykgPT4gZ2V0KGxpbmssIHRoaXMubGlua1Zpc2liaWxpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0TGlua1Zpc2liaWxpdHkpKVxuICAgICAgLmZpbHRlcigobGluaykgPT4ge1xuICAgICAgICBjb25zdCB1ID0gZ2V0KGxpbmssIHRoaXMubGlua1NvdXJjZVByb3BlcnR5KS50b1N0cmluZygpXG4gICAgICAgIGNvbnN0IHYgPSBnZXQobGluaywgdGhpcy5saW5rVGFyZ2V0UHJvcGVydHkpLnRvU3RyaW5nKClcbiAgICAgICAgcmV0dXJuIGluZGljZXMuaGFzKHUpICYmIGluZGljZXMuaGFzKHYpXG4gICAgICB9KVxuICAgICAgLm1hcCgobGluaykgPT4ge1xuICAgICAgICBjb25zdCB1ID0gZ2V0KGxpbmssIHRoaXMubGlua1NvdXJjZVByb3BlcnR5KS50b1N0cmluZygpXG4gICAgICAgIGNvbnN0IHYgPSBnZXQobGluaywgdGhpcy5saW5rVGFyZ2V0UHJvcGVydHkpLnRvU3RyaW5nKClcbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBkM0NvbG9yKGdldChsaW5rLCB0aGlzLmxpbmtTdHJva2VDb2xvclByb3BlcnR5LCB0aGlzLmRlZmF1bHRMaW5rU3Ryb2tlQ29sb3IpKVxuICAgICAgICBzdHJva2VDb2xvci5vcGFjaXR5ID0gK2dldChsaW5rLCB0aGlzLmxpbmtTdHJva2VPcGFjaXR5UHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtTdHJva2VPcGFjaXR5KVxuICAgICAgICBjb25zdCBsYWJlbEZpbGxDb2xvciA9IGQzQ29sb3IoZ2V0KGxpbmssIHRoaXMubGlua0xhYmVsRmlsbENvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtMYWJlbEZpbGxDb2xvcikpXG4gICAgICAgIGxhYmVsRmlsbENvbG9yLm9wYWNpdHkgPSArZ2V0KGxpbmssIHRoaXMubGlua0xhYmVsRmlsbE9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0TGlua0xhYmVsRmlsbE9wYWNpdHkpXG4gICAgICAgIGNvbnN0IGxhYmVsU3Ryb2tlQ29sb3IgPSBkM0NvbG9yKGdldChsaW5rLCB0aGlzLmxpbmtMYWJlbFN0cm9rZUNvbG9yUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtMYWJlbFN0cm9rZUNvbG9yKSlcbiAgICAgICAgbGFiZWxTdHJva2VDb2xvci5vcGFjaXR5ID0gK2dldChsaW5rLCB0aGlzLmxpbmtMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0TGlua0xhYmVsU3Ryb2tlT3BhY2l0eSlcbiAgICAgICAgY29uc3QgZHUgPSB2ZXJ0aWNlc1tpbmRpY2VzLmdldCh1KV1cbiAgICAgICAgY29uc3QgZHYgPSB2ZXJ0aWNlc1tpbmRpY2VzLmdldCh2KV1cbiAgICAgICAgY29uc3QgbmV3UG9pbnRzID0gW1tkdS54LCBkdS55XV1cbiAgICAgICAgZm9yIChjb25zdCBbeCwgeV0gb2YgZ2V0KGxpbmssIHRoaXMubGlua0JlbmRzUHJvcGVydHksIFtdKSkge1xuICAgICAgICAgIG5ld1BvaW50cy5wdXNoKFt4LCB5XSlcbiAgICAgICAgfVxuICAgICAgICBuZXdQb2ludHMucHVzaChbZHYueCwgZHYueV0pXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHByZXNlcnZlUG9zaXRpb25zICYmIHAucHJldkRhdGEuZWRnZXMuaGFzKHUpICYmIHAucHJldkRhdGEuZWRnZXMuZ2V0KHUpLmhhcyh2KVxuICAgICAgICAgID8gcC5wcmV2RGF0YS5lZGdlcy5nZXQodSkuZ2V0KHYpLnBvaW50c1xuICAgICAgICAgIDogbmV3UG9pbnRzXG4gICAgICAgIGNvbnN0IGVkZ2UgPSB7XG4gICAgICAgICAgdSxcbiAgICAgICAgICB2LFxuICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICB0eXBlOiBnZXQobGluaywgdGhpcy5saW5rVHlwZVByb3BlcnR5LCB0aGlzLmRlZmF1bHRMaW5rVHlwZSksXG4gICAgICAgICAgc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6ICtnZXQobGluaywgdGhpcy5saW5rU3Ryb2tlV2lkdGhQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0TGlua1N0cm9rZVdpZHRoKSxcbiAgICAgICAgICBzb3VyY2VNYXJrZXJTaGFwZTogZ2V0KGxpbmssIHRoaXMubGlua1NvdXJjZU1hcmtlclNoYXBlUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtTb3VyY2VNYXJrZXJTaGFwZSksXG4gICAgICAgICAgc291cmNlTWFya2VyU2l6ZTogK2dldChsaW5rLCB0aGlzLmxpbmtTb3VyY2VNYXJrZXJTaXplUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtTb3VyY2VNYXJrZXJTaXplKSxcbiAgICAgICAgICB0YXJnZXRNYXJrZXJTaGFwZTogZ2V0KGxpbmssIHRoaXMubGlua1RhcmdldE1hcmtlclNoYXBlUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtUYXJnZXRNYXJrZXJTaGFwZSksXG4gICAgICAgICAgdGFyZ2V0TWFya2VyU2l6ZTogK2dldChsaW5rLCB0aGlzLmxpbmtUYXJnZXRNYXJrZXJTaXplUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtUYXJnZXRNYXJrZXJTaXplKSxcbiAgICAgICAgICBsYWJlbDogZ2V0KGxpbmssIHRoaXMubGlua0xhYmVsUHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtMYWJlbCksXG4gICAgICAgICAgbGFiZWxGaWxsQ29sb3IsXG4gICAgICAgICAgbGFiZWxTdHJva2VDb2xvcixcbiAgICAgICAgICBsYWJlbFN0cm9rZVdpZHRoOiArZ2V0KGxpbmssIHRoaXMubGlua0xhYmVsU3Ryb2tlV2lkdGhQcm9wZXJ0eSwgdGhpcy5kZWZhdWx0TGlua0xhYmVsU3Ryb2tlV2lkdGgpLFxuICAgICAgICAgIGxhYmVsRm9udFNpemU6ICtnZXQobGluaywgdGhpcy5saW5rTGFiZWxGb250U2l6ZVByb3BlcnR5LCB0aGlzLmRlZmF1bHRMaW5rTGFiZWxGb250U2l6ZSksXG4gICAgICAgICAgbGFiZWxGb250RmFtaWx5OiBnZXQobGluaywgdGhpcy5saW5rTGFiZWxGb250RmFtaWx5UHJvcGVydHksIHRoaXMuZGVmYXVsdExpbmtMYWJlbEZvbnRGYW1pbHkpLFxuICAgICAgICAgIGQ6IGxpbmtcbiAgICAgICAgfVxuICAgICAgICBkdS5vdXRFZGdlcy5wdXNoKGVkZ2UpXG4gICAgICAgIGR2LmluRWRnZXMucHVzaChlZGdlKVxuICAgICAgICByZXR1cm4gZWRnZVxuICAgICAgfSlcbiAgICBwLmRhdGEgPSB7XG4gICAgICBncm91cElkczogZ3JvdXBzLm1hcCgoe2d9KSA9PiBnKSxcbiAgICAgIGdyb3VwczogbmV3IE1hcChncm91cHMubWFwKChncm91cCkgPT4gW2dyb3VwLmcsIGdyb3VwXSkpLFxuICAgICAgdmVydGV4SWRzOiB2ZXJ0aWNlcy5tYXAoKHt1fSkgPT4gdSksXG4gICAgICB2ZXJ0aWNlczogbmV3IE1hcCh2ZXJ0aWNlcy5tYXAoKHZlcnRleCkgPT4gW3ZlcnRleC51LCB2ZXJ0ZXhdKSksXG4gICAgICBlZGdlSWRzOiBlZGdlcy5tYXAoKHt1LCB2fSkgPT4gW3UsIHZdKSxcbiAgICAgIGVkZ2VzOiBuZXcgTWFwKHZlcnRpY2VzLm1hcCgodmVydGV4KSA9PiBbdmVydGV4LnUsIG5ldyBNYXAoKV0pKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZWRnZXMpIHtcbiAgICAgIHAuZGF0YS5lZGdlcy5nZXQoZWRnZS51KS5zZXQoZWRnZS52LCBlZGdlKVxuICAgIH1cbiAgICB0aGlzLm9uTGF5b3V0KHAuZGF0YSwgcHJlc2VydmVQb3NpdGlvbnMpXG4gICAgZm9yIChjb25zdCBbdSwgdl0gb2YgcC5kYXRhLmVkZ2VJZHMpIHtcbiAgICAgIGNvbnN0IGVkZ2UgPSBwLmRhdGEuZWRnZXMuZ2V0KHUpLmdldCh2KVxuICAgICAgY29uc3QgZHUgPSBwLmRhdGEudmVydGljZXMuZ2V0KHUpXG4gICAgICBjb25zdCBkdiA9IHAuZGF0YS52ZXJ0aWNlcy5nZXQodilcbiAgICAgIGFkanVzdEVkZ2UoZWRnZSwgZHUsIGR2KVxuICAgIH1cbiAgICBwLmxheW91dCA9IGRpZmYocC5wcmV2RGF0YSwgcC5kYXRhKVxuICAgIHAubGF5b3V0VGltZSA9IG5ldyBEYXRlKClcbiAgICBpZiAodGhpcy5hdXRvQ2VudGVyaW5nKSB7XG4gICAgICB0aGlzLmNlbnRlcigpXG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd1cGRhdGVlbmQnLCB7XG4gICAgICBkZXRhaWw6IHtwcmVzZXJ2ZVBvc2l0aW9uc31cbiAgICB9KSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgb25MYXlvdXQgKCkge1xuICB9XG5cbiAgaW52YWxpZGF0ZSAoKSB7XG4gICAgaWYgKHRoaXMuYXV0b1VwZGF0ZSkge1xuICAgICAgcHJpdmF0ZXMuZ2V0KHRoaXMpLmludmFsaWRhdGUgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgaW52YWxpZGF0ZVBvc2l0aW9ucyAoKSB7XG4gICAgaWYgKHRoaXMuYXV0b1VwZGF0ZSkge1xuICAgICAgcHJpdmF0ZXMuZ2V0KHRoaXMpLmludmFsaWRhdGVQb3NpdGlvbnMgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgZ2V0IGF1dG9VcGRhdGUgKCkge1xuICAgIHJldHVybiAhdGhpcy5oYXNBdHRyaWJ1dGUoJ25vLWF1dG8tdXBkYXRlJylcbiAgfVxuXG4gIHNldCBhdXRvVXBkYXRlICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ25vLWF1dG8tdXBkYXRlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vLWF1dG8tdXBkYXRlJywgJycpXG4gICAgfVxuICB9XG5cbiAgZ2V0IGF1dG9DZW50ZXJpbmcgKCkge1xuICAgIHJldHVybiAhdGhpcy5oYXNBdHRyaWJ1dGUoJ25vLWF1dG8tY2VudGVyaW5nJylcbiAgfVxuXG4gIHNldCBhdXRvQ2VudGVyaW5nICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ25vLWF1dG8tY2VudGVyaW5nJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vLWF1dG8tY2VudGVyaW5nJywgJycpXG4gICAgfVxuICB9XG5cbiAgZ2V0IGNhblpvb20gKCkge1xuICAgIHJldHVybiAhdGhpcy5oYXNBdHRyaWJ1dGUoJ25vLXpvb20nKVxuICB9XG5cbiAgc2V0IGNhblpvb20gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnbm8tem9vbScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCduby16b29tJywgJycpXG4gICAgfVxuICB9XG5cbiAgZ2V0IGNhbkRyYWdOb2RlICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzQXR0cmlidXRlKCduby1kcmFnLW5vZGUnKVxuICB9XG5cbiAgc2V0IGNhbkRyYWdOb2RlICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ25vLWRyYWctbm9kZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCduby1kcmFnLW5vZGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBnZXQgZW5hYmxlTGlua0V2ZW50cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdlbmFibGUtbGluay1ldmVudHMnKVxuICB9XG5cbiAgc2V0IGVuYWJsZUxpbmtFdmVudHMgKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnbm8tZHJhZy1ub2RlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2VuYWJsZS1saW5rLWV2ZW50cycsICcnKVxuICAgIH1cbiAgfVxuXG4gIGdldCBzcmMgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ3NyYycsIG51bGwpXG4gIH1cblxuICBzZXQgc3JjICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzcmMnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCB3aWR0aCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnd2lkdGgnLCAzMDApXG4gIH1cblxuICBzZXQgd2lkdGggKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdmFsdWUpXG4gIH1cblxuICBnZXQgaGVpZ2h0ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdoZWlnaHQnLCAxNTApXG4gIH1cblxuICBzZXQgaGVpZ2h0ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCB0cmFuc2l0aW9uRHVyYXRpb24gKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAwKVxuICB9XG5cbiAgc2V0IHRyYW5zaXRpb25EdXJhdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgndHJhbnNpdGlvbi1kdXJhdGlvbicsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyYXBoR3JvdXBzUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyYXBoLWdyb3Vwcy1wcm9wZXJ0eScsICdncm91cHMnKVxuICB9XG5cbiAgc2V0IGdyYXBoR3JvdXBzUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyYXBoLWdyb3Vwcy1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyYXBoTm9kZXNQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JhcGgtbm9kZXMtcHJvcGVydHknLCAnbm9kZXMnKVxuICB9XG5cbiAgc2V0IGdyYXBoTm9kZXNQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JhcGgtbm9kZXMtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncmFwaExpbmtzUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyYXBoLWxpbmtzLXByb3BlcnR5JywgJ2xpbmtzJylcbiAgfVxuXG4gIHNldCBncmFwaExpbmtzUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyYXBoLWxpbmtzLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZ3JvdXBYUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyb3VwLXgtcHJvcGVydHknLCAneCcpXG4gIH1cblxuICBzZXQgZ3JvdXBYUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyb3VwLXgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncm91cFlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAteS1wcm9wZXJ0eScsICd5JylcbiAgfVxuXG4gIHNldCBncm91cFlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAteS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwV2lkdGhQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtd2lkdGgtcHJvcGVydHknLCAnd2lkdGgnKVxuICB9XG5cbiAgc2V0IGdyb3VwV2lkdGhQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtd2lkdGgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncm91cEhlaWdodFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1oZWlnaHQtcHJvcGVydHknLCAnaGVpZ2h0JylcbiAgfVxuXG4gIHNldCBncm91cEhlaWdodFByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC1oZWlnaHQtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncm91cEZpbGxDb2xvclByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1maWxsLWNvbG9yLXByb3BlcnR5JywgJ2ZpbGxDb2xvcicpXG4gIH1cblxuICBzZXQgZ3JvdXBGaWxsQ29sb3JQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtZmlsbC1jb2xvci1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwRmlsbE9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtZmlsbC1vcGFjaXR5LXByb3BlcnR5JywgJ2ZpbGxPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBncm91cEZpbGxPcGFjaXR5UHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyb3VwLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwU3Ryb2tlQ29sb3JQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JywgJ3N0cm9rZUNvbG9yJylcbiAgfVxuXG4gIHNldCBncm91cFN0cm9rZUNvbG9yUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyb3VwLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwU3Ryb2tlT3BhY2l0eVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsICdzdHJva2VPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBncm91cFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtc3Ryb2tlLW9wYWNpdHktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncm91cFN0cm9rZVdpZHRoUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyb3VwLXN0cm9rZS13aWR0aC1wcm9wZXJ0eScsICdzdHJva2VXaWR0aCcpXG4gIH1cblxuICBzZXQgZ3JvdXBTdHJva2VXaWR0aFByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC1zdHJva2Utd2lkdGgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBncm91cFR5cGVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtdHlwZS1wcm9wZXJ0eScsICd0eXBlJylcbiAgfVxuXG4gIHNldCBncm91cFR5cGVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtdHlwZS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwVmlzaWJpbGl0eVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC12aXNpYmlsaXR5LXByb3BlcnR5JywgJ3Zpc2liaWxpdHknKVxuICB9XG5cbiAgc2V0IGdyb3VwVmlzaWJpbGl0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC12aXNpYmlsaXR5LXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZ3JvdXBMYWJlbFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1sYWJlbC1wcm9wZXJ0eScsICdsYWJlbCcpXG4gIH1cblxuICBzZXQgZ3JvdXBMYWJlbFByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC1sYWJlbC1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtbGFiZWwtZmlsbC1jb2xvci1wcm9wZXJ0eScsICdsYWJlbEZpbGxDb2xvcicpXG4gIH1cblxuICBzZXQgZ3JvdXBMYWJlbEZpbGxDb2xvclByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC1sYWJlbC1maWxsLWNvbG9yLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZ3JvdXBMYWJlbEZpbGxPcGFjaXR5UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyb3VwLWxhYmVsLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsICdsYWJlbEZpbGxPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBncm91cExhYmVsRmlsbE9wYWNpdHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtbGFiZWwtZmlsbC1vcGFjaXR5LXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZ3JvdXBMYWJlbFN0cm9rZUNvbG9yUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyb3VwLWxhYmVsLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsICdsYWJlbFN0cm9rZUNvbG9yJylcbiAgfVxuXG4gIHNldCBncm91cExhYmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtbGFiZWwtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZ3JvdXBMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZ3JvdXAtbGFiZWwtc3Ryb2tlLW9wYWNpdHktcHJvcGVydHknLCAnbGFiZWxTdHJva2VPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBncm91cExhYmVsU3Ryb2tlT3BhY2l0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncm91cC1sYWJlbC1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwTGFiZWxTdHJva2VXaWR0aFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1sYWJlbC1zdHJva2Utd2lkdGgtcHJvcGVydHknLCAnbGFiZWxTdHJva2VXaWR0aCcpXG4gIH1cblxuICBzZXQgZ3JvdXBMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyb3VwLWxhYmVsLXN0cm9rZS13aWR0aC1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwTGFiZWxGb250U2l6ZVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdncm91cC1sYWJlbC1mb250LXNpemUtcHJvcGVydHknLCAnbGFiZWxGb250U2l6ZScpXG4gIH1cblxuICBzZXQgZ3JvdXBMYWJlbEZvbnRTaXplUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2dyb3VwLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGdyb3VwTGFiZWxGb250RmFtaWx5UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2dyb3VwLWxhYmVsLWZvbnQtZmFtaWx5LXByb3BlcnR5JywgJ2xhYmVsRm9udEZhbWlseScpXG4gIH1cblxuICBzZXQgZ3JvdXBMYWJlbEZvbnRGYW1pbHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ3JvdXAtbGFiZWwtZm9udC1mYW1pbHktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlSWRQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1pZC1wcm9wZXJ0eScsICckaW5kZXgnKVxuICB9XG5cbiAgc2V0IG5vZGVJZFByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWlkLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZVhQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS14LXByb3BlcnR5JywgJ3gnKVxuICB9XG5cbiAgc2V0IG5vZGVYUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vZGUteC1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVZUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ25vZGUteS1wcm9wZXJ0eScsICd5JylcbiAgfVxuXG4gIHNldCBub2RlWVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLXktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlV2lkdGhQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS13aWR0aC1wcm9wZXJ0eScsICd3aWR0aCcpXG4gIH1cblxuICBzZXQgbm9kZVdpZHRoUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vZGUtd2lkdGgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlSGVpZ2h0UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ25vZGUtaGVpZ2h0LXByb3BlcnR5JywgJ2hlaWdodCcpXG4gIH1cblxuICBzZXQgbm9kZUhlaWdodFByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWhlaWdodC1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVGaWxsQ29sb3JQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1maWxsLWNvbG9yLXByb3BlcnR5JywgJ2ZpbGxDb2xvcicpXG4gIH1cblxuICBzZXQgbm9kZUZpbGxDb2xvclByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWZpbGwtY29sb3ItcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlRmlsbE9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1maWxsLW9wYWNpdHktcHJvcGVydHknLCAnZmlsbE9wYWNpdHknKVxuICB9XG5cbiAgc2V0IG5vZGVGaWxsT3BhY2l0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVTdHJva2VDb2xvclByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsICdzdHJva2VDb2xvcicpXG4gIH1cblxuICBzZXQgbm9kZVN0cm9rZUNvbG9yUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vZGUtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZVN0cm9rZU9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsICdzdHJva2VPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBub2RlU3Ryb2tlT3BhY2l0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLXN0cm9rZS1vcGFjaXR5LXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZVN0cm9rZVdpZHRoUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ25vZGUtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JywgJ3N0cm9rZVdpZHRoJylcbiAgfVxuXG4gIHNldCBub2RlU3Ryb2tlV2lkdGhQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbm9kZS1zdHJva2Utd2lkdGgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlVHlwZVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLXR5cGUtcHJvcGVydHknLCAndHlwZScpXG4gIH1cblxuICBzZXQgbm9kZVR5cGVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbm9kZS10eXBlLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZVZpc2liaWxpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS12aXNpYmlsaXR5LXByb3BlcnR5JywgJ3Zpc2liaWxpdHknKVxuICB9XG5cbiAgc2V0IG5vZGVWaXNpYmlsaXR5UHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vZGUtdmlzaWJpbGl0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVMYWJlbFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLWxhYmVsLXByb3BlcnR5JywgJ2xhYmVsJylcbiAgfVxuXG4gIHNldCBub2RlTGFiZWxQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbm9kZS1sYWJlbC1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVMYWJlbEZpbGxDb2xvclByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLWxhYmVsLWZpbGwtY29sb3ItcHJvcGVydHknLCAnbGFiZWxGaWxsQ29sb3InKVxuICB9XG5cbiAgc2V0IG5vZGVMYWJlbEZpbGxDb2xvclByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWxhYmVsLWZpbGwtY29sb3ItcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLWxhYmVsLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsICdsYWJlbEZpbGxPcGFjaXR5JylcbiAgfVxuXG4gIHNldCBub2RlTGFiZWxGaWxsT3BhY2l0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWxhYmVsLWZpbGwtb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVMYWJlbFN0cm9rZUNvbG9yUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ25vZGUtbGFiZWwtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JywgJ2xhYmVsU3Ryb2tlQ29sb3InKVxuICB9XG5cbiAgc2V0IG5vZGVMYWJlbFN0cm9rZUNvbG9yUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ25vZGUtbGFiZWwtc3Ryb2tlLWNvbG9yLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZUxhYmVsU3Ryb2tlT3BhY2l0eVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLWxhYmVsLXN0cm9rZS1vcGFjaXR5LXByb3BlcnR5JywgJ2xhYmVsU3Ryb2tlT3BhY2l0eScpXG4gIH1cblxuICBzZXQgbm9kZUxhYmVsU3Ryb2tlT3BhY2l0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWxhYmVsLXN0cm9rZS1vcGFjaXR5LXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbm9kZUxhYmVsU3Ryb2tlV2lkdGhQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1sYWJlbC1zdHJva2Utd2lkdGgtcHJvcGVydHknLCAnbGFiZWxTdHJva2VXaWR0aCcpXG4gIH1cblxuICBzZXQgbm9kZUxhYmVsU3Ryb2tlV2lkdGhQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbm9kZS1sYWJlbC1zdHJva2Utd2lkdGgtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBub2RlTGFiZWxGb250U2l6ZVByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdub2RlLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsICdsYWJlbEZvbnRTaXplJylcbiAgfVxuXG4gIHNldCBub2RlTGFiZWxGb250U2l6ZVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdub2RlLWxhYmVsLWZvbnQtc2l6ZS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IG5vZGVMYWJlbEZvbnRGYW1pbHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbm9kZS1sYWJlbC1mb250LWZhbWlseS1wcm9wZXJ0eScsICdsYWJlbEZvbnRGYW1pbHknKVxuICB9XG5cbiAgc2V0IG5vZGVMYWJlbEZvbnRGYW1pbHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbm9kZS1sYWJlbC1mb250LWZhbWlseS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtTb3VyY2VQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1zb3VyY2UtcHJvcGVydHknLCAnc291cmNlJylcbiAgfVxuXG4gIHNldCBsaW5rU291cmNlUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstc291cmNlLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua1RhcmdldFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdsaW5rLXRhcmdldC1wcm9wZXJ0eScsICd0YXJnZXQnKVxuICB9XG5cbiAgc2V0IGxpbmtUYXJnZXRQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay10YXJnZXQtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rQmVuZHNQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1iZW5kcy1wcm9wZXJ0eScsICdiZW5kcycpXG4gIH1cblxuICBzZXQgbGlua0JlbmRzUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstYmVuZHMtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rU3Ryb2tlQ29sb3JQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1zdHJva2UtY29sb3ItcHJvcGVydHknLCAnc3Ryb2tlQ29sb3InKVxuICB9XG5cbiAgc2V0IGxpbmtTdHJva2VDb2xvclByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdsaW5rLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtTdHJva2VPcGFjaXR5UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2xpbmstc3Ryb2tlLW9wYWNpdHktcHJvcGVydHknLCAnc3Ryb2tlT3BhY2l0eScpXG4gIH1cblxuICBzZXQgbGlua1N0cm9rZU9wYWNpdHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtTdHJva2VXaWR0aFByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdsaW5rLXN0cm9rZS13aWR0aC1wcm9wZXJ0eScsICdzdHJva2VXaWR0aCcpXG4gIH1cblxuICBzZXQgbGlua1N0cm9rZVdpZHRoUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstc3Ryb2tlLXdpZHRoLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua1R5cGVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay10eXBlLXByb3BlcnR5JywgJ3R5cGUnKVxuICB9XG5cbiAgc2V0IGxpbmtUeXBlUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstdHlwZS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtWaXNpYmlsaXR5UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2xpbmstdmlzaWJpbGl0eS1wcm9wZXJ0eScsICd2aXNpYmlsaXR5JylcbiAgfVxuXG4gIHNldCBsaW5rVmlzaWJpbGl0eVByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdsaW5rLXZpc2liaWxpdHktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rU291cmNlTWFya2VyU2hhcGVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1zb3VyY2UtbWFya2VyLXNoYXBlLXByb3BlcnR5JywgJ3NvdXJjZU1hcmtlclNoYXBlJylcbiAgfVxuXG4gIHNldCBsaW5rU291cmNlTWFya2VyU2hhcGVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1zb3VyY2UtbWFya2VyLXNoYXBlLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua1NvdXJjZU1hcmtlclNpemVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1zb3VyY2UtbWFya2VyLXNpemUtcHJvcGVydHknLCAnc291cmNlTWFya2VyU2l6ZScpXG4gIH1cblxuICBzZXQgbGlua1NvdXJjZU1hcmtlclNpemVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1zb3VyY2UtbWFya2VyLXNpemUtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rVGFyZ2V0TWFya2VyU2hhcGVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay10YXJnZXQtbWFya2VyLXNoYXBlLXByb3BlcnR5JywgJ3RhcmdldE1hcmtlclNoYXBlJylcbiAgfVxuXG4gIHNldCBsaW5rVGFyZ2V0TWFya2VyU2hhcGVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay10YXJnZXQtbWFya2VyLXNoYXBlLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua1RhcmdldE1hcmtlclNpemVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay10YXJnZXQtbWFya2VyLXNpemUtcHJvcGVydHknLCAndGFyZ2V0TWFya2VyU2l6ZScpXG4gIH1cblxuICBzZXQgbGlua1RhcmdldE1hcmtlclNpemVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay10YXJnZXQtbWFya2VyLXNpemUtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rTGFiZWxQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1sYWJlbC1wcm9wZXJ0eScsICdsYWJlbCcpXG4gIH1cblxuICBzZXQgbGlua0xhYmVsUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstbGFiZWwtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1sYWJlbC1maWxsLWNvbG9yLXByb3BlcnR5JywgJ2xhYmVsRmlsbENvbG9yJylcbiAgfVxuXG4gIHNldCBsaW5rTGFiZWxGaWxsQ29sb3JQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1sYWJlbC1maWxsLWNvbG9yLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua0xhYmVsRmlsbE9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1sYWJlbC1maWxsLW9wYWNpdHktcHJvcGVydHknLCAnbGFiZWxGaWxsT3BhY2l0eScpXG4gIH1cblxuICBzZXQgbGlua0xhYmVsRmlsbE9wYWNpdHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1sYWJlbC1maWxsLW9wYWNpdHktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rTGFiZWxTdHJva2VDb2xvclByb3BlcnR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdsaW5rLWxhYmVsLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsICdsYWJlbFN0cm9rZUNvbG9yJylcbiAgfVxuXG4gIHNldCBsaW5rTGFiZWxTdHJva2VDb2xvclByb3BlcnR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdsaW5rLWxhYmVsLXN0cm9rZS1jb2xvci1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1sYWJlbC1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsICdsYWJlbFN0cm9rZU9wYWNpdHknKVxuICB9XG5cbiAgc2V0IGxpbmtMYWJlbFN0cm9rZU9wYWNpdHlQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1sYWJlbC1zdHJva2Utb3BhY2l0eS1wcm9wZXJ0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGxpbmtMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2xpbmstbGFiZWwtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JywgJ2xhYmVsU3Ryb2tlV2lkdGgnKVxuICB9XG5cbiAgc2V0IGxpbmtMYWJlbFN0cm9rZVdpZHRoUHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstbGFiZWwtc3Ryb2tlLXdpZHRoLXByb3BlcnR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgbGlua0xhYmVsRm9udFNpemVQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnbGluay1sYWJlbC1mb250LXNpemUtcHJvcGVydHknLCAnbGFiZWxGb250U2l6ZScpXG4gIH1cblxuICBzZXQgbGlua0xhYmVsRm9udFNpemVQcm9wZXJ0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbGluay1sYWJlbC1mb250LXNpemUtcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBsaW5rTGFiZWxGb250RmFtaWx5UHJvcGVydHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2xpbmstbGFiZWwtZm9udC1mYW1pbHktcHJvcGVydHknLCAnbGFiZWxGb250RmFtaWx5JylcbiAgfVxuXG4gIHNldCBsaW5rTGFiZWxGb250RmFtaWx5UHJvcGVydHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xpbmstbGFiZWwtZm9udC1mYW1pbHktcHJvcGVydHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBYICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWdyb3VwLXgnLCAwKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cFggKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtZ3JvdXAteCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRHcm91cFkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAteScsIDApXG4gIH1cblxuICBzZXQgZGVmYXVsdEdyb3VwWSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC15JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwV2lkdGggKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtd2lkdGgnLCAxMClcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBXaWR0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC13aWR0aCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRHcm91cEhlaWdodCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC1oZWlnaHQnLCAxMClcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBIZWlnaHQgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtZ3JvdXAtaGVpZ2h0JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwRmlsbENvbG9yICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWdyb3VwLWZpbGwtY29sb3InLCAnI2ZmZicpXG4gIH1cblxuICBzZXQgZGVmYXVsdEdyb3VwRmlsbENvbG9yICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLWZpbGwtY29sb3InLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBGaWxsT3BhY2l0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC1maWxsLW9wYWNpdHknLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cEZpbGxPcGFjaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLWZpbGwtb3BhY2l0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRHcm91cFN0cm9rZUNvbG9yICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWdyb3VwLXN0cm9rZS1jb2xvcicsICcjMDAwJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBTdHJva2VDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1zdHJva2UtY29sb3InLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBTdHJva2VPcGFjaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWdyb3VwLXN0cm9rZS1vcGFjaXR5JywgMSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBTdHJva2VPcGFjaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLXN0cm9rZS1vcGFjaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwU3Ryb2tlV2lkdGggKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtc3Ryb2tlLXdpZHRoJywgMSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBTdHJva2VXaWR0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1zdHJva2Utd2lkdGgnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBUeXBlICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWdyb3VwLXR5cGUnLCAncmVjdCcpXG4gIH1cblxuICBzZXQgZGVmYXVsdEdyb3VwVHlwZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC10eXBlJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwVmlzaWJpbGl0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC12aXNpYmlsaXR5JywgdHJ1ZSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBWaXNpYmlsaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLXZpc2liaWxpdHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBMYWJlbCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC1sYWJlbCcsICcnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cExhYmVsICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLWxhYmVsJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwTGFiZWxGaWxsQ29sb3IgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZmlsbC1jb2xvcicsICcjMDAwJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBMYWJlbEZpbGxDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1sYWJlbC1maWxsLWNvbG9yJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwTGFiZWxGaWxsT3BhY2l0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC1sYWJlbC1maWxsLW9wYWNpdHknLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cExhYmVsRmlsbE9wYWNpdHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZmlsbC1vcGFjaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdEdyb3VwTGFiZWxTdHJva2VDb2xvciAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ncm91cC1sYWJlbC1zdHJva2UtY29sb3InLCAnI2ZmZicpXG4gIH1cblxuICBzZXQgZGVmYXVsdEdyb3VwTGFiZWxTdHJva2VDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1sYWJlbC1zdHJva2UtY29sb3InLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBMYWJlbFN0cm9rZU9wYWNpdHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtc3Ryb2tlLW9wYWNpdHknLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cExhYmVsU3Ryb2tlT3BhY2l0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1sYWJlbC1zdHJva2Utb3BhY2l0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRHcm91cExhYmVsU3Ryb2tlV2lkdGggKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtc3Ryb2tlLXdpZHRoJywgMClcbiAgfVxuXG4gIHNldCBkZWZhdWx0R3JvdXBMYWJlbFN0cm9rZVdpZHRoICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWdyb3VwLWxhYmVsLXN0cm9rZS13aWR0aCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRHcm91cExhYmVsRm9udFNpemUgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZm9udC1zaXplJywgMTApXG4gIH1cblxuICBzZXQgZGVmYXVsdEdyb3VwTGFiZWxGb250U2l6ZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1sYWJlbC1mb250LXNpemUnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0R3JvdXBMYWJlbEZvbnRGYW1pbHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtZ3JvdXAtbGFiZWwtZm9udC1mYW1pbHknLCAnc2VyaWYnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRHcm91cExhYmVsRm9udEZhbWlseSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ncm91cC1sYWJlbC1mb250LWZhbWlseScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlWCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLXgnLCAwKVxuICB9XG5cbiAgc2V0IGRlZmF1bHROb2RlWCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLXgnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0Tm9kZVkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS15JywgMClcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZVkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS15JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVXaWR0aCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLXdpZHRoJywgMTApXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVXaWR0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLXdpZHRoJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVIZWlnaHQgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1oZWlnaHQnLCAxMClcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZUhlaWdodCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLWhlaWdodCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlRmlsbENvbG9yICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtZmlsbC1jb2xvcicsICcjZmZmJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZUZpbGxDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLWZpbGwtY29sb3InLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0Tm9kZUZpbGxPcGFjaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtZmlsbC1vcGFjaXR5JywgMSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZUZpbGxPcGFjaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtZmlsbC1vcGFjaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVTdHJva2VDb2xvciAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLXN0cm9rZS1jb2xvcicsICcjMDAwJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZVN0cm9rZUNvbG9yICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtc3Ryb2tlLWNvbG9yJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVTdHJva2VPcGFjaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtc3Ryb2tlLW9wYWNpdHknLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHROb2RlU3Ryb2tlT3BhY2l0eSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLXN0cm9rZS1vcGFjaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVTdHJva2VXaWR0aCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLXN0cm9rZS13aWR0aCcsIDEpXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVTdHJva2VXaWR0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1ub2RlLXN0cm9rZS13aWR0aCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlVHlwZSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLXR5cGUnLCAnY2lyY2xlJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZVR5cGUgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS10eXBlJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVWaXNpYmlsaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtdmlzaWJpbGl0eScsIHRydWUpXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVWaXNpYmlsaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtdmlzaWJpbGl0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlTGFiZWwgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1sYWJlbCcsICcnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHROb2RlTGFiZWwgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS1sYWJlbCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlTGFiZWxGaWxsQ29sb3IgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1sYWJlbC1maWxsLWNvbG9yJywgJyMwMDAnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHROb2RlTGFiZWxGaWxsQ29sb3IgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS1sYWJlbC1maWxsLWNvbG9yJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVMYWJlbEZpbGxPcGFjaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtbGFiZWwtZmlsbC1vcGFjaXR5JywgMSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0Tm9kZUxhYmVsRmlsbE9wYWNpdHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS1sYWJlbC1maWxsLW9wYWNpdHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0Tm9kZUxhYmVsU3Ryb2tlQ29sb3IgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1sYWJlbC1zdHJva2UtY29sb3InLCAnI2ZmZicpXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVMYWJlbFN0cm9rZUNvbG9yICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtbGFiZWwtc3Ryb2tlLWNvbG9yJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVMYWJlbFN0cm9rZU9wYWNpdHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1sYWJlbC1zdHJva2Utb3BhY2l0eScsIDEpXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVMYWJlbFN0cm9rZU9wYWNpdHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS1sYWJlbC1zdHJva2Utb3BhY2l0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHROb2RlTGFiZWxTdHJva2VXaWR0aCAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1ub2RlLWxhYmVsLXN0cm9rZS13aWR0aCcsIDApXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVMYWJlbFN0cm9rZVdpZHRoICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtbGFiZWwtc3Ryb2tlLXdpZHRoJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVMYWJlbEZvbnRTaXplICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LW5vZGUtbGFiZWwtZm9udC1zaXplJywgMTApXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVMYWJlbEZvbnRTaXplICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LW5vZGUtbGFiZWwtZm9udC1zaXplJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdE5vZGVMYWJlbEZvbnRGYW1pbHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbm9kZS1sYWJlbC1mb250LWZhbWlseScsICdzZXJpZicpXG4gIH1cblxuICBzZXQgZGVmYXVsdE5vZGVMYWJlbEZvbnRGYW1pbHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbm9kZS1sYWJlbC1mb250LWZhbWlseScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rU3Ryb2tlQ29sb3IgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay1zdHJva2UtY29sb3InLCAnIzAwMCcpXG4gIH1cblxuICBzZXQgZGVmYXVsdExpbmtTdHJva2VDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLXN0cm9rZS1jb2xvcicsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rU3Ryb2tlT3BhY2l0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1saW5rLXN0cm9rZS1vcGFjaXR5JywgMSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0TGlua1N0cm9rZU9wYWNpdHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbGluay1zdHJva2Utb3BhY2l0eScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rU3Ryb2tlV2lkdGggKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay1zdHJva2Utd2lkdGgnLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rU3Ryb2tlV2lkdGggKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbGluay1zdHJva2Utd2lkdGgnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua1R5cGUgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay10eXBlJywgJ2xpbmUnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rVHlwZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLXR5cGUnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua1Zpc2liaWxpdHkgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay12aXNpYmlsaXR5JywgdHJ1ZSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0TGlua1Zpc2liaWxpdHkgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbGluay12aXNpYmlsaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdExpbmtTb3VyY2VNYXJrZXJTaGFwZSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1saW5rLXNvdXJjZS1tYXJrZXItc2hhcGUnLCAnbm9uZScpXG4gIH1cblxuICBzZXQgZGVmYXVsdExpbmtTb3VyY2VNYXJrZXJTaGFwZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLXNvdXJjZS1tYXJrZXItc2hhcGUnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua1NvdXJjZU1hcmtlclNpemUgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay1zb3VyY2UtbWFya2VyLXNpemUnLCA1KVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rU291cmNlTWFya2VyU2l6ZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLXNvdXJjZS1tYXJrZXItc2l6ZScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rVGFyZ2V0TWFya2VyU2hhcGUgKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay10YXJnZXQtbWFya2VyLXNoYXBlJywgJ25vbmUnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rVGFyZ2V0TWFya2VyU2hhcGUgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbGluay10YXJnZXQtbWFya2VyLXNoYXBlJywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdExpbmtUYXJnZXRNYXJrZXJTaXplICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstdGFyZ2V0LW1hcmtlci1zaXplJywgNSlcbiAgfVxuXG4gIHNldCBkZWZhdWx0TGlua1RhcmdldE1hcmtlclNpemUgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQtbGluay10YXJnZXQtbWFya2VyLXNpemUnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua0xhYmVsICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstbGFiZWwnLCAnJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0TGlua0xhYmVsICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWxpbmstbGFiZWwnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua0xhYmVsRmlsbENvbG9yICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstbGFiZWwtZmlsbC1jb2xvcicsICcjMDAwJylcbiAgfVxuXG4gIHNldCBkZWZhdWx0TGlua0xhYmVsRmlsbENvbG9yICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWxpbmstbGFiZWwtZmlsbC1jb2xvcicsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rTGFiZWxGaWxsT3BhY2l0eSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1saW5rLWxhYmVsLWZpbGwtb3BhY2l0eScsIDEpXG4gIH1cblxuICBzZXQgZGVmYXVsdExpbmtMYWJlbEZpbGxPcGFjaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWxpbmstbGFiZWwtZmlsbC1vcGFjaXR5JywgdmFsdWUpXG4gIH1cblxuICBnZXQgZGVmYXVsdExpbmtMYWJlbFN0cm9rZUNvbG9yICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstbGFiZWwtc3Ryb2tlLWNvbG9yJywgJyNmZmYnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rTGFiZWxTdHJva2VDb2xvciAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLWxhYmVsLXN0cm9rZS1jb2xvcicsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rTGFiZWxTdHJva2VPcGFjaXR5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstbGFiZWwtc3Ryb2tlLW9wYWNpdHknLCAxKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rTGFiZWxTdHJva2VPcGFjaXR5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWxpbmstbGFiZWwtc3Ryb2tlLW9wYWNpdHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkZWZhdWx0TGlua0xhYmVsU3Ryb2tlV2lkdGggKCkge1xuICAgIHJldHVybiBnZXR0ZXIodGhpcywgJ2RlZmF1bHQtbGluay1sYWJlbC1zdHJva2Utd2lkdGgnLCAwKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rTGFiZWxTdHJva2VXaWR0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLWxhYmVsLXN0cm9rZS13aWR0aCcsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rTGFiZWxGb250U2l6ZSAoKSB7XG4gICAgcmV0dXJuIGdldHRlcih0aGlzLCAnZGVmYXVsdC1saW5rLWxhYmVsLWZvbnQtc2l6ZScsIDEwKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rTGFiZWxGb250U2l6ZSAodmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGVmYXVsdC1saW5rLWxhYmVsLWZvbnQtc2l6ZScsIHZhbHVlKVxuICB9XG5cbiAgZ2V0IGRlZmF1bHRMaW5rTGFiZWxGb250RmFtaWx5ICgpIHtcbiAgICByZXR1cm4gZ2V0dGVyKHRoaXMsICdkZWZhdWx0LWxpbmstbGFiZWwtZm9udC1mYW1pbHknLCAnc2VyaWYnKVxuICB9XG5cbiAgc2V0IGRlZmF1bHRMaW5rTGFiZWxGb250RmFtaWx5ICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkZWZhdWx0LWxpbmstbGFiZWwtZm9udC1mYW1pbHknLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBkYXRhICgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZXMuZ2V0KHRoaXMpLm9yaWdpbmFsRGF0YVxuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2VnLXJlbmRlcmVyJywgRWdSZW5kZXJlckVsZW1lbnQpXG4iXSwic291cmNlUm9vdCI6IiJ9