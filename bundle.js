!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=98)}([function(t,e,n){"use strict";var r="http://www.w3.org/1999/xhtml",o={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},i=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),o.hasOwnProperty(e)?{space:o[e],local:t}:t};var a=function(t){var e=i(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r&&e.documentElement.namespaceURI===r?e.createElement(t):e.createElementNS(n,t)}})(e)};function u(){}var s=function(t){return null==t?u:function(){return this.querySelector(t)}};function c(){return[]}var l=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},f=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var d=document.documentElement;if(!d.matches){var h=d.webkitMatchesSelector||d.msMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector;f=function(t){return function(){return h.call(this,t)}}}}var p=f,y=function(t){return new Array(t.length)};function g(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var v="$";function m(t,e,n,r,o,i){for(var a,u=0,s=e.length,c=i.length;u<c;++u)(a=e[u])?(a.__data__=i[u],r[u]=a):n[u]=new g(t,i[u]);for(;u<s;++u)(a=e[u])&&(o[u]=a)}function b(t,e,n,r,o,i,a){var u,s,c,l={},f=e.length,d=i.length,h=new Array(f);for(u=0;u<f;++u)(s=e[u])&&(h[u]=c=v+a.call(s,s.__data__,u,e),c in l?o[u]=s:l[c]=s);for(u=0;u<d;++u)(s=l[c=v+a.call(t,i[u],u,i)])?(r[u]=s,s.__data__=i[u],l[c]=null):n[u]=new g(t,i[u]);for(u=0;u<f;++u)(s=e[u])&&l[h[u]]===s&&(o[u]=s)}function _(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var w=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t,e){return t.style.getPropertyValue(e)||w(t).getComputedStyle(t,null).getPropertyValue(e)}function x(t){return t.trim().split(/^|\s+/)}function k(t){return t.classList||new S(t)}function S(t){this._node=t,this._names=x(t.getAttribute("class")||"")}function M(t,e){for(var n=k(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function C(t,e){for(var n=k(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}S.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function A(){this.textContent=""}function P(){this.innerHTML=""}function T(){this.nextSibling&&this.parentNode.appendChild(this)}function N(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function O(){return null}function D(){var t=this.parentNode;t&&t.removeChild(this)}function R(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function I(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var L={},F=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(L={mouseenter:"mouseover",mouseleave:"mouseout"}));function B(t,e,n){return t=U(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function U(t,e,n){return function(r){var o=F;F=r;try{t.call(this,this.__data__,e,n)}finally{F=o}}}function j(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function z(t,e,n){var r=L.hasOwnProperty(t.type)?B:U;return function(o,i,a){var u,s=this.__on,c=r(e,i,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=n),void(u.value=e);this.addEventListener(t.type,c,n),u={type:t.type,name:t.name,value:e,listener:c,capture:n},s?s.push(u):this.__on=[u]}}function V(t,e,n,r){var o=F;t.sourceEvent=F,F=t;try{return e.apply(n,r)}finally{F=o}}function W(t,e,n){var r=w(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}var Y=[null];function q(t,e){this._groups=t,this._parents=e}function H(){return new q([[document.documentElement]],Y)}q.prototype=H.prototype={constructor:q,select:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a,u=e[o],c=u.length,l=r[o]=new Array(c),f=0;f<c;++f)(i=u[f])&&(a=t.call(i,i.__data__,f,u))&&("__data__"in i&&(a.__data__=i.__data__),l[f]=a);return new q(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=l(t));for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var a,u=e[i],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),o.push(a));return new q(r,o)},filter:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a=e[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new q(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),c=-1,this.each(function(t){h[++c]=t}),h;var n=e?b:m,r=this._parents,o=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=o.length,a=new Array(i),u=new Array(i),s=new Array(i),c=0;c<i;++c){var l=r[c],f=o[c],d=f.length,h=t.call(l,l&&l.__data__,c,r),p=h.length,y=u[c]=new Array(p),g=a[c]=new Array(p);n(l,f,y,g,s[c]=new Array(d),h,e);for(var v,_,w=0,E=0;w<p;++w)if(v=y[w]){for(w>=E&&(E=w+1);!(_=g[E])&&++E<p;);v._next=_||null}}return(a=new q(a,r))._enter=u,a._exit=s,a},enter:function(){return new q(this._enter||this._groups.map(y),this._parents)},exit:function(){return new q(this._exit||this._groups.map(y),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=e[u],l=n[u],f=c.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(d[h]=s);for(;u<r;++u)a[u]=e[u];return new q(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=_);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,u=n[i],s=u.length,c=o[i]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(e)}return new q(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],a=0,u=i.length;a<u;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):E(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=x(t+"");if(arguments.length<2){for(var r=k(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?M:C)(this,t)}}:e?function(t){return function(){M(this,t)}}:function(t){return function(){C(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?A:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?P:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(T)},lower:function(){return this.each(N)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?O:"function"==typeof e?e:s(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(D)},clone:function(t){return this.select(t?I:R)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),a=i.length;if(!(arguments.length<2)){for(u=e?z:j,null==n&&(n=!1),r=0;r<a;++r)this.each(u(i[r],e,n));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((o=i[r]).type===s.type&&o.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return W(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return W(this,t,e)}})(t,e))}};var G=H,X=function(t){return"string"==typeof t?new q([[document.querySelector(t)]],[document.documentElement]):new q([[t]],Y)},K=function(t){return X(a(t).call(document.documentElement))},$=0;function Q(){return new Z}function Z(){this._="@"+(++$).toString(36)}Z.prototype=Q.prototype={constructor:Z,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var J=function(){for(var t,e=F;t=e.sourceEvent;)e=t;return e},tt=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]},et=function(t){var e=J();return e.changedTouches&&(e=e.changedTouches[0]),tt(t,e)},nt=function(t){return"string"==typeof t?new q([document.querySelectorAll(t)],[document.documentElement]):new q([null==t?[]:t],Y)},rt=function(t,e,n){arguments.length<3&&(n=e,e=J().changedTouches);for(var r,o=0,i=e?e.length:0;o<i;++o)if((r=e[o]).identifier===n)return tt(t,r);return null},ot=function(t,e){null==e&&(e=J().touches);for(var n=0,r=e?e.length:0,o=new Array(r);n<r;++n)o[n]=tt(t,e[n]);return o};n.d(e,"b",function(){return K}),n.d(e,"c",function(){return a}),n.d(e,"f",function(){return Q}),n.d(e,"g",function(){return p}),n.d(e,"h",function(){return et}),n.d(e,"i",function(){return i}),n.d(e,"j",function(){return o}),n.d(e,"a",function(){return tt}),n.d(e,"k",function(){return X}),n.d(e,"l",function(){return nt}),n.d(e,"m",function(){return G}),n.d(e,"n",function(){return s}),n.d(e,"o",function(){return l}),n.d(e,"p",function(){return E}),n.d(e,"q",function(){return rt}),n.d(e,"r",function(){return ot}),n.d(e,"s",function(){return w}),n.d(e,"e",function(){return F}),n.d(e,"d",function(){return V})},function(t,e,n){"use strict";var r=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function o(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function i(){}var a="\\s*([+-]?\\d+)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",s="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",c=/^#([0-9a-f]{3})$/,l=/^#([0-9a-f]{6})$/,f=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),d=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),h=new RegExp("^rgba\\("+[a,a,a,u]+"\\)$"),p=new RegExp("^rgba\\("+[s,s,s,u]+"\\)$"),y=new RegExp("^hsl\\("+[u,s,s]+"\\)$"),g=new RegExp("^hsla\\("+[u,s,s,u]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function m(t){var e;return t=(t+"").trim().toLowerCase(),(e=c.exec(t))?new x((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=l.exec(t))?b(parseInt(e[1],16)):(e=f.exec(t))?new x(e[1],e[2],e[3],1):(e=d.exec(t))?new x(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=h.exec(t))?_(e[1],e[2],e[3],e[4]):(e=p.exec(t))?_(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=y.exec(t))?S(e[1],e[2]/100,e[3]/100,1):(e=g.exec(t))?S(e[1],e[2]/100,e[3]/100,e[4]):v.hasOwnProperty(t)?b(v[t]):"transparent"===t?new x(NaN,NaN,NaN,0):null}function b(t){return new x(t>>16&255,t>>8&255,255&t,1)}function _(t,e,n,r){return r<=0&&(t=e=n=NaN),new x(t,e,n,r)}function w(t){return t instanceof i||(t=m(t)),t?new x((t=t.rgb()).r,t.g,t.b,t.opacity):new x}function E(t,e,n,r){return 1===arguments.length?w(t):new x(t,e,n,null==r?1:r)}function x(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function k(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function S(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new C(t,e,n,r)}function M(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof C)return new C(t.h,t.s,t.l,t.opacity);if(t instanceof i||(t=m(t)),!t)return new C;if(t instanceof C)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),a=Math.max(e,n,r),u=NaN,s=a-o,c=(a+o)/2;return s?(u=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=c<.5?a+o:2-a-o,u*=60):s=c>0&&c<1?0:u,new C(u,s,c,t.opacity)}(t):new C(t,e,n,null==r?1:r)}function C(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function A(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}r(i,m,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),r(x,E,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new x(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new x(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+k(this.r)+k(this.g)+k(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),r(C,M,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new C(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new C(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new x(A(t>=240?t-240:t+120,o,r),A(t,o,r),A(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var P=Math.PI/180,T=180/Math.PI,N=.96422,O=1,D=.82521,R=4/29,I=6/29,L=3*I*I,F=I*I*I;function B(t){if(t instanceof z)return new z(t.l,t.a,t.b,t.opacity);if(t instanceof K){if(isNaN(t.h))return new z(t.l,0,0,t.opacity);var e=t.h*P;return new z(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof x||(t=w(t));var n,r,o=q(t.r),i=q(t.g),a=q(t.b),u=V((.2225045*o+.7168786*i+.0606169*a)/O);return o===i&&i===a?n=r=u:(n=V((.4360747*o+.3850649*i+.1430804*a)/N),r=V((.0139322*o+.0971045*i+.7141733*a)/D)),new z(116*u-16,500*(n-u),200*(u-r),t.opacity)}function U(t,e){return new z(t,0,0,null==e?1:e)}function j(t,e,n,r){return 1===arguments.length?B(t):new z(t,e,n,null==r?1:r)}function z(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function V(t){return t>F?Math.pow(t,1/3):t/L+R}function W(t){return t>I?t*t*t:L*(t-R)}function Y(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function q(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function H(t){if(t instanceof K)return new K(t.h,t.c,t.l,t.opacity);if(t instanceof z||(t=B(t)),0===t.a&&0===t.b)return new K(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*T;return new K(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function G(t,e,n,r){return 1===arguments.length?H(t):new K(n,e,t,null==r?1:r)}function X(t,e,n,r){return 1===arguments.length?H(t):new K(t,e,n,null==r?1:r)}function K(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}r(z,j,o(i,{brighter:function(t){return new z(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new z(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new x(Y(3.1338561*(e=N*W(e))-1.6168667*(t=O*W(t))-.4906146*(n=D*W(n))),Y(-.9787684*e+1.9161415*t+.033454*n),Y(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),r(K,X,o(i,{brighter:function(t){return new K(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new K(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return B(this).rgb()}}));var $=-.14861,Q=1.78277,Z=-.29227,J=-.90649,tt=1.97294,et=tt*J,nt=tt*Q,rt=Q*Z-J*$;function ot(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof it)return new it(t.h,t.s,t.l,t.opacity);t instanceof x||(t=w(t));var e=t.r/255,n=t.g/255,r=t.b/255,o=(rt*r+et*e-nt*n)/(rt+et-nt),i=r-o,a=(tt*(n-o)-Z*i)/J,u=Math.sqrt(a*a+i*i)/(tt*o*(1-o)),s=u?Math.atan2(a,i)*T-120:NaN;return new it(s<0?s+360:s,u,o,t.opacity)}(t):new it(t,e,n,null==r?1:r)}function it(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}r(it,ot,o(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new it(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new it(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*P,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),o=Math.sin(t);return new x(255*(e+n*($*r+Q*o)),255*(e+n*(Z*r+J*o)),255*(e+n*(tt*r)),this.opacity)}})),n.d(e,"a",function(){return m}),n.d(e,"h",function(){return E}),n.d(e,"e",function(){return M}),n.d(e,"f",function(){return j}),n.d(e,"d",function(){return X}),n.d(e,"g",function(){return G}),n.d(e,"c",function(){return U}),n.d(e,"b",function(){return ot})},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(1);function o(t,e,n,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*e+(4-6*i+3*a)*n+(1+3*t+3*i-3*a)*r+a*o)/6}var i=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],u=r>0?t[r-1]:2*i-a,s=r<e-1?t[r+2]:2*a-i;return o((n-r/e)*e,u,i,a,s)}},a=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],u=t[(r+1)%e],s=t[(r+2)%e];return o((n-r/e)*e,i,a,u,s)}},u=function(t){return function(){return t}};function s(t,e){return function(n){return t+n*e}}function c(t,e){var n=e-t;return n?s(t,n>180||n<-180?n-360*Math.round(n/360):n):u(isNaN(t)?e:t)}function l(t){return 1==(t=+t)?f:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):u(isNaN(e)?n:e)}}function f(t,e){var n=e-t;return n?s(t,n):u(isNaN(t)?e:t)}var d=function t(e){var n=l(e);function o(t,e){var o=n((t=Object(r.h)(t)).r,(e=Object(r.h)(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),u=f(t.opacity,e.opacity);return function(e){return t.r=o(e),t.g=i(e),t.b=a(e),t.opacity=u(e),t+""}}return o.gamma=t,o}(1);function h(t){return function(e){var n,o,i=e.length,a=new Array(i),u=new Array(i),s=new Array(i);for(n=0;n<i;++n)o=Object(r.h)(e[n]),a[n]=o.r||0,u[n]=o.g||0,s[n]=o.b||0;return a=t(a),u=t(u),s=t(s),o.opacity=1,function(t){return o.r=a(t),o.g=u(t),o.b=s(t),o+""}}}var p=h(i),y=h(a),g=function(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),a=new Array(r);for(n=0;n<o;++n)i[n]=C(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<o;++n)a[n]=i[n](t);return a}},v=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},m=function(t,e){return e-=t=+t,function(n){return t+e*n}},b=function(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=C(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}},_=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,w=new RegExp(_.source,"g");var E,x,k,S,M=function(t,e){var n,r,o,i=_.lastIndex=w.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=_.exec(t))&&(r=w.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:m(n,r)})),i=w.lastIndex;return i<e.length&&(o=e.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},C=function(t,e){var n,o=typeof e;return null==e||"boolean"===o?u(e):("number"===o?m:"string"===o?(n=Object(r.a)(e))?(e=n,d):M:e instanceof r.a?d:e instanceof Date?v:Array.isArray(e)?g:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?b:m)(t,e)},A=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},P=function(t,e){var n=c(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},T=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},N=180/Math.PI,O={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},D=function(t,e,n,r,o,i){var a,u,s;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,s/=u),t*r<e*n&&(t=-t,e=-e,s=-s,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*N,skewX:Math.atan(s)*N,scaleX:a,scaleY:u}};function R(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var u=[],s=[];return i=t(i),a=t(a),function(t,r,o,i,a,u){if(t!==o||r!==i){var s=a.push("translate(",null,e,null,n);u.push({i:s-4,x:m(t,o)},{i:s-2,x:m(r,i)})}else(o||i)&&a.push("translate("+o+e+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,u,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:m(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,a.rotate,u,s),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:m(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,a.skewX,u,s),function(t,e,n,r,i,a){if(t!==n||e!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:m(t,n)},{i:u-2,x:m(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,s),i=a=null,function(t){for(var e,n=-1,r=s.length;++n<r;)u[(e=s[n]).i]=e.x(t);return u.join("")}}}var I=R(function(t){return"none"===t?O:(E||(E=document.createElement("DIV"),x=document.documentElement,k=document.defaultView),E.style.transform=t,t=k.getComputedStyle(x.appendChild(E),null).getPropertyValue("transform"),x.removeChild(E),t=t.slice(7,-1).split(","),D(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),L=R(function(t){return null==t?O:(S||(S=document.createElementNS("http://www.w3.org/2000/svg","g")),S.setAttribute("transform",t),(t=S.transform.baseVal.consolidate())?(t=t.matrix,D(t.a,t.b,t.c,t.d,t.e,t.f)):O)},", ",")",")"),F=Math.SQRT2;function B(t){return((t=Math.exp(t))+1/t)/2}var U=function(t,e){var n,r,o=t[0],i=t[1],a=t[2],u=e[0],s=e[1],c=e[2],l=u-o,f=s-i,d=l*l+f*f;if(d<1e-12)r=Math.log(c/a)/F,n=function(t){return[o+t*l,i+t*f,a*Math.exp(F*t*r)]};else{var h=Math.sqrt(d),p=(c*c-a*a+4*d)/(2*a*2*h),y=(c*c-a*a-4*d)/(2*c*2*h),g=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(y*y+1)-y);r=(v-g)/F,n=function(t){var e=t*r,n=B(g),u=a/(2*h)*(n*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(F*e+g)-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[o+u*l,i+u*f,a*n/B(F*e+g)]}}return n.duration=1e3*r,n};function j(t){return function(e,n){var o=t((e=Object(r.e)(e)).h,(n=Object(r.e)(n)).h),i=f(e.s,n.s),a=f(e.l,n.l),u=f(e.opacity,n.opacity);return function(t){return e.h=o(t),e.s=i(t),e.l=a(t),e.opacity=u(t),e+""}}}var z=j(c),V=j(f);function W(t,e){var n=f((t=Object(r.f)(t)).l,(e=Object(r.f)(e)).l),o=f(t.a,e.a),i=f(t.b,e.b),a=f(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=o(e),t.b=i(e),t.opacity=a(e),t+""}}function Y(t){return function(e,n){var o=t((e=Object(r.d)(e)).h,(n=Object(r.d)(n)).h),i=f(e.c,n.c),a=f(e.l,n.l),u=f(e.opacity,n.opacity);return function(t){return e.h=o(t),e.c=i(t),e.l=a(t),e.opacity=u(t),e+""}}}var q=Y(c),H=Y(f);function G(t){return function e(n){function o(e,o){var i=t((e=Object(r.b)(e)).h,(o=Object(r.b)(o)).h),a=f(e.s,o.s),u=f(e.l,o.l),s=f(e.opacity,o.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=u(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,o.gamma=e,o}(1)}var X=G(c),K=G(f);function $(t,e){for(var n=0,r=e.length-1,o=e[0],i=new Array(r<0?0:r);n<r;)i[n]=t(o,o=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return i[e](t-e)}}var Q=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n};n.d(e,"a",function(){return C}),n.d(e,"b",function(){return g}),n.d(e,"c",function(){return i}),n.d(e,"d",function(){return a}),n.d(e,"g",function(){return v}),n.d(e,"h",function(){return A}),n.d(e,"m",function(){return P}),n.d(e,"o",function(){return m}),n.d(e,"p",function(){return b}),n.d(e,"t",function(){return T}),n.d(e,"u",function(){return M}),n.d(e,"v",function(){return I}),n.d(e,"w",function(){return L}),n.d(e,"x",function(){return U}),n.d(e,"q",function(){return d}),n.d(e,"r",function(){return p}),n.d(e,"s",function(){return y}),n.d(e,"k",function(){return z}),n.d(e,"l",function(){return V}),n.d(e,"n",function(){return W}),n.d(e,"i",function(){return q}),n.d(e,"j",function(){return H}),n.d(e,"e",function(){return X}),n.d(e,"f",function(){return K}),n.d(e,"y",function(){return $}),n.d(e,"z",function(){return Q})},function(t,e,n){"use strict";t.exports=function(t){for(var e=arguments.length-1,n="Minified React error #"+t+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(t,e,n){"use strict";var r=n(14);t.exports=r},function(t,e,n){"use strict";var r=n(4),o=n(22),i=n(66),a=(n(2),o.ID_ATTRIBUTE_NAME),u=i,s="__reactInternalInstance$"+Math.random().toString(36).slice(2);function c(t,e){return 1===t.nodeType&&t.getAttribute(a)===String(e)||8===t.nodeType&&t.nodeValue===" react-text: "+e+" "||8===t.nodeType&&t.nodeValue===" react-empty: "+e+" "}function l(t){for(var e;e=t._renderedComponent;)t=e;return t}function f(t,e){var n=l(t);n._hostNode=e,e[s]=n}function d(t,e){if(!(t._flags&u.hasCachedChildNodes)){var n=t._renderedChildren,o=e.firstChild;t:for(var i in n)if(n.hasOwnProperty(i)){var a=n[i],s=l(a)._domID;if(0!==s){for(;null!==o;o=o.nextSibling)if(c(o,s)){f(a,o);continue t}r("32",s)}}t._flags|=u.hasCachedChildNodes}}function h(t){if(t[s])return t[s];for(var e,n,r=[];!t[s];){if(r.push(t),!t.parentNode)return null;t=t.parentNode}for(;t&&(n=t[s]);t=r.pop())e=n,r.length&&d(n,t);return e}var p={getClosestInstanceFromNode:h,getInstanceFromNode:function(t){var e=h(t);return null!=e&&e._hostNode===t?e:null},getNodeFromInstance:function(t){if(void 0===t._hostNode&&r("33"),t._hostNode)return t._hostNode;for(var e=[];!t._hostNode;)e.push(t),t._hostParent||r("34"),t=t._hostParent;for(;e.length;t=e.pop())d(t,t._hostNode);return t._hostNode},precacheChildNodes:d,precacheNode:f,uncacheNode:function(t){var e=t._hostNode;e&&(delete e[s],t._hostNode=null)}};t.exports=p},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},function(t,e,n){"use strict";var r={value:function(){}};function o(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new i(r)}function i(t){this._=t}function a(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function u(t,e,n){for(var o=0,i=t.length;o<i;++o)if(t[o].name===e){t[o]=r,t=t.slice(0,o).concat(t.slice(o+1));break}return null!=n&&t.push({name:e,value:n}),t}i.prototype=o.prototype={constructor:i,on:function(t,e){var n,r=this._,o=function(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=u(r[n],t.name,e);else if(null==e)for(n in r)r[n]=u(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=a(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new i(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var s=o;n.d(e,"a",function(){return s})},function(t,e,n){"use strict";t.exports={debugTool:null}},function(t,e,n){"use strict";var r,o,i=0,a=0,u=0,s=1e3,c=0,l=0,f=0,d="object"==typeof performance&&performance.now?performance:Date,h="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function p(){return l||(h(y),l=d.now()+f)}function y(){l=0}function g(){this._call=this._time=this._next=null}function v(t,e,n){var r=new g;return r.restart(t,e,n),r}function m(){p(),++i;for(var t,e=r;e;)(t=l-e._time)>=0&&e._call.call(null,t),e=e._next;--i}function b(){l=(c=d.now())+f,i=a=0;try{m()}finally{i=0,function(){var t,e,n=r,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:r=e);o=t,w(i)}(),l=0}}function _(){var t=d.now(),e=t-c;e>s&&(f-=e,c=t)}function w(t){i||(a&&(a=clearTimeout(a)),t-l>24?(t<1/0&&(a=setTimeout(b,t-d.now()-f)),u&&(u=clearInterval(u))):(u||(c=d.now(),u=setInterval(_,s)),i=1,h(b)))}g.prototype=v.prototype={constructor:g,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?p():+n)+(null==e?0:+e),this._next||o===this||(o?o._next=this:r=this,o=this),this._call=t,this._time=n,w()},stop:function(){this._call&&(this._call=null,this._time=1/0,w())}};var E=function(t,e,n){var r=new g;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},x=function(t,e,n){var r=new g,o=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?p():+n,r.restart(function i(a){a+=o,r.restart(i,o+=e,n),t(a)},e,n),r)};n.d(e,"b",function(){return p}),n.d(e,"d",function(){return v}),n.d(e,"e",function(){return m}),n.d(e,"c",function(){return E}),n.d(e,"a",function(){return x})},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(70),a=n(18),u=n(71),s=n(23),c=n(34),l=(n(2),[]),f=0,d=i.getPooled(),h=!1,p=null;function y(){w.ReactReconcileTransaction&&p||r("123")}var g=[{initialize:function(){this.dirtyComponentsLength=l.length},close:function(){this.dirtyComponentsLength!==l.length?(l.splice(0,this.dirtyComponentsLength),_()):l.length=0}},{initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}}];function v(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=i.getPooled(),this.reconcileTransaction=w.ReactReconcileTransaction.getPooled(!0)}function m(t,e){return t._mountOrder-e._mountOrder}function b(t){var e=t.dirtyComponentsLength;e!==l.length&&r("124",e,l.length),l.sort(m),f++;for(var n=0;n<e;n++){var o,i=l[n],a=i._pendingCallbacks;if(i._pendingCallbacks=null,u.logTopLevelRenders){var c=i;i._currentElement.type.isReactTopLevelWrapper&&(c=i._renderedComponent),o="React update: "+c.getName(),console.time(o)}if(s.performUpdateIfNecessary(i,t.reconcileTransaction,f),o&&console.timeEnd(o),a)for(var d=0;d<a.length;d++)t.callbackQueue.enqueue(a[d],i.getPublicInstance())}}o(v.prototype,c,{getTransactionWrappers:function(){return g},destructor:function(){this.dirtyComponentsLength=null,i.release(this.callbackQueue),this.callbackQueue=null,w.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(t,e,n){return c.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,t,e,n)}}),a.addPoolingTo(v);var _=function(){for(;l.length||h;){if(l.length){var t=v.getPooled();t.perform(b,null,t),v.release(t)}if(h){h=!1;var e=d;d=i.getPooled(),e.notifyAll(),i.release(e)}}};var w={ReactReconcileTransaction:null,batchedUpdates:function(t,e,n,r,o,i){return y(),p.batchedUpdates(t,e,n,r,o,i)},enqueueUpdate:function t(e){y(),p.isBatchingUpdates?(l.push(e),null==e._updateBatchNumber&&(e._updateBatchNumber=f+1)):p.batchedUpdates(t,e)},flushBatchedUpdates:_,injection:{injectReconcileTransaction:function(t){t||r("126"),w.ReactReconcileTransaction=t},injectBatchingStrategy:function(t){t||r("127"),"function"!=typeof t.batchedUpdates&&r("128"),"boolean"!=typeof t.isBatchingUpdates&&r("129"),p=t}},asap:function(t,e){p.isBatchingUpdates||r("125"),d.enqueue(t,e),h=!0}};t.exports=w},function(t,e,n){"use strict";t.exports={current:null}},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(14),a=(n(5),["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"]),u={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function s(t,e,n,r){this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n;var o=this.constructor.Interface;for(var a in o)if(o.hasOwnProperty(a)){0;var u=o[a];u?this[a]=u(n):"target"===a?this.target=r:this[a]=n[a]}var s=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=s?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}r(s.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;for(var n=0;n<a.length;n++)this[a[n]]=null}}),s.Interface=u,s.augmentClass=function(t,e){var n=function(){};n.prototype=this.prototype;var i=new n;r(i,t.prototype),t.prototype=i,t.prototype.constructor=t,t.Interface=r({},this.Interface,e),t.augmentClass=this.augmentClass,o.addPoolingTo(t,o.fourArgumentPooler)},o.addPoolingTo(s,o.fourArgumentPooler),t.exports=s},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(11),a=Object(o.a)("start","end","interrupt"),u=[],s=0,c=1,l=2,f=3,d=4,h=5,p=6,y=function(t,e,n,r,o,y){var g=t.__transition;if(g){if(n in g)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function a(h){var y,g,v,m;if(n.state!==c)return s();for(y in o)if((m=o[y]).name===n.name){if(m.state===f)return Object(i.c)(a);m.state===d?(m.state=p,m.timer.stop(),m.on.call("interrupt",t,t.__data__,m.index,m.group),delete o[y]):+y<e&&(m.state=p,m.timer.stop(),delete o[y])}if(Object(i.c)(function(){n.state===f&&(n.state=d,n.timer.restart(u,n.delay,n.time),u(h))}),n.state=l,n.on.call("start",t,t.__data__,n.index,n.group),n.state===l){for(n.state=f,r=new Array(v=n.tween.length),y=0,g=-1;y<v;++y)(m=n.tween[y].value.call(t,t.__data__,n.index,n.group))&&(r[++g]=m);r.length=g+1}}function u(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=h,1),i=-1,a=r.length;++i<a;)r[i].call(null,o);n.state===h&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=p,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=Object(i.d)(function(t){n.state=c,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:o,on:a,tween:u,time:y.time,delay:y.delay,duration:y.duration,ease:y.ease,timer:null,state:s})};function g(t,e){var n=m(t,e);if(n.state>s)throw new Error("too late; already scheduled");return n}function v(t,e){var n=m(t,e);if(n.state>l)throw new Error("too late; already started");return n}function m(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var b=function(t,e){var n,r,o,i=t.__transition,a=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>l&&n.state<h,n.state=p,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete t.__transition}},_=n(3);function w(t,e,n){var r=t._id;return t.each(function(){var t=v(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return m(t,r).value[e]}}var E=n(1),x=function(t,e){var n;return("number"==typeof e?_.o:e instanceof E.a?_.q:(n=Object(E.a)(e))?(e=n,_.q):_.u)(t,e)};var k=r.m.prototype.constructor;var S=0;function M(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function C(t){return Object(r.m)().transition(t)}function A(){return++S}var P=r.m.prototype;M.prototype=C.prototype={constructor:M,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(r.n)(t));for(var o=this._groups,i=o.length,a=new Array(i),u=0;u<i;++u)for(var s,c,l=o[u],f=l.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=l[h])&&(c=t.call(s,s.__data__,h,l))&&("__data__"in s&&(c.__data__=s.__data__),d[h]=c,y(d[h],e,n,h,d,m(s,n)));return new M(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Object(r.o)(t));for(var o=this._groups,i=o.length,a=[],u=[],s=0;s<i;++s)for(var c,l=o[s],f=l.length,d=0;d<f;++d)if(c=l[d]){for(var h,p=t.call(c,c.__data__,d,l),g=m(c,n),v=0,b=p.length;v<b;++v)(h=p[v])&&y(h,e,n,v,p,g);a.push(p),u.push(c)}return new M(a,u,e,n)},filter:function(t){"function"!=typeof t&&(t=Object(r.g)(t));for(var e=this._groups,n=e.length,o=new Array(n),i=0;i<n;++i)for(var a,u=e[i],s=u.length,c=o[i]=[],l=0;l<s;++l)(a=u[l])&&t.call(a,a.__data__,l,u)&&c.push(a);return new M(o,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=e[u],l=n[u],f=c.length,d=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(d[h]=s);for(;u<r;++u)a[u]=e[u];return new M(a,this._parents,this._name,this._id)},selection:function(){return new k(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=A(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=m(a,e);y(a,t,n,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new M(r,this._parents,t,n)},call:P.call,nodes:P.nodes,node:P.node,size:P.size,empty:P.empty,each:P.each,on:function(t,e){var n=this._id;return arguments.length<2?m(this.node(),n).on.on(t):this.each(function(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?g:v;return function(){var a=i(this,t),u=a.on;u!==r&&(o=(r=u).copy()).on(e,n),a.on=o}}(n,t,e))},attr:function(t,e){var n=Object(r.i)(t),o="transform"===n?_.w:x;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,o,i;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===o?i:i=e(r=a,o=u);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,o,i;return function(){var a,u=n(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===o?i:i=e(r=a,o=u);this.removeAttribute(t)}})(n,o,w(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,o;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?o:o=e(r=i,n)}}:function(t,e,n){var r,o;return function(){var i=this.getAttribute(t);return i===n?null:i===r?o:o=e(r=i,n)}})(n,o,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var o=Object(r.i)(t);return this.tween(n,(o.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(o,e))},style:function(t,e,n){var o="transform"==(t+="")?_.v:x;return null==e?this.styleTween(t,function(t,e){var n,o,i;return function(){var a=Object(r.p)(this,t),u=(this.style.removeProperty(t),Object(r.p)(this,t));return a===u?null:a===n&&u===o?i:i=e(n=a,o=u)}}(t,o)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var o,i,a;return function(){var u=Object(r.p)(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=Object(r.p)(this,t)),u===s?null:u===o&&s===i?a:a=e(o=u,i=s)}}(t,o,w(this,"style."+t,e)):function(t,e,n){var o,i;return function(){var a=Object(r.p)(this,t);return a===n?null:a===o?i:i=e(o=a,n)}}(t,o,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,o=e.apply(r,arguments);return o&&function(e){r.style.setProperty(t,o(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(w(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=m(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var o=v(this,t),i=o.tween;if(i!==n)for(var a=0,u=(r=n=i).length;a<u;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}o.tween=r}}:function(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=v(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:e,value:n},s=0,c=o.length;s<c;++s)if(o[s].name===e){o[s]=u;break}s===c&&o.push(u)}i.tween=o}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){g(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){g(this,t).delay=e}})(e,t)):m(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){v(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){v(this,t).duration=e}})(e,t)):m(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){v(this,t).ease=e}}(e,t)):m(this.node(),e).ease}};var T={time:null,delay:0,duration:250,ease:n(25).o};function N(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return T.time=Object(i.b)(),T;return n}r.m.prototype.interrupt=function(t){return this.each(function(){b(this,t)})},r.m.prototype.transition=function(t){var e,n;t instanceof M?(e=t._id,t=t._name):(e=A(),(n=T).time=Object(i.b)(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,a=0;a<o;++a)for(var u,s=r[a],c=s.length,l=0;l<c;++l)(u=s[l])&&y(u,t,e,l,s,n||N(u,e));return new M(r,this._parents,t,e)};var O=[null],D=function(t,e){var n,r,o=t.__transition;if(o)for(r in e=null==e?null:e+"",o)if((n=o[r]).state>c&&n.name===e)return new M([[t]],O,e,+r);return null};n.d(e,"c",function(){return C}),n.d(e,"a",function(){return D}),n.d(e,"b",function(){return b})},function(t,e,n){"use strict";var r=n(9),o=n(0);function i(){o.e.stopImmediatePropagation()}var a=function(){o.e.preventDefault(),o.e.stopImmediatePropagation()},u=function(t){var e=t.document.documentElement,n=Object(o.k)(t).on("dragstart.drag",a,!0);"onselectstart"in e?n.on("selectstart.drag",a,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function s(t,e){var n=t.document.documentElement,r=Object(o.k)(t).on("dragstart.drag",null);e&&(r.on("click.drag",a,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var c=function(t){return function(){return t}};function l(t,e,n,r,o,i,a,u,s,c){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=o,this.x=i,this.y=a,this.dx=u,this.dy=s,this._=c}function f(){return!o.e.button}function d(){return this.parentNode}function h(t){return null==t?{x:o.e.x,y:o.e.y}:t}function p(){return"ontouchstart"in this}l.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var y=function(){var t,e,n,y,g=f,v=d,m=h,b=p,_={},w=Object(r.a)("start","drag","end"),E=0,x=0;function k(t){t.on("mousedown.drag",S).filter(b).on("touchstart.drag",A).on("touchmove.drag",P).on("touchend.drag touchcancel.drag",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function S(){if(!y&&g.apply(this,arguments)){var r=N("mouse",v.apply(this,arguments),o.h,this,arguments);r&&(Object(o.k)(o.e.view).on("mousemove.drag",M,!0).on("mouseup.drag",C,!0),u(o.e.view),i(),n=!1,t=o.e.clientX,e=o.e.clientY,r("start"))}}function M(){if(a(),!n){var r=o.e.clientX-t,i=o.e.clientY-e;n=r*r+i*i>x}_.mouse("drag")}function C(){Object(o.k)(o.e.view).on("mousemove.drag mouseup.drag",null),s(o.e.view,n),a(),_.mouse("end")}function A(){if(g.apply(this,arguments)){var t,e,n=o.e.changedTouches,r=v.apply(this,arguments),a=n.length;for(t=0;t<a;++t)(e=N(n[t].identifier,r,o.q,this,arguments))&&(i(),e("start"))}}function P(){var t,e,n=o.e.changedTouches,r=n.length;for(t=0;t<r;++t)(e=_[n[t].identifier])&&(a(),e("drag"))}function T(){var t,e,n=o.e.changedTouches,r=n.length;for(y&&clearTimeout(y),y=setTimeout(function(){y=null},500),t=0;t<r;++t)(e=_[n[t].identifier])&&(i(),e("end"))}function N(t,e,n,r,i){var a,u,s,c=n(e,t),f=w.copy();if(Object(o.d)(new l(k,"beforestart",a,t,E,c[0],c[1],0,0,f),function(){return null!=(o.e.subject=a=m.apply(r,i))&&(u=a.x-c[0]||0,s=a.y-c[1]||0,!0)}))return function d(h){var p,y=c;switch(h){case"start":_[t]=d,p=E++;break;case"end":delete _[t],--E;case"drag":c=n(e,t),p=E}Object(o.d)(new l(k,h,a,t,p,c[0]+u,c[1]+s,c[0]-y[0],c[1]-y[1],f),f.apply,f,[h,r,i])}}return k.filter=function(t){return arguments.length?(g="function"==typeof t?t:c(!!t),k):g},k.container=function(t){return arguments.length?(v="function"==typeof t?t:c(t),k):v},k.subject=function(t){return arguments.length?(m="function"==typeof t?t:c(t),k):m},k.touchable=function(t){return arguments.length?(b="function"==typeof t?t:c(!!t),k):b},k.on=function(){var t=w.on.apply(w,arguments);return t===w?k:t},k.clickDistance=function(t){return arguments.length?(x=(t=+t)*t,k):Math.sqrt(x)},k};n.d(e,"a",function(){return y}),n.d(e,"b",function(){return u}),n.d(e,"c",function(){return s})},function(t,e,n){"use strict";var r=n(4),o=(n(2),function(t){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,t),e}return new this(t)}),i=function(t){t instanceof this||r("25"),t.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(t)},a=o,u={addPoolingTo:function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||a,n.poolSize||(n.poolSize=10),n.release=i,n},oneArgumentPooler:o,twoArgumentPooler:function(t,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,t,e),n}return new this(t,e)},threeArgumentPooler:function(t,e,n){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,t,e,n),r}return new this(t,e,n)},fourArgumentPooler:function(t,e,n,r){if(this.instancePool.length){var o=this.instancePool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}};t.exports=u},function(t,e,n){"use strict";var r=n(9),o=n(17),i=n(3),a=n(0),u=n(16),s=function(t){return function(){return t}};function c(t,e,n){this.k=t,this.x=e,this.y=n}c.prototype={constructor:c,scale:function(t){return 1===t?this:new c(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new c(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var l=new c(1,0,0);function f(t){return t.__zoom||l}function d(){a.e.stopImmediatePropagation()}f.prototype=c.prototype;var h=function(){a.e.preventDefault(),a.e.stopImmediatePropagation()};function p(){return!a.e.button}function y(){var t,e,n=this;return n instanceof SVGElement?(t=(n=n.ownerSVGElement||n).width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function g(){return this.__zoom||l}function v(){return-a.e.deltaY*(a.e.deltaMode?120:1)/500}function m(){return"ontouchstart"in this}function b(t,e,n){var r=t.invertX(e[0][0])-n[0][0],o=t.invertX(e[1][0])-n[1][0],i=t.invertY(e[0][1])-n[0][1],a=t.invertY(e[1][1])-n[1][1];return t.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),a>i?(i+a)/2:Math.min(0,i)||Math.max(0,a))}var _=function(){var t,e,n=p,f=y,_=b,w=v,E=m,x=[0,1/0],k=[[-1/0,-1/0],[1/0,1/0]],S=250,M=i.x,C=[],A=Object(r.a)("start","zoom","end"),P=500,T=150,N=0;function O(t){t.property("__zoom",g).on("wheel.zoom",U).on("mousedown.zoom",j).on("dblclick.zoom",z).filter(E).on("touchstart.zoom",V).on("touchmove.zoom",W).on("touchend.zoom touchcancel.zoom",Y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function D(t,e){return(e=Math.max(x[0],Math.min(x[1],e)))===t.k?t:new c(e,t.x,t.y)}function R(t,e,n){var r=e[0]-n[0]*t.k,o=e[1]-n[1]*t.k;return r===t.x&&o===t.y?t:new c(t.k,r,o)}function I(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function L(t,e,n){t.on("start.zoom",function(){F(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){F(this,arguments).end()}).tween("zoom",function(){var t=arguments,r=F(this,t),o=f.apply(this,t),i=n||I(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),u=this.__zoom,s="function"==typeof e?e.apply(this,t):e,l=M(u.invert(i).concat(a/u.k),s.invert(i).concat(a/s.k));return function(t){if(1===t)t=s;else{var e=l(t),n=a/e[2];t=new c(n,i[0]-e[0]*n,i[1]-e[1]*n)}r.zoom(null,t)}})}function F(t,e){for(var n,r=0,o=C.length;r<o;++r)if((n=C[r]).that===t)return n;return new B(t,e)}function B(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=f.apply(t,e)}function U(){if(n.apply(this,arguments)){var t=F(this,arguments),e=this.__zoom,r=Math.max(x[0],Math.min(x[1],e.k*Math.pow(2,w.apply(this,arguments)))),o=Object(a.h)(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=e.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(e.k===r)return;t.mouse=[o,e.invert(o)],Object(u.b)(this),t.start()}h(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},T),t.zoom("mouse",_(R(D(e,r),t.mouse[0],t.mouse[1]),t.extent,k))}}function j(){if(!e&&n.apply(this,arguments)){var t=F(this,arguments),r=Object(a.k)(a.e.view).on("mousemove.zoom",function(){if(h(),!t.moved){var e=a.e.clientX-s,n=a.e.clientY-c;t.moved=e*e+n*n>N}t.zoom("mouse",_(R(t.that.__zoom,t.mouse[0]=Object(a.h)(t.that),t.mouse[1]),t.extent,k))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),Object(o.c)(a.e.view,t.moved),h(),t.end()},!0),i=Object(a.h)(this),s=a.e.clientX,c=a.e.clientY;Object(o.b)(a.e.view),d(),t.mouse=[i,this.__zoom.invert(i)],Object(u.b)(this),t.start()}}function z(){if(n.apply(this,arguments)){var t=this.__zoom,e=Object(a.h)(this),r=t.invert(e),o=t.k*(a.e.shiftKey?.5:2),i=_(R(D(t,o),e,r),f.apply(this,arguments),k);h(),S>0?Object(a.k)(this).transition().duration(S).call(L,i,e):Object(a.k)(this).call(O.transform,i)}}function V(){if(n.apply(this,arguments)){var e,r,o,i,s=F(this,arguments),c=a.e.changedTouches,l=c.length;for(d(),r=0;r<l;++r)o=c[r],i=[i=Object(a.q)(this,c,o.identifier),this.__zoom.invert(i),o.identifier],s.touch0?s.touch1||(s.touch1=i):(s.touch0=i,e=!0);if(t&&(t=clearTimeout(t),!s.touch1))return s.end(),void((i=Object(a.k)(this).on("dblclick.zoom"))&&i.apply(this,arguments));e&&(t=setTimeout(function(){t=null},P),Object(u.b)(this),s.start())}}function W(){var e,n,r,o,i=F(this,arguments),u=a.e.changedTouches,s=u.length;for(h(),t&&(t=clearTimeout(t)),e=0;e<s;++e)n=u[e],r=Object(a.q)(this,u,n.identifier),i.touch0&&i.touch0[2]===n.identifier?i.touch0[0]=r:i.touch1&&i.touch1[2]===n.identifier&&(i.touch1[0]=r);if(n=i.that.__zoom,i.touch1){var c=i.touch0[0],l=i.touch0[1],f=i.touch1[0],d=i.touch1[1],p=(p=f[0]-c[0])*p+(p=f[1]-c[1])*p,y=(y=d[0]-l[0])*y+(y=d[1]-l[1])*y;n=D(n,Math.sqrt(p/y)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!i.touch0)return;r=i.touch0[0],o=i.touch0[1]}i.zoom("touch",_(R(n,r,o),i.extent,k))}function Y(){var t,n,r=F(this,arguments),o=a.e.changedTouches,i=o.length;for(d(),e&&clearTimeout(e),e=setTimeout(function(){e=null},P),t=0;t<i;++t)n=o[t],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return O.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",g),t!==n?L(t,e):n.interrupt().each(function(){F(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()})},O.scaleBy=function(t,e){O.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},O.scaleTo=function(t,e){O.transform(t,function(){var t=f.apply(this,arguments),n=this.__zoom,r=I(t),o=n.invert(r),i="function"==typeof e?e.apply(this,arguments):e;return _(R(D(n,i),r,o),t,k)})},O.translateBy=function(t,e,n){O.transform(t,function(){return _(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),f.apply(this,arguments),k)})},O.translateTo=function(t,e,n){O.transform(t,function(){var t=f.apply(this,arguments),r=this.__zoom,o=I(t);return _(l.translate(o[0],o[1]).scale(r.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,k)})},B.prototype={start:function(){return 1==++this.active&&(this.index=C.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(C.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Object(a.d)(new function(t,e,n){this.target=t,this.type=e,this.transform=n}(O,t,this.that.__zoom),A.apply,A,[t,this.that,this.args])}},O.wheelDelta=function(t){return arguments.length?(w="function"==typeof t?t:s(+t),O):w},O.filter=function(t){return arguments.length?(n="function"==typeof t?t:s(!!t),O):n},O.touchable=function(t){return arguments.length?(E="function"==typeof t?t:s(!!t),O):E},O.extent=function(t){return arguments.length?(f="function"==typeof t?t:s([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),O):f},O.scaleExtent=function(t){return arguments.length?(x[0]=+t[0],x[1]=+t[1],O):[x[0],x[1]]},O.translateExtent=function(t){return arguments.length?(k[0][0]=+t[0][0],k[1][0]=+t[1][0],k[0][1]=+t[0][1],k[1][1]=+t[1][1],O):[[k[0][0],k[0][1]],[k[1][0],k[1][1]]]},O.constrain=function(t){return arguments.length?(_=t,O):_},O.duration=function(t){return arguments.length?(S=+t,O):S},O.interpolate=function(t){return arguments.length?(M=t,O):M},O.on=function(){var t=A.on.apply(A,arguments);return t===A?O:t},O.clickDistance=function(t){return arguments.length?(N=(t=+t)*t,O):Math.sqrt(N)},O};n.d(e,"a",function(){return _}),n.d(e,"c",function(){return f}),n.d(e,"b",function(){return l})},function(t,e,n){"use strict";var r=n(40),o=n(59),i=n(102),a=n(107),u=n(21),s=n(108),c=n(114),l=n(115),f=n(120),d=u.createElement,h=u.createFactory,p=u.cloneElement,y=r,g={Children:{map:i.map,forEach:i.forEach,count:i.count,toArray:i.toArray,only:f},Component:o.Component,PureComponent:o.PureComponent,createElement:d,cloneElement:p,isValidElement:u.isValidElement,PropTypes:s,createClass:l,createFactory:h,createMixin:function(t){return t},DOM:a,version:c,__spread:y};t.exports=g},function(t,e,n){"use strict";var r=n(40),o=n(13),i=(n(33),n(62),Object.prototype.hasOwnProperty),a=n(63),u={key:!0,ref:!0,__self:!0,__source:!0};function s(t){return void 0!==t.ref}function c(t){return void 0!==t.key}var l=function(t,e,n,r,o,i,u){return{$$typeof:a,type:t,key:e,ref:n,props:u,_owner:i}};l.createElement=function(t,e,n){var r,a={},f=null,d=null;if(null!=e)for(r in s(e)&&(d=e.ref),c(e)&&(f=""+e.key),void 0===e.__self?null:e.__self,void 0===e.__source?null:e.__source,e)i.call(e,r)&&!u.hasOwnProperty(r)&&(a[r]=e[r]);var h=arguments.length-2;if(1===h)a.children=n;else if(h>1){for(var p=Array(h),y=0;y<h;y++)p[y]=arguments[y+2];0,a.children=p}if(t&&t.defaultProps){var g=t.defaultProps;for(r in g)void 0===a[r]&&(a[r]=g[r])}return l(t,f,d,0,0,o.current,a)},l.createFactory=function(t){var e=l.createElement.bind(null,t);return e.type=t,e},l.cloneAndReplaceKey=function(t,e){return l(t.type,e,t.ref,t._self,t._source,t._owner,t.props)},l.cloneElement=function(t,e,n){var a,f,d=r({},t.props),h=t.key,p=t.ref,y=(t._self,t._source,t._owner);if(null!=e)for(a in s(e)&&(p=e.ref,y=o.current),c(e)&&(h=""+e.key),t.type&&t.type.defaultProps&&(f=t.type.defaultProps),e)i.call(e,a)&&!u.hasOwnProperty(a)&&(void 0===e[a]&&void 0!==f?d[a]=f[a]:d[a]=e[a]);var g=arguments.length-2;if(1===g)d.children=n;else if(g>1){for(var v=Array(g),m=0;m<g;m++)v[m]=arguments[m+2];d.children=v}return l(t.type,h,p,0,0,y,d)},l.isValidElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===a},t.exports=l},function(t,e,n){"use strict";var r=n(4);n(2);function o(t,e){return(t&e)===e}var i={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(t){var e=i,n=t.Properties||{},a=t.DOMAttributeNamespaces||{},s=t.DOMAttributeNames||{},c=t.DOMPropertyNames||{},l=t.DOMMutationMethods||{};for(var f in t.isCustomAttribute&&u._isCustomAttributeFunctions.push(t.isCustomAttribute),n){u.properties.hasOwnProperty(f)&&r("48",f);var d=f.toLowerCase(),h=n[f],p={attributeName:d,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:o(h,e.MUST_USE_PROPERTY),hasBooleanValue:o(h,e.HAS_BOOLEAN_VALUE),hasNumericValue:o(h,e.HAS_NUMERIC_VALUE),hasPositiveNumericValue:o(h,e.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:o(h,e.HAS_OVERLOADED_BOOLEAN_VALUE)};if(p.hasBooleanValue+p.hasNumericValue+p.hasOverloadedBooleanValue<=1||r("50",f),s.hasOwnProperty(f)){var y=s[f];p.attributeName=y}a.hasOwnProperty(f)&&(p.attributeNamespace=a[f]),c.hasOwnProperty(f)&&(p.propertyName=c[f]),l.hasOwnProperty(f)&&(p.mutationMethod=l[f]),u.properties[f]=p}}},a=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",u={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:a,ATTRIBUTE_NAME_CHAR:a+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<u._isCustomAttributeFunctions.length;e++){if((0,u._isCustomAttributeFunctions[e])(t))return!0}return!1},injection:i};t.exports=u},function(t,e,n){"use strict";var r=n(130);n(10),n(5);function o(){r.attachRefs(this,this._currentElement)}var i={mountComponent:function(t,e,n,r,i,a){var u=t.mountComponent(e,n,r,i,a);return t._currentElement&&null!=t._currentElement.ref&&e.getReactMountReady().enqueue(o,t),u},getHostNode:function(t){return t.getHostNode()},unmountComponent:function(t,e){r.detachRefs(t,t._currentElement),t.unmountComponent(e)},receiveComponent:function(t,e,n,i){var a=t._currentElement;if(e!==a||i!==t._context){0;var u=r.shouldUpdateRefs(a,e);u&&r.detachRefs(t,a),t.receiveComponent(e,n,i),u&&t._currentElement&&null!=t._currentElement.ref&&n.getReactMountReady().enqueue(o,t)}},performUpdateIfNecessary:function(t,e,n){t._updateBatchNumber===n&&t.performUpdateIfNecessary(e)}};t.exports=i},function(t,e,n){"use strict";var r=n(48),o=n(36),i=n(49),a=n(75),u="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent);function s(t){if(u){var e=t.node,n=t.children;if(n.length)for(var r=0;r<n.length;r++)c(e,n[r],null);else null!=t.html?o(e,t.html):null!=t.text&&a(e,t.text)}}var c=i(function(t,e,n){11===e.node.nodeType||1===e.node.nodeType&&"object"===e.node.nodeName.toLowerCase()&&(null==e.node.namespaceURI||e.node.namespaceURI===r.html)?(s(e),t.insertBefore(e.node,n)):(t.insertBefore(e.node,n),s(e))});function l(){return this.node.nodeName}function f(t){return{node:t,children:[],html:null,text:null,toString:l}}f.insertTreeBefore=c,f.replaceChildWithTree=function(t,e){t.parentNode.replaceChild(e.node,t),s(e)},f.queueChild=function(t,e){u?t.children.push(e):t.node.appendChild(e.node)},f.queueHTML=function(t,e){u?t.html=e:o(t.node,e)},f.queueText=function(t,e){u?t.text=e:a(t.node,e)},t.exports=f},function(t,e,n){"use strict";function r(t){return+t}function o(t){return t*t}function i(t){return t*(2-t)}function a(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function u(t){return t*t*t}function s(t){return--t*t*t+1}function c(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}var l=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),f=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),d=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),h=Math.PI,p=h/2;function y(t){return 1-Math.cos(t*p)}function g(t){return Math.sin(t*p)}function v(t){return(1-Math.cos(h*t))/2}function m(t){return Math.pow(2,10*t-10)}function b(t){return 1-Math.pow(2,-10*t)}function _(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function w(t){return 1-Math.sqrt(1-t*t)}function E(t){return Math.sqrt(1- --t*t)}function x(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var k=4/11,S=6/11,M=8/11,C=.75,A=9/11,P=10/11,T=.9375,N=21/22,O=63/64,D=1/k/k;function R(t){return 1-I(1-t)}function I(t){return(t=+t)<k?D*t*t:t<M?D*(t-=S)*t+C:t<P?D*(t-=A)*t+T:D*(t-=N)*t+O}function L(t){return((t*=2)<=1?1-I(1-t):I(t-1)+1)/2}var F=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),B=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),U=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),j=2*Math.PI,z=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3),V=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3),W=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=j);function o(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return o.amplitude=function(e){return t(e,n*j)},o.period=function(n){return t(e,n)},o}(1,.3);n.d(e,"y",function(){return r}),n.d(e,"D",function(){return a}),n.d(e,"E",function(){return o}),n.d(e,"G",function(){return i}),n.d(e,"F",function(){return a}),n.d(e,"m",function(){return c}),n.d(e,"n",function(){return u}),n.d(e,"p",function(){return s}),n.d(e,"o",function(){return c}),n.d(e,"z",function(){return d}),n.d(e,"A",function(){return l}),n.d(e,"C",function(){return f}),n.d(e,"B",function(){return d}),n.d(e,"H",function(){return v}),n.d(e,"I",function(){return y}),n.d(e,"K",function(){return g}),n.d(e,"J",function(){return v}),n.d(e,"u",function(){return _}),n.d(e,"v",function(){return m}),n.d(e,"x",function(){return b}),n.d(e,"w",function(){return _}),n.d(e,"i",function(){return x}),n.d(e,"j",function(){return w}),n.d(e,"l",function(){return E}),n.d(e,"k",function(){return x}),n.d(e,"e",function(){return I}),n.d(e,"f",function(){return R}),n.d(e,"h",function(){return I}),n.d(e,"g",function(){return L}),n.d(e,"a",function(){return U}),n.d(e,"b",function(){return F}),n.d(e,"d",function(){return B}),n.d(e,"c",function(){return U}),n.d(e,"q",function(){return V}),n.d(e,"r",function(){return z}),n.d(e,"t",function(){return V}),n.d(e,"s",function(){return W})},function(t,e,n){"use strict";t.exports=function(t){for(var e=arguments.length-1,n="Minified React error #"+t+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(29),o=n(42),i=n(67),a=n(68),u=(n(5),r.getListener);function s(t,e,n){var r=function(t,e,n){var r=e.dispatchConfig.phasedRegistrationNames[n];return u(t,r)}(t,n,e);r&&(n._dispatchListeners=i(n._dispatchListeners,r),n._dispatchInstances=i(n._dispatchInstances,t))}function c(t){t&&t.dispatchConfig.phasedRegistrationNames&&o.traverseTwoPhase(t._targetInst,s,t)}function l(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst,n=e?o.getParentInstance(e):null;o.traverseTwoPhase(n,s,t)}}function f(t,e,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=u(t,r);o&&(n._dispatchListeners=i(n._dispatchListeners,o),n._dispatchInstances=i(n._dispatchInstances,t))}}function d(t){t&&t.dispatchConfig.registrationName&&f(t._targetInst,0,t)}var h={accumulateTwoPhaseDispatches:function(t){a(t,c)},accumulateTwoPhaseDispatchesSkipTarget:function(t){a(t,l)},accumulateDirectDispatches:function(t){a(t,d)},accumulateEnterLeaveDispatches:function(t,e,n,r){o.traverseEnterLeave(n,r,f,t,e)}};t.exports=h},function(t,e,n){"use strict";var r=n(4),o=n(41),i=n(42),a=n(43),u=n(67),s=n(68),c=(n(2),{}),l=null,f=function(t,e){t&&(i.executeDispatchesInOrder(t,e),t.isPersistent()||t.constructor.release(t))},d=function(t){return f(t,!0)},h=function(t){return f(t,!1)},p=function(t){return"."+t._rootNodeID};var y={injection:{injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},putListener:function(t,e,n){"function"!=typeof n&&r("94",e,typeof n);var i=p(t);(c[e]||(c[e]={}))[i]=n;var a=o.registrationNameModules[e];a&&a.didPutListener&&a.didPutListener(t,e,n)},getListener:function(t,e){var n=c[e];if(function(t,e,n){switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!function(t){return"button"===t||"input"===t||"select"===t||"textarea"===t}(e));default:return!1}}(e,t._currentElement.type,t._currentElement.props))return null;var r=p(t);return n&&n[r]},deleteListener:function(t,e){var n=o.registrationNameModules[e];n&&n.willDeleteListener&&n.willDeleteListener(t,e);var r=c[e];r&&delete r[p(t)]},deleteAllListeners:function(t){var e=p(t);for(var n in c)if(c.hasOwnProperty(n)&&c[n][e]){var r=o.registrationNameModules[n];r&&r.willDeleteListener&&r.willDeleteListener(t,n),delete c[n][e]}},extractEvents:function(t,e,n,r){for(var i,a=o.plugins,s=0;s<a.length;s++){var c=a[s];if(c){var l=c.extractEvents(t,e,n,r);l&&(i=u(i,l))}}return i},enqueueEvents:function(t){t&&(l=u(l,t))},processEventQueue:function(t){var e=l;l=null,s(e,t?d:h),l&&r("95"),a.rethrowCaughtError()},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=y},function(t,e,n){"use strict";var r=n(15),o=n(44),i={view:function(t){if(t.view)return t.view;var e=o(t);if(e.window===e)return e;var n=e.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(t){return t.detail||0}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r={remove:function(t){t._reactInternalInstance=void 0},get:function(t){return t._reactInternalInstance},has:function(t){return void 0!==t._reactInternalInstance},set:function(t,e){t._reactInternalInstance=e}};t.exports=r},function(t,e){},function(t,e,n){"use strict";var r=n(61);t.exports=r},function(t,e,n){"use strict";var r=n(4),o=(n(2),{}),i={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(t,e,n,o,i,a,u,s){var c,l;this.isInTransaction()&&r("27");try{this._isInTransaction=!0,c=!0,this.initializeAll(0),l=t.call(e,n,o,i,a,u,s),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(t){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(t){for(var e=this.transactionWrappers,n=t;n<e.length;n++){var r=e[n];try{this.wrapperInitData[n]=o,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===o)try{this.initializeAll(n+1)}catch(t){}}}},closeAll:function(t){this.isInTransaction()||r("28");for(var e=this.transactionWrappers,n=t;n<e.length;n++){var i,a=e[n],u=this.wrapperInitData[n];try{i=!0,u!==o&&a.close&&a.close.call(this,u),i=!1}finally{if(i)try{this.closeAll(n+1)}catch(t){}}}this.wrapperInitData.length=0}};t.exports=i},function(t,e,n){"use strict";var r=n(30),o=n(74),i={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:n(46),button:function(t){var e=t.button;return"which"in t?e:2===e?2:4===e?1:0},buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},pageX:function(t){return"pageX"in t?t.pageX:t.clientX+o.currentScrollLeft},pageY:function(t){return"pageY"in t?t.pageY:t.clientY+o.currentScrollTop}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r,o=n(8),i=n(48),a=/^[ \r\n\t\f]/,u=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,s=n(49)(function(t,e){if(t.namespaceURI!==i.svg||"innerHTML"in t)t.innerHTML=e;else{(r=r||document.createElement("div")).innerHTML="<svg>"+e+"</svg>";for(var n=r.firstChild;n.firstChild;)t.appendChild(n.firstChild)}});if(o.canUseDOM){var c=document.createElement("div");c.innerHTML=" ",""===c.innerHTML&&(s=function(t,e){if(t.parentNode&&t.parentNode.replaceChild(t,t),a.test(e)||"<"===e[0]&&u.test(e)){t.innerHTML=String.fromCharCode(65279)+e;var n=t.firstChild;1===n.data.length?t.removeChild(n):n.deleteData(0,1)}else t.innerHTML=e}),c=null}t.exports=s},function(t,e,n){"use strict";var r=/["'&<>]/;t.exports=function(t){return"boolean"==typeof t||"number"==typeof t?""+t:function(t){var e,n=""+t,o=r.exec(n);if(!o)return n;var i="",a=0,u=0;for(a=o.index;a<n.length;a++){switch(n.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#x27;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}u!==a&&(i+=n.substring(u,a)),u=a+1,i+=e}return u!==a?i+n.substring(u,a):i}(t)}},function(t,e,n){"use strict";var r,o=n(7),i=n(41),a=n(151),u=n(74),s=n(152),c=n(45),l={},f=!1,d=0,h={topAbort:"abort",topAnimationEnd:s("animationend")||"animationend",topAnimationIteration:s("animationiteration")||"animationiteration",topAnimationStart:s("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:s("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},p="_reactListenersID"+String(Math.random()).slice(2);var y=o({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(t){t.setHandleTopLevel(y.handleTopLevel),y.ReactEventListener=t}},setEnabled:function(t){y.ReactEventListener&&y.ReactEventListener.setEnabled(t)},isEnabled:function(){return!(!y.ReactEventListener||!y.ReactEventListener.isEnabled())},listenTo:function(t,e){for(var n=e,r=function(t){return Object.prototype.hasOwnProperty.call(t,p)||(t[p]=d++,l[t[p]]={}),l[t[p]]}(n),o=i.registrationNameDependencies[t],a=0;a<o.length;a++){var u=o[a];r.hasOwnProperty(u)&&r[u]||("topWheel"===u?c("wheel")?y.ReactEventListener.trapBubbledEvent("topWheel","wheel",n):c("mousewheel")?y.ReactEventListener.trapBubbledEvent("topWheel","mousewheel",n):y.ReactEventListener.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===u?c("scroll",!0)?y.ReactEventListener.trapCapturedEvent("topScroll","scroll",n):y.ReactEventListener.trapBubbledEvent("topScroll","scroll",y.ReactEventListener.WINDOW_HANDLE):"topFocus"===u||"topBlur"===u?(c("focus",!0)?(y.ReactEventListener.trapCapturedEvent("topFocus","focus",n),y.ReactEventListener.trapCapturedEvent("topBlur","blur",n)):c("focusin")&&(y.ReactEventListener.trapBubbledEvent("topFocus","focusin",n),y.ReactEventListener.trapBubbledEvent("topBlur","focusout",n)),r.topBlur=!0,r.topFocus=!0):h.hasOwnProperty(u)&&y.ReactEventListener.trapBubbledEvent(u,h[u],n),r[u]=!0)}},trapBubbledEvent:function(t,e,n){return y.ReactEventListener.trapBubbledEvent(t,e,n)},trapCapturedEvent:function(t,e,n){return y.ReactEventListener.trapCapturedEvent(t,e,n)},supportsEventPageXY:function(){if(!document.createEvent)return!1;var t=document.createEvent("MouseEvent");return null!=t&&"pageX"in t},ensureScrollValueMonitoring:function(){if(void 0===r&&(r=y.supportsEventPageXY()),!r&&!f){var t=u.refreshScrollValues;y.ReactEventListener.monitorScrollValue(t),f=!0}}});t.exports=y},function(t,e,n){"use strict";n.r(e),n.d(e,"Allocator",function(){return r});class r{constructor(t){this.module={alloc:t.cwrap("rust_alloc","number",["number"]),free:t.cwrap("rust_free","void",["number"])}}alloc(t){return this.module.alloc(t)}free(t){this.module.free(t)}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";var r=n(4),o=(n(2),null),i={};function a(){if(o)for(var t in i){var e=i[t],n=o.indexOf(t);if(n>-1||r("96",t),!c.plugins[n]){e.extractEvents||r("97",t),c.plugins[n]=e;var a=e.eventTypes;for(var s in a)u(a[s],e,s)||r("98",s,t)}}}function u(t,e,n){c.eventNameDispatchConfigs.hasOwnProperty(n)&&r("99",n),c.eventNameDispatchConfigs[n]=t;var o=t.phasedRegistrationNames;if(o){for(var i in o){if(o.hasOwnProperty(i))s(o[i],e,n)}return!0}return!!t.registrationName&&(s(t.registrationName,e,n),!0)}function s(t,e,n){c.registrationNameModules[t]&&r("100",t),c.registrationNameModules[t]=e,c.registrationNameDependencies[t]=e.eventTypes[n].dependencies}var c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(t){o&&r("101"),o=Array.prototype.slice.call(t),a()},injectEventPluginsByName:function(t){var e=!1;for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];i.hasOwnProperty(n)&&i[n]===o||(i[n]&&r("102",n),i[n]=o,e=!0)}e&&a()},getPluginModuleForEvent:function(t){var e=t.dispatchConfig;if(e.registrationName)return c.registrationNameModules[e.registrationName]||null;if(void 0!==e.phasedRegistrationNames){var n=e.phasedRegistrationNames;for(var r in n)if(n.hasOwnProperty(r)){var o=c.registrationNameModules[n[r]];if(o)return o}}return null},_resetEventPlugins:function(){for(var t in o=null,i)i.hasOwnProperty(t)&&delete i[t];c.plugins.length=0;var e=c.eventNameDispatchConfigs;for(var n in e)e.hasOwnProperty(n)&&delete e[n];var r=c.registrationNameModules;for(var a in r)r.hasOwnProperty(a)&&delete r[a]}};t.exports=c},function(t,e,n){"use strict";var r,o,i=n(4),a=n(43);n(2),n(5);function u(t,e,n,r){var o=t.type||"unknown-event";t.currentTarget=s.getNodeFromInstance(r),e?a.invokeGuardedCallbackWithCatch(o,n,t):a.invokeGuardedCallback(o,n,t),t.currentTarget=null}var s={isEndish:function(t){return"topMouseUp"===t||"topTouchEnd"===t||"topTouchCancel"===t},isMoveish:function(t){return"topMouseMove"===t||"topTouchMove"===t},isStartish:function(t){return"topMouseDown"===t||"topTouchStart"===t},executeDirectDispatch:function(t){var e=t._dispatchListeners,n=t._dispatchInstances;Array.isArray(e)&&i("103"),t.currentTarget=e?s.getNodeFromInstance(n):null;var r=e?e(t):null;return t.currentTarget=null,t._dispatchListeners=null,t._dispatchInstances=null,r},executeDispatchesInOrder:function(t,e){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)u(t,e,n[o],r[o]);else n&&u(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(t){var e=function(t){var e=t._dispatchListeners,n=t._dispatchInstances;if(Array.isArray(e)){for(var r=0;r<e.length&&!t.isPropagationStopped();r++)if(e[r](t,n[r]))return n[r]}else if(e&&e(t,n))return n;return null}(t);return t._dispatchInstances=null,t._dispatchListeners=null,e},hasDispatches:function(t){return!!t._dispatchListeners},getInstanceFromNode:function(t){return r.getInstanceFromNode(t)},getNodeFromInstance:function(t){return r.getNodeFromInstance(t)},isAncestor:function(t,e){return o.isAncestor(t,e)},getLowestCommonAncestor:function(t,e){return o.getLowestCommonAncestor(t,e)},getParentInstance:function(t){return o.getParentInstance(t)},traverseTwoPhase:function(t,e,n){return o.traverseTwoPhase(t,e,n)},traverseEnterLeave:function(t,e,n,r,i){return o.traverseEnterLeave(t,e,n,r,i)},injection:{injectComponentTree:function(t){r=t},injectTreeTraversal:function(t){o=t}}};t.exports=s},function(t,e,n){"use strict";var r=null;function o(t,e,n){try{e(n)}catch(t){null===r&&(r=t)}}var i={invokeGuardedCallback:o,invokeGuardedCallbackWithCatch:o,rethrowCaughtError:function(){if(r){var t=r;throw r=null,t}}};t.exports=i},function(t,e,n){"use strict";t.exports=function(t){var e=t.target||t.srcElement||window;return e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}},function(t,e,n){"use strict";var r,o=n(8);o.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""))
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */,t.exports=function(t,e){if(!o.canUseDOM||e&&!("addEventListener"in document))return!1;var n="on"+t,i=n in document;if(!i){var a=document.createElement("div");a.setAttribute(n,"return;"),i="function"==typeof a[n]}return!i&&r&&"wheel"===t&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},function(t,e,n){"use strict";var r={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function o(t){var e=this.nativeEvent;if(e.getModifierState)return e.getModifierState(t);var n=r[t];return!!n&&!!e[n]}t.exports=function(t){return o}},function(t,e,n){"use strict";var r=n(24),o=n(136),i=(n(6),n(10),n(49)),a=n(36),u=n(75);function s(t,e){return Array.isArray(e)&&(e=e[1]),e?e.nextSibling:t.firstChild}var c=i(function(t,e,n){t.insertBefore(e,n)});function l(t,e,n){r.insertTreeBefore(t,e,n)}function f(t,e,n){Array.isArray(e)?function(t,e,n,r){var o=e;for(;;){var i=o.nextSibling;if(c(t,o,r),o===n)break;o=i}}(t,e[0],e[1],n):c(t,e,n)}function d(t,e){if(Array.isArray(e)){var n=e[1];h(t,e=e[0],n),t.removeChild(n)}t.removeChild(e)}function h(t,e,n){for(;;){var r=e.nextSibling;if(r===n)break;t.removeChild(r)}}var p={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,replaceDelimitedText:function(t,e,n){var r=t.parentNode,o=t.nextSibling;o===e?n&&c(r,document.createTextNode(n),o):n?(u(o,n),h(r,o,e)):h(r,t,e)},processUpdates:function(t,e){for(var n=0;n<e.length;n++){var r=e[n];switch(r.type){case"INSERT_MARKUP":l(t,r.content,s(t,r.afterNode));break;case"MOVE_EXISTING":f(t,r.fromNode,s(t,r.afterNode));break;case"SET_MARKUP":a(t,r.content);break;case"TEXT_CONTENT":u(t,r.content);break;case"REMOVE_NODE":d(t,r.fromNode)}}}};t.exports=p},function(t,e,n){"use strict";t.exports={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"}},function(t,e,n){"use strict";t.exports=function(t){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,r,o){MSApp.execUnsafeLocalFunction(function(){return t(e,n,r,o)})}:t}},function(t,e,n){"use strict";var r=n(4),o=n(154),i=n(64)(n(20).isValidElement),a=(n(2),n(5),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0});function u(t){null!=t.checkedLink&&null!=t.valueLink&&r("87")}function s(t){u(t),(null!=t.value||null!=t.onChange)&&r("88")}function c(t){u(t),(null!=t.checked||null!=t.onChange)&&r("89")}var l={value:function(t,e,n){return!t[e]||a[t.type]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(t,e,n){return!t[e]||t.onChange||t.readOnly||t.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:i.func},f={};function d(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}var h={checkPropTypes:function(t,e,n){for(var r in l){if(l.hasOwnProperty(r))var i=l[r](e,r,t,"prop",null,o);if(i instanceof Error&&!(i.message in f)){f[i.message]=!0;d(n)}}},getValue:function(t){return t.valueLink?(s(t),t.valueLink.value):t.value},getChecked:function(t){return t.checkedLink?(c(t),t.checkedLink.value):t.checked},executeOnChange:function(t,e){return t.valueLink?(s(t),t.valueLink.requestChange(e.target.value)):t.checkedLink?(c(t),t.checkedLink.requestChange(e.target.checked)):t.onChange?t.onChange.call(void 0,e):void 0}};t.exports=h},function(t,e,n){"use strict";var r=n(4),o=(n(2),!1),i={replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(t){o&&r("104"),i.replaceNodeWithMarkup=t.replaceNodeWithMarkup,i.processChildrenUpdates=t.processChildrenUpdates,o=!0}}};t.exports=i},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=u(d);l=!0;for(var e=c.length;e;){for(s=c,c=[];++f<e;)s&&s[f].run();f=-1,e=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||u(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}t.exports=function(t,e){if(o(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(e,n[a])||!o(t[n[a]],e[n[a]]))return!1;return!0}},function(t,e,n){"use strict";t.exports=function(t,e){var n=null===t||!1===t,r=null===e||!1===e;if(n||r)return n===r;var o=typeof t,i=typeof e;return"string"===o||"number"===o?"string"===i||"number"===i:"object"===i&&t.type===e.type&&t.key===e.key}},function(t,e,n){"use strict";var r={escape:function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})},unescape:function(t){var e={"=0":"=","=2":":"};return(""+("."===t[0]&&"$"===t[1]?t.substring(2):t.substring(1))).replace(/(=0|=2)/g,function(t){return e[t]})}};t.exports=r},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(31)),i=(n(10),n(12));n(2),n(5);function a(t){i.enqueueUpdate(t)}function u(t,e){var n=o.get(t);return n||null}var s={isMounted:function(t){var e=o.get(t);return!!e&&!!e._renderedComponent},enqueueCallback:function(t,e,n){s.validateCallback(e,n);var r=u(t);if(!r)return null;r._pendingCallbacks?r._pendingCallbacks.push(e):r._pendingCallbacks=[e],a(r)},enqueueCallbackInternal:function(t,e){t._pendingCallbacks?t._pendingCallbacks.push(e):t._pendingCallbacks=[e],a(t)},enqueueForceUpdate:function(t){var e=u(t);e&&(e._pendingForceUpdate=!0,a(e))},enqueueReplaceState:function(t,e,n){var r=u(t);r&&(r._pendingStateQueue=[e],r._pendingReplaceState=!0,void 0!==n&&null!==n&&(s.validateCallback(n,"replaceState"),r._pendingCallbacks?r._pendingCallbacks.push(n):r._pendingCallbacks=[n]),a(r))},enqueueSetState:function(t,e){var n=u(t);n&&((n._pendingStateQueue||(n._pendingStateQueue=[])).push(e),a(n))},enqueueElementInternal:function(t,e,n){t._pendingElement=e,t._context=n,a(t)},validateCallback:function(t,e){t&&"function"!=typeof t&&r("122",e,function(t){var e=typeof t;if("object"!==e)return e;var n=t.constructor&&t.constructor.name||e,r=Object.keys(t);return r.length>0&&r.length<20?n+" (keys: "+r.join(", ")+")":n}(t))}};t.exports=s},function(t,e,n){"use strict";n(7);var r=n(14),o=(n(5),r);t.exports=o},function(t,e,n){"use strict";t.exports=function(t){var e,n=t.keyCode;return"charCode"in t?0===(e=t.charCode)&&13===n&&(e=13):e=n,e>=32||13===e?e:0}},function(t,e,n){"use strict";var r=n(26),o=n(40),i=n(60),a=(n(62),n(100));n(27),n(101);function u(t,e,n){this.props=t,this.context=e,this.refs=a,this.updater=n||i}function s(t,e,n){this.props=t,this.context=e,this.refs=a,this.updater=n||i}function c(){}u.prototype.isReactComponent={},u.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&r("85"),this.updater.enqueueSetState(this,t),e&&this.updater.enqueueCallback(this,e,"setState")},u.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this),t&&this.updater.enqueueCallback(this,t,"forceUpdate")},c.prototype=u.prototype,s.prototype=new c,s.prototype.constructor=s,o(s.prototype,u.prototype),s.prototype.isPureReactComponent=!0,t.exports={Component:u,PureComponent:s}},function(t,e,n){"use strict";n(33);var r={isMounted:function(t){return!1},enqueueCallback:function(t,e){},enqueueForceUpdate:function(t){},enqueueReplaceState:function(t,e){},enqueueSetState:function(t,e){}};t.exports=r},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";t.exports=!1},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;t.exports=r},function(t,e,n){"use strict";var r=n(109);t.exports=function(t){return r(t,!1)}},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";t.exports={hasCachedChildNodes:1}},function(t,e,n){"use strict";var r=n(4);n(2);t.exports=function(t,e){return null==e&&r("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}},function(t,e,n){"use strict";t.exports=function(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}},function(t,e,n){"use strict";var r=n(8),o=null;t.exports=function(){return!o&&r.canUseDOM&&(o="textContent"in document.documentElement?"textContent":"innerText"),o}},function(t,e,n){"use strict";var r=n(4);var o=n(18),i=(n(2),function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._callbacks=null,this._contexts=null,this._arg=e}return t.prototype.enqueue=function(t,e){this._callbacks=this._callbacks||[],this._callbacks.push(t),this._contexts=this._contexts||[],this._contexts.push(e)},t.prototype.notifyAll=function(){var t=this._callbacks,e=this._contexts,n=this._arg;if(t&&e){t.length!==e.length&&r("24"),this._callbacks=null,this._contexts=null;for(var o=0;o<t.length;o++)t[o].call(e[o],n);t.length=0,e.length=0}},t.prototype.checkpoint=function(){return this._callbacks?this._callbacks.length:0},t.prototype.rollback=function(t){this._callbacks&&this._contexts&&(this._callbacks.length=t,this._contexts.length=t)},t.prototype.reset=function(){this._callbacks=null,this._contexts=null},t.prototype.destructor=function(){this.reset()},t}());t.exports=o.addPoolingTo(i)},function(t,e,n){"use strict";t.exports={logTopLevelRenders:!1}},function(t,e,n){"use strict";var r=n(6);function o(t){var e=t.type,n=t.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===e||"radio"===e)}function i(t){return t._wrapperState.valueTracker}var a={_getTrackerFromNode:function(t){return i(r.getInstanceFromNode(t))},track:function(t){if(!i(t)){var e=r.getNodeFromInstance(t),n=o(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),u=""+e[n];e.hasOwnProperty(n)||"function"!=typeof a.get||"function"!=typeof a.set||(Object.defineProperty(e,n,{enumerable:a.enumerable,configurable:!0,get:function(){return a.get.call(this)},set:function(t){u=""+t,a.set.call(this,t)}}),function(t,e){t._wrapperState.valueTracker=e}(t,{getValue:function(){return u},setValue:function(t){u=""+t},stopTracking:function(){!function(t){delete t._wrapperState.valueTracker}(t),delete e[n]}}))}},updateValueIfChanged:function(t){if(!t)return!1;var e=i(t);if(!e)return a.track(t),!0;var n=e.getValue(),u=function(t){var e;return t&&(e=o(t)?""+t.checked:t.value),e}(r.getNodeFromInstance(t));return u!==n&&(e.setValue(u),!0)},stopTracking:function(t){var e=i(t);e&&e.stopTracking()}};t.exports=a},function(t,e,n){"use strict";var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=function(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!r[t.type]:"textarea"===e}},function(t,e,n){"use strict";var r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(t){r.currentScrollLeft=t.x,r.currentScrollTop=t.y}};t.exports=r},function(t,e,n){"use strict";var r=n(8),o=n(37),i=n(36),a=function(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e};r.canUseDOM&&("textContent"in document.documentElement||(a=function(t,e){3!==t.nodeType?i(t,o(e)):t.nodeValue=e})),t.exports=a},function(t,e,n){"use strict";t.exports=function(t){try{t.focus()}catch(t){}}},function(t,e,n){"use strict";var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(t){o.forEach(function(e){r[function(t,e){return t+e.charAt(0).toUpperCase()+e.substring(1)}(e,t)]=r[t]})});var i={isUnitlessNumber:r,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}};t.exports=i},function(t,e,n){"use strict";var r=n(22),o=(n(6),n(10),n(150)),i=(n(5),new RegExp("^["+r.ATTRIBUTE_NAME_START_CHAR+"]["+r.ATTRIBUTE_NAME_CHAR+"]*$")),a={},u={};function s(t){return!!u.hasOwnProperty(t)||!a.hasOwnProperty(t)&&(i.test(t)?(u[t]=!0,!0):(a[t]=!0,!1))}function c(t,e){return null==e||t.hasBooleanValue&&!e||t.hasNumericValue&&isNaN(e)||t.hasPositiveNumericValue&&e<1||t.hasOverloadedBooleanValue&&!1===e}var l={createMarkupForID:function(t){return r.ID_ATTRIBUTE_NAME+"="+o(t)},setAttributeForID:function(t,e){t.setAttribute(r.ID_ATTRIBUTE_NAME,e)},createMarkupForRoot:function(){return r.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(t){t.setAttribute(r.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(t,e){var n=r.properties.hasOwnProperty(t)?r.properties[t]:null;if(n){if(c(n,e))return"";var i=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&!0===e?i+'=""':i+"="+o(e)}return r.isCustomAttribute(t)?null==e?"":t+"="+o(e):null},createMarkupForCustomAttribute:function(t,e){return s(t)&&null!=e?t+"="+o(e):""},setValueForProperty:function(t,e,n){var o=r.properties.hasOwnProperty(e)?r.properties[e]:null;if(o){var i=o.mutationMethod;if(i)i(t,n);else{if(c(o,n))return void this.deleteValueForProperty(t,e);if(o.mustUseProperty)t[o.propertyName]=n;else{var a=o.attributeName,u=o.attributeNamespace;u?t.setAttributeNS(u,a,""+n):o.hasBooleanValue||o.hasOverloadedBooleanValue&&!0===n?t.setAttribute(a,""):t.setAttribute(a,""+n)}}}else if(r.isCustomAttribute(e))return void l.setValueForAttribute(t,e,n)},setValueForAttribute:function(t,e,n){s(e)&&(null==n?t.removeAttribute(e):t.setAttribute(e,""+n))},deleteValueForAttribute:function(t,e){t.removeAttribute(e)},deleteValueForProperty:function(t,e){var n=r.properties.hasOwnProperty(e)?r.properties[e]:null;if(n){var o=n.mutationMethod;if(o)o(t,void 0);else if(n.mustUseProperty){var i=n.propertyName;n.hasBooleanValue?t[i]=!1:t[i]=""}else t.removeAttribute(n.attributeName)}else r.isCustomAttribute(e)&&t.removeAttribute(e)}};t.exports=l},function(t,e,n){"use strict";var r=n(7),o=n(50),i=n(6),a=n(12),u=(n(5),!1);function s(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var t=this._currentElement.props,e=o.getValue(t);null!=e&&c(this,Boolean(t.multiple),e)}}function c(t,e,n){var r,o,a=i.getNodeFromInstance(t).options;if(e){for(r={},o=0;o<n.length;o++)r[""+n[o]]=!0;for(o=0;o<a.length;o++){var u=r.hasOwnProperty(a[o].value);a[o].selected!==u&&(a[o].selected=u)}}else{for(r=""+n,o=0;o<a.length;o++)if(a[o].value===r)return void(a[o].selected=!0);a.length&&(a[0].selected=!0)}}var l={getHostProps:function(t,e){return r({},e,{onChange:t._wrapperState.onChange,value:void 0})},mountWrapper:function(t,e){var n=o.getValue(e);t._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:e.defaultValue,listeners:null,onChange:function(t){var e=this._currentElement.props,n=o.executeOnChange(e,t);this._rootNodeID&&(this._wrapperState.pendingUpdate=!0);return a.asap(s,this),n}.bind(t),wasMultiple:Boolean(e.multiple)},void 0===e.value||void 0===e.defaultValue||u||(u=!0)},getSelectValueContext:function(t){return t._wrapperState.initialValue},postUpdateWrapper:function(t){var e=t._currentElement.props;t._wrapperState.initialValue=void 0;var n=t._wrapperState.wasMultiple;t._wrapperState.wasMultiple=Boolean(e.multiple);var r=o.getValue(e);null!=r?(t._wrapperState.pendingUpdate=!1,c(t,Boolean(e.multiple),r)):n!==Boolean(e.multiple)&&(null!=e.defaultValue?c(t,Boolean(e.multiple),e.defaultValue):c(t,Boolean(e.multiple),e.multiple?[]:""))}};t.exports=l},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(159),a=n(83),u=n(84),s=(n(160),n(2),n(5),function(t){this.construct(t)});function c(t,e){var n;if(null===t||!1===t)n=a.create(c);else if("object"==typeof t){var o=t,i=o.type;if("function"!=typeof i&&"string"!=typeof i){var l="";0,l+=function(t){if(t){var e=t.getName();if(e)return" Check the render method of `"+e+"`."}return""}(o._owner),r("130",null==i?i:typeof i,l)}"string"==typeof o.type?n=u.createInternalComponent(o):!function(t){return"function"==typeof t&&void 0!==t.prototype&&"function"==typeof t.prototype.mountComponent&&"function"==typeof t.prototype.receiveComponent}(o.type)?n=new s(o):(n=new o.type(o)).getHostNode||(n.getHostNode=n.getNativeNode)}else"string"==typeof t||"number"==typeof t?n=u.createInstanceForText(t):r("131",typeof t);return n._mountIndex=0,n._mountImage=null,n}o(s.prototype,i,{_instantiateReactComponent:c}),t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(20),i=(n(2),{HOST:0,COMPOSITE:1,EMPTY:2,getType:function(t){return null===t||!1===t?i.EMPTY:o.isValidElement(t)?"function"==typeof t.type?i.COMPOSITE:i.HOST:void r("26",t)}});t.exports=i},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r,o={injectEmptyComponentFactory:function(t){r=t}},i={create:function(t){return r(t)}};i.injection=o,t.exports=i},function(t,e,n){"use strict";var r=n(4),o=(n(2),null),i=null;var a={createInternalComponent:function(t){return o||r("111",t.type),new o(t)},createInstanceForText:function(t){return new i(t)},isTextComponent:function(t){return t instanceof i},injection:{injectGenericComponentClass:function(t){o=t},injectTextComponentClass:function(t){i=t}}};t.exports=a},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(161)),i=n(162),a=(n(2),n(55)),u=(n(5),"."),s=":";function c(t,e){return t&&"object"==typeof t&&null!=t.key?a.escape(t.key):e.toString(36)}t.exports=function(t,e,n){return null==t?0:function t(e,n,l,f){var d,h=typeof e;if("undefined"!==h&&"boolean"!==h||(e=null),null===e||"string"===h||"number"===h||"object"===h&&e.$$typeof===o)return l(f,e,""===n?u+c(e,0):n),1;var p=0,y=""===n?u:n+s;if(Array.isArray(e))for(var g=0;g<e.length;g++)p+=t(d=e[g],y+c(d,g),l,f);else{var v=i(e);if(v){var m,b=v.call(e);if(v!==e.entries)for(var _=0;!(m=b.next()).done;)p+=t(d=m.value,y+c(d,_++),l,f);else for(;!(m=b.next()).done;){var w=m.value;w&&(p+=t(d=w[1],y+a.escape(w[0])+s+c(d,0),l,f))}}else if("object"===h){var E=String(e);r("31","[object Object]"===E?"object with keys {"+Object.keys(e).join(", ")+"}":E,"")}}return p}(t,"",e,n)}},function(t,e,n){"use strict";var r,o,i,a,u,s,c,l=n(26),f=n(13);n(27),n(33);function d(t){var e=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+e.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=e.call(t);return r.test(o)}catch(t){return!1}}if("function"==typeof Array.from&&"function"==typeof Map&&d(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&d(Map.prototype.keys)&&"function"==typeof Set&&d(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&d(Set.prototype.keys)){var h=new Map,p=new Set;r=function(t,e){h.set(t,e)},o=function(t){return h.get(t)},i=function(t){h.delete(t)},a=function(){return Array.from(h.keys())},u=function(t){p.add(t)},s=function(t){p.delete(t)},c=function(){return Array.from(p.keys())}}else{var y={},g={},v=function(t){return"."+t},m=function(t){return parseInt(t.substr(1),10)};r=function(t,e){var n=v(t);y[n]=e},o=function(t){var e=v(t);return y[e]},i=function(t){var e=v(t);delete y[e]},a=function(){return Object.keys(y).map(m)},u=function(t){var e=v(t);g[e]=!0},s=function(t){var e=v(t);delete g[e]},c=function(){return Object.keys(g).map(m)}}var b=[];function _(t){var e=o(t);if(e){var n=e.childIDs;i(t),n.forEach(_)}}function w(t,e,n){return"\n    in "+(t||"Unknown")+(e?" (at "+e.fileName.replace(/^.*[\\\/]/,"")+":"+e.lineNumber+")":n?" (created by "+n+")":"")}function E(t){return null==t?"#empty":"string"==typeof t||"number"==typeof t?"#text":"string"==typeof t.type?t.type:t.type.displayName||t.type.name||"Unknown"}function x(t){var e,n=k.getDisplayName(t),r=k.getElement(t),o=k.getOwnerID(t);return o&&(e=k.getDisplayName(o)),w(n,r&&r._source,e)}var k={onSetChildren:function(t,e){var n=o(t);n||l("144"),n.childIDs=e;for(var r=0;r<e.length;r++){var i=e[r],a=o(i);a||l("140"),null==a.childIDs&&"object"==typeof a.element&&null!=a.element&&l("141"),a.isMounted||l("71"),null==a.parentID&&(a.parentID=t),a.parentID!==t&&l("142",i,a.parentID,t)}},onBeforeMountComponent:function(t,e,n){r(t,{element:e,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(t,e){var n=o(t);n&&n.isMounted&&(n.element=e)},onMountComponent:function(t){var e=o(t);e||l("144"),e.isMounted=!0,0===e.parentID&&u(t)},onUpdateComponent:function(t){var e=o(t);e&&e.isMounted&&e.updateCount++},onUnmountComponent:function(t){var e=o(t);e&&(e.isMounted=!1,0===e.parentID&&s(t));b.push(t)},purgeUnmountedComponents:function(){if(!k._preventPurging){for(var t=0;t<b.length;t++){_(b[t])}b.length=0}},isMounted:function(t){var e=o(t);return!!e&&e.isMounted},getCurrentStackAddendum:function(t){var e="";if(t){var n=E(t),r=t._owner;e+=w(n,t._source,r&&r.getName())}var o=f.current,i=o&&o._debugID;return e+=k.getStackAddendumByID(i)},getStackAddendumByID:function(t){for(var e="";t;)e+=x(t),t=k.getParentID(t);return e},getChildIDs:function(t){var e=o(t);return e?e.childIDs:[]},getDisplayName:function(t){var e=k.getElement(t);return e?E(e):null},getElement:function(t){var e=o(t);return e?e.element:null},getOwnerID:function(t){var e=k.getElement(t);return e&&e._owner?e._owner._debugID:null},getParentID:function(t){var e=o(t);return e?e.parentID:null},getSource:function(t){var e=o(t),n=e?e.element:null;return null!=n?n._source:null},getText:function(t){var e=k.getElement(t);return"string"==typeof e?e:"number"==typeof e?""+e:null},getUpdateCount:function(t){var e=o(t);return e?e.updateCount:0},getRootIDs:c,getRegisteredIDs:a,pushNonStandardWarningStack:function(t,e){if("function"==typeof console.reactStack){var n=[],r=f.current,o=r&&r._debugID;try{for(t&&n.push({name:o?k.getDisplayName(o):null,fileName:e?e.fileName:null,lineNumber:e?e.lineNumber:null});o;){var i=k.getElement(o),a=k.getParentID(o),u=k.getOwnerID(o),s=u?k.getDisplayName(u):null,c=i&&i._source;n.push({name:s,fileName:c?c.fileName:null,lineNumber:c?c.lineNumber:null}),o=a}}catch(t){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};t.exports=k},function(t,e,n){"use strict";var r=n(14),o={listen:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!1),{remove:function(){t.removeEventListener(e,n,!1)}}):t.attachEvent?(t.attachEvent("on"+e,n),{remove:function(){t.detachEvent("on"+e,n)}}):void 0},capture:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!0),{remove:function(){t.removeEventListener(e,n,!0)}}):{remove:r}},registerDefault:function(){}};t.exports=o},function(t,e,n){"use strict";var r=n(174),o=n(176),i=n(76),a=n(89);var u={hasSelectionCapabilities:function(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)},getSelectionInformation:function(){var t=a();return{focusedElem:t,selectionRange:u.hasSelectionCapabilities(t)?u.getSelection(t):null}},restoreSelection:function(t){var e=a(),n=t.focusedElem,r=t.selectionRange;e!==n&&function(t){return o(document.documentElement,t)}(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,r),i(n))},getSelection:function(t){var e;if("selectionStart"in t)e={start:t.selectionStart,end:t.selectionEnd};else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===t&&(e={start:-n.moveStart("character",-t.value.length),end:-n.moveEnd("character",-t.value.length)})}else e=r.getOffsets(t);return e||{start:0,end:0}},setSelection:function(t,e){var n=e.start,o=e.end;if(void 0===o&&(o=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(o,t.value.length);else if(document.selection&&t.nodeName&&"input"===t.nodeName.toLowerCase()){var i=t.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",o-n),i.select()}else r.setOffsets(t,e)}};t.exports=u},function(t,e,n){"use strict";t.exports=function(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}},function(t,e,n){"use strict";var r=n(4),o=n(24),i=n(22),a=n(20),u=n(38),s=(n(13),n(6)),c=n(191),l=n(192),f=n(71),d=n(31),h=(n(10),n(193)),p=n(23),y=n(56),g=n(12),v=n(82),m=n(80),b=(n(2),n(36)),_=n(54),w=(n(5),i.ID_ATTRIBUTE_NAME),E=i.ROOT_ATTRIBUTE_NAME,x=1,k=9,S=11,M={};function C(t){return t?t.nodeType===k?t.documentElement:t.firstChild:null}function A(t,e,n,r,o){var i;if(f.logTopLevelRenders){var a=t._currentElement.props.child.type;i="React mount: "+("string"==typeof a?a:a.displayName||a.name),console.time(i)}var u=p.mountComponent(t,n,null,c(t,e),o,0);i&&console.timeEnd(i),t._renderedComponent._topLevelWrapper=t,L._mountImageIntoNode(u,e,t,r,n)}function P(t,e,n,r){var o=g.ReactReconcileTransaction.getPooled(!n&&l.useCreateElement);o.perform(A,null,t,e,o,n,r),g.ReactReconcileTransaction.release(o)}function T(t,e,n){for(0,p.unmountComponent(t,n),e.nodeType===k&&(e=e.documentElement);e.lastChild;)e.removeChild(e.lastChild)}function N(t){var e=C(t);if(e){var n=s.getInstanceFromNode(e);return!(!n||!n._hostParent)}}function O(t){return!(!t||t.nodeType!==x&&t.nodeType!==k&&t.nodeType!==S)}function D(t){var e=function(t){var e=C(t),n=e&&s.getInstanceFromNode(e);return n&&!n._hostParent?n:null}(t);return e?e._hostContainerInfo._topLevelWrapper:null}var R=1,I=function(){this.rootID=R++};I.prototype.isReactComponent={},I.prototype.render=function(){return this.props.child},I.isReactTopLevelWrapper=!0;var L={TopLevelWrapper:I,_instancesByReactRootID:M,scrollMonitor:function(t,e){e()},_updateRootComponent:function(t,e,n,r,o){return L.scrollMonitor(r,function(){y.enqueueElementInternal(t,e,n),o&&y.enqueueCallbackInternal(t,o)}),t},_renderNewRootComponent:function(t,e,n,o){O(e)||r("37"),u.ensureScrollValueMonitoring();var i=m(t,!1);g.batchedUpdates(P,i,e,n,o);var a=i._instance.rootID;return M[a]=i,i},renderSubtreeIntoContainer:function(t,e,n,o){return null!=t&&d.has(t)||r("38"),L._renderSubtreeIntoContainer(t,e,n,o)},_renderSubtreeIntoContainer:function(t,e,n,o){y.validateCallback(o,"ReactDOM.render"),a.isValidElement(e)||r("39","string"==typeof e?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof e?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=e&&void 0!==e.props?" This may be caused by unintentionally loading two independent copies of React.":"");var i,u=a.createElement(I,{child:e});if(t){var s=d.get(t);i=s._processChildContext(s._context)}else i=v;var c=D(n);if(c){var l=c._currentElement.props.child;if(_(l,e)){var f=c._renderedComponent.getPublicInstance(),h=o&&function(){o.call(f)};return L._updateRootComponent(c,u,i,n,h),f}L.unmountComponentAtNode(n)}var p=C(n),g=p&&!!function(t){return t.getAttribute&&t.getAttribute(w)||""}(p),m=N(n),b=g&&!c&&!m,E=L._renderNewRootComponent(u,n,b,i)._renderedComponent.getPublicInstance();return o&&o.call(E),E},render:function(t,e,n){return L._renderSubtreeIntoContainer(null,t,e,n)},unmountComponentAtNode:function(t){O(t)||r("40");var e=D(t);if(!e){N(t),1===t.nodeType&&t.hasAttribute(E);return!1}return delete M[e._instance.rootID],g.batchedUpdates(T,e,t,!1),!0},_mountImageIntoNode:function(t,e,n,i,a){if(O(e)||r("41"),i){var u=C(e);if(h.canReuseMarkup(t,u))return void s.precacheNode(n,u);var c=u.getAttribute(h.CHECKSUM_ATTR_NAME);u.removeAttribute(h.CHECKSUM_ATTR_NAME);var l=u.outerHTML;u.setAttribute(h.CHECKSUM_ATTR_NAME,c);var f=t,d=function(t,e){for(var n=Math.min(t.length,e.length),r=0;r<n;r++)if(t.charAt(r)!==e.charAt(r))return r;return t.length===e.length?-1:n}(f,l),p=" (client) "+f.substring(d-20,d+20)+"\n (server) "+l.substring(d-20,d+20);e.nodeType===k&&r("42",p)}if(e.nodeType===k&&r("43"),a.useCreateElement){for(;e.lastChild;)e.removeChild(e.lastChild);o.insertTreeBefore(e,t,null)}else b(e,t),s.precacheNode(n,e.firstChild)}};t.exports=L},function(t,e,n){"use strict";var r=n(81);t.exports=function(t){for(var e;(e=t._renderedNodeType)===r.COMPOSITE;)t=t._renderedComponent;return e===r.HOST?t._renderedComponent:e===r.EMPTY?null:void 0}},function(t,e,n){"use strict";t.exports=n(93)},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=n(210),i=new WeakMap,a=function(t){return i.get(t)},u=function(t,e){if(null===t.vertex(e))throw new Error("Invalid vertex: "+e)},s=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.set(t,{vertices:new Map,numVertices:0,numEdges:0}),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o),r(e,[{key:"vertex",value:function(t){var e=a(this).vertices;return e.get(t)?e.get(t).data:null}},{key:"edge",value:function(t,e){var n=a(this).vertices;return n.get(t)&&n.get(t).outVertices.get(e)?n.get(t).outVertices.get(e):null}},{key:"vertices",value:function(){return Array.from(a(this).vertices.keys())}},{key:"outVertices",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).outVertices.keys())}},{key:"inVertices",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).inVertices.keys())}},{key:"parent",value:function(t){return u(this,t),a(this).vertices.get(t).parent}},{key:"children",value:function(t){return u(this,t),Array.from(a(this).vertices.get(t).children)}},{key:"numVertices",value:function(){return a(this).numVertices}},{key:"numEdges",value:function(){return a(this).numEdges}},{key:"outDegree",value:function(t){return u(this,t),a(this).vertices.get(t).outVertices.size}},{key:"inDegree",value:function(t){return u(this,t),a(this).vertices.get(t).inVertices.size}},{key:"addVertex",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.vertex(t))throw new Error("Duplicated vertex: "+t);return a(this).vertices.set(t,{outVertices:new Map,inVertices:new Map,children:new Set,parent:null,data:e}),a(this).numVertices++,this}},{key:"addEdge",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(u(this,t),u(this,e),this.edge(t,e))throw new Error("Duplicated edge: ("+t+", "+e+")");return a(this).numEdges++,a(this).vertices.get(t).outVertices.set(e,n),a(this).vertices.get(e).inVertices.set(t,n),this}},{key:"setChild",value:function(t,e){return u(this,t),u(this,e),a(this).vertices.get(t).children.add(e),a(this).vertices.get(e).parent=t,this}},{key:"removeVertex",value:function(t){var e=!0,n=!1,r=void 0;try{for(var o,i=this.outVertices(t)[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var u=o.value;this.removeEdge(t,u)}}catch(t){n=!0,r=t}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}var s=!0,c=!1,l=void 0;try{for(var f,d=this.inVertices(t)[Symbol.iterator]();!(s=(f=d.next()).done);s=!0){var h=f.value;this.removeEdge(h,t)}}catch(t){c=!0,l=t}finally{try{!s&&d.return&&d.return()}finally{if(c)throw l}}var p=this.parent(t);return p&&this.unsetChild(p,t),a(this).vertices.delete(t),a(this).numVertices--,this}},{key:"removeEdge",value:function(t,e){if(null===this.edge(t,e))throw Error("Invalid edge: ("+t+", "+e+")");return a(this).vertices.get(t).outVertices.delete(e),a(this).vertices.get(e).inVertices.delete(t),a(this).numEdges--,this}},{key:"unsetChild",value:function(t,e){return u(this,t),u(this,e),a(this).vertices.get(t).children.delete(e),a(this).vertices.get(e).parent=null,this}}]),e}();t.exports=s},function(t,e,n){"use strict";t.exports=function(t,e,n,r){return 0===r.length?e.get(t)[n]:(e.get(t)[n]=r[0],t)}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"call",value:function(t){return function(t){var e={},n={},r=function r(o){if(e[o])return n[o];e[o]=!0;var i=1/0,a=!0,u=!1,s=void 0;try{for(var c,l=t.outVertices(o)[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value;i=Math.min(i,r(f)-1)}}catch(t){u=!0,s=t}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return i===1/0&&(i=0),n[o]=i,i},o=!0,i=!1,a=void 0;try{for(var u,s=t.vertices()[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value;0===t.inDegree(c)&&r(c)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}var l=1/0,f=!0,d=!1,h=void 0;try{for(var p,y=t.vertices()[Symbol.iterator]();!(f=(p=y.next()).done);f=!0){var g=p.value;l=Math.min(l,n[g])}}catch(t){d=!0,h=t}finally{try{!f&&y.return&&y.return()}finally{if(d)throw h}}var v=!0,m=!1,b=void 0;try{for(var _,w=t.vertices()[Symbol.iterator]();!(v=(_=w.next()).done);v=!0){var E=_.value;n[E]-=l}}catch(t){m=!0,b=t}finally{try{!v&&w.return&&w.return()}finally{if(m)throw b}}return n}(t)}}]),t}();t.exports=o},function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},o=function(t){return 1===t.length&&(t=function(t){return function(e,n){return r(t(e),n)}}(t)),{left:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)<0?r=i+1:o=i}return r},right:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)>0?o=i:r=i+1}return r}}};var i=o(r),a=i.right,u=i.left,s=a,c=function(t,e){null==e&&(e=l);for(var n=0,r=t.length-1,o=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(o,o=t[++n]);return i};function l(t,e){return[t,e]}var f=function(t,e,n){var r,o,i,a,u=t.length,s=e.length,c=new Array(u*s);for(null==n&&(n=l),r=i=0;r<u;++r)for(a=t[r],o=0;o<s;++o,++i)c[i]=n(a,e[o]);return c},d=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},h=function(t){return null===t?NaN:+t},p=function(t,e){var n,r,o=t.length,i=0,a=-1,u=0,s=0;if(null==e)for(;++a<o;)isNaN(n=h(t[a]))||(s+=(r=n-u)*(n-(u+=r/++i)));else for(;++a<o;)isNaN(n=h(e(t[a],a,t)))||(s+=(r=n-u)*(n-(u+=r/++i)));if(i>1)return s/(i-1)},y=function(t,e){var n=p(t,e);return n?Math.sqrt(n):n},g=function(t,e){var n,r,o,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=o=n;++a<i;)null!=(n=t[a])&&(r>n&&(r=n),o<n&&(o=n))}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=o=n;++a<i;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),o<n&&(o=n));return[r,o]},v=Array.prototype,m=v.slice,b=v.map,_=function(t){return function(){return t}},w=function(t){return t},E=function(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(o);++r<o;)i[r]=t+r*n;return i},x=Math.sqrt(50),k=Math.sqrt(10),S=Math.sqrt(2),M=function(t,e,n){var r,o,i,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(o=t,t=e,e=o),0===(a=C(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),i=new Array(o=Math.ceil(e-t+1));++u<o;)i[u]=(t+u)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),i=new Array(o=Math.ceil(t-e+1));++u<o;)i[u]=(t-u)/a;return r&&i.reverse(),i};function C(t,e,n){var r=(e-t)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=x?10:i>=k?5:i>=S?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=x?10:i>=k?5:i>=S?2:1)}function A(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=x?o*=10:i>=k?o*=5:i>=S&&(o*=2),e<t?-o:o}var P=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},T=function(){var t=w,e=g,n=P;function r(r){var o,i,a=r.length,u=new Array(a);for(o=0;o<a;++o)u[o]=t(r[o],o,r);var c=e(u),l=c[0],f=c[1],d=n(u,l,f);Array.isArray(d)||(d=A(l,f,d),d=E(Math.ceil(l/d)*d,f,d));for(var h=d.length;d[0]<=l;)d.shift(),--h;for(;d[h-1]>f;)d.pop(),--h;var p,y=new Array(h+1);for(o=0;o<=h;++o)(p=y[o]=[]).x0=o>0?d[o-1]:l,p.x1=o<h?d[o]:f;for(o=0;o<a;++o)l<=(i=u[o])&&i<=f&&y[s(d,i,0,h)].push(r[o]);return y}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:_(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:_([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?_(m.call(t)):_(t),r):n},r},N=function(t,e,n){if(null==n&&(n=h),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,o=(r-1)*e,i=Math.floor(o),a=+n(t[i],i,t);return a+(+n(t[i+1],i+1,t)-a)*(o-i)}},O=function(t,e,n){return t=b.call(t,h).sort(r),Math.ceil((n-e)/(2*(N(t,.75)-N(t,.25))*Math.pow(t.length,-1/3)))},D=function(t,e,n){return Math.ceil((n-e)/(3.5*y(t)*Math.pow(t.length,-1/3)))},R=function(t,e){var n,r,o=t.length,i=-1;if(null==e){for(;++i<o;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<o;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<o;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<o;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},I=function(t,e){var n,r=t.length,o=r,i=-1,a=0;if(null==e)for(;++i<r;)isNaN(n=h(t[i]))?--o:a+=n;else for(;++i<r;)isNaN(n=h(e(t[i],i,t)))?--o:a+=n;if(o)return a/o},L=function(t,e){var n,o=t.length,i=-1,a=[];if(null==e)for(;++i<o;)isNaN(n=h(t[i]))||a.push(n);else for(;++i<o;)isNaN(n=h(e(t[i],i,t)))||a.push(n);return N(a.sort(r),.5)},F=function(t){for(var e,n,r,o=t.length,i=-1,a=0;++i<o;)a+=t[i].length;for(n=new Array(a);--o>=0;)for(e=(r=t[o]).length;--e>=0;)n[--a]=r[e];return n},B=function(t,e){var n,r,o=t.length,i=-1;if(null==e){for(;++i<o;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<o;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<o;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<o;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},U=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},j=function(t,e){if(n=t.length){var n,o,i=0,a=0,u=t[a];for(null==e&&(e=r);++i<n;)(e(o=t[i],u)<0||0!==e(u,u))&&(u=o,a=i);return 0===e(u,u)?a:void 0}},z=function(t,e,n){for(var r,o,i=(null==n?t.length:n)-(e=null==e?0:+e);i;)o=Math.random()*i--|0,r=t[i+e],t[i+e]=t[o+e],t[o+e]=r;return t},V=function(t,e){var n,r=t.length,o=-1,i=0;if(null==e)for(;++o<r;)(n=+t[o])&&(i+=n);else for(;++o<r;)(n=+e(t[o],o,t))&&(i+=n);return i},W=function(t){if(!(o=t.length))return[];for(var e=-1,n=B(t,Y),r=new Array(n);++e<n;)for(var o,i=-1,a=r[e]=new Array(o);++i<o;)a[i]=t[i][e];return r};function Y(t){return t.length}var q=function(){return W(arguments)},H=Array.prototype.slice,G=function(t){return t},X=1,K=2,$=3,Q=4,Z=1e-6;function J(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function et(){return!this.__axis}function nt(t,e){var n=[],r=null,o=null,i=6,a=6,u=3,s=t===X||t===Q?-1:1,c=t===Q||t===K?"x":"y",l=t===X||t===$?J:tt;function f(f){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==o?e.tickFormat?e.tickFormat.apply(e,n):G:o,p=Math.max(i,0)+u,y=e.range(),g=+y[0]+.5,v=+y[y.length-1]+.5,m=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),b=f.selection?f.selection():f,_=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(d,e).order(),E=w.exit(),x=w.enter().append("g").attr("class","tick"),k=w.select("line"),S=w.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(x),k=k.merge(x.append("line").attr("stroke","currentColor").attr(c+"2",s*i)),S=S.merge(x.append("text").attr("fill","currentColor").attr(c,s*p).attr("dy",t===X?"0em":t===$?"0.71em":"0.32em")),f!==b&&(_=_.transition(f),w=w.transition(f),k=k.transition(f),S=S.transition(f),E=E.transition(f).attr("opacity",Z).attr("transform",function(t){return isFinite(t=m(t))?l(t):this.getAttribute("transform")}),x.attr("opacity",Z).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:m(t))})),E.remove(),_.attr("d",t===Q||t==K?a?"M"+s*a+","+g+"H0.5V"+v+"H"+s*a:"M0.5,"+g+"V"+v:a?"M"+g+","+s*a+"V0.5H"+v+"V"+s*a:"M"+g+",0.5H"+v),w.attr("opacity",1).attr("transform",function(t){return l(m(t))}),k.attr(c+"2",s*i),S.attr(c,s*p).text(h),b.filter(et).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===K?"start":t===Q?"end":"middle"),b.each(function(){this.__axis=m})}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=H.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:H.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:H.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(o=t,f):o},f.tickSize=function(t){return arguments.length?(i=a=+t,f):i},f.tickSizeInner=function(t){return arguments.length?(i=+t,f):i},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}function rt(t){return nt(X,t)}function ot(t){return nt(K,t)}function it(t){return nt($,t)}function at(t){return nt(Q,t)}var ut=n(9),st=n(17),ct=n(3),lt=n(0),ft=n(16),dt=function(t){return function(){return t}},ht=function(t,e,n){this.target=t,this.type=e,this.selection=n};function pt(){lt.e.stopImmediatePropagation()}var yt=function(){lt.e.preventDefault(),lt.e.stopImmediatePropagation()},gt={name:"drag"},vt={name:"space"},mt={name:"handle"},bt={name:"center"},_t={name:"x",handles:["e","w"].map(At),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},wt={name:"y",handles:["n","s"].map(At),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Et={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(At),input:function(t){return t},output:function(t){return t}},xt={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kt={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},St={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Mt={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ct={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function At(t){return{type:t}}function Pt(){return!lt.e.button}function Tt(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Nt(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ot(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Dt(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Rt(){return Ft(_t)}function It(){return Ft(wt)}var Lt=function(){return Ft(Et)};function Ft(t){var e,n=Tt,r=Pt,o=Object(ut.a)(a,"start","brush","end"),i=6;function a(e){var n=e.property("__brush",f).selectAll(".overlay").data([At("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",xt.overlay).merge(n).each(function(){var t=Nt(this).extent;Object(lt.k)(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([At("selection")]).enter().append("rect").attr("class","selection").attr("cursor",xt.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return xt[t.type]}),e.each(u).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function u(){var t=Object(lt.k)(this),e=Nt(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new c(t,e)}function c(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function l(){if(lt.e.touches){if(lt.e.changedTouches.length<lt.e.touches.length)return yt()}else if(e)return;if(r.apply(this,arguments)){var n,o,i,a,c,l,f,d,h,p,y,g,v,m=this,b=lt.e.target.__data__.type,_="selection"===(lt.e.metaKey?b="overlay":b)?gt:lt.e.altKey?bt:mt,w=t===wt?null:Mt[b],E=t===_t?null:Ct[b],x=Nt(m),k=x.extent,S=x.selection,M=k[0][0],C=k[0][1],A=k[1][0],P=k[1][1],T=w&&E&&lt.e.shiftKey,N=Object(lt.h)(m),O=N,D=s(m,arguments).beforestart();"overlay"===b?x.selection=S=[[n=t===wt?M:N[0],i=t===_t?C:N[1]],[c=t===wt?A:n,f=t===_t?P:i]]:(n=S[0][0],i=S[0][1],c=S[1][0],f=S[1][1]),o=n,a=i,l=c,d=f;var R=Object(lt.k)(m).attr("pointer-events","none"),I=R.selectAll(".overlay").attr("cursor",xt[b]);if(lt.e.touches)R.on("touchmove.brush",F,!0).on("touchend.brush touchcancel.brush",U,!0);else{var L=Object(lt.k)(lt.e.view).on("keydown.brush",function(){switch(lt.e.keyCode){case 16:T=w&&E;break;case 18:_===mt&&(w&&(c=l-h*w,n=o+h*w),E&&(f=d-p*E,i=a+p*E),_=bt,B());break;case 32:_!==mt&&_!==bt||(w<0?c=l-h:w>0&&(n=o-h),E<0?f=d-p:E>0&&(i=a-p),_=vt,I.attr("cursor",xt.selection),B());break;default:return}yt()},!0).on("keyup.brush",function(){switch(lt.e.keyCode){case 16:T&&(g=v=T=!1,B());break;case 18:_===bt&&(w<0?c=l:w>0&&(n=o),E<0?f=d:E>0&&(i=a),_=mt,B());break;case 32:_===vt&&(lt.e.altKey?(w&&(c=l-h*w,n=o+h*w),E&&(f=d-p*E,i=a+p*E),_=bt):(w<0?c=l:w>0&&(n=o),E<0?f=d:E>0&&(i=a),_=mt),I.attr("cursor",xt[b]),B());break;default:return}yt()},!0).on("mousemove.brush",F,!0).on("mouseup.brush",U,!0);Object(st.b)(lt.e.view)}pt(),Object(ft.b)(m),u.call(m),D.start()}function F(){var t=Object(lt.h)(m);!T||g||v||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?v=!0:g=!0),O=t,y=!0,yt(),B()}function B(){var t;switch(h=O[0]-N[0],p=O[1]-N[1],_){case vt:case gt:w&&(h=Math.max(M-n,Math.min(A-c,h)),o=n+h,l=c+h),E&&(p=Math.max(C-i,Math.min(P-f,p)),a=i+p,d=f+p);break;case mt:w<0?(h=Math.max(M-n,Math.min(A-n,h)),o=n+h,l=c):w>0&&(h=Math.max(M-c,Math.min(A-c,h)),o=n,l=c+h),E<0?(p=Math.max(C-i,Math.min(P-i,p)),a=i+p,d=f):E>0&&(p=Math.max(C-f,Math.min(P-f,p)),a=i,d=f+p);break;case bt:w&&(o=Math.max(M,Math.min(A,n-h*w)),l=Math.max(M,Math.min(A,c+h*w))),E&&(a=Math.max(C,Math.min(P,i-p*E)),d=Math.max(C,Math.min(P,f+p*E)))}l<o&&(w*=-1,t=n,n=c,c=t,t=o,o=l,l=t,b in kt&&I.attr("cursor",xt[b=kt[b]])),d<a&&(E*=-1,t=i,i=f,f=t,t=a,a=d,d=t,b in St&&I.attr("cursor",xt[b=St[b]])),x.selection&&(S=x.selection),g&&(o=S[0][0],l=S[1][0]),v&&(a=S[0][1],d=S[1][1]),S[0][0]===o&&S[0][1]===a&&S[1][0]===l&&S[1][1]===d||(x.selection=[[o,a],[l,d]],u.call(m),D.brush())}function U(){if(pt(),lt.e.touches){if(lt.e.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),R.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Object(st.c)(lt.e.view,y),L.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),I.attr("cursor",xt.overlay),x.selection&&(S=x.selection),Ot(S)&&(x.selection=null,u.call(m)),D.end()}}function f(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return a.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,o=s(e,arguments),i=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=Object(ct.a)(i,a);function l(t){r.selection=1===t&&Ot(a)?null:c(t),u.call(e),o.brush()}return i&&a?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,o=t.input("function"==typeof n?n.apply(this,e):n,r.extent),i=s(this,e).beforestart();Object(ft.b)(this),r.selection=null==o||Ot(o)?null:o,u.call(this),i.start().brush().end()})},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Object(lt.d)(new ht(a,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},a.extent=function(t){return arguments.length?(n="function"==typeof t?t:dt([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):n},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:dt(!!t),a):r},a.handleSize=function(t){return arguments.length?(i=+t,a):i},a.on=function(){var t=o.on.apply(o,arguments);return t===o?a:t},a}var Bt=Math.cos,Ut=Math.sin,jt=Math.PI,zt=jt/2,Vt=2*jt,Wt=Math.max;var Yt=function(){var t=0,e=null,n=null,r=null;function o(o){var i,a,u,s,c,l,f=o.length,d=[],h=E(f),p=[],y=[],g=y.groups=new Array(f),v=new Array(f*f);for(i=0,c=-1;++c<f;){for(a=0,l=-1;++l<f;)a+=o[c][l];d.push(a),p.push(E(f)),i+=a}for(e&&h.sort(function(t,n){return e(d[t],d[n])}),n&&p.forEach(function(t,e){t.sort(function(t,r){return n(o[e][t],o[e][r])})}),s=(i=Wt(0,Vt-t*f)/i)?t:Vt/f,a=0,c=-1;++c<f;){for(u=a,l=-1;++l<f;){var m=h[c],b=p[m][l],_=o[m][b],w=a,x=a+=_*i;v[b*f+m]={index:m,subindex:b,startAngle:w,endAngle:x,value:_}}g[m]={index:m,startAngle:u,endAngle:a,value:d[m]},a+=s}for(c=-1;++c<f;)for(l=c-1;++l<f;){var k=v[l*f+c],S=v[c*f+l];(k.value||S.value)&&y.push(k.value<S.value?{source:S,target:k}:{source:k,target:S})}return r?y.sort(r):y}return o.padAngle=function(e){return arguments.length?(t=Wt(0,e),o):t},o.sortGroups=function(t){return arguments.length?(e=t,o):e},o.sortSubgroups=function(t){return arguments.length?(n=t,o):n},o.sortChords=function(t){return arguments.length?(null==t?r=null:(r=function(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}(t))._=t,o):r&&r._},o},qt=Array.prototype.slice,Ht=function(t){return function(){return t}},Gt=Math.PI,Xt=2*Gt,Kt=Xt-1e-6;function $t(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Qt(){return new $t}$t.prototype=Qt.prototype={constructor:$t,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,o,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(t,e,n,r,o){t=+t,e=+e,n=+n,r=+r,o=+o;var i=this._x1,a=this._y1,u=n-t,s=r-e,c=i-t,l=a-e,f=c*c+l*l;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(l*u-s*c)>1e-6&&o){var d=n-i,h=r-a,p=u*u+s*s,y=d*d+h*h,g=Math.sqrt(p),v=Math.sqrt(f),m=o*Math.tan((Gt-Math.acos((p+f-y)/(2*g*v)))/2),b=m/v,_=m/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(e+b*l)),this._+="A"+o+","+o+",0,0,"+ +(l*d>c*h)+","+(this._x1=t+_*u)+","+(this._y1=e+_*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,o,i){t=+t,e=+e;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),s=t+a,c=e+u,l=1^i,f=i?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),n&&(f<0&&(f=f%Xt+Xt),f>Kt?this._+="A"+n+","+n+",0,1,"+l+","+(t-a)+","+(e-u)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Gt)+","+l+","+(this._x1=t+n*Math.cos(o))+","+(this._y1=e+n*Math.sin(o))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Zt=Qt;function Jt(t){return t.source}function te(t){return t.target}function ee(t){return t.radius}function ne(t){return t.startAngle}function re(t){return t.endAngle}var oe=function(){var t=Jt,e=te,n=ee,r=ne,o=re,i=null;function a(){var a,u=qt.call(arguments),s=t.apply(this,u),c=e.apply(this,u),l=+n.apply(this,(u[0]=s,u)),f=r.apply(this,u)-zt,d=o.apply(this,u)-zt,h=l*Bt(f),p=l*Ut(f),y=+n.apply(this,(u[0]=c,u)),g=r.apply(this,u)-zt,v=o.apply(this,u)-zt;if(i||(i=a=Zt()),i.moveTo(h,p),i.arc(0,0,l,f,d),f===g&&d===v||(i.quadraticCurveTo(0,0,y*Bt(g),y*Ut(g)),i.arc(0,0,y,g,v)),i.quadraticCurveTo(0,0,h,p),i.closePath(),a)return i=null,a+""||null}return a.radius=function(t){return arguments.length?(n="function"==typeof t?t:Ht(+t),a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ht(+t),a):r},a.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Ht(+t),a):o},a.source=function(e){return arguments.length?(t=e,a):t},a.target=function(t){return arguments.length?(e=t,a):e},a.context=function(t){return arguments.length?(i=null==t?null:t,a):i},a};function ie(){}function ae(t,e){var n=new ie;if(t instanceof ie)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,o=-1,i=t.length;if(null==e)for(;++o<i;)n.set(o,t[o]);else for(;++o<i;)n.set(e(r=t[o],o,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}ie.prototype=ae.prototype={constructor:ie,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ue=ae,se=function(){var t,e,n,r=[],o=[];function i(n,o,a,u){if(o>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,c,l,f=-1,d=n.length,h=r[o++],p=ue(),y=a();++f<d;)(l=p.get(s=h(c=n[f])+""))?l.push(c):p.set(s,[c]);return p.each(function(t,e){u(y,e,i(t,o,a,u))}),y}return n={object:function(t){return i(t,0,ce,le)},map:function(t){return i(t,0,fe,de)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var a,u=o[i-1];return null!=e&&i>=r.length?a=n.entries():(a=[],n.each(function(e,n){a.push({key:n,values:t(e,i)})})),null!=u?a.sort(function(t,e){return u(t.key,e.key)}):a}(i(t,0,fe,de),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return o[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function ce(){return{}}function le(t,e,n){t[e]=n}function fe(){return ue()}function de(t,e,n){t.set(e,n)}function he(){}var pe=ue.prototype;function ye(t,e){var n=new he;if(t instanceof he)t.each(function(t){n.add(t)});else if(t){var r=-1,o=t.length;if(null==e)for(;++r<o;)n.add(t[r]);else for(;++r<o;)n.add(e(t[r],r,t))}return n}he.prototype=ye.prototype={constructor:he,has:pe.has,add:function(t){return this["$"+(t+="")]=t,this},remove:pe.remove,clear:pe.clear,values:pe.keys,size:pe.size,empty:pe.empty,each:pe.each};var ge=ye,ve=function(t){var e=[];for(var n in t)e.push(n);return e},me=function(t){var e=[];for(var n in t)e.push(t[n]);return e},be=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},_e=n(1),we=Array.prototype.slice,Ee=function(t,e){return t-e},xe=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},ke=function(t){return function(){return t}},Se=function(t,e){for(var n,r=-1,o=e.length;++r<o;)if(n=Me(t,e[r]))return n;return 0};function Me(t,e){for(var n=e[0],r=e[1],o=-1,i=0,a=t.length,u=a-1;i<a;u=i++){var s=t[i],c=s[0],l=s[1],f=t[u],d=f[0],h=f[1];if(Ce(s,f,e))return 0;l>r!=h>r&&n<(d-c)*(r-l)/(h-l)+c&&(o=-o)}return o}function Ce(t,e,n){var r;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&function(t,e,n){return t<=e&&e<=n||n<=e&&e<=t}(t[r=+(t[0]===e[0])],n[r],e[r])}var Ae=function(){},Pe=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Te=function(){var t=1,e=1,n=P,r=u;function o(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(Ee);else{var r=g(t),o=r[0],a=r[1];e=A(o,a,e),e=E(Math.floor(o/e)*e,Math.floor(a/e)*e,e)}return e.map(function(e){return i(t,e)})}function i(n,o){var i=[],u=[];return function(n,r,o){var i,u,s,c,l,f,d=new Array,h=new Array;i=u=-1,c=n[0]>=r,Pe[c<<1].forEach(p);for(;++i<t-1;)s=c,c=n[i+1]>=r,Pe[s|c<<1].forEach(p);Pe[c<<0].forEach(p);for(;++u<e-1;){for(i=-1,c=n[u*t+t]>=r,l=n[u*t]>=r,Pe[c<<1|l<<2].forEach(p);++i<t-1;)s=c,c=n[u*t+t+i+1]>=r,f=l,l=n[u*t+i+1]>=r,Pe[s|c<<1|l<<2|f<<3].forEach(p);Pe[c|l<<3].forEach(p)}i=-1,l=n[u*t]>=r,Pe[l<<2].forEach(p);for(;++i<t-1;)f=l,l=n[u*t+i+1]>=r,Pe[l<<2|f<<3].forEach(p);function p(t){var e,n,r=[t[0][0]+i,t[0][1]+u],s=[t[1][0]+i,t[1][1]+u],c=a(r),l=a(s);(e=h[c])?(n=d[l])?(delete h[e.end],delete d[n.start],e===n?(e.ring.push(s),o(e.ring)):d[e.start]=h[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[e.end],e.ring.push(s),h[e.end=l]=e):(e=d[l])?(n=h[c])?(delete d[e.start],delete h[n.end],e===n?(e.ring.push(s),o(e.ring)):d[n.start]=h[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[e.start],e.ring.unshift(r),d[e.start=c]=e):d[c]=h[l]={start:c,end:l,ring:[r,s]}}Pe[l<<3].forEach(p)}(n,o,function(t){r(t,n,o),xe(t)>0?i.push([t]):u.push(t)}),u.forEach(function(t){for(var e,n=0,r=i.length;n<r;++n)if(-1!==Se((e=i[n])[0],t))return void e.push(t)}),{type:"MultiPolygon",value:o,coordinates:i}}function a(e){return 2*e[0]+e[1]*(t+1)*4}function u(n,r,o){n.forEach(function(n){var i,a=n[0],u=n[1],s=0|a,c=0|u,l=r[c*t+s];a>0&&a<t&&s===a&&(i=r[c*t+s-1],n[0]=a+(o-i)/(l-i)-.5),u>0&&u<e&&c===u&&(i=r[(c-1)*t+s],n[1]=u+(o-i)/(l-i)-.5)})}return o.contour=i,o.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),i=Math.ceil(n[1]);if(!(r>0&&i>0))throw new Error("invalid size");return t=r,e=i,o},o.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?ke(we.call(t)):ke(t),o):n},o.smooth=function(t){return arguments.length?(r=t?u:Ae,o):r===u},o};function Ne(t,e,n){for(var r=t.width,o=t.height,i=1+(n<<1),a=0;a<o;++a)for(var u=0,s=0;u<r+n;++u)u<r&&(s+=t.data[u+a*r]),u>=n&&(u>=i&&(s-=t.data[u-i+a*r]),e.data[u-n+a*r]=s/Math.min(u+1,r-1+i-u,i))}function Oe(t,e,n){for(var r=t.width,o=t.height,i=1+(n<<1),a=0;a<r;++a)for(var u=0,s=0;u<o+n;++u)u<o&&(s+=t.data[a+u*r]),u>=n&&(u>=i&&(s-=t.data[a+(u-i)*r]),e.data[a+(u-n)*r]=s/Math.min(u+1,o-1+i-u,i))}function De(t){return t[0]}function Re(t){return t[1]}function Ie(){return 1}var Le=function(){var t=De,e=Re,n=Ie,r=960,o=500,i=20,a=2,u=3*i,s=r+2*u>>a,c=o+2*u>>a,l=ke(20);function f(r){var o=new Float32Array(s*c),f=new Float32Array(s*c);r.forEach(function(r,i,l){var f=+t(r,i,l)+u>>a,d=+e(r,i,l)+u>>a,h=+n(r,i,l);f>=0&&f<s&&d>=0&&d<c&&(o[f+d*s]+=h)}),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a),Ne({width:s,height:c,data:o},{width:s,height:c,data:f},i>>a),Oe({width:s,height:c,data:f},{width:s,height:c,data:o},i>>a);var h=l(o);if(!Array.isArray(h)){var p=R(o);h=A(0,p,h),(h=E(0,Math.floor(p/h)*h,h)).shift()}return Te().thresholds(h).size([s,c])(o).map(d)}function d(t){return t.value*=Math.pow(2,-2*a),t.coordinates.forEach(h),t}function h(t){t.forEach(p)}function p(t){t.forEach(y)}function y(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function g(){return s=r+2*(u=3*i)>>a,c=o+2*u>>a,f}return f.x=function(e){return arguments.length?(t="function"==typeof e?e:ke(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:ke(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:ke(+t),f):n},f.size=function(t){if(!arguments.length)return[r,o];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,o=n,g()},f.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),g()},f.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?ke(we.call(t)):ke(t),f):l},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return i=Math.round((Math.sqrt(4*t*t+1)-1)/2),g()},f},Fe={},Be={},Ue=34,je=10,ze=13;function Ve(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var We=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,o=[],i=t.length,a=0,u=0,s=i<=0,c=!1;function l(){if(s)return Be;if(c)return c=!1,Fe;var e,r,o=a;if(t.charCodeAt(o)===Ue){for(;a++<i&&t.charCodeAt(a)!==Ue||t.charCodeAt(++a)===Ue;);return(e=a)>=i?s=!0:(r=t.charCodeAt(a++))===je?c=!0:r===ze&&(c=!0,t.charCodeAt(a)===je&&++a),t.slice(o+1,e-1).replace(/""/g,'"')}for(;a<i;){if((r=t.charCodeAt(e=a++))===je)c=!0;else if(r===ze)c=!0,t.charCodeAt(a)===je&&++a;else if(r!==n)continue;return t.slice(o,e)}return s=!0,t.slice(o,i)}for(t.charCodeAt(i-1)===je&&--i,t.charCodeAt(i-1)===ze&&--i;(r=l())!==Be;){for(var f=[];r!==Fe&&r!==Be;)f.push(r),r=l();e&&null==(f=e(f,u++))||o.push(f)}return o}function o(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,o,i=r(t,function(t,r){if(n)return n(t,r-1);o=t,n=e?function(t,e){var n=Ve(t);return function(r,o){return e(n(r),o,t)}}(t,e):Ve(t)});return i.columns=o||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Ye=We(","),qe=Ye.parse,He=Ye.parseRows,Ge=Ye.format,Xe=Ye.formatRows,Ke=We("\t"),$e=Ke.parse,Qe=Ke.parseRows,Ze=Ke.format,Je=Ke.formatRows,tn=n(25);function en(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var nn=function(t,e){return fetch(t,e).then(en)};function rn(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var on=function(t,e){return fetch(t,e).then(rn)};function an(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var un=function(t,e){return fetch(t,e).then(an)};function sn(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),un(e,n).then(function(e){return t(e,r)})}}function cn(t,e,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var o=We(t);return un(e,n).then(function(t){return o.parse(t,r)})}var ln=sn(qe),fn=sn($e),dn=function(t,e){return new Promise(function(n,r){var o=new Image;for(var i in e)o[i]=e[i];o.onerror=r,o.onload=function(){n(o)},o.src=t})};function hn(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var pn=function(t,e){return fetch(t,e).then(hn)};function yn(t){return function(e,n){return un(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}var gn=yn("application/xml"),vn=yn("text/html"),mn=yn("image/svg+xml"),bn=function(t,e){var n;function r(){var r,o,i=n.length,a=0,u=0;for(r=0;r<i;++r)a+=(o=n[r]).x,u+=o.y;for(a=a/i-t,u=u/i-e,r=0;r<i;++r)(o=n[r]).x-=a,o.y-=u}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},_n=function(t){return function(){return t}},wn=function(){return 1e-6*(Math.random()-.5)};function En(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var o,i,a,u,s,c,l,f,d,h=t._root,p={data:r},y=t._x0,g=t._y0,v=t._x1,m=t._y1;if(!h)return t._root=p,t;for(;h.length;)if((c=e>=(i=(y+v)/2))?y=i:v=i,(l=n>=(a=(g+m)/2))?g=a:m=a,o=h,!(h=h[f=l<<1|c]))return o[f]=p,t;if(u=+t._x.call(null,h.data),s=+t._y.call(null,h.data),e===u&&n===s)return p.next=h,o?o[f]=p:t._root=p,t;do{o=o?o[f]=new Array(4):t._root=new Array(4),(c=e>=(i=(y+v)/2))?y=i:v=i,(l=n>=(a=(g+m)/2))?g=a:m=a}while((f=l<<1|c)==(d=(s>=a)<<1|u>=i));return o[d]=h,o[f]=p,t}var xn=function(t,e,n,r,o){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=o};function kn(t){return t[0]}function Sn(t){return t[1]}function Mn(t,e,n){var r=new Cn(null==e?kn:e,null==n?Sn:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Cn(t,e,n,r,o,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function An(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Pn=Mn.prototype=Cn.prototype;function Tn(t){return t.x+t.vx}function Nn(t){return t.y+t.vy}Pn.copy=function(){var t,e,n=new Cn(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=An(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var o=0;o<4;++o)(e=r.source[o])&&(e.length?t.push({source:e,target:r.target[o]=new Array(4)}):r.target[o]=An(e));return n},Pn.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return En(this.cover(e,n),e,n,t)},Pn.addAll=function(t){var e,n,r,o,i=t.length,a=new Array(i),u=new Array(i),s=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(o=+this._y.call(null,e))||(a[n]=r,u[n]=o,r<s&&(s=r),r>l&&(l=r),o<c&&(c=o),o>f&&(f=o));for(l<s&&(s=this._x0,l=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(s,c).cover(l,f),n=0;n<i;++n)En(this,a[n],u[n],t[n]);return this},Pn.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{if(!(n>t||t>o||r>e||e>i))return this;var a,u,s=o-n,c=this._root;switch(u=(e<(r+i)/2)<<1|t<(n+o)/2){case 0:do{(a=new Array(4))[u]=c,c=a}while(i=r+(s*=2),t>(o=n+s)||e>i);break;case 1:do{(a=new Array(4))[u]=c,c=a}while(i=r+(s*=2),(n=o-s)>t||e>i);break;case 2:do{(a=new Array(4))[u]=c,c=a}while(r=i-(s*=2),t>(o=n+s)||r>e);break;case 3:do{(a=new Array(4))[u]=c,c=a}while(r=i-(s*=2),(n=o-s)>t||r>e)}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=o,this._y1=i,this},Pn.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},Pn.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Pn.find=function(t,e,n){var r,o,i,a,u,s,c,l=this._x0,f=this._y0,d=this._x1,h=this._y1,p=[],y=this._root;for(y&&p.push(new xn(y,l,f,d,h)),null==n?n=1/0:(l=t-n,f=e-n,d=t+n,h=e+n,n*=n);s=p.pop();)if(!(!(y=s.node)||(o=s.x0)>d||(i=s.y0)>h||(a=s.x1)<l||(u=s.y1)<f))if(y.length){var g=(o+a)/2,v=(i+u)/2;p.push(new xn(y[3],g,v,a,u),new xn(y[2],o,v,g,u),new xn(y[1],g,i,a,v),new xn(y[0],o,i,g,v)),(c=(e>=v)<<1|t>=g)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=s)}else{var m=t-+this._x.call(null,y.data),b=e-+this._y.call(null,y.data),_=m*m+b*b;if(_<n){var w=Math.sqrt(n=_);l=t-w,f=e-w,d=t+w,h=e+w,r=y.data}}return r},Pn.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,o,i,a,u,s,c,l,f,d,h=this._root,p=this._x0,y=this._y0,g=this._x1,v=this._y1;if(!h)return this;if(h.length)for(;;){if((c=i>=(u=(p+g)/2))?p=u:g=u,(l=a>=(s=(y+v)/2))?y=s:v=s,e=h,!(h=h[f=l<<1|c]))return this;if(!h.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,d=f)}for(;h.data!==t;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):e?(o?e[f]=o:delete e[f],(h=e[0]||e[1]||e[2]||e[3])&&h===(e[3]||e[2]||e[1]||e[0])&&!h.length&&(n?n[d]=h:this._root=h),this):(this._root=o,this)},Pn.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Pn.root=function(){return this._root},Pn.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Pn.visit=function(t){var e,n,r,o,i,a,u=[],s=this._root;for(s&&u.push(new xn(s,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(s=e.node,r=e.x0,o=e.y0,i=e.x1,a=e.y1)&&s.length){var c=(r+i)/2,l=(o+a)/2;(n=s[3])&&u.push(new xn(n,c,l,i,a)),(n=s[2])&&u.push(new xn(n,r,l,c,a)),(n=s[1])&&u.push(new xn(n,c,o,i,l)),(n=s[0])&&u.push(new xn(n,r,o,c,l))}return this},Pn.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new xn(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var o=e.node;if(o.length){var i,a=e.x0,u=e.y0,s=e.x1,c=e.y1,l=(a+s)/2,f=(u+c)/2;(i=o[0])&&n.push(new xn(i,a,u,l,f)),(i=o[1])&&n.push(new xn(i,l,u,s,f)),(i=o[2])&&n.push(new xn(i,a,f,l,c)),(i=o[3])&&n.push(new xn(i,l,f,s,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Pn.x=function(t){return arguments.length?(this._x=t,this):this._x},Pn.y=function(t){return arguments.length?(this._y=t,this):this._y};var On=function(t){var e,n,r=1,o=1;function i(){for(var t,i,u,s,c,l,f,d=e.length,h=0;h<o;++h)for(i=Mn(e,Tn,Nn).visitAfter(a),t=0;t<d;++t)u=e[t],l=n[u.index],f=l*l,s=u.x+u.vx,c=u.y+u.vy,i.visit(p);function p(t,e,n,o,i){var a=t.data,d=t.r,h=l+d;if(!a)return e>s+h||o<s-h||n>c+h||i<c-h;if(a.index>u.index){var p=s-a.x-a.vx,y=c-a.y-a.vy,g=p*p+y*y;g<h*h&&(0===p&&(g+=(p=wn())*p),0===y&&(g+=(y=wn())*y),g=(h-(g=Math.sqrt(g)))/g*r,u.vx+=(p*=g)*(h=(d*=d)/(f+d)),u.vy+=(y*=g)*h,a.vx-=p*(h=1-h),a.vy-=y*h)}}}function a(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function u(){if(e){var r,o,i=e.length;for(n=new Array(i),r=0;r<i;++r)o=e[r],n[o.index]=+t(o,r,e)}}return"function"!=typeof t&&(t=_n(null==t?1:+t)),i.initialize=function(t){e=t,u()},i.iterations=function(t){return arguments.length?(o=+t,i):o},i.strength=function(t){return arguments.length?(r=+t,i):r},i.radius=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),u(),i):t},i};function Dn(t){return t.index}function Rn(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var In=function(t){var e,n,r,o,i,a=Dn,u=function(t){return 1/Math.min(o[t.source.index],o[t.target.index])},s=_n(30),c=1;function l(r){for(var o=0,a=t.length;o<c;++o)for(var u,s,l,f,d,h,p,y=0;y<a;++y)s=(u=t[y]).source,f=(l=u.target).x+l.vx-s.x-s.vx||wn(),d=l.y+l.vy-s.y-s.vy||wn(),f*=h=((h=Math.sqrt(f*f+d*d))-n[y])/h*r*e[y],d*=h,l.vx-=f*(p=i[y]),l.vy-=d*p,s.vx+=f*(p=1-p),s.vy+=d*p}function f(){if(r){var u,s,c=r.length,l=t.length,f=ue(r,a);for(u=0,o=new Array(c);u<l;++u)(s=t[u]).index=u,"object"!=typeof s.source&&(s.source=Rn(f,s.source)),"object"!=typeof s.target&&(s.target=Rn(f,s.target)),o[s.source.index]=(o[s.source.index]||0)+1,o[s.target.index]=(o[s.target.index]||0)+1;for(u=0,i=new Array(l);u<l;++u)s=t[u],i[u]=o[s.source.index]/(o[s.source.index]+o[s.target.index]);e=new Array(l),d(),n=new Array(l),h()}}function d(){if(r)for(var n=0,o=t.length;n<o;++n)e[n]=+u(t[n],n,t)}function h(){if(r)for(var e=0,o=t.length;e<o;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(e){return arguments.length?(t=e,f(),l):t},l.id=function(t){return arguments.length?(a=t,l):a},l.iterations=function(t){return arguments.length?(c=+t,l):c},l.strength=function(t){return arguments.length?(u="function"==typeof t?t:_n(+t),d(),l):u},l.distance=function(t){return arguments.length?(s="function"==typeof t?t:_n(+t),h(),l):s},l},Ln=n(11);function Fn(t){return t.x}function Bn(t){return t.y}var Un=10,jn=Math.PI*(3-Math.sqrt(5)),zn=function(t){var e,n=1,r=.001,o=1-Math.pow(r,1/300),i=0,a=.6,u=ue(),s=Object(Ln.d)(l),c=Object(ut.a)("tick","end");function l(){f(),c.call("tick",e),n<r&&(s.stop(),c.call("end",e))}function f(){var e,r,s=t.length;for(n+=(i-n)*o,u.each(function(t){t(n)}),e=0;e<s;++e)null==(r=t[e]).fx?r.x+=r.vx*=a:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=a:(r.y=r.fy,r.vy=0)}function d(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,isNaN(e.x)||isNaN(e.y)){var o=Un*Math.sqrt(n),i=n*jn;e.x=o*Math.cos(i),e.y=o*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function h(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),d(),e={tick:f,restart:function(){return s.restart(l),e},stop:function(){return s.stop(),e},nodes:function(n){return arguments.length?(t=n,d(),u.each(h),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(o=+t,e):+o},alphaTarget:function(t){return arguments.length?(i=+t,e):i},velocityDecay:function(t){return arguments.length?(a=1-t,e):1-a},force:function(t,n){return arguments.length>1?(null==n?u.remove(t):u.set(t,h(n)),e):u.get(t)},find:function(e,n,r){var o,i,a,u,s,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(a=(o=e-(u=t[c]).x)*o+(i=n-u.y)*i)<r&&(s=u,r=a);return s},on:function(t,n){return arguments.length>1?(c.on(t,n),e):c.on(t)}}},Vn=function(){var t,e,n,r,o=_n(-30),i=1,a=1/0,u=.81;function s(r){var o,i=t.length,a=Mn(t,Fn,Bn).visitAfter(l);for(n=r,o=0;o<i;++o)e=t[o],a.visit(f)}function c(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+o(n,e,t)}}function l(t){var e,n,o,i,a,u=0,s=0;if(t.length){for(o=i=a=0;a<4;++a)(e=t[a])&&(n=Math.abs(e.value))&&(u+=e.value,s+=n,o+=n*e.x,i+=n*e.y);t.x=o/s,t.y=i/s}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=r[e.data.index]}while(e=e.next)}t.value=u}function f(t,o,s,c){if(!t.value)return!0;var l=t.x-e.x,f=t.y-e.y,d=c-o,h=l*l+f*f;if(d*d/u<h)return h<a&&(0===l&&(h+=(l=wn())*l),0===f&&(h+=(f=wn())*f),h<i&&(h=Math.sqrt(i*h)),e.vx+=l*t.value*n/h,e.vy+=f*t.value*n/h),!0;if(!(t.length||h>=a)){(t.data!==e||t.next)&&(0===l&&(h+=(l=wn())*l),0===f&&(h+=(f=wn())*f),h<i&&(h=Math.sqrt(i*h)));do{t.data!==e&&(d=r[t.data.index]*n/h,e.vx+=l*d,e.vy+=f*d)}while(t=t.next)}}return s.initialize=function(e){t=e,c()},s.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),c(),s):o},s.distanceMin=function(t){return arguments.length?(i=t*t,s):Math.sqrt(i)},s.distanceMax=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.theta=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s},Wn=function(t,e,n){var r,o,i,a=_n(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var s=r[a],c=s.x-e||1e-6,l=s.y-n||1e-6,f=Math.sqrt(c*c+l*l),d=(i[a]-f)*o[a]*t/f;s.vx+=c*d,s.vy+=l*d}}function s(){if(r){var e,n=r.length;for(o=new Array(n),i=new Array(n),e=0;e<n;++e)i[e]=+t(r[e],e,r),o[e]=isNaN(i[e])?0:+a(r[e],e,r)}}return"function"!=typeof t&&(t=_n(+t)),null==e&&(e=0),null==n&&(n=0),u.initialize=function(t){r=t,s()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:_n(+t),s(),u):a},u.radius=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),s(),u):t},u.x=function(t){return arguments.length?(e=+t,u):e},u.y=function(t){return arguments.length?(n=+t,u):n},u},Yn=function(t){var e,n,r,o=_n(.1);function i(t){for(var o,i=0,a=e.length;i<a;++i)(o=e[i]).vx+=(r[i]-o.x)*n[i]*t}function a(){if(e){var i,a=e.length;for(n=new Array(a),r=new Array(a),i=0;i<a;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+o(e[i],i,e)}}return"function"!=typeof t&&(t=_n(null==t?0:+t)),i.initialize=function(t){e=t,a()},i.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),a(),i):o},i.x=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),a(),i):t},i},qn=function(t){var e,n,r,o=_n(.1);function i(t){for(var o,i=0,a=e.length;i<a;++i)(o=e[i]).vy+=(r[i]-o.y)*n[i]*t}function a(){if(e){var i,a=e.length;for(n=new Array(a),r=new Array(a),i=0;i<a;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+o(e[i],i,e)}}return"function"!=typeof t&&(t=_n(null==t?0:+t)),i.initialize=function(t){e=t,a()},i.strength=function(t){return arguments.length?(o="function"==typeof t?t:_n(+t),a(),i):o},i.y=function(e){return arguments.length?(t="function"==typeof e?e:_n(+e),a(),i):t},i},Hn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Gn=function(t){return(t=Hn(Math.abs(t)))?t[1]:NaN},Xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Kn(t){return new $n(t)}function $n(t){if(!(e=Xn.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Kn.prototype=$n.prototype,$n.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Qn,Zn,Jn,tr,er=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(o>0){if(!+t[r])break t;o=0}}return o>0?t.slice(0,o)+t.slice(e+1):t},nr=function(t,e){var n=Hn(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},rr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return nr(100*t,e)},r:nr,s:function(t,e){var n=Hn(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(Qn=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Hn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},or=function(t){return t},ir=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],ar=function(t){var e=t.grouping&&t.thousands?function(t,e){return function(n,r){for(var o=n.length,i=[],a=0,u=t[0],s=0;o>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),i.push(n.substring(o-=u,o+u)),!((s+=u+1)>r));)u=t[a=(a+1)%t.length];return i.reverse().join(e)}}(t.grouping,t.thousands):or,n=t.currency,r=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):or,i=t.percent||"%";function a(t){var a=(t=Kn(t)).fill,u=t.align,s=t.sign,c=t.symbol,l=t.zero,f=t.width,d=t.comma,h=t.precision,p=t.trim,y=t.type;"n"===y?(d=!0,y="g"):rr[y]||(null==h&&(h=12),p=!0,y="g"),(l||"0"===a&&"="===u)&&(l=!0,a="0",u="=");var g="$"===c?n[0]:"#"===c&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",v="$"===c?n[1]:/[%p]/.test(y)?i:"",m=rr[y],b=/[defgprs%]/.test(y);function _(t){var n,i,c,_=g,w=v;if("c"===y)w=m(t)+w,t="";else{var E=(t=+t)<0;if(t=m(Math.abs(t),h),p&&(t=er(t)),E&&0==+t&&(E=!1),_=(E?"("===s?s:"-":"-"===s||"("===s?"":s)+_,w=("s"===y?ir[8+Qn/3]:"")+w+(E&&"("===s?")":""),b)for(n=-1,i=t.length;++n<i;)if(48>(c=t.charCodeAt(n))||c>57){w=(46===c?r+t.slice(n+1):t.slice(n))+w,t=t.slice(0,n);break}}d&&!l&&(t=e(t,1/0));var x=_.length+t.length+w.length,k=x<f?new Array(f-x+1).join(a):"";switch(d&&l&&(t=e(k+t,k.length?f-w.length:1/0),k=""),u){case"<":t=_+t+w+k;break;case"=":t=_+k+t+w;break;case"^":t=k.slice(0,x=k.length>>1)+_+t+w+k.slice(x);break;default:t=k+_+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),_.toString=function(){return t+""},_}return{format:a,formatPrefix:function(t,e){var n=a(((t=Kn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Gn(e)/3))),o=Math.pow(10,-r),i=ir[8+r/3];return function(t){return n(o*t)+i}}}};function ur(t){return Zn=ar(t),Jn=Zn.format,tr=Zn.formatPrefix,Zn}ur({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var sr=function(t){return Math.max(0,-Gn(Math.abs(t)))},cr=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Gn(e)/3)))-Gn(Math.abs(t)))},lr=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Gn(e)-Gn(t))+1},fr=function(){return new dr};function dr(){this.reset()}dr.prototype={constructor:dr,reset:function(){this.s=this.t=0},add:function(t){pr(hr,t,this.t),pr(this,hr.s,this.s),this.s?this.t+=hr.t:this.s=hr.t},valueOf:function(){return this.s}};var hr=new dr;function pr(t,e,n){var r=t.s=e+n,o=r-e,i=r-o;t.t=e-i+(n-o)}var yr=1e-6,gr=Math.PI,vr=gr/2,mr=gr/4,br=2*gr,_r=180/gr,wr=gr/180,Er=Math.abs,xr=Math.atan,kr=Math.atan2,Sr=Math.cos,Mr=Math.ceil,Cr=Math.exp,Ar=(Math.floor,Math.log),Pr=Math.pow,Tr=Math.sin,Nr=Math.sign||function(t){return t>0?1:t<0?-1:0},Or=Math.sqrt,Dr=Math.tan;function Rr(t){return t>1?0:t<-1?gr:Math.acos(t)}function Ir(t){return t>1?vr:t<-1?-vr:Math.asin(t)}function Lr(t){return(t=Tr(t/2))*t}function Fr(){}function Br(t,e){t&&jr.hasOwnProperty(t.type)&&jr[t.type](t,e)}var Ur={Feature:function(t,e){Br(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,o=n.length;++r<o;)Br(n[r].geometry,e)}},jr={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){zr(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)zr(n[r],e,0)},Polygon:function(t,e){Vr(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)Vr(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,o=n.length;++r<o;)Br(n[r],e)}};function zr(t,e,n){var r,o=-1,i=t.length-n;for(e.lineStart();++o<i;)r=t[o],e.point(r[0],r[1],r[2]);e.lineEnd()}function Vr(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)zr(t[n],e,1);e.polygonEnd()}var Wr,Yr,qr,Hr,Gr,Xr=function(t,e){t&&Ur.hasOwnProperty(t.type)?Ur[t.type](t,e):Br(t,e)},Kr=fr(),$r=fr(),Qr={point:Fr,lineStart:Fr,lineEnd:Fr,polygonStart:function(){Kr.reset(),Qr.lineStart=Zr,Qr.lineEnd=Jr},polygonEnd:function(){var t=+Kr;$r.add(t<0?br+t:t),this.lineStart=this.lineEnd=this.point=Fr},sphere:function(){$r.add(br)}};function Zr(){Qr.point=to}function Jr(){eo(Wr,Yr)}function to(t,e){Qr.point=eo,Wr=t,Yr=e,qr=t*=wr,Hr=Sr(e=(e*=wr)/2+mr),Gr=Tr(e)}function eo(t,e){e=(e*=wr)/2+mr;var n=(t*=wr)-qr,r=n>=0?1:-1,o=r*n,i=Sr(e),a=Tr(e),u=Gr*a,s=Hr*i+u*Sr(o),c=u*r*Tr(o);Kr.add(kr(c,s)),qr=t,Hr=i,Gr=a}var no=function(t){return $r.reset(),Xr(t,Qr),2*$r};function ro(t){return[kr(t[1],t[0]),Ir(t[2])]}function oo(t){var e=t[0],n=t[1],r=Sr(n);return[r*Sr(e),r*Tr(e),Tr(n)]}function io(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function ao(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function uo(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function so(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function co(t){var e=Or(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var lo,fo,ho,po,yo,go,vo,mo,bo,_o,wo=fr(),Eo={point:xo,lineStart:So,lineEnd:Mo,polygonStart:function(){Eo.point=Co,Eo.lineStart=Ao,Eo.lineEnd=Po,wo.reset(),Qr.polygonStart()},polygonEnd:function(){Qr.polygonEnd(),Eo.point=xo,Eo.lineStart=So,Eo.lineEnd=Mo,Kr<0?(lo=-(ho=180),fo=-(po=90)):wo>yr?po=90:wo<-yr&&(fo=-90),_o[0]=lo,_o[1]=ho}};function xo(t,e){bo.push(_o=[lo=t,ho=t]),e<fo&&(fo=e),e>po&&(po=e)}function ko(t,e){var n=oo([t*wr,e*wr]);if(mo){var r=ao(mo,n),o=ao([r[1],-r[0],0],r);co(o),o=ro(o);var i,a=t-yo,u=a>0?1:-1,s=o[0]*_r*u,c=Er(a)>180;c^(u*yo<s&&s<u*t)?(i=o[1]*_r)>po&&(po=i):c^(u*yo<(s=(s+360)%360-180)&&s<u*t)?(i=-o[1]*_r)<fo&&(fo=i):(e<fo&&(fo=e),e>po&&(po=e)),c?t<yo?To(lo,t)>To(lo,ho)&&(ho=t):To(t,ho)>To(lo,ho)&&(lo=t):ho>=lo?(t<lo&&(lo=t),t>ho&&(ho=t)):t>yo?To(lo,t)>To(lo,ho)&&(ho=t):To(t,ho)>To(lo,ho)&&(lo=t)}else bo.push(_o=[lo=t,ho=t]);e<fo&&(fo=e),e>po&&(po=e),mo=n,yo=t}function So(){Eo.point=ko}function Mo(){_o[0]=lo,_o[1]=ho,Eo.point=xo,mo=null}function Co(t,e){if(mo){var n=t-yo;wo.add(Er(n)>180?n+(n>0?360:-360):n)}else go=t,vo=e;Qr.point(t,e),ko(t,e)}function Ao(){Qr.lineStart()}function Po(){Co(go,vo),Qr.lineEnd(),Er(wo)>yr&&(lo=-(ho=180)),_o[0]=lo,_o[1]=ho,mo=null}function To(t,e){return(e-=t)<0?e+360:e}function No(t,e){return t[0]-e[0]}function Oo(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var Do,Ro,Io,Lo,Fo,Bo,Uo,jo,zo,Vo,Wo,Yo,qo,Ho,Go,Xo,Ko=function(t){var e,n,r,o,i,a,u;if(po=ho=-(lo=fo=1/0),bo=[],Xr(t,Eo),n=bo.length){for(bo.sort(No),e=1,i=[r=bo[0]];e<n;++e)Oo(r,(o=bo[e])[0])||Oo(r,o[1])?(To(r[0],o[1])>To(r[0],r[1])&&(r[1]=o[1]),To(o[0],r[1])>To(r[0],r[1])&&(r[0]=o[0])):i.push(r=o);for(a=-1/0,e=0,r=i[n=i.length-1];e<=n;r=o,++e)o=i[e],(u=To(r[1],o[0]))>a&&(a=u,lo=o[0],ho=r[1])}return bo=_o=null,lo===1/0||fo===1/0?[[NaN,NaN],[NaN,NaN]]:[[lo,fo],[ho,po]]},$o={sphere:Fr,point:Qo,lineStart:Jo,lineEnd:ni,polygonStart:function(){$o.lineStart=ri,$o.lineEnd=oi},polygonEnd:function(){$o.lineStart=Jo,$o.lineEnd=ni}};function Qo(t,e){t*=wr;var n=Sr(e*=wr);Zo(n*Sr(t),n*Tr(t),Tr(e))}function Zo(t,e,n){Io+=(t-Io)/++Do,Lo+=(e-Lo)/Do,Fo+=(n-Fo)/Do}function Jo(){$o.point=ti}function ti(t,e){t*=wr;var n=Sr(e*=wr);Ho=n*Sr(t),Go=n*Tr(t),Xo=Tr(e),$o.point=ei,Zo(Ho,Go,Xo)}function ei(t,e){t*=wr;var n=Sr(e*=wr),r=n*Sr(t),o=n*Tr(t),i=Tr(e),a=kr(Or((a=Go*i-Xo*o)*a+(a=Xo*r-Ho*i)*a+(a=Ho*o-Go*r)*a),Ho*r+Go*o+Xo*i);Ro+=a,Bo+=a*(Ho+(Ho=r)),Uo+=a*(Go+(Go=o)),jo+=a*(Xo+(Xo=i)),Zo(Ho,Go,Xo)}function ni(){$o.point=Qo}function ri(){$o.point=ii}function oi(){ai(Yo,qo),$o.point=Qo}function ii(t,e){Yo=t,qo=e,t*=wr,e*=wr,$o.point=ai;var n=Sr(e);Ho=n*Sr(t),Go=n*Tr(t),Xo=Tr(e),Zo(Ho,Go,Xo)}function ai(t,e){t*=wr;var n=Sr(e*=wr),r=n*Sr(t),o=n*Tr(t),i=Tr(e),a=Go*i-Xo*o,u=Xo*r-Ho*i,s=Ho*o-Go*r,c=Or(a*a+u*u+s*s),l=Ir(c),f=c&&-l/c;zo+=f*a,Vo+=f*u,Wo+=f*s,Ro+=l,Bo+=l*(Ho+(Ho=r)),Uo+=l*(Go+(Go=o)),jo+=l*(Xo+(Xo=i)),Zo(Ho,Go,Xo)}var ui=function(t){Do=Ro=Io=Lo=Fo=Bo=Uo=jo=zo=Vo=Wo=0,Xr(t,$o);var e=zo,n=Vo,r=Wo,o=e*e+n*n+r*r;return o<1e-12&&(e=Bo,n=Uo,r=jo,Ro<yr&&(e=Io,n=Lo,r=Fo),(o=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[kr(n,e)*_r,Ir(r/Or(o))*_r]},si=function(t){return function(){return t}},ci=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function li(t,e){return[t>gr?t-br:t<-gr?t+br:t,e]}function fi(t,e,n){return(t%=br)?e||n?ci(hi(t),pi(e,n)):hi(t):e||n?pi(e,n):li}function di(t){return function(e,n){return[(e+=t)>gr?e-br:e<-gr?e+br:e,n]}}function hi(t){var e=di(t);return e.invert=di(-t),e}function pi(t,e){var n=Sr(t),r=Tr(t),o=Sr(e),i=Tr(e);function a(t,e){var a=Sr(e),u=Sr(t)*a,s=Tr(t)*a,c=Tr(e),l=c*n+u*r;return[kr(s*o-l*i,u*n-c*r),Ir(l*o+s*i)]}return a.invert=function(t,e){var a=Sr(e),u=Sr(t)*a,s=Tr(t)*a,c=Tr(e),l=c*o-s*i;return[kr(s*o+c*i,u*n+l*r),Ir(l*n-u*r)]},a}li.invert=li;var yi=function(t){function e(e){return(e=t(e[0]*wr,e[1]*wr))[0]*=_r,e[1]*=_r,e}return t=fi(t[0]*wr,t[1]*wr,t.length>2?t[2]*wr:0),e.invert=function(e){return(e=t.invert(e[0]*wr,e[1]*wr))[0]*=_r,e[1]*=_r,e},e};function gi(t,e,n,r,o,i){if(n){var a=Sr(e),u=Tr(e),s=r*n;null==o?(o=e+r*br,i=e-s/2):(o=vi(a,o),i=vi(a,i),(r>0?o<i:o>i)&&(o+=r*br));for(var c,l=o;r>0?l>i:l<i;l-=s)c=ro([a,-u*Sr(l),-u*Tr(l)]),t.point(c[0],c[1])}}function vi(t,e){(e=oo(e))[0]-=t,co(e);var n=Rr(-e[1]);return((-e[2]<0?-n:n)+br-yr)%br}var mi=function(){var t,e,n=si([0,0]),r=si(90),o=si(6),i={point:function(n,r){t.push(n=e(n,r)),n[0]*=_r,n[1]*=_r}};function a(){var a=n.apply(this,arguments),u=r.apply(this,arguments)*wr,s=o.apply(this,arguments)*wr;return t=[],e=fi(-a[0]*wr,-a[1]*wr,0).invert,gi(i,u,s,1),a={type:"Polygon",coordinates:[t]},t=e=null,a}return a.center=function(t){return arguments.length?(n="function"==typeof t?t:si([+t[0],+t[1]]),a):n},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:si(+t),a):r},a.precision=function(t){return arguments.length?(o="function"==typeof t?t:si(+t),a):o},a},bi=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Fr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},_i=function(t,e){return Er(t[0]-e[0])<yr&&Er(t[1]-e[1])<yr};function wi(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var Ei=function(t,e,n,r,o){var i,a,u=[],s=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],a=t[e];if(_i(r,a)){for(o.lineStart(),i=0;i<e;++i)o.point((r=t[i])[0],r[1]);o.lineEnd()}else u.push(n=new wi(r,t,null,!0)),s.push(n.o=new wi(r,null,n,!1)),u.push(n=new wi(a,t,null,!1)),s.push(n.o=new wi(a,null,n,!0))}}),u.length){for(s.sort(e),xi(u),xi(s),i=0,a=s.length;i<a;++i)s[i].e=n=!n;for(var c,l,f=u[0];;){for(var d=f,h=!0;d.v;)if((d=d.n)===f)return;c=d.z,o.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(i=0,a=c.length;i<a;++i)o.point((l=c[i])[0],l[1]);else r(d.x,d.n.x,1,o);d=d.n}else{if(h)for(c=d.p.z,i=c.length-1;i>=0;--i)o.point((l=c[i])[0],l[1]);else r(d.x,d.p.x,-1,o);d=d.p}c=(d=d.o).z,h=!h}while(!d.v);o.lineEnd()}}};function xi(t){if(e=t.length){for(var e,n,r=0,o=t[0];++r<e;)o.n=n=t[r],n.p=o,o=n;o.n=n=t[0],n.p=o}}var ki=fr(),Si=function(t,e){var n=e[0],r=e[1],o=Tr(r),i=[Tr(n),-Sr(n),0],a=0,u=0;ki.reset(),1===o?r=vr+yr:-1===o&&(r=-vr-yr);for(var s=0,c=t.length;s<c;++s)if(f=(l=t[s]).length)for(var l,f,d=l[f-1],h=d[0],p=d[1]/2+mr,y=Tr(p),g=Sr(p),v=0;v<f;++v,h=b,y=w,g=E,d=m){var m=l[v],b=m[0],_=m[1]/2+mr,w=Tr(_),E=Sr(_),x=b-h,k=x>=0?1:-1,S=k*x,M=S>gr,C=y*w;if(ki.add(kr(C*k*Tr(S),g*E+C*Sr(S))),a+=M?x+k*br:x,M^h>=n^b>=n){var A=ao(oo(d),oo(m));co(A);var P=ao(i,A);co(P);var T=(M^x>=0?-1:1)*Ir(P[2]);(r>T||r===T&&(A[0]||A[1]))&&(u+=M^x>=0?1:-1)}}return(a<-yr||a<yr&&ki<-yr)^1&u},Mi=function(t,e,n,r){return function(o){var i,a,u,s=e(o),c=bi(),l=e(c),f=!1,d={point:h,lineStart:y,lineEnd:g,polygonStart:function(){d.point=v,d.lineStart=m,d.lineEnd=b,a=[],i=[]},polygonEnd:function(){d.point=h,d.lineStart=y,d.lineEnd=g,a=F(a);var t=Si(i,r);a.length?(f||(o.polygonStart(),f=!0),Ei(a,Ai,t,n,o)):t&&(f||(o.polygonStart(),f=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),f&&(o.polygonEnd(),f=!1),a=i=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function h(e,n){t(e,n)&&o.point(e,n)}function p(t,e){s.point(t,e)}function y(){d.point=p,s.lineStart()}function g(){d.point=h,s.lineEnd()}function v(t,e){u.push([t,e]),l.point(t,e)}function m(){l.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),l.lineEnd();var t,e,n,r,s=l.clean(),d=c.result(),h=d.length;if(u.pop(),i.push(u),u=null,h)if(1&s){if((e=(n=d[0]).length-1)>0){for(f||(o.polygonStart(),f=!0),o.lineStart(),t=0;t<e;++t)o.point((r=n[t])[0],r[1]);o.lineEnd()}}else h>1&&2&s&&d.push(d.pop().concat(d.shift())),a.push(d.filter(Ci))}return d}};function Ci(t){return t.length>1}function Ai(t,e){return((t=t.x)[0]<0?t[1]-vr-yr:vr-t[1])-((e=e.x)[0]<0?e[1]-vr-yr:vr-e[1])}var Pi=Mi(function(){return!0},function(t){var e,n=NaN,r=NaN,o=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(i,a){var u=i>0?gr:-gr,s=Er(i-n);Er(s-gr)<yr?(t.point(n,r=(r+a)/2>0?vr:-vr),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(i,r),e=0):o!==u&&s>=gr&&(Er(n-o)<yr&&(n-=o*yr),Er(i-u)<yr&&(i-=u*yr),r=function(t,e,n,r){var o,i,a=Tr(t-n);return Er(a)>yr?xr((Tr(e)*(i=Sr(r))*Tr(n)-Tr(r)*(o=Sr(e))*Tr(t))/(o*i*a)):(e+r)/2}(n,r,i,a),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=i,r=a),o=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var o;if(null==t)o=n*vr,r.point(-gr,o),r.point(0,o),r.point(gr,o),r.point(gr,0),r.point(gr,-o),r.point(0,-o),r.point(-gr,-o),r.point(-gr,0),r.point(-gr,o);else if(Er(t[0]-e[0])>yr){var i=t[0]<e[0]?gr:-gr;o=n*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(e[0],e[1])},[-gr,-vr]);var Ti=function(t){var e=Sr(t),n=6*wr,r=e>0,o=Er(e)>yr;function i(t,n){return Sr(t)*Sr(n)>e}function a(t,n,r){var o=[1,0,0],i=ao(oo(t),oo(n)),a=io(i,i),u=i[0],s=a-u*u;if(!s)return!r&&t;var c=e*a/s,l=-e*u/s,f=ao(o,i),d=so(o,c);uo(d,so(i,l));var h=f,p=io(d,h),y=io(h,h),g=p*p-y*(io(d,d)-1);if(!(g<0)){var v=Or(g),m=so(h,(-p-v)/y);if(uo(m,d),m=ro(m),!r)return m;var b,_=t[0],w=n[0],E=t[1],x=n[1];w<_&&(b=_,_=w,w=b);var k=w-_,S=Er(k-gr)<yr;if(!S&&x<E&&(b=E,E=x,x=b),S||k<yr?S?E+x>0^m[1]<(Er(m[0]-_)<yr?E:x):E<=m[1]&&m[1]<=x:k>gr^(_<=m[0]&&m[0]<=w)){var M=so(h,(-p+v)/y);return uo(M,d),[m,ro(M)]}}}function u(e,n){var o=r?t:gr-t,i=0;return e<-o?i|=1:e>o&&(i|=2),n<-o?i|=4:n>o&&(i|=8),i}return Mi(i,function(t){var e,n,s,c,l;return{lineStart:function(){c=s=!1,l=1},point:function(f,d){var h,p=[f,d],y=i(f,d),g=r?y?0:u(f,d):y?u(f+(f<0?gr:-gr),d):0;if(!e&&(c=s=y)&&t.lineStart(),y!==s&&(!(h=a(e,p))||_i(e,h)||_i(p,h))&&(p[0]+=yr,p[1]+=yr,y=i(p[0],p[1])),y!==s)l=0,y?(t.lineStart(),h=a(p,e),t.point(h[0],h[1])):(h=a(e,p),t.point(h[0],h[1]),t.lineEnd()),e=h;else if(o&&e&&r^y){var v;g&n||!(v=a(p,e,!0))||(l=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!y||e&&_i(e,p)||t.point(p[0],p[1]),e=p,s=y,n=g},lineEnd:function(){s&&t.lineEnd(),e=null},clean:function(){return l|(c&&s)<<1}}},function(e,r,o,i){gi(i,t,n,o,e,r)},r?[0,-t]:[-gr,t-gr])},Ni=function(t,e,n,r,o,i){var a,u=t[0],s=t[1],c=0,l=1,f=e[0]-u,d=e[1]-s;if(a=n-u,f||!(a>0)){if(a/=f,f<0){if(a<c)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>c&&(c=a)}if(a=o-u,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>c&&(c=a)}else if(f>0){if(a<c)return;a<l&&(l=a)}if(a=r-s,d||!(a>0)){if(a/=d,d<0){if(a<c)return;a<l&&(l=a)}else if(d>0){if(a>l)return;a>c&&(c=a)}if(a=i-s,d||!(a<0)){if(a/=d,d<0){if(a>l)return;a>c&&(c=a)}else if(d>0){if(a<c)return;a<l&&(l=a)}return c>0&&(t[0]=u+c*f,t[1]=s+c*d),l<1&&(e[0]=u+l*f,e[1]=s+l*d),!0}}}}},Oi=1e9,Di=-Oi;function Ri(t,e,n,r){function o(o,i){return t<=o&&o<=n&&e<=i&&i<=r}function i(o,i,u,c){var l=0,f=0;if(null==o||(l=a(o,u))!==(f=a(i,u))||s(o,i)<0^u>0)do{c.point(0===l||3===l?t:n,l>1?r:e)}while((l=(l+u+4)%4)!==f);else c.point(i[0],i[1])}function a(r,o){return Er(r[0]-t)<yr?o>0?0:3:Er(r[0]-n)<yr?o>0?2:1:Er(r[1]-e)<yr?o>0?1:0:o>0?3:2}function u(t,e){return s(t.x,e.x)}function s(t,e){var n=a(t,1),r=a(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(a){var s,c,l,f,d,h,p,y,g,v,m,b=a,_=bi(),w={point:E,lineStart:function(){w.point=x,c&&c.push(l=[]);v=!0,g=!1,p=y=NaN},lineEnd:function(){s&&(x(f,d),h&&g&&_.rejoin(),s.push(_.result()));w.point=E,g&&b.lineEnd()},polygonStart:function(){b=_,s=[],c=[],m=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,o=c.length;n<o;++n)for(var i,a,u=c[n],s=1,l=u.length,f=u[0],d=f[0],h=f[1];s<l;++s)i=d,a=h,f=u[s],d=f[0],h=f[1],a<=r?h>r&&(d-i)*(r-a)>(h-a)*(t-i)&&++e:h<=r&&(d-i)*(r-a)<(h-a)*(t-i)&&--e;return e}(),n=m&&e,o=(s=F(s)).length;(n||o)&&(a.polygonStart(),n&&(a.lineStart(),i(null,null,1,a),a.lineEnd()),o&&Ei(s,u,e,i,a),a.polygonEnd());b=a,s=c=l=null}};function E(t,e){o(t,e)&&b.point(t,e)}function x(i,a){var u=o(i,a);if(c&&l.push([i,a]),v)f=i,d=a,h=u,v=!1,u&&(b.lineStart(),b.point(i,a));else if(u&&g)b.point(i,a);else{var s=[p=Math.max(Di,Math.min(Oi,p)),y=Math.max(Di,Math.min(Oi,y))],_=[i=Math.max(Di,Math.min(Oi,i)),a=Math.max(Di,Math.min(Oi,a))];Ni(s,_,t,e,n,r)?(g||(b.lineStart(),b.point(s[0],s[1])),b.point(_[0],_[1]),u||b.lineEnd(),m=!1):u&&(b.lineStart(),b.point(i,a),m=!1)}p=i,y=a,g=u}return w}}var Ii,Li,Fi,Bi=function(){var t,e,n,r=0,o=0,i=960,a=500;return n={stream:function(n){return t&&e===n?t:t=Ri(r,o,i,a)(e=n)},extent:function(u){return arguments.length?(r=+u[0][0],o=+u[0][1],i=+u[1][0],a=+u[1][1],t=e=null,n):[[r,o],[i,a]]}}},Ui=fr(),ji={sphere:Fr,point:Fr,lineStart:function(){ji.point=Vi,ji.lineEnd=zi},lineEnd:Fr,polygonStart:Fr,polygonEnd:Fr};function zi(){ji.point=ji.lineEnd=Fr}function Vi(t,e){Ii=t*=wr,Li=Tr(e*=wr),Fi=Sr(e),ji.point=Wi}function Wi(t,e){t*=wr;var n=Tr(e*=wr),r=Sr(e),o=Er(t-Ii),i=Sr(o),a=r*Tr(o),u=Fi*n-Li*r*i,s=Li*n+Fi*r*i;Ui.add(kr(Or(a*a+u*u),s)),Ii=t,Li=n,Fi=r}var Yi=function(t){return Ui.reset(),Xr(t,ji),+Ui},qi=[null,null],Hi={type:"LineString",coordinates:qi},Gi=function(t,e){return qi[0]=t,qi[1]=e,Yi(Hi)},Xi={Feature:function(t,e){return $i(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,o=n.length;++r<o;)if($i(n[r].geometry,e))return!0;return!1}},Ki={Sphere:function(){return!0},Point:function(t,e){return Qi(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Qi(n[r],e))return!0;return!1},LineString:function(t,e){return Zi(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Zi(n[r],e))return!0;return!1},Polygon:function(t,e){return Ji(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,o=n.length;++r<o;)if(Ji(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,o=n.length;++r<o;)if($i(n[r],e))return!0;return!1}};function $i(t,e){return!(!t||!Ki.hasOwnProperty(t.type))&&Ki[t.type](t,e)}function Qi(t,e){return 0===Gi(t,e)}function Zi(t,e){var n=Gi(t[0],t[1]);return Gi(t[0],e)+Gi(e,t[1])<=n+yr}function Ji(t,e){return!!Si(t.map(ta),ea(e))}function ta(t){return(t=t.map(ea)).pop(),t}function ea(t){return[t[0]*wr,t[1]*wr]}var na=function(t,e){return(t&&Xi.hasOwnProperty(t.type)?Xi[t.type]:$i)(t,e)};function ra(t,e,n){var r=E(t,e-yr,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function oa(t,e,n){var r=E(t,e-yr,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function ia(){var t,e,n,r,o,i,a,u,s,c,l,f,d=10,h=d,p=90,y=360,g=2.5;function v(){return{type:"MultiLineString",coordinates:m()}}function m(){return E(Mr(r/p)*p,n,p).map(l).concat(E(Mr(u/y)*y,a,y).map(f)).concat(E(Mr(e/d)*d,t,d).filter(function(t){return Er(t%p)>yr}).map(s)).concat(E(Mr(i/h)*h,o,h).filter(function(t){return Er(t%y)>yr}).map(c))}return v.lines=function(){return m().map(function(t){return{type:"LineString",coordinates:t}})},v.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(a).slice(1),l(n).reverse().slice(1),f(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],u=+t[0][1],a=+t[1][1],r>n&&(t=r,r=n,n=t),u>a&&(t=u,u=a,a=t),v.precision(g)):[[r,u],[n,a]]},v.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],i=+n[0][1],o=+n[1][1],e>t&&(n=e,e=t,t=n),i>o&&(n=i,i=o,o=n),v.precision(g)):[[e,i],[t,o]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],y=+t[1],v):[p,y]},v.stepMinor=function(t){return arguments.length?(d=+t[0],h=+t[1],v):[d,h]},v.precision=function(d){return arguments.length?(g=+d,s=ra(i,o,90),c=oa(e,t,g),l=ra(u,a,90),f=oa(r,n,g),v):g},v.extentMajor([[-180,-90+yr],[180,90-yr]]).extentMinor([[-180,-80-yr],[180,80+yr]])}function aa(){return ia()()}var ua,sa,ca,la,fa=function(t,e){var n=t[0]*wr,r=t[1]*wr,o=e[0]*wr,i=e[1]*wr,a=Sr(r),u=Tr(r),s=Sr(i),c=Tr(i),l=a*Sr(n),f=a*Tr(n),d=s*Sr(o),h=s*Tr(o),p=2*Ir(Or(Lr(i-r)+a*s*Lr(o-n))),y=Tr(p),g=p?function(t){var e=Tr(t*=p)/y,n=Tr(p-t)/y,r=n*l+e*d,o=n*f+e*h,i=n*u+e*c;return[kr(o,r)*_r,kr(i,Or(r*r+o*o))*_r]}:function(){return[n*_r,r*_r]};return g.distance=p,g},da=function(t){return t},ha=fr(),pa=fr(),ya={point:Fr,lineStart:Fr,lineEnd:Fr,polygonStart:function(){ya.lineStart=ga,ya.lineEnd=ba},polygonEnd:function(){ya.lineStart=ya.lineEnd=ya.point=Fr,ha.add(Er(pa)),pa.reset()},result:function(){var t=ha/2;return ha.reset(),t}};function ga(){ya.point=va}function va(t,e){ya.point=ma,ua=ca=t,sa=la=e}function ma(t,e){pa.add(la*t-ca*e),ca=t,la=e}function ba(){ma(ua,sa)}var _a=ya,wa=1/0,Ea=wa,xa=-wa,ka=xa;var Sa,Ma,Ca,Aa,Pa={point:function(t,e){t<wa&&(wa=t);t>xa&&(xa=t);e<Ea&&(Ea=e);e>ka&&(ka=e)},lineStart:Fr,lineEnd:Fr,polygonStart:Fr,polygonEnd:Fr,result:function(){var t=[[wa,Ea],[xa,ka]];return xa=ka=-(Ea=wa=1/0),t}},Ta=0,Na=0,Oa=0,Da=0,Ra=0,Ia=0,La=0,Fa=0,Ba=0,Ua={point:ja,lineStart:za,lineEnd:Ya,polygonStart:function(){Ua.lineStart=qa,Ua.lineEnd=Ha},polygonEnd:function(){Ua.point=ja,Ua.lineStart=za,Ua.lineEnd=Ya},result:function(){var t=Ba?[La/Ba,Fa/Ba]:Ia?[Da/Ia,Ra/Ia]:Oa?[Ta/Oa,Na/Oa]:[NaN,NaN];return Ta=Na=Oa=Da=Ra=Ia=La=Fa=Ba=0,t}};function ja(t,e){Ta+=t,Na+=e,++Oa}function za(){Ua.point=Va}function Va(t,e){Ua.point=Wa,ja(Ca=t,Aa=e)}function Wa(t,e){var n=t-Ca,r=e-Aa,o=Or(n*n+r*r);Da+=o*(Ca+t)/2,Ra+=o*(Aa+e)/2,Ia+=o,ja(Ca=t,Aa=e)}function Ya(){Ua.point=ja}function qa(){Ua.point=Ga}function Ha(){Xa(Sa,Ma)}function Ga(t,e){Ua.point=Xa,ja(Sa=Ca=t,Ma=Aa=e)}function Xa(t,e){var n=t-Ca,r=e-Aa,o=Or(n*n+r*r);Da+=o*(Ca+t)/2,Ra+=o*(Aa+e)/2,Ia+=o,La+=(o=Aa*t-Ca*e)*(Ca+t),Fa+=o*(Aa+e),Ba+=3*o,ja(Ca=t,Aa=e)}var Ka=Ua;function $a(t){this._context=t}$a.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,br)}},result:Fr};var Qa,Za,Ja,tu,eu,nu=fr(),ru={point:Fr,lineStart:function(){ru.point=ou},lineEnd:function(){Qa&&iu(Za,Ja),ru.point=Fr},polygonStart:function(){Qa=!0},polygonEnd:function(){Qa=null},result:function(){var t=+nu;return nu.reset(),t}};function ou(t,e){ru.point=iu,Za=tu=t,Ja=eu=e}function iu(t,e){tu-=t,eu-=e,nu.add(Or(tu*tu+eu*eu)),tu=t,eu=e}var au=ru;function uu(){this._string=[]}function su(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}uu.prototype={_radius:4.5,_circle:su(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=su(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var cu=function(t,e){var n,r,o=4.5;function i(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),Xr(t,n(r))),r.result()}return i.area=function(t){return Xr(t,n(_a)),_a.result()},i.measure=function(t){return Xr(t,n(au)),au.result()},i.bounds=function(t){return Xr(t,n(Pa)),Pa.result()},i.centroid=function(t){return Xr(t,n(Ka)),Ka.result()},i.projection=function(e){return arguments.length?(n=null==e?(t=null,da):(t=e).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(e=null,new uu):new $a(e=t),"function"!=typeof o&&r.pointRadius(o),i):e},i.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),i):o},i.projection(t).context(e)},lu=function(t){return{stream:fu(t)}};function fu(t){return function(e){var n=new du;for(var r in t)n[r]=t[r];return n.stream=e,n}}function du(){}function hu(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Xr(n,t.stream(Pa)),e(Pa.result()),null!=r&&t.clipExtent(r),t}function pu(t,e,n){return hu(t,function(n){var r=e[1][0]-e[0][0],o=e[1][1]-e[0][1],i=Math.min(r/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),a=+e[0][0]+(r-i*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(o-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([a,u])},n)}function yu(t,e,n){return pu(t,[[0,0],e],n)}function gu(t,e,n){return hu(t,function(n){var r=+e,o=r/(n[1][0]-n[0][0]),i=(r-o*(n[1][0]+n[0][0]))/2,a=-o*n[0][1];t.scale(150*o).translate([i,a])},n)}function vu(t,e,n){return hu(t,function(n){var r=+e,o=r/(n[1][1]-n[0][1]),i=-o*n[0][0],a=(r-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([i,a])},n)}du.prototype={constructor:du,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var mu=16,bu=Sr(30*wr),_u=function(t,e){return+e?function(t,e){function n(r,o,i,a,u,s,c,l,f,d,h,p,y,g){var v=c-r,m=l-o,b=v*v+m*m;if(b>4*e&&y--){var _=a+d,w=u+h,E=s+p,x=Or(_*_+w*w+E*E),k=Ir(E/=x),S=Er(Er(E)-1)<yr||Er(i-f)<yr?(i+f)/2:kr(w,_),M=t(S,k),C=M[0],A=M[1],P=C-r,T=A-o,N=m*P-v*T;(N*N/b>e||Er((v*P+m*T)/b-.5)>.3||a*d+u*h+s*p<bu)&&(n(r,o,i,a,u,s,C,A,S,_/=x,w/=x,E,y,g),g.point(C,A),n(C,A,S,_,w,E,c,l,f,d,h,p,y,g))}}return function(e){var r,o,i,a,u,s,c,l,f,d,h,p,y={point:g,lineStart:v,lineEnd:b,polygonStart:function(){e.polygonStart(),y.lineStart=_},polygonEnd:function(){e.polygonEnd(),y.lineStart=v}};function g(n,r){n=t(n,r),e.point(n[0],n[1])}function v(){l=NaN,y.point=m,e.lineStart()}function m(r,o){var i=oo([r,o]),a=t(r,o);n(l,f,c,d,h,p,l=a[0],f=a[1],c=r,d=i[0],h=i[1],p=i[2],mu,e),e.point(l,f)}function b(){y.point=g,e.lineEnd()}function _(){v(),y.point=w,y.lineEnd=E}function w(t,e){m(r=t,e),o=l,i=f,a=d,u=h,s=p,y.point=m}function E(){n(l,f,c,d,h,p,o,i,r,a,u,s,mu,e),y.lineEnd=b,b()}return y}}(t,e):function(t){return fu({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var wu=fu({point:function(t,e){this.stream.point(t*wr,e*wr)}});function Eu(t,e,n,r){var o=Sr(r),i=Tr(r),a=o*t,u=i*t,s=o/t,c=i/t,l=(i*n-o*e)/t,f=(i*e+o*n)/t;function d(t,r){return[a*t-u*r+e,n-u*t-a*r]}return d.invert=function(t,e){return[s*t-c*e+l,f-c*t-s*e]},d}function xu(t){return ku(function(){return t})()}function ku(t){var e,n,r,o,i,a,u,s,c,l,f=150,d=480,h=250,p=0,y=0,g=0,v=0,m=0,b=0,_=null,w=Pi,E=null,x=da,k=.5;function S(t){return s(t[0]*wr,t[1]*wr)}function M(t){return(t=s.invert(t[0],t[1]))&&[t[0]*_r,t[1]*_r]}function C(){var t=Eu(f,0,0,b).apply(null,e(p,y)),r=(b?Eu:function(t,e,n){function r(r,o){return[e+t*r,n-t*o]}return r.invert=function(r,o){return[(r-e)/t,(n-o)/t]},r})(f,d-t[0],h-t[1],b);return n=fi(g,v,m),u=ci(e,r),s=ci(n,u),a=_u(u,k),A()}function A(){return c=l=null,S}return S.stream=function(t){return c&&l===t?c:c=wu(function(t){return fu({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(w(a(x(l=t)))))},S.preclip=function(t){return arguments.length?(w=t,_=void 0,A()):w},S.postclip=function(t){return arguments.length?(x=t,E=r=o=i=null,A()):x},S.clipAngle=function(t){return arguments.length?(w=+t?Ti(_=t*wr):(_=null,Pi),A()):_*_r},S.clipExtent=function(t){return arguments.length?(x=null==t?(E=r=o=i=null,da):Ri(E=+t[0][0],r=+t[0][1],o=+t[1][0],i=+t[1][1]),A()):null==E?null:[[E,r],[o,i]]},S.scale=function(t){return arguments.length?(f=+t,C()):f},S.translate=function(t){return arguments.length?(d=+t[0],h=+t[1],C()):[d,h]},S.center=function(t){return arguments.length?(p=t[0]%360*wr,y=t[1]%360*wr,C()):[p*_r,y*_r]},S.rotate=function(t){return arguments.length?(g=t[0]%360*wr,v=t[1]%360*wr,m=t.length>2?t[2]%360*wr:0,C()):[g*_r,v*_r,m*_r]},S.angle=function(t){return arguments.length?(b=t%360*wr,C()):b*_r},S.precision=function(t){return arguments.length?(a=_u(u,k=t*t),A()):Or(k)},S.fitExtent=function(t,e){return pu(S,t,e)},S.fitSize=function(t,e){return yu(S,t,e)},S.fitWidth=function(t,e){return gu(S,t,e)},S.fitHeight=function(t,e){return vu(S,t,e)},function(){return e=t.apply(this,arguments),S.invert=e.invert&&M,C()}}function Su(t){var e=0,n=gr/3,r=ku(t),o=r(e,n);return o.parallels=function(t){return arguments.length?r(e=t[0]*wr,n=t[1]*wr):[e*_r,n*_r]},o}function Mu(t,e){var n=Tr(t),r=(n+Tr(e))/2;if(Er(r)<yr)return function(t){var e=Sr(t);function n(t,n){return[t*e,Tr(n)/e]}return n.invert=function(t,n){return[t/e,Ir(n*e)]},n}(t);var o=1+n*(2*r-n),i=Or(o)/r;function a(t,e){var n=Or(o-2*r*Tr(e))/r;return[n*Tr(t*=r),i-n*Sr(t)]}return a.invert=function(t,e){var n=i-e;return[kr(t,Er(n))/r*Nr(n),Ir((o-(t*t+n*n)*r*r)/(2*r))]},a}var Cu=function(){return Su(Mu).scale(155.424).center([0,33.6442])},Au=function(){return Cu().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Pu=function(){var t,e,n,r,o,i,a=Au(),u=Cu().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=Cu().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(t,e){i=[t,e]}};function l(t){var e=t[0],a=t[1];return i=null,n.point(e,a),i||(r.point(e,a),i)||(o.point(e,a),i)}function f(){return t=e=null,l}return l.invert=function(t){var e=a.scale(),n=a.translate(),r=(t[0]-n[0])/e,o=(t[1]-n[1])/e;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?u:o>=.166&&o<.234&&r>=-.214&&r<-.115?s:a).invert(t)},l.stream=function(n){return t&&e===n?t:t=function(t){var e=t.length;return{point:function(n,r){for(var o=-1;++o<e;)t[o].point(n,r)},sphere:function(){for(var n=-1;++n<e;)t[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)t[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)t[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)t[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)t[n].polygonEnd()}}}([a.stream(e=n),u.stream(n),s.stream(n)])},l.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),s.precision(t),f()):a.precision()},l.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),s.scale(t),l.translate(a.translate())):a.scale()},l.translate=function(t){if(!arguments.length)return a.translate();var e=a.scale(),i=+t[0],l=+t[1];return n=a.translate(t).clipExtent([[i-.455*e,l-.238*e],[i+.455*e,l+.238*e]]).stream(c),r=u.translate([i-.307*e,l+.201*e]).clipExtent([[i-.425*e+yr,l+.12*e+yr],[i-.214*e-yr,l+.234*e-yr]]).stream(c),o=s.translate([i-.205*e,l+.212*e]).clipExtent([[i-.214*e+yr,l+.166*e+yr],[i-.115*e-yr,l+.234*e-yr]]).stream(c),f()},l.fitExtent=function(t,e){return pu(l,t,e)},l.fitSize=function(t,e){return yu(l,t,e)},l.fitWidth=function(t,e){return gu(l,t,e)},l.fitHeight=function(t,e){return vu(l,t,e)},l.scale(1070)};function Tu(t){return function(e,n){var r=Sr(e),o=Sr(n),i=t(r*o);return[i*o*Tr(e),i*Tr(n)]}}function Nu(t){return function(e,n){var r=Or(e*e+n*n),o=t(r),i=Tr(o),a=Sr(o);return[kr(e*i,r*a),Ir(r&&n*i/r)]}}var Ou=Tu(function(t){return Or(2/(1+t))});Ou.invert=Nu(function(t){return 2*Ir(t/2)});var Du=function(){return xu(Ou).scale(124.75).clipAngle(179.999)},Ru=Tu(function(t){return(t=Rr(t))&&t/Tr(t)});Ru.invert=Nu(function(t){return t});var Iu=function(){return xu(Ru).scale(79.4188).clipAngle(179.999)};function Lu(t,e){return[t,Ar(Dr((vr+e)/2))]}Lu.invert=function(t,e){return[t,2*xr(Cr(e))-vr]};var Fu=function(){return Bu(Lu).scale(961/br)};function Bu(t){var e,n,r,o=xu(t),i=o.center,a=o.scale,u=o.translate,s=o.clipExtent,c=null;function l(){var i=gr*a(),u=o(yi(o.rotate()).invert([0,0]));return s(null==c?[[u[0]-i,u[1]-i],[u[0]+i,u[1]+i]]:t===Lu?[[Math.max(u[0]-i,c),e],[Math.min(u[0]+i,n),r]]:[[c,Math.max(u[1]-i,e)],[n,Math.min(u[1]+i,r)]])}return o.scale=function(t){return arguments.length?(a(t),l()):a()},o.translate=function(t){return arguments.length?(u(t),l()):u()},o.center=function(t){return arguments.length?(i(t),l()):i()},o.clipExtent=function(t){return arguments.length?(null==t?c=e=n=r=null:(c=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),l()):null==c?null:[[c,e],[n,r]]},l()}function Uu(t){return Dr((vr+t)/2)}function ju(t,e){var n=Sr(t),r=t===e?Tr(t):Ar(n/Sr(e))/Ar(Uu(e)/Uu(t)),o=n*Pr(Uu(t),r)/r;if(!r)return Lu;function i(t,e){o>0?e<-vr+yr&&(e=-vr+yr):e>vr-yr&&(e=vr-yr);var n=o/Pr(Uu(e),r);return[n*Tr(r*t),o-n*Sr(r*t)]}return i.invert=function(t,e){var n=o-e,i=Nr(r)*Or(t*t+n*n);return[kr(t,Er(n))/r*Nr(n),2*xr(Pr(o/i,1/r))-vr]},i}var zu=function(){return Su(ju).scale(109.5).parallels([30,30])};function Vu(t,e){return[t,e]}Vu.invert=Vu;var Wu=function(){return xu(Vu).scale(152.63)};function Yu(t,e){var n=Sr(t),r=t===e?Tr(t):(n-Sr(e))/(e-t),o=n/r+t;if(Er(r)<yr)return Vu;function i(t,e){var n=o-e,i=r*t;return[n*Tr(i),o-n*Sr(i)]}return i.invert=function(t,e){var n=o-e;return[kr(t,Er(n))/r*Nr(n),o-Nr(r)*Or(t*t+n*n)]},i}var qu=function(){return Su(Yu).scale(131.154).center([0,13.9389])},Hu=1.340264,Gu=-.081106,Xu=893e-6,Ku=.003796,$u=Or(3)/2;function Qu(t,e){var n=Ir($u*Tr(e)),r=n*n,o=r*r*r;return[t*Sr(n)/($u*(Hu+3*Gu*r+o*(7*Xu+9*Ku*r))),n*(Hu+Gu*r+o*(Xu+Ku*r))]}Qu.invert=function(t,e){for(var n,r=e,o=r*r,i=o*o*o,a=0;a<12&&(i=(o=(r-=n=(r*(Hu+Gu*o+i*(Xu+Ku*o))-e)/(Hu+3*Gu*o+i*(7*Xu+9*Ku*o)))*r)*o*o,!(Er(n)<1e-12));++a);return[$u*t*(Hu+3*Gu*o+i*(7*Xu+9*Ku*o))/Sr(r),Ir(Tr(r)/$u)]};var Zu=function(){return xu(Qu).scale(177.158)};function Ju(t,e){var n=Sr(e),r=Sr(t)*n;return[n*Tr(t)/r,Tr(e)/r]}Ju.invert=Nu(xr);var ts=function(){return xu(Ju).scale(144.049).clipAngle(60)};function es(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?da:fu({point:function(o,i){this.stream.point(o*t+n,i*e+r)}})}var ns=function(){var t,e,n,r,o,i,a=1,u=0,s=0,c=1,l=1,f=da,d=null,h=da;function p(){return r=o=null,i}return i={stream:function(t){return r&&o===t?r:r=f(h(o=t))},postclip:function(r){return arguments.length?(h=r,d=t=e=n=null,p()):h},clipExtent:function(r){return arguments.length?(h=null==r?(d=t=e=n=null,da):Ri(d=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),p()):null==d?null:[[d,t],[e,n]]},scale:function(t){return arguments.length?(f=es((a=+t)*c,a*l,u,s),p()):a},translate:function(t){return arguments.length?(f=es(a*c,a*l,u=+t[0],s=+t[1]),p()):[u,s]},reflectX:function(t){return arguments.length?(f=es(a*(c=t?-1:1),a*l,u,s),p()):c<0},reflectY:function(t){return arguments.length?(f=es(a*c,a*(l=t?-1:1),u,s),p()):l<0},fitExtent:function(t,e){return pu(i,t,e)},fitSize:function(t,e){return yu(i,t,e)},fitWidth:function(t,e){return gu(i,t,e)},fitHeight:function(t,e){return vu(i,t,e)}}};function rs(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}rs.invert=function(t,e){var n,r=e,o=25;do{var i=r*r,a=i*i;r-=n=(r*(1.007226+i*(.015085+a*(.028874*i-.044475-.005916*a)))-e)/(1.007226+i*(.045255+a*(.259866*i-.311325-.005916*11*a)))}while(Er(n)>yr&&--o>0);return[t/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};var os=function(){return xu(rs).scale(175.295)};function is(t,e){return[Sr(e)*Tr(t),Tr(e)]}is.invert=Nu(Ir);var as=function(){return xu(is).scale(249.5).clipAngle(90+yr)};function us(t,e){var n=Sr(e),r=1+Sr(t)*n;return[n*Tr(t)/r,Tr(e)/r]}us.invert=Nu(function(t){return 2*xr(t)});var ss=function(){return xu(us).scale(250).clipAngle(142)};function cs(t,e){return[Ar(Dr((vr+e)/2)),-t]}cs.invert=function(t,e){return[-e,2*xr(Cr(t))-vr]};var ls=function(){var t=Bu(cs),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)};function fs(t,e){return t.parent===e.parent?1:2}function ds(t,e){return t+e.x}function hs(t,e){return Math.max(t,e.y)}var ps=function(){var t=fs,e=1,n=1,r=!1;function o(o){var i,a=0;o.eachAfter(function(e){var n=e.children;n?(e.x=function(t){return t.reduce(ds,0)/t.length}(n),e.y=function(t){return 1+t.reduce(hs,0)}(n)):(e.x=i?a+=t(e,i):0,e.y=0,i=e)});var u=function(t){for(var e;e=t.children;)t=e[0];return t}(o),s=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(o),c=u.x-t(u,s)/2,l=s.x+t(s,u)/2;return o.eachAfter(r?function(t){t.x=(t.x-o.x)*e,t.y=(o.y-t.y)*n}:function(t){t.x=(t.x-c)/(l-c)*e,t.y=(1-(o.y?t.y/o.y:1))*n})}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],o):r?null:[e,n]},o.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],o):r?[e,n]:null},o};function ys(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function gs(t,e){var n,r,o,i,a,u=new _s(t),s=+t.value&&(u.value=t.value),c=[u];for(null==e&&(e=vs);n=c.pop();)if(s&&(n.value=+n.data.value),(o=e(n.data))&&(a=o.length))for(n.children=new Array(a),i=a-1;i>=0;--i)c.push(r=n.children[i]=new _s(o[i])),r.parent=n,r.depth=n.depth+1;return u.eachBefore(bs)}function vs(t){return t.children}function ms(t){t.data=t.data.data}function bs(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function _s(t){this.data=t,this.depth=this.height=0,this.parent=null}_s.prototype=gs.prototype={constructor:_s,count:function(){return this.eachAfter(ys)},each:function(t){var e,n,r,o,i=this,a=[i];do{for(e=a.reverse(),a=[];i=e.pop();)if(t(i),n=i.children)for(r=0,o=n.length;r<o;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,o=this,i=[o],a=[];o=i.pop();)if(a.push(o),e=o.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;o=a.pop();)t(o);return this},eachBefore:function(t){for(var e,n,r=this,o=[r];r=o.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)o.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,o=r&&r.length;--o>=0;)n+=r[o].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),o=null;for(t=n.pop(),e=r.pop();t===e;)o=t,t=n.pop(),e=r.pop();return o}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var o=r.length;t!==n;)r.splice(o,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return gs(this).eachBefore(ms)}};var ws=Array.prototype.slice;var Es=function(t){for(var e,n,r=0,o=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(ws.call(t))).length,i=[];r<o;)e=t[r],n&&Ss(n,e)?++r:(n=Cs(i=xs(i,e)),r=0);return n};function xs(t,e){var n,r;if(Ms(e,t))return[e];for(n=0;n<t.length;++n)if(ks(e,t[n])&&Ms(As(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(ks(As(t[n],t[r]),e)&&ks(As(t[n],e),t[r])&&ks(As(t[r],e),t[n])&&Ms(Ps(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function ks(t,e){var n=t.r-e.r,r=e.x-t.x,o=e.y-t.y;return n<0||n*n<r*r+o*o}function Ss(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,o=e.y-t.y;return n>0&&n*n>r*r+o*o}function Ms(t,e){for(var n=0;n<e.length;++n)if(!Ss(t,e[n]))return!1;return!0}function Cs(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return As(t[0],t[1]);case 3:return Ps(t[0],t[1],t[2])}}function As(t,e){var n=t.x,r=t.y,o=t.r,i=e.x,a=e.y,u=e.r,s=i-n,c=a-r,l=u-o,f=Math.sqrt(s*s+c*c);return{x:(n+i+s/f*l)/2,y:(r+a+c/f*l)/2,r:(f+o+u)/2}}function Ps(t,e,n){var r=t.x,o=t.y,i=t.r,a=e.x,u=e.y,s=e.r,c=n.x,l=n.y,f=n.r,d=r-a,h=r-c,p=o-u,y=o-l,g=s-i,v=f-i,m=r*r+o*o-i*i,b=m-a*a-u*u+s*s,_=m-c*c-l*l+f*f,w=h*p-d*y,E=(p*_-y*b)/(2*w)-r,x=(y*g-p*v)/w,k=(h*b-d*_)/(2*w)-o,S=(d*v-h*g)/w,M=x*x+S*S-1,C=2*(i+E*x+k*S),A=E*E+k*k-i*i,P=-(M?(C+Math.sqrt(C*C-4*M*A))/(2*M):A/C);return{x:r+E+x*P,y:o+k+S*P,r:P}}function Ts(t,e,n){var r,o,i,a,u=t.x-e.x,s=t.y-e.y,c=u*u+s*s;c?(o=e.r+n.r,o*=o,a=t.r+n.r,o>(a*=a)?(r=(c+a-o)/(2*c),i=Math.sqrt(Math.max(0,a/c-r*r)),n.x=t.x-r*u-i*s,n.y=t.y-r*s+i*u):(r=(c+o-a)/(2*c),i=Math.sqrt(Math.max(0,o/c-r*r)),n.x=e.x+r*u-i*s,n.y=e.y+r*s+i*u)):(n.x=e.x+n.r,n.y=e.y)}function Ns(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,o=e.y-t.y;return n>0&&n*n>r*r+o*o}function Os(t){var e=t._,n=t.next._,r=e.r+n.r,o=(e.x*n.r+n.x*e.r)/r,i=(e.y*n.r+n.y*e.r)/r;return o*o+i*i}function Ds(t){this._=t,this.next=null,this.previous=null}function Rs(t){if(!(o=t.length))return 0;var e,n,r,o,i,a,u,s,c,l,f;if((e=t[0]).x=0,e.y=0,!(o>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(o>2))return e.r+n.r;Ts(n,e,r=t[2]),e=new Ds(e),n=new Ds(n),r=new Ds(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(u=3;u<o;++u){Ts(e._,n._,r=t[u]),r=new Ds(r),s=n.next,c=e.previous,l=n._.r,f=e._.r;do{if(l<=f){if(Ns(s._,r._)){n=s,e.next=n,n.previous=e,--u;continue t}l+=s._.r,s=s.next}else{if(Ns(c._,r._)){(e=c).next=n,n.previous=e,--u;continue t}f+=c._.r,c=c.previous}}while(s!==c.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,i=Os(e);(r=r.next)!==n;)(a=Os(r))<i&&(e=r,i=a);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=Es(e),u=0;u<o;++u)(e=t[u]).x-=r.x,e.y-=r.y;return r.r}var Is=function(t){return Rs(t),t};function Ls(t){if("function"!=typeof t)throw new Error;return t}function Fs(){return 0}var Bs=function(t){return function(){return t}};function Us(t){return Math.sqrt(t.value)}var js=function(){var t=null,e=1,n=1,r=Fs;function o(o){return o.x=e/2,o.y=n/2,t?o.eachBefore(zs(t)).eachAfter(Vs(r,.5)).eachBefore(Ws(1)):o.eachBefore(zs(Us)).eachAfter(Vs(Fs,1)).eachAfter(Vs(r,o.r/Math.min(e,n))).eachBefore(Ws(Math.min(e,n)/(2*o.r))),o}return o.radius=function(e){return arguments.length?(t=function(t){return null==t?null:Ls(t)}(e),o):t},o.size=function(t){return arguments.length?(e=+t[0],n=+t[1],o):[e,n]},o.padding=function(t){return arguments.length?(r="function"==typeof t?t:Bs(+t),o):r},o};function zs(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Vs(t,e){return function(n){if(r=n.children){var r,o,i,a=r.length,u=t(n)*e||0;if(u)for(o=0;o<a;++o)r[o].r+=u;if(i=Rs(r),u)for(o=0;o<a;++o)r[o].r-=u;n.r=i+u}}}function Ws(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Ys=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},qs=function(t,e,n,r,o){for(var i,a=t.children,u=-1,s=a.length,c=t.value&&(r-e)/t.value;++u<s;)(i=a[u]).y0=n,i.y1=o,i.x0=e,i.x1=e+=i.value*c},Hs=function(){var t=1,e=1,n=0,r=!1;function o(o){var i=o.height+1;return o.x0=o.y0=n,o.x1=t,o.y1=e/i,o.eachBefore(function(t,e){return function(r){r.children&&qs(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var o=r.x0,i=r.y0,a=r.x1-n,u=r.y1-n;a<o&&(o=a=(o+a)/2),u<i&&(i=u=(i+u)/2),r.x0=o,r.y0=i,r.x1=a,r.y1=u}}(e,i)),r&&o.eachBefore(Ys),o}return o.round=function(t){return arguments.length?(r=!!t,o):r},o.size=function(n){return arguments.length?(t=+n[0],e=+n[1],o):[t,e]},o.padding=function(t){return arguments.length?(n=+t,o):n},o},Gs="$",Xs={depth:-1},Ks={};function $s(t){return t.id}function Qs(t){return t.parentId}var Zs=function(){var t=$s,e=Qs;function n(n){var r,o,i,a,u,s,c,l=n.length,f=new Array(l),d={};for(o=0;o<l;++o)r=n[o],u=f[o]=new _s(r),null!=(s=t(r,o,n))&&(s+="")&&(d[c=Gs+(u.id=s)]=c in d?Ks:u);for(o=0;o<l;++o)if(u=f[o],null!=(s=e(n[o],o,n))&&(s+="")){if(!(a=d[Gs+s]))throw new Error("missing: "+s);if(a===Ks)throw new Error("ambiguous: "+s);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(i)throw new Error("multiple roots");i=u}if(!i)throw new Error("no root");if(i.parent=Xs,i.eachBefore(function(t){t.depth=t.parent.depth+1,--l}).eachBefore(bs),i.parent=null,l>0)throw new Error("cycle");return i}return n.id=function(e){return arguments.length?(t=Ls(e),n):t},n.parentId=function(t){return arguments.length?(e=Ls(t),n):e},n};function Js(t,e){return t.parent===e.parent?1:2}function tc(t){var e=t.children;return e?e[0]:t.t}function ec(t){var e=t.children;return e?e[e.length-1]:t.t}function nc(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function rc(t,e,n){return t.a.parent===e.parent?t.a:n}function oc(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}oc.prototype=Object.create(_s.prototype);var ic=function(){var t=Js,e=1,n=1,r=null;function o(o){var s=function(t){for(var e,n,r,o,i,a=new oc(t,0),u=[a];e=u.pop();)if(r=e._.children)for(e.children=new Array(i=r.length),o=i-1;o>=0;--o)u.push(n=e.children[o]=new oc(r[o],o)),n.parent=e;return(a.parent=new oc(null,0)).children=[a],a}(o);if(s.eachAfter(i),s.parent.m=-s.z,s.eachBefore(a),r)o.eachBefore(u);else{var c=o,l=o,f=o;o.eachBefore(function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)});var d=c===l?1:t(c,l)/2,h=d-c.x,p=e/(l.x+d+h),y=n/(f.depth||1);o.eachBefore(function(t){t.x=(t.x+h)*p,t.y=t.depth*y})}return o}function i(e){var n=e.children,r=e.parent.children,o=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,o=t.children,i=o.length;--i>=0;)(e=o[i]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var i=(n[0].z+n[n.length-1].z)/2;o?(e.z=o.z+t(e._,o._),e.m=e.z-i):e.z=i}else o&&(e.z=o.z+t(e._,o._));e.parent.A=function(e,n,r){if(n){for(var o,i=e,a=e,u=n,s=i.parent.children[0],c=i.m,l=a.m,f=u.m,d=s.m;u=ec(u),i=tc(i),u&&i;)s=tc(s),(a=ec(a)).a=e,(o=u.z+f-i.z-c+t(u._,i._))>0&&(nc(rc(u,e,r),e,o),c+=o,l+=o),f+=u.m,c+=i.m,d+=s.m,l+=a.m;u&&!ec(a)&&(a.t=u,a.m+=f-l),i&&!tc(s)&&(s.t=i,s.m+=c-d,r=e)}return r}(e,o,e.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=e,t.y=t.depth*n}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],o):r?null:[e,n]},o.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],o):r?[e,n]:null},o},ac=function(t,e,n,r,o){for(var i,a=t.children,u=-1,s=a.length,c=t.value&&(o-n)/t.value;++u<s;)(i=a[u]).x0=e,i.x1=r,i.y0=n,i.y1=n+=i.value*c},uc=(1+Math.sqrt(5))/2;function sc(t,e,n,r,o,i){for(var a,u,s,c,l,f,d,h,p,y,g,v=[],m=e.children,b=0,_=0,w=m.length,E=e.value;b<w;){s=o-n,c=i-r;do{l=m[_++].value}while(!l&&_<w);for(f=d=l,g=l*l*(y=Math.max(c/s,s/c)/(E*t)),p=Math.max(d/g,g/f);_<w;++_){if(l+=u=m[_].value,u<f&&(f=u),u>d&&(d=u),g=l*l*y,(h=Math.max(d/g,g/f))>p){l-=u;break}p=h}v.push(a={value:l,dice:s<c,children:m.slice(b,_)}),a.dice?qs(a,n,r,o,E?r+=c*l/E:i):ac(a,n,r,E?n+=s*l/E:o,i),E-=l,b=_}return v}var cc=function t(e){function n(t,n,r,o,i){sc(e,t,n,r,o,i)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(uc),lc=function(){var t=cc,e=!1,n=1,r=1,o=[0],i=Fs,a=Fs,u=Fs,s=Fs,c=Fs;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),o=[0],e&&t.eachBefore(Ys),t}function f(e){var n=o[e.depth],r=e.x0+n,l=e.y0+n,f=e.x1-n,d=e.y1-n;f<r&&(r=f=(r+f)/2),d<l&&(l=d=(l+d)/2),e.x0=r,e.y0=l,e.x1=f,e.y1=d,e.children&&(n=o[e.depth+1]=i(e)/2,r+=c(e)-n,l+=a(e)-n,f-=u(e)-n,d-=s(e)-n,f<r&&(r=f=(r+f)/2),d<l&&(l=d=(l+d)/2),t(e,r,l,f,d))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],r=+t[1],l):[n,r]},l.tile=function(e){return arguments.length?(t=Ls(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(i="function"==typeof t?t:Bs(+t),l):i},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Bs(+t),l):a},l.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Bs(+t),l):u},l.paddingBottom=function(t){return arguments.length?(s="function"==typeof t?t:Bs(+t),l):s},l.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:Bs(+t),l):c},l},fc=function(t,e,n,r,o){var i,a,u=t.children,s=u.length,c=new Array(s+1);for(c[0]=a=i=0;i<s;++i)c[i+1]=a+=u[i].value;!function t(e,n,r,o,i,a,s){if(e>=n-1){var l=u[e];return l.x0=o,l.y0=i,l.x1=a,void(l.y1=s)}var f=c[e],d=r/2+f,h=e+1,p=n-1;for(;h<p;){var y=h+p>>>1;c[y]<d?h=y+1:p=y}d-c[h-1]<c[h]-d&&e+1<h&&--h;var g=c[h]-f,v=r-g;if(a-o>s-i){var m=(o*v+a*g)/r;t(e,h,g,o,i,m,s),t(h,n,v,m,i,a,s)}else{var b=(i*v+s*g)/r;t(e,h,g,o,i,a,b),t(h,n,v,o,b,a,s)}}(0,s,t.value,e,n,r,o)},dc=function(t,e,n,r,o){(1&t.depth?ac:qs)(t,e,n,r,o)},hc=function t(e){function n(t,n,r,o,i){if((a=t._squarify)&&a.ratio===e)for(var a,u,s,c,l,f=-1,d=a.length,h=t.value;++f<d;){for(s=(u=a[f]).children,c=u.value=0,l=s.length;c<l;++c)u.value+=s[c].value;u.dice?qs(u,n,r,o,r+=(i-r)*u.value/h):ac(u,n,r,n+=(o-n)*u.value/h,i),h-=u.value}else t._squarify=a=sc(e,t,n,r,o,i),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(uc),pc=function(t){for(var e,n=-1,r=t.length,o=t[r-1],i=0;++n<r;)e=o,o=t[n],i+=e[1]*o[0]-e[0]*o[1];return i/2},yc=function(t){for(var e,n,r=-1,o=t.length,i=0,a=0,u=t[o-1],s=0;++r<o;)e=u,u=t[r],s+=n=e[0]*u[1]-u[0]*e[1],i+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[i/(s*=3),a/s]},gc=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])};function vc(t,e){return t[0]-e[0]||t[1]-e[1]}function mc(t){for(var e=t.length,n=[0,1],r=2,o=2;o<e;++o){for(;r>1&&gc(t[n[r-2]],t[n[r-1]],t[o])<=0;)--r;n[r++]=o}return n.slice(0,r)}var bc=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),o=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(vc),e=0;e<n;++e)o[e]=[r[e][0],-r[e][1]];var i=mc(r),a=mc(o),u=a[0]===i[0],s=a[a.length-1]===i[i.length-1],c=[];for(e=i.length-1;e>=0;--e)c.push(t[r[i[e]][2]]);for(e=+u;e<a.length-s;++e)c.push(t[r[a[e]][2]]);return c},_c=function(t,e){for(var n,r,o=t.length,i=t[o-1],a=e[0],u=e[1],s=i[0],c=i[1],l=!1,f=0;f<o;++f)n=(i=t[f])[0],(r=i[1])>u!=c>u&&a<(s-n)*(u-r)/(c-r)+n&&(l=!l),s=n,c=r;return l},wc=function(t){for(var e,n,r=-1,o=t.length,i=t[o-1],a=i[0],u=i[1],s=0;++r<o;)e=a,n=u,e-=a=(i=t[r])[0],n-=u=i[1],s+=Math.sqrt(e*e+n*n);return s},Ec=function(){return Math.random()},xc=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Ec),kc=function t(e){function n(t,n){var r,o;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,o=r*r+i*i}while(!o||o>1);return t+n*i*Math.sqrt(-2*Math.log(o)/o)}}return n.source=t,n}(Ec),Sc=function t(e){function n(){var t=kc.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Ec),Mc=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Ec),Cc=function t(e){function n(t){var n=Mc.source(e)(t);return function(){return n()/t}}return n.source=t,n}(Ec),Ac=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Ec),Pc=Array.prototype,Tc=Pc.map,Nc=Pc.slice,Oc={name:"implicit"};function Dc(t){var e=ue(),n=[],r=Oc;function o(o){var i=o+"",a=e.get(i);if(!a){if(r!==Oc)return r;e.set(i,a=n.push(o))}return t[(a-1)%t.length]}return t=null==t?[]:Nc.call(t),o.domain=function(t){if(!arguments.length)return n.slice();n=[],e=ue();for(var r,i,a=-1,u=t.length;++a<u;)e.has(i=(r=t[a])+"")||e.set(i,n.push(r));return o},o.range=function(e){return arguments.length?(t=Nc.call(e),o):t.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return Dc().domain(n).range(t).unknown(r)},o}function Rc(){var t,e,n=Dc().unknown(void 0),r=n.domain,o=n.range,i=[0,1],a=!1,u=0,s=0,c=.5;function l(){var n=r().length,l=i[1]<i[0],f=i[l-0],d=i[1-l];t=(d-f)/Math.max(1,n-u+2*s),a&&(t=Math.floor(t)),f+=(d-f-t*(n-u))*c,e=t*(1-u),a&&(f=Math.round(f),e=Math.round(e));var h=E(n).map(function(e){return f+t*e});return o(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],a=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,l()):a},n.padding=function(t){return arguments.length?(u=s=Math.max(0,Math.min(1,t)),l()):u},n.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),l()):u},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.copy=function(){return Rc().domain(r()).range(i).round(a).paddingInner(u).paddingOuter(s).align(c)},l()}function Ic(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(Rc().paddingInner(1))}var Lc=function(t){return function(){return t}},Fc=function(t){return+t},Bc=[0,1];function Uc(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Lc(e)}function jc(t,e,n,r){var o=t[0],i=t[1],a=e[0],u=e[1];return i<o?(o=n(i,o),a=r(u,a)):(o=n(o,i),a=r(a,u)),function(t){return a(o(t))}}function zc(t,e,n,r){var o=Math.min(t.length,e.length)-1,i=new Array(o),a=new Array(o),u=-1;for(t[o]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<o;)i[u]=n(t[u],t[u+1]),a[u]=r(e[u],e[u+1]);return function(e){var n=s(t,e,1,o)-1;return a[n](i[n](e))}}function Vc(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Wc(t,e){var n,r,o,i=Bc,a=Bc,u=ct.a,s=!1;function c(){return n=Math.min(i.length,a.length)>2?zc:jc,r=o=null,l}function l(e){return(r||(r=n(i,a,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,u)))(+e)}return l.invert=function(t){return(o||(o=n(a,i,Uc,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(i=Tc.call(t,Fc),c()):i.slice()},l.range=function(t){return arguments.length?(a=Nc.call(t),c()):a.slice()},l.rangeRound=function(t){return a=Nc.call(t),u=ct.t,c()},l.clamp=function(t){return arguments.length?(s=!!t,c()):s},l.interpolate=function(t){return arguments.length?(u=t,c()):u},c()}var Yc=function(t,e,n){var r,o=t[0],i=t[t.length-1],a=A(o,i,null==e?10:e);switch((n=Kn(null==n?",f":n)).type){case"s":var u=Math.max(Math.abs(o),Math.abs(i));return null!=n.precision||isNaN(r=cr(a,u))||(n.precision=r),tr(n,u);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=lr(a,Math.max(Math.abs(o),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=sr(a))||(n.precision=r-2*("%"===n.type))}return Jn(n)};function qc(t){var e=t.domain;return t.ticks=function(t){var n=e();return M(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Yc(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,o=e(),i=0,a=o.length-1,u=o[i],s=o[a];return s<u&&(r=u,u=s,s=r,r=i,i=a,a=r),(r=C(u,s,n))>0?r=C(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=C(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,n)),r>0?(o[i]=Math.floor(u/r)*r,o[a]=Math.ceil(s/r)*r,e(o)):r<0&&(o[i]=Math.ceil(u*r)/r,o[a]=Math.floor(s*r)/r,e(o)),t},t}function Hc(){var t=Wc(Uc,ct.o);return t.copy=function(){return Vc(t,Hc())},qc(t)}function Gc(){var t=[0,1];function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Tc.call(n,Fc),e):t.slice()},e.copy=function(){return Gc().domain(t)},qc(e)}var Xc=function(t,e){var n,r=0,o=(t=t.slice()).length-1,i=t[r],a=t[o];return a<i&&(n=r,r=o,o=n,n=i,i=a,a=n),t[r]=e.floor(i),t[o]=e.ceil(a),t};function Kc(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:Lc(e)}function $c(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function Qc(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Zc(t){return 10===t?Qc:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function Jc(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function tl(t){return function(e){return-t(-e)}}function el(){var t=Wc(Kc,$c).domain([1,10]),e=t.domain,n=10,r=Jc(10),o=Zc(10);function i(){return r=Jc(n),o=Zc(n),e()[0]<0&&(r=tl(r),o=tl(o)),t}return t.base=function(t){return arguments.length?(n=+t,i()):n},t.domain=function(t){return arguments.length?(e(t),i()):e()},t.ticks=function(t){var i,a=e(),u=a[0],s=a[a.length-1];(i=s<u)&&(d=u,u=s,s=d);var c,l,f,d=r(u),h=r(s),p=null==t?10:+t,y=[];if(!(n%1)&&h-d<p){if(d=Math.round(d)-1,h=Math.round(h)+1,u>0){for(;d<h;++d)for(l=1,c=o(d);l<n;++l)if(!((f=c*l)<u)){if(f>s)break;y.push(f)}}else for(;d<h;++d)for(l=n-1,c=o(d);l>=1;--l)if(!((f=c*l)<u)){if(f>s)break;y.push(f)}}else y=M(d,h,Math.min(h-d,p)).map(o);return i?y.reverse():y},t.tickFormat=function(e,i){if(null==i&&(i=10===n?".0e":","),"function"!=typeof i&&(i=Jn(i)),e===1/0)return i;null==e&&(e=10);var a=Math.max(1,n*e/t.ticks().length);return function(t){var e=t/o(Math.round(r(t)));return e*n<n-.5&&(e*=n),e<=a?i(t):""}},t.nice=function(){return e(Xc(e(),{floor:function(t){return o(Math.floor(r(t)))},ceil:function(t){return o(Math.ceil(r(t)))}}))},t.copy=function(){return Vc(t,el().base(n))},t}function nl(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function rl(){var t=1,e=Wc(function(e,n){return(n=nl(n,t)-(e=nl(e,t)))?function(r){return(nl(r,t)-e)/n}:Lc(n)},function(e,n){return n=nl(n,t)-(e=nl(e,t)),function(r){return nl(e+n*r,1/t)}}),n=e.domain;return e.exponent=function(e){return arguments.length?(t=+e,n(n())):t},e.copy=function(){return Vc(e,rl().exponent(t))},qc(e)}function ol(){return rl().exponent(.5)}function il(){var t=[],e=[],n=[];function o(){var r=0,o=Math.max(1,e.length);for(n=new Array(o-1);++r<o;)n[r-1]=N(t,r/o);return i}function i(t){if(!isNaN(t=+t))return e[s(n,t)]}return i.invertExtent=function(r){var o=e.indexOf(r);return o<0?[NaN,NaN]:[o>0?n[o-1]:t[0],o<n.length?n[o]:t[t.length-1]]},i.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,i=0,a=e.length;i<a;++i)null==(n=e[i])||isNaN(n=+n)||t.push(n);return t.sort(r),o()},i.range=function(t){return arguments.length?(e=Nc.call(t),o()):e.slice()},i.quantiles=function(){return n.slice()},i.copy=function(){return il().domain(t).range(e)},i}function al(){var t=0,e=1,n=1,r=[.5],o=[0,1];function i(t){if(t<=t)return o[s(r,t,0,n)]}function a(){var o=-1;for(r=new Array(n);++o<n;)r[o]=((o+1)*e-(o-n)*t)/(n+1);return i}return i.domain=function(n){return arguments.length?(t=+n[0],e=+n[1],a()):[t,e]},i.range=function(t){return arguments.length?(n=(o=Nc.call(t)).length-1,a()):o.slice()},i.invertExtent=function(i){var a=o.indexOf(i);return a<0?[NaN,NaN]:a<1?[t,r[0]]:a>=n?[r[n-1],e]:[r[a-1],r[a]]},i.copy=function(){return al().domain([t,e]).range(o)},qc(i)}function ul(){var t=[.5],e=[0,1],n=1;function r(r){if(r<=r)return e[s(t,r,0,n)]}return r.domain=function(o){return arguments.length?(t=Nc.call(o),n=Math.min(t.length,e.length-1),r):t.slice()},r.range=function(o){return arguments.length?(e=Nc.call(o),n=Math.min(t.length,e.length-1),r):e.slice()},r.invertExtent=function(n){var r=e.indexOf(n);return[t[r-1],t[r]]},r.copy=function(){return ul().domain(t).range(e)},r}var sl=new Date,cl=new Date;function ll(t,e,n,r){function o(e){return t(e=new Date(+e)),e}return o.floor=o,o.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},o.round=function(t){var e=o(t),n=o.ceil(t);return t-e<n-t?e:n},o.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},o.range=function(n,r,i){var a,u=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return u;do{u.push(a=new Date(+n)),e(n,i),t(n)}while(a<n&&n<r);return u},o.filter=function(n){return ll(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(o.count=function(e,r){return sl.setTime(+e),cl.setTime(+r),t(sl),t(cl),Math.floor(n(sl,cl))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(r?function(e){return r(e)%t==0}:function(e){return o.count(0,e)%t==0}):o:null}),o}var fl=ll(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});fl.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ll(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):fl:null};var dl=fl,hl=fl.range,pl=6e4,yl=6048e5,gl=ll(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),vl=gl,ml=gl.range,bl=ll(function(t){t.setTime(Math.floor(t/pl)*pl)},function(t,e){t.setTime(+t+e*pl)},function(t,e){return(e-t)/pl},function(t){return t.getMinutes()}),_l=bl,wl=bl.range,El=ll(function(t){var e=t.getTimezoneOffset()*pl%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),xl=El,kl=El.range,Sl=ll(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pl)/864e5},function(t){return t.getDate()-1}),Ml=Sl,Cl=Sl.range;function Al(t){return ll(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*pl)/yl})}var Pl=Al(0),Tl=Al(1),Nl=Al(2),Ol=Al(3),Dl=Al(4),Rl=Al(5),Il=Al(6),Ll=Pl.range,Fl=Tl.range,Bl=Nl.range,Ul=Ol.range,jl=Dl.range,zl=Rl.range,Vl=Il.range,Wl=ll(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Yl=Wl,ql=Wl.range,Hl=ll(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Hl.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ll(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Gl=Hl,Xl=Hl.range,Kl=ll(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*pl)},function(t,e){return(e-t)/pl},function(t){return t.getUTCMinutes()}),$l=Kl,Ql=Kl.range,Zl=ll(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}),Jl=Zl,tf=Zl.range,ef=ll(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1}),nf=ef,rf=ef.range;function of(t){return ll(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/yl})}var af=of(0),uf=of(1),sf=of(2),cf=of(3),lf=of(4),ff=of(5),df=of(6),hf=af.range,pf=uf.range,yf=sf.range,gf=cf.range,vf=lf.range,mf=ff.range,bf=df.range,_f=ll(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),wf=_f,Ef=_f.range,xf=ll(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});xf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ll(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var kf=xf,Sf=xf.range;function Mf(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Cf(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Af(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Pf(t){var e=t.dateTime,n=t.date,r=t.time,o=t.periods,i=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,c=zf(o),l=Vf(o),f=zf(i),d=Vf(i),h=zf(a),p=Vf(a),y=zf(u),g=Vf(u),v=zf(s),m=Vf(s),b={a:function(t){return a[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:sd,e:sd,f:hd,H:cd,I:ld,j:fd,L:dd,m:pd,M:yd,p:function(t){return o[+(t.getHours()>=12)]},Q:Wd,s:Yd,S:gd,u:vd,U:md,V:bd,w:_d,W:wd,x:null,X:null,y:Ed,Y:xd,Z:kd,"%":Vd},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Sd,e:Sd,f:Td,H:Md,I:Cd,j:Ad,L:Pd,m:Nd,M:Od,p:function(t){return o[+(t.getUTCHours()>=12)]},Q:Wd,s:Yd,S:Dd,u:Rd,U:Id,V:Ld,w:Fd,W:Bd,x:null,X:null,y:Ud,Y:jd,Z:zd,"%":Vd},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:Zf,e:Zf,f:od,H:td,I:td,j:Jf,L:rd,m:Qf,M:ed,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:ad,s:ud,S:nd,u:Yf,U:qf,V:Hf,w:Wf,W:Gf,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:Kf,Y:Xf,Z:$f,"%":id};function E(t,e){return function(n){var r,o,i,a=[],u=-1,s=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(o=If[r=t.charAt(++u)])?r=t.charAt(++u):o="e"===r?" ":"0",(i=e[r])&&(r=i(n,o)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function x(t,e){return function(n){var r,o,i=Af(1900);if(k(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(o=(r=Cf(Af(i.y))).getUTCDay())>4||0===o?uf.ceil(r):uf(r),r=nf.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(o=(r=e(Af(i.y))).getDay())>4||0===o?Tl.ceil(r):Tl(r),r=Ml.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?Cf(Af(i.y)).getUTCDay():e(Af(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Cf(i)):e(i)}}function k(t,e,n,r){for(var o,i,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(o=e.charCodeAt(a++))){if(o=e.charAt(a++),!(i=w[o in If?e.charAt(a++):o])||(r=i(t,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return b.x=E(n,b),b.X=E(r,b),b.c=E(e,b),_.x=E(n,_),_.X=E(r,_),_.c=E(e,_),{format:function(t){var e=E(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=x(t+="",Mf);return e.toString=function(){return t},e},utcFormat:function(t){var e=E(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=x(t,Cf);return e.toString=function(){return t},e}}}var Tf,Nf,Of,Df,Rf,If={"-":"",_:" ",0:"0"},Lf=/^\s*\d+/,Ff=/^%/,Bf=/[\\^$*+?|[\]().{}]/g;function Uf(t,e,n){var r=t<0?"-":"",o=(r?-t:t)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(e)+o:o)}function jf(t){return t.replace(Bf,"\\$&")}function zf(t){return new RegExp("^(?:"+t.map(jf).join("|")+")","i")}function Vf(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Wf(t,e,n){var r=Lf.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Yf(t,e,n){var r=Lf.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function qf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Hf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Gf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Xf(t,e,n){var r=Lf.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Kf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function $f(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Qf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Zf(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Jf(t,e,n){var r=Lf.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function td(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ed(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function nd(t,e,n){var r=Lf.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function rd(t,e,n){var r=Lf.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function od(t,e,n){var r=Lf.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function id(t,e,n){var r=Ff.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ad(t,e,n){var r=Lf.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ud(t,e,n){var r=Lf.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function sd(t,e){return Uf(t.getDate(),e,2)}function cd(t,e){return Uf(t.getHours(),e,2)}function ld(t,e){return Uf(t.getHours()%12||12,e,2)}function fd(t,e){return Uf(1+Ml.count(Gl(t),t),e,3)}function dd(t,e){return Uf(t.getMilliseconds(),e,3)}function hd(t,e){return dd(t,e)+"000"}function pd(t,e){return Uf(t.getMonth()+1,e,2)}function yd(t,e){return Uf(t.getMinutes(),e,2)}function gd(t,e){return Uf(t.getSeconds(),e,2)}function vd(t){var e=t.getDay();return 0===e?7:e}function md(t,e){return Uf(Pl.count(Gl(t),t),e,2)}function bd(t,e){var n=t.getDay();return t=n>=4||0===n?Dl(t):Dl.ceil(t),Uf(Dl.count(Gl(t),t)+(4===Gl(t).getDay()),e,2)}function _d(t){return t.getDay()}function wd(t,e){return Uf(Tl.count(Gl(t),t),e,2)}function Ed(t,e){return Uf(t.getFullYear()%100,e,2)}function xd(t,e){return Uf(t.getFullYear()%1e4,e,4)}function kd(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Uf(e/60|0,"0",2)+Uf(e%60,"0",2)}function Sd(t,e){return Uf(t.getUTCDate(),e,2)}function Md(t,e){return Uf(t.getUTCHours(),e,2)}function Cd(t,e){return Uf(t.getUTCHours()%12||12,e,2)}function Ad(t,e){return Uf(1+nf.count(kf(t),t),e,3)}function Pd(t,e){return Uf(t.getUTCMilliseconds(),e,3)}function Td(t,e){return Pd(t,e)+"000"}function Nd(t,e){return Uf(t.getUTCMonth()+1,e,2)}function Od(t,e){return Uf(t.getUTCMinutes(),e,2)}function Dd(t,e){return Uf(t.getUTCSeconds(),e,2)}function Rd(t){var e=t.getUTCDay();return 0===e?7:e}function Id(t,e){return Uf(af.count(kf(t),t),e,2)}function Ld(t,e){var n=t.getUTCDay();return t=n>=4||0===n?lf(t):lf.ceil(t),Uf(lf.count(kf(t),t)+(4===kf(t).getUTCDay()),e,2)}function Fd(t){return t.getUTCDay()}function Bd(t,e){return Uf(uf.count(kf(t),t),e,2)}function Ud(t,e){return Uf(t.getUTCFullYear()%100,e,2)}function jd(t,e){return Uf(t.getUTCFullYear()%1e4,e,4)}function zd(){return"+0000"}function Vd(){return"%"}function Wd(t){return+t}function Yd(t){return Math.floor(+t/1e3)}function qd(t){return Tf=Pf(t),Nf=Tf.format,Of=Tf.parse,Df=Tf.utcFormat,Rf=Tf.utcParse,Tf}qd({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Hd=Date.prototype.toISOString?function(t){return t.toISOString()}:Df("%Y-%m-%dT%H:%M:%S.%LZ");var Gd=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Rf("%Y-%m-%dT%H:%M:%S.%LZ"),Xd=1e3,Kd=60*Xd,$d=60*Kd,Qd=24*$d,Zd=7*Qd,Jd=30*Qd,th=365*Qd;function eh(t){return new Date(t)}function nh(t){return t instanceof Date?+t:+new Date(+t)}function rh(t,e,n,r,i,a,u,s,c){var l=Wc(Uc,ct.o),f=l.invert,d=l.domain,h=c(".%L"),p=c(":%S"),y=c("%I:%M"),g=c("%I %p"),v=c("%a %d"),m=c("%b %d"),b=c("%B"),_=c("%Y"),w=[[u,1,Xd],[u,5,5*Xd],[u,15,15*Xd],[u,30,30*Xd],[a,1,Kd],[a,5,5*Kd],[a,15,15*Kd],[a,30,30*Kd],[i,1,$d],[i,3,3*$d],[i,6,6*$d],[i,12,12*$d],[r,1,Qd],[r,2,2*Qd],[n,1,Zd],[e,1,Jd],[e,3,3*Jd],[t,1,th]];function E(o){return(u(o)<o?h:a(o)<o?p:i(o)<o?y:r(o)<o?g:e(o)<o?n(o)<o?v:m:t(o)<o?b:_)(o)}function x(e,n,r,i){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(r-n)/e,u=o(function(t){return t[2]}).right(w,a);u===w.length?(i=A(n/th,r/th,e),e=t):u?(i=(u=w[a/w[u-1][2]<w[u][2]/a?u-1:u])[1],e=u[0]):(i=Math.max(A(n,r,e),1),e=s)}return null==i?e:e.every(i)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?d(Tc.call(t,nh)):d().map(eh)},l.ticks=function(t,e){var n,r=d(),o=r[0],i=r[r.length-1],a=i<o;return a&&(n=o,o=i,i=n),n=(n=x(t,o,i,e))?n.range(o,i+1):[],a?n.reverse():n},l.tickFormat=function(t,e){return null==e?E:c(e)},l.nice=function(t,e){var n=d();return(t=x(t,n[0],n[n.length-1],e))?d(Xc(n,t)):l},l.copy=function(){return Vc(l,rh(t,e,n,r,i,a,u,s,c))},l}var oh=function(){return rh(Gl,Yl,Pl,Ml,xl,_l,vl,dl,Nf).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},ih=function(){return rh(kf,wf,af,nf,Jl,$l,vl,dl,Df).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])};function ah(t){var e=0,n=1,r=1,o=!1;function i(n){var i=(n-e)*r;return t(o?Math.max(0,Math.min(1,i)):i)}return i.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=e===n?0:1/(n-e),i):[e,n]},i.clamp=function(t){return arguments.length?(o=!!t,i):o},i.interpolator=function(e){return arguments.length?(t=e,i):t},i.copy=function(){return ah(t).domain([e,n]).clamp(o)},qc(i)}function uh(t){var e=0,n=.5,r=1,o=1,i=1,a=!1;function u(e){var r=.5+((e=+e)-n)*(e<n?o:i);return t(a?Math.max(0,Math.min(1,r)):r)}return u.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=+t[2],o=e===n?0:.5/(n-e),i=n===r?0:.5/(r-n),u):[e,n,r]},u.clamp=function(t){return arguments.length?(a=!!t,u):a},u.interpolator=function(e){return arguments.length?(t=e,u):t},u.copy=function(){return uh(t).domain([e,n,r]).clamp(a)},qc(u)}var sh=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},ch=sh("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),lh=sh("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),fh=sh("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),dh=sh("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),hh=sh("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ph=sh("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),yh=sh("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),gh=sh("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),vh=sh("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),mh=function(t){return Object(ct.r)(t[t.length-1])},bh=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(sh),_h=mh(bh),wh=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(sh),Eh=mh(wh),xh=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(sh),kh=mh(xh),Sh=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(sh),Mh=mh(Sh),Ch=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(sh),Ah=mh(Ch),Ph=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(sh),Th=mh(Ph),Nh=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(sh),Oh=mh(Nh),Dh=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(sh),Rh=mh(Dh),Ih=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(sh),Lh=mh(Ih),Fh=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(sh),Bh=mh(Fh),Uh=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(sh),jh=mh(Uh),zh=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(sh),Vh=mh(zh),Wh=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(sh),Yh=mh(Wh),qh=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(sh),Hh=mh(qh),Gh=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(sh),Xh=mh(Gh),Kh=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(sh),$h=mh(Kh),Qh=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(sh),Zh=mh(Qh),Jh=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(sh),tp=mh(Jh),ep=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(sh),np=mh(ep),rp=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(sh),op=mh(rp),ip=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(sh),ap=mh(ip),up=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(sh),sp=mh(up),cp=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(sh),lp=mh(cp),fp=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(sh),dp=mh(fp),hp=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(sh),pp=mh(hp),yp=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(sh),gp=mh(yp),vp=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(sh),mp=mh(vp),bp=Object(ct.f)(Object(_e.b)(300,.5,0),Object(_e.b)(-240,.5,1)),_p=Object(ct.f)(Object(_e.b)(-100,.75,.35),Object(_e.b)(80,1.5,.8)),wp=Object(ct.f)(Object(_e.b)(260,.75,.35),Object(_e.b)(80,1.5,.8)),Ep=Object(_e.b)(),xp=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return Ep.h=360*t-100,Ep.s=1.5-1.5*e,Ep.l=.8-.9*e,Ep+""},kp=Object(_e.h)(),Sp=Math.PI/3,Mp=2*Math.PI/3,Cp=function(t){var e;return t=(.5-t)*Math.PI,kp.r=255*(e=Math.sin(t))*e,kp.g=255*(e=Math.sin(t+Sp))*e,kp.b=255*(e=Math.sin(t+Mp))*e,kp+""};function Ap(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}var Pp=Ap(sh("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Tp=Ap(sh("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Np=Ap(sh("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Op=Ap(sh("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Dp=function(t){return function(){return t}},Rp=Math.abs,Ip=Math.atan2,Lp=Math.cos,Fp=Math.max,Bp=Math.min,Up=Math.sin,jp=Math.sqrt,zp=1e-12,Vp=Math.PI,Wp=Vp/2,Yp=2*Vp;function qp(t){return t>=1?Wp:t<=-1?-Wp:Math.asin(t)}function Hp(t){return t.innerRadius}function Gp(t){return t.outerRadius}function Xp(t){return t.startAngle}function Kp(t){return t.endAngle}function $p(t){return t&&t.padAngle}function Qp(t,e,n,r,o,i,a){var u=t-n,s=e-r,c=(a?i:-i)/jp(u*u+s*s),l=c*s,f=-c*u,d=t+l,h=e+f,p=n+l,y=r+f,g=(d+p)/2,v=(h+y)/2,m=p-d,b=y-h,_=m*m+b*b,w=o-i,E=d*y-p*h,x=(b<0?-1:1)*jp(Fp(0,w*w*_-E*E)),k=(E*b-m*x)/_,S=(-E*m-b*x)/_,M=(E*b+m*x)/_,C=(-E*m+b*x)/_,A=k-g,P=S-v,T=M-g,N=C-v;return A*A+P*P>T*T+N*N&&(k=M,S=C),{cx:k,cy:S,x01:-l,y01:-f,x11:k*(o/w-1),y11:S*(o/w-1)}}var Zp=function(){var t=Hp,e=Gp,n=Dp(0),r=null,o=Xp,i=Kp,a=$p,u=null;function s(){var s,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),d=o.apply(this,arguments)-Wp,h=i.apply(this,arguments)-Wp,p=Rp(h-d),y=h>d;if(u||(u=s=Zt()),f<l&&(c=f,f=l,l=c),f>zp)if(p>Yp-zp)u.moveTo(f*Lp(d),f*Up(d)),u.arc(0,0,f,d,h,!y),l>zp&&(u.moveTo(l*Lp(h),l*Up(h)),u.arc(0,0,l,h,d,y));else{var g,v,m=d,b=h,_=d,w=h,E=p,x=p,k=a.apply(this,arguments)/2,S=k>zp&&(r?+r.apply(this,arguments):jp(l*l+f*f)),M=Bp(Rp(f-l)/2,+n.apply(this,arguments)),C=M,A=M;if(S>zp){var P=qp(S/l*Up(k)),T=qp(S/f*Up(k));(E-=2*P)>zp?(_+=P*=y?1:-1,w-=P):(E=0,_=w=(d+h)/2),(x-=2*T)>zp?(m+=T*=y?1:-1,b-=T):(x=0,m=b=(d+h)/2)}var N=f*Lp(m),O=f*Up(m),D=l*Lp(w),R=l*Up(w);if(M>zp){var I=f*Lp(b),L=f*Up(b),F=l*Lp(_),B=l*Up(_);if(p<Vp){var U=E>zp?function(t,e,n,r,o,i,a,u){var s=n-t,c=r-e,l=a-o,f=u-i,d=(l*(e-i)-f*(t-o))/(f*s-l*c);return[t+d*s,e+d*c]}(N,O,F,B,I,L,D,R):[D,R],j=N-U[0],z=O-U[1],V=I-U[0],W=L-U[1],Y=1/Up(function(t){return t>1?0:t<-1?Vp:Math.acos(t)}((j*V+z*W)/(jp(j*j+z*z)*jp(V*V+W*W)))/2),q=jp(U[0]*U[0]+U[1]*U[1]);C=Bp(M,(l-q)/(Y-1)),A=Bp(M,(f-q)/(Y+1))}}x>zp?A>zp?(g=Qp(F,B,N,O,f,A,y),v=Qp(I,L,D,R,f,A,y),u.moveTo(g.cx+g.x01,g.cy+g.y01),A<M?u.arc(g.cx,g.cy,A,Ip(g.y01,g.x01),Ip(v.y01,v.x01),!y):(u.arc(g.cx,g.cy,A,Ip(g.y01,g.x01),Ip(g.y11,g.x11),!y),u.arc(0,0,f,Ip(g.cy+g.y11,g.cx+g.x11),Ip(v.cy+v.y11,v.cx+v.x11),!y),u.arc(v.cx,v.cy,A,Ip(v.y11,v.x11),Ip(v.y01,v.x01),!y))):(u.moveTo(N,O),u.arc(0,0,f,m,b,!y)):u.moveTo(N,O),l>zp&&E>zp?C>zp?(g=Qp(D,R,I,L,l,-C,y),v=Qp(N,O,F,B,l,-C,y),u.lineTo(g.cx+g.x01,g.cy+g.y01),C<M?u.arc(g.cx,g.cy,C,Ip(g.y01,g.x01),Ip(v.y01,v.x01),!y):(u.arc(g.cx,g.cy,C,Ip(g.y01,g.x01),Ip(g.y11,g.x11),!y),u.arc(0,0,l,Ip(g.cy+g.y11,g.cx+g.x11),Ip(v.cy+v.y11,v.cx+v.x11),y),u.arc(v.cx,v.cy,C,Ip(v.y11,v.x11),Ip(v.y01,v.x01),!y))):u.arc(0,0,l,w,_,y):u.lineTo(D,R)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +i.apply(this,arguments))/2-Vp/2;return[Lp(r)*n,Up(r)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),s):n},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Dp(+t),s):r},s.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),s):o},s.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Dp(+t),s):i},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Dp(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s};function Jp(t){this._context=t}Jp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var ty=function(t){return new Jp(t)};function ey(t){return t[0]}function ny(t){return t[1]}var ry=function(){var t=ey,e=ny,n=Dp(!0),r=null,o=ty,i=null;function a(a){var u,s,c,l=a.length,f=!1;for(null==r&&(i=o(c=Zt())),u=0;u<=l;++u)!(u<l&&n(s=a[u],u,a))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(s,u,a),+e(s,u,a));if(c)return i=null,c+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Dp(!!t),a):n},a.curve=function(t){return arguments.length?(o=t,null!=r&&(i=o(r)),a):o},a.context=function(t){return arguments.length?(null==t?r=i=null:i=o(r=t),a):r},a},oy=function(){var t=ey,e=null,n=Dp(0),r=ny,o=Dp(!0),i=null,a=ty,u=null;function s(s){var c,l,f,d,h,p=s.length,y=!1,g=new Array(p),v=new Array(p);for(null==i&&(u=a(h=Zt())),c=0;c<=p;++c){if(!(c<p&&o(d=s[c],c,s))===y)if(y=!y)l=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=c-1;f>=l;--f)u.point(g[f],v[f]);u.lineEnd(),u.areaEnd()}y&&(g[c]=+t(d,c,s),v[c]=+n(d,c,s),u.point(e?+e(d,c,s):g[c],r?+r(d,c,s):v[c]))}if(h)return u=null,h+""||null}function c(){return ry().defined(o).curve(a).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Dp(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Dp(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:Dp(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Dp(+t),s):r},s.lineX0=s.lineY0=function(){return c().x(t).y(n)},s.lineY1=function(){return c().x(t).y(r)},s.lineX1=function(){return c().x(e).y(n)},s.defined=function(t){return arguments.length?(o="function"==typeof t?t:Dp(!!t),s):o},s.curve=function(t){return arguments.length?(a=t,null!=i&&(u=a(i)),s):a},s.context=function(t){return arguments.length?(null==t?i=u=null:u=a(i=t),s):i},s},iy=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},ay=function(t){return t},uy=function(){var t=ay,e=iy,n=null,r=Dp(0),o=Dp(Yp),i=Dp(0);function a(a){var u,s,c,l,f,d=a.length,h=0,p=new Array(d),y=new Array(d),g=+r.apply(this,arguments),v=Math.min(Yp,Math.max(-Yp,o.apply(this,arguments)-g)),m=Math.min(Math.abs(v)/d,i.apply(this,arguments)),b=m*(v<0?-1:1);for(u=0;u<d;++u)(f=y[p[u]=u]=+t(a[u],u,a))>0&&(h+=f);for(null!=e?p.sort(function(t,n){return e(y[t],y[n])}):null!=n&&p.sort(function(t,e){return n(a[t],a[e])}),u=0,c=h?(v-d*b)/h:0;u<d;++u,g=l)s=p[u],l=g+((f=y[s])>0?f*c:0)+b,y[s]={data:a[s],index:u,value:f,startAngle:g,endAngle:l,padAngle:m};return y}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:Dp(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),a):r},a.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),a):o},a.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:Dp(+t),a):i},a},sy=ly(ty);function cy(t){this._curve=t}function ly(t){function e(e){return new cy(t(e))}return e._curve=t,e}function fy(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(ly(t)):e()._curve},t}cy.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var dy=function(){return fy(ry().curve(sy))},hy=function(){var t=oy().curve(sy),e=t.curve,n=t.lineX0,r=t.lineX1,o=t.lineY0,i=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return fy(n())},delete t.lineX0,t.lineEndAngle=function(){return fy(r())},delete t.lineX1,t.lineInnerRadius=function(){return fy(o())},delete t.lineY0,t.lineOuterRadius=function(){return fy(i())},delete t.lineY1,t.curve=function(t){return arguments.length?e(ly(t)):e()._curve},t},py=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},yy=Array.prototype.slice;function gy(t){return t.source}function vy(t){return t.target}function my(t){var e=gy,n=vy,r=ey,o=ny,i=null;function a(){var a,u=yy.call(arguments),s=e.apply(this,u),c=n.apply(this,u);if(i||(i=a=Zt()),t(i,+r.apply(this,(u[0]=s,u)),+o.apply(this,u),+r.apply(this,(u[0]=c,u)),+o.apply(this,u)),a)return i=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),a):r},a.y=function(t){return arguments.length?(o="function"==typeof t?t:Dp(+t),a):o},a.context=function(t){return arguments.length?(i=null==t?null:t,a):i},a}function by(t,e,n,r,o){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,o,r,o)}function _y(t,e,n,r,o){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+o)/2,r,n,r,o)}function wy(t,e,n,r,o){var i=py(e,n),a=py(e,n=(n+o)/2),u=py(r,n),s=py(r,o);t.moveTo(i[0],i[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function Ey(){return my(by)}function xy(){return my(_y)}function ky(){var t=my(wy);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Sy={draw:function(t,e){var n=Math.sqrt(e/Vp);t.moveTo(n,0),t.arc(0,0,n,0,Yp)}},My={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},Cy=Math.sqrt(1/3),Ay=2*Cy,Py={draw:function(t,e){var n=Math.sqrt(e/Ay),r=n*Cy;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},Ty=Math.sin(Vp/10)/Math.sin(7*Vp/10),Ny=Math.sin(Yp/10)*Ty,Oy=-Math.cos(Yp/10)*Ty,Dy={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=Ny*n,o=Oy*n;t.moveTo(0,-n),t.lineTo(r,o);for(var i=1;i<5;++i){var a=Yp*i/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*n,-u*n),t.lineTo(u*r-s*o,s*r+u*o)}t.closePath()}},Ry={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},Iy=Math.sqrt(3),Ly={draw:function(t,e){var n=-Math.sqrt(e/(3*Iy));t.moveTo(0,2*n),t.lineTo(-Iy*n,-n),t.lineTo(Iy*n,-n),t.closePath()}},Fy=Math.sqrt(3)/2,By=1/Math.sqrt(12),Uy=3*(By/2+1),jy={draw:function(t,e){var n=Math.sqrt(e/Uy),r=n/2,o=n*By,i=r,a=n*By+n,u=-i,s=a;t.moveTo(r,o),t.lineTo(i,a),t.lineTo(u,s),t.lineTo(-.5*r-Fy*o,Fy*r+-.5*o),t.lineTo(-.5*i-Fy*a,Fy*i+-.5*a),t.lineTo(-.5*u-Fy*s,Fy*u+-.5*s),t.lineTo(-.5*r+Fy*o,-.5*o-Fy*r),t.lineTo(-.5*i+Fy*a,-.5*a-Fy*i),t.lineTo(-.5*u+Fy*s,-.5*s-Fy*u),t.closePath()}},zy=[Sy,My,Py,Ry,Dy,Ly,jy],Vy=function(){var t=Dp(Sy),e=Dp(64),n=null;function r(){var r;if(n||(n=r=Zt()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:Dp(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:Dp(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},Wy=function(){};function Yy(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function qy(t){this._context=t}qy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Yy(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Hy=function(t){return new qy(t)};function Gy(t){this._context=t}Gy.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Xy=function(t){return new Gy(t)};function Ky(t){this._context=t}Ky.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Yy(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var $y=function(t){return new Ky(t)};function Qy(t,e){this._basis=new qy(t),this._beta=e}Qy.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,o=t[0],i=e[0],a=t[n]-o,u=e[n]-i,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(o+r*a),this._beta*e[s]+(1-this._beta)*(i+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Zy=function t(e){function n(t){return 1===e?new qy(t):new Qy(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function Jy(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function tg(t,e){this._context=t,this._k=(1-e)/6}tg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Jy(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var eg=function t(e){function n(t){return new tg(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ng(t,e){this._context=t,this._k=(1-e)/6}ng.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var rg=function t(e){function n(t){return new ng(t,e)}return n.tension=function(e){return t(+e)},n}(0);function og(t,e){this._context=t,this._k=(1-e)/6}og.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Jy(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var ig=function t(e){function n(t){return new og(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ag(t,e,n){var r=t._x1,o=t._y1,i=t._x2,a=t._y2;if(t._l01_a>zp){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,o=(o*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>zp){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);i=(i*c+t._x1*t._l23_2a-e*t._l12_2a)/l,a=(a*c+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(r,o,i,a,t._x2,t._y2)}function ug(t,e){this._context=t,this._alpha=e}ug.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var sg=function t(e){function n(t){return e?new ug(t,e):new tg(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function cg(t,e){this._context=t,this._alpha=e}cg.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var lg=function t(e){function n(t){return e?new cg(t,e):new ng(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function fg(t,e){this._context=t,this._alpha=e}fg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ag(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var dg=function t(e){function n(t){return e?new fg(t,e):new og(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function hg(t){this._context=t}hg.prototype={areaStart:Wy,areaEnd:Wy,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var pg=function(t){return new hg(t)};function yg(t){return t<0?-1:1}function gg(t,e,n){var r=t._x1-t._x0,o=e-t._x1,i=(t._y1-t._y0)/(r||o<0&&-0),a=(n-t._y1)/(o||r<0&&-0),u=(i*o+a*r)/(r+o);return(yg(i)+yg(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(u))||0}function vg(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function mg(t,e,n){var r=t._x0,o=t._y0,i=t._x1,a=t._y1,u=(i-r)/3;t._context.bezierCurveTo(r+u,o+u*e,i-u,a-u*n,i,a)}function bg(t){this._context=t}function _g(t){this._context=new wg(t)}function wg(t){this._context=t}function Eg(t){return new bg(t)}function xg(t){return new _g(t)}function kg(t){this._context=t}function Sg(t){var e,n,r=t.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)o[e]=1,i[e]=4,a[e]=4*t[e]+2*t[e+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=o[e]/i[e-1],i[e]-=n,a[e]-=n*a[e-1];for(o[r-1]=a[r-1]/i[r-1],e=r-2;e>=0;--e)o[e]=(a[e]-o[e+1])/i[e];for(i[r-1]=(t[r]+o[r-1])/2,e=0;e<r-1;++e)i[e]=2*t[e+1]-o[e+1];return[o,i]}bg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:mg(this,this._t0,vg(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,mg(this,vg(this,n=gg(this,t,e)),n);break;default:mg(this,this._t0,n=gg(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(_g.prototype=Object.create(bg.prototype)).point=function(t,e){bg.prototype.point.call(this,e,t)},wg.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,o,i){this._context.bezierCurveTo(e,t,r,n,i,o)}},kg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Sg(t),o=Sg(e),i=0,a=1;a<n;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Mg=function(t){return new kg(t)};function Cg(t,e){this._context=t,this._t=e}Cg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var Ag=function(t){return new Cg(t,.5)};function Pg(t){return new Cg(t,0)}function Tg(t){return new Cg(t,1)}var Ng=function(t,e){if((o=t.length)>1)for(var n,r,o,i=1,a=t[e[0]],u=a.length;i<o;++i)for(r=a,a=t[e[i]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},Og=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function Dg(t,e){return t[e]}var Rg=function(){var t=Dp([]),e=Og,n=Ng,r=Dg;function o(o){var i,a,u=t.apply(this,arguments),s=o.length,c=u.length,l=new Array(c);for(i=0;i<c;++i){for(var f,d=u[i],h=l[i]=new Array(s),p=0;p<s;++p)h[p]=f=[0,+r(o[p],d,p,o)],f.data=o[p];h.key=d}for(i=0,a=e(l);i<c;++i)l[a[i]].index=i;return n(l,a),l}return o.keys=function(e){return arguments.length?(t="function"==typeof e?e:Dp(yy.call(e)),o):t},o.value=function(t){return arguments.length?(r="function"==typeof t?t:Dp(+t),o):r},o.order=function(t){return arguments.length?(e=null==t?Og:"function"==typeof t?t:Dp(yy.call(t)),o):e},o.offset=function(t){return arguments.length?(n=null==t?Ng:t,o):n},o},Ig=function(t,e){if((r=t.length)>0){for(var n,r,o,i=0,a=t[0].length;i<a;++i){for(o=n=0;n<r;++n)o+=t[n][i][1]||0;if(o)for(n=0;n<r;++n)t[n][i][1]/=o}Ng(t,e)}},Lg=function(t,e){if((u=t.length)>1)for(var n,r,o,i,a,u,s=0,c=t[e[0]].length;s<c;++s)for(i=a=0,n=0;n<u;++n)(o=(r=t[e[n]][s])[1]-r[0])>=0?(r[0]=i,r[1]=i+=o):o<0?(r[1]=a,r[0]=a+=o):r[0]=i},Fg=function(t,e){if((n=t.length)>0){for(var n,r=0,o=t[e[0]],i=o.length;r<i;++r){for(var a=0,u=0;a<n;++a)u+=t[a][r][1]||0;o[r][1]+=o[r][0]=-u/2}Ng(t,e)}},Bg=function(t,e){if((o=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,o,i=0,a=1;a<r;++a){for(var u=0,s=0,c=0;u<o;++u){for(var l=t[e[u]],f=l[a][1]||0,d=(f-(l[a-1][1]||0))/2,h=0;h<u;++h){var p=t[e[h]];d+=(p[a][1]||0)-(p[a-1][1]||0)}s+=f,c+=d*f}n[a-1][1]+=n[a-1][0]=i,s&&(i-=c/s)}n[a-1][1]+=n[a-1][0]=i,Ng(t,e)}},Ug=function(t){var e=t.map(jg);return Og(t).sort(function(t,n){return e[t]-e[n]})};function jg(t){for(var e,n=0,r=-1,o=t.length;++r<o;)(e=+t[r][1])&&(n+=e);return n}var zg=function(t){return Ug(t).reverse()},Vg=function(t){var e,n,r=t.length,o=t.map(jg),i=Og(t).sort(function(t,e){return o[e]-o[t]}),a=0,u=0,s=[],c=[];for(e=0;e<r;++e)n=i[e],a<u?(a+=o[n],s.push(n)):(u+=o[n],c.push(n));return c.reverse().concat(s)},Wg=function(t){return Og(t).reverse()},Yg=function(t){return function(){return t}};function qg(t){return t[0]}function Hg(t){return t[1]}function Gg(){this._=null}function Xg(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Kg(t,e){var n=e,r=e.R,o=n.U;o?o.L===n?o.L=r:o.R=r:t._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function $g(t,e){var n=e,r=e.L,o=n.U;o?o.L===n?o.L=r:o.R=r:t._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Qg(t){for(;t.L;)t=t.L;return t}Gg.prototype={constructor:Gg,insert:function(t,e){var n,r,o;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Qg(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,t=r):(t===n.R&&(Kg(this,n),n=(t=n).U),n.C=!1,r.C=!0,$g(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,t=r):(t===n.L&&($g(this,n),n=(t=n).U),n.C=!1,r.C=!0,Kg(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,o=t.U,i=t.L,a=t.R;if(n=i?a?Qg(a):i:a,o?o.L===t?o.L=n:o.R=n:this._=n,i&&a?(r=n.C,n.C=t.C,n.L=i,i.U=n,n!==a?(o=n.U,n.U=t.U,t=n.R,o.L=t,n.R=a,a.U=n):(n.U=o,o=n,t=n.R)):(r=t.C,t=n),t&&(t.U=o),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===o.L){if((e=o.R).C&&(e.C=!1,o.C=!0,Kg(this,o),e=o.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,$g(this,e),e=o.R),e.C=o.C,o.C=e.R.C=!1,Kg(this,o),t=this._;break}}else if((e=o.L).C&&(e.C=!1,o.C=!0,$g(this,o),e=o.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Kg(this,e),e=o.L),e.C=o.C,o.C=e.L.C=!1,$g(this,o),t=this._;break}e.C=!0,t=o,o=o.U}while(!t.C);t&&(t.C=!1)}}};var Zg=Gg;function Jg(t,e,n,r){var o=[null,null],i=wv.push(o)-1;return o.left=t,o.right=e,n&&ev(o,t,e,n),r&&ev(o,e,t,r),bv[t.index].halfedges.push(i),bv[e.index].halfedges.push(i),o}function tv(t,e,n){var r=[e,n];return r.left=t,r}function ev(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function nv(t,e,n,r,o){var i,a=t[0],u=t[1],s=a[0],c=a[1],l=0,f=1,d=u[0]-s,h=u[1]-c;if(i=e-s,d||!(i>0)){if(i/=d,d<0){if(i<l)return;i<f&&(f=i)}else if(d>0){if(i>f)return;i>l&&(l=i)}if(i=r-s,d||!(i<0)){if(i/=d,d<0){if(i>f)return;i>l&&(l=i)}else if(d>0){if(i<l)return;i<f&&(f=i)}if(i=n-c,h||!(i>0)){if(i/=h,h<0){if(i<l)return;i<f&&(f=i)}else if(h>0){if(i>f)return;i>l&&(l=i)}if(i=o-c,h||!(i<0)){if(i/=h,h<0){if(i>f)return;i>l&&(l=i)}else if(h>0){if(i<l)return;i<f&&(f=i)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*d,c+l*h]),f<1&&(t[1]=[s+f*d,c+f*h]),!0)}}}}}function rv(t,e,n,r,o){var i=t[1];if(i)return!0;var a,u,s=t[0],c=t.left,l=t.right,f=c[0],d=c[1],h=l[0],p=l[1],y=(f+h)/2,g=(d+p)/2;if(p===d){if(y<e||y>=r)return;if(f>h){if(s){if(s[1]>=o)return}else s=[y,n];i=[y,o]}else{if(s){if(s[1]<n)return}else s=[y,o];i=[y,n]}}else if(u=g-(a=(f-h)/(p-d))*y,a<-1||a>1)if(f>h){if(s){if(s[1]>=o)return}else s=[(n-u)/a,n];i=[(o-u)/a,o]}else{if(s){if(s[1]<n)return}else s=[(o-u)/a,o];i=[(n-u)/a,n]}else if(d<p){if(s){if(s[0]>=r)return}else s=[e,a*e+u];i=[r,a*r+u]}else{if(s){if(s[0]<e)return}else s=[r,a*r+u];i=[e,a*e+u]}return t[0]=s,t[1]=i,!0}function ov(t,e){var n=t.site,r=e.left,o=e.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=e[1],o=e[0]):(r=e[0],o=e[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function iv(t,e){return e[+(e.left!==t.site)]}function av(t,e){return e[+(e.left===t.site)]}var uv,sv=[];function cv(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,o=t.site,i=n.site;if(r!==i){var a=o[0],u=o[1],s=r[0]-a,c=r[1]-u,l=i[0]-a,f=i[1]-u,d=2*(s*f-c*l);if(!(d>=-xv)){var h=s*s+c*c,p=l*l+f*f,y=(f*h-c*p)/d,g=(s*p-l*h)/d,v=sv.pop()||new function(){Xg(this),this.x=this.y=this.arc=this.site=this.cy=null};v.arc=t,v.site=o,v.x=y+a,v.y=(v.cy=g+u)+Math.sqrt(y*y+g*g),t.circle=v;for(var m=null,b=_v._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}_v.insert(m,v),m||(uv=v)}}}}function lv(t){var e=t.circle;e&&(e.P||(uv=e.N),_v.remove(e),sv.push(e),Xg(e),t.circle=null)}var fv=[];function dv(t){var e=fv.pop()||new function(){Xg(this),this.edge=this.site=this.circle=null};return e.site=t,e}function hv(t){lv(t),mv.remove(t),fv.push(t),Xg(t)}function pv(t){var e=t.circle,n=e.x,r=e.cy,o=[n,r],i=t.P,a=t.N,u=[t];hv(t);for(var s=i;s.circle&&Math.abs(n-s.circle.x)<Ev&&Math.abs(r-s.circle.cy)<Ev;)i=s.P,u.unshift(s),hv(s),s=i;u.unshift(s),lv(s);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Ev&&Math.abs(r-c.circle.cy)<Ev;)a=c.N,u.push(c),hv(c),c=a;u.push(c),lv(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],ev(c.edge,s.site,c.site,o);s=u[0],(c=u[f-1]).edge=Jg(s.site,c.site,null,o),cv(s),cv(c)}function yv(t){for(var e,n,r,o,i=t[0],a=t[1],u=mv._;u;)if((r=gv(u,a)-i)>Ev)u=u.L;else{if(!((o=i-vv(u,a))>Ev)){r>-Ev?(e=u.P,n=u):o>-Ev?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}!function(t){bv[t.index]={site:t,halfedges:[]}}(t);var s=dv(t);if(mv.insert(e,s),e||n){if(e===n)return lv(e),n=dv(e.site),mv.insert(s,n),s.edge=n.edge=Jg(e.site,s.site),cv(e),void cv(n);if(n){lv(e),lv(n);var c=e.site,l=c[0],f=c[1],d=t[0]-l,h=t[1]-f,p=n.site,y=p[0]-l,g=p[1]-f,v=2*(d*g-h*y),m=d*d+h*h,b=y*y+g*g,_=[(g*m-h*b)/v+l,(d*b-y*m)/v+f];ev(n.edge,c,p,_),s.edge=Jg(c,t,null,_),n.edge=Jg(t,p,null,_),cv(e),cv(n)}else s.edge=Jg(e.site,s.site)}}function gv(t,e){var n=t.site,r=n[0],o=n[1],i=o-e;if(!i)return r;var a=t.P;if(!a)return-1/0;var u=(n=a.site)[0],s=n[1],c=s-e;if(!c)return u;var l=u-r,f=1/i-1/c,d=l/c;return f?(-d+Math.sqrt(d*d-2*f*(l*l/(-2*c)-s+c/2+o-i/2)))/f+r:(r+u)/2}function vv(t,e){var n=t.N;if(n)return gv(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var mv,bv,_v,wv,Ev=1e-6,xv=1e-12;function kv(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function Sv(t,e){return e[1]-t[1]||e[0]-t[0]}function Mv(t,e){var n,r,o,i=t.sort(Sv).pop();for(wv=[],bv=new Array(t.length),mv=new Zg,_v=new Zg;;)if(o=uv,i&&(!o||i[1]<o.y||i[1]===o.y&&i[0]<o.x))i[0]===n&&i[1]===r||(yv(i),n=i[0],r=i[1]),i=t.pop();else{if(!o)break;pv(o.arc)}if(function(){for(var t,e,n,r,o=0,i=bv.length;o<i;++o)if((t=bv[o])&&(r=(e=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(n=0;n<r;++n)a[n]=n,u[n]=ov(t,wv[e[n]]);for(a.sort(function(t,e){return u[e]-u[t]}),n=0;n<r;++n)u[n]=e[a[n]];for(n=0;n<r;++n)e[n]=u[n]}}(),e){var a=+e[0][0],u=+e[0][1],s=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var o,i=wv.length;i--;)rv(o=wv[i],t,e,n,r)&&nv(o,t,e,n,r)&&(Math.abs(o[0][0]-o[1][0])>Ev||Math.abs(o[0][1]-o[1][1])>Ev)||delete wv[i]}(a,u,s,c),function(t,e,n,r){var o,i,a,u,s,c,l,f,d,h,p,y,g=bv.length,v=!0;for(o=0;o<g;++o)if(i=bv[o]){for(a=i.site,u=(s=i.halfedges).length;u--;)wv[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)p=(h=av(i,wv[s[u]]))[0],y=h[1],f=(l=iv(i,wv[s[++u%c]]))[0],d=l[1],(Math.abs(p-f)>Ev||Math.abs(y-d)>Ev)&&(s.splice(u,0,wv.push(tv(a,h,Math.abs(p-t)<Ev&&r-y>Ev?[t,Math.abs(f-t)<Ev?d:r]:Math.abs(y-r)<Ev&&n-p>Ev?[Math.abs(d-r)<Ev?f:n,r]:Math.abs(p-n)<Ev&&y-e>Ev?[n,Math.abs(f-n)<Ev?d:e]:Math.abs(y-e)<Ev&&p-t>Ev?[Math.abs(d-e)<Ev?f:t,e]:null))-1),++c);c&&(v=!1)}if(v){var m,b,_,w=1/0;for(o=0,v=null;o<g;++o)(i=bv[o])&&(_=(m=(a=i.site)[0]-t)*m+(b=a[1]-e)*b)<w&&(w=_,v=i);if(v){var E=[t,e],x=[t,r],k=[n,r],S=[n,e];v.halfedges.push(wv.push(tv(a=v.site,E,x))-1,wv.push(tv(a,x,k))-1,wv.push(tv(a,k,S))-1,wv.push(tv(a,S,E))-1)}}for(o=0;o<g;++o)(i=bv[o])&&(i.halfedges.length||delete bv[o])}(a,u,s,c)}this.edges=wv,this.cells=bv,mv=_v=wv=bv=null}Mv.prototype={constructor:Mv,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return iv(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(i=(o=n.halfedges).length)for(var o,i,a,u=n.site,s=-1,c=e[o[i-1]],l=c.left===u?c.right:c.left;++s<i;)a=l,l=(c=e[o[s]]).left===u?c.right:c.left,a&&l&&r<a.index&&r<l.index&&kv(u,a,l)<0&&t.push([u.data,a.data,l.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,o,i=this,a=i._found||0,u=i.cells.length;!(o=i.cells[a]);)if(++a>=u)return null;var s=t-o.site[0],c=e-o.site[1],l=s*s+c*c;do{o=i.cells[r=a],a=null,o.halfedges.forEach(function(n){var r=i.edges[n],u=r.left;if(u!==o.site&&u||(u=r.right)){var s=t-u[0],c=e-u[1],f=s*s+c*c;f<l&&(l=f,a=u.index)}})}while(null!==a);return i._found=r,null==n||l<=n*n?o.site:null}};var Cv=function(){var t=qg,e=Hg,n=null;function r(r){return new Mv(r.map(function(n,o){var i=[Math.round(t(n,o,r)/Ev)*Ev,Math.round(e(n,o,r)/Ev)*Ev];return i.index=o,i.data=n,i}),n)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(e){return arguments.length?(t="function"==typeof e?e:Yg(+e),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:Yg(+t),r):e},r.extent=function(t){return arguments.length?(n=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(t){return arguments.length?(n=null==t?null:[[0,0],[+t[0],+t[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},Av=n(19);n.d(e,"version",function(){return"5.7.0"}),n.d(e,"bisect",function(){return s}),n.d(e,"bisectRight",function(){return a}),n.d(e,"bisectLeft",function(){return u}),n.d(e,"ascending",function(){return r}),n.d(e,"bisector",function(){return o}),n.d(e,"cross",function(){return f}),n.d(e,"descending",function(){return d}),n.d(e,"deviation",function(){return y}),n.d(e,"extent",function(){return g}),n.d(e,"histogram",function(){return T}),n.d(e,"thresholdFreedmanDiaconis",function(){return O}),n.d(e,"thresholdScott",function(){return D}),n.d(e,"thresholdSturges",function(){return P}),n.d(e,"max",function(){return R}),n.d(e,"mean",function(){return I}),n.d(e,"median",function(){return L}),n.d(e,"merge",function(){return F}),n.d(e,"min",function(){return B}),n.d(e,"pairs",function(){return c}),n.d(e,"permute",function(){return U}),n.d(e,"quantile",function(){return N}),n.d(e,"range",function(){return E}),n.d(e,"scan",function(){return j}),n.d(e,"shuffle",function(){return z}),n.d(e,"sum",function(){return V}),n.d(e,"ticks",function(){return M}),n.d(e,"tickIncrement",function(){return C}),n.d(e,"tickStep",function(){return A}),n.d(e,"transpose",function(){return W}),n.d(e,"variance",function(){return p}),n.d(e,"zip",function(){return q}),n.d(e,"axisTop",function(){return rt}),n.d(e,"axisRight",function(){return ot}),n.d(e,"axisBottom",function(){return it}),n.d(e,"axisLeft",function(){return at}),n.d(e,"brush",function(){return Lt}),n.d(e,"brushX",function(){return Rt}),n.d(e,"brushY",function(){return It}),n.d(e,"brushSelection",function(){return Dt}),n.d(e,"chord",function(){return Yt}),n.d(e,"ribbon",function(){return oe}),n.d(e,"nest",function(){return se}),n.d(e,"set",function(){return ge}),n.d(e,"map",function(){return ue}),n.d(e,"keys",function(){return ve}),n.d(e,"values",function(){return me}),n.d(e,"entries",function(){return be}),n.d(e,"color",function(){return _e.a}),n.d(e,"rgb",function(){return _e.h}),n.d(e,"hsl",function(){return _e.e}),n.d(e,"lab",function(){return _e.f}),n.d(e,"hcl",function(){return _e.d}),n.d(e,"lch",function(){return _e.g}),n.d(e,"gray",function(){return _e.c}),n.d(e,"cubehelix",function(){return _e.b}),n.d(e,"contours",function(){return Te}),n.d(e,"contourDensity",function(){return Le}),n.d(e,"dispatch",function(){return ut.a}),n.d(e,"drag",function(){return st.a}),n.d(e,"dragDisable",function(){return st.b}),n.d(e,"dragEnable",function(){return st.c}),n.d(e,"dsvFormat",function(){return We}),n.d(e,"csvParse",function(){return qe}),n.d(e,"csvParseRows",function(){return He}),n.d(e,"csvFormat",function(){return Ge}),n.d(e,"csvFormatRows",function(){return Xe}),n.d(e,"tsvParse",function(){return $e}),n.d(e,"tsvParseRows",function(){return Qe}),n.d(e,"tsvFormat",function(){return Ze}),n.d(e,"tsvFormatRows",function(){return Je}),n.d(e,"easeLinear",function(){return tn.y}),n.d(e,"easeQuad",function(){return tn.D}),n.d(e,"easeQuadIn",function(){return tn.E}),n.d(e,"easeQuadOut",function(){return tn.G}),n.d(e,"easeQuadInOut",function(){return tn.F}),n.d(e,"easeCubic",function(){return tn.m}),n.d(e,"easeCubicIn",function(){return tn.n}),n.d(e,"easeCubicOut",function(){return tn.p}),n.d(e,"easeCubicInOut",function(){return tn.o}),n.d(e,"easePoly",function(){return tn.z}),n.d(e,"easePolyIn",function(){return tn.A}),n.d(e,"easePolyOut",function(){return tn.C}),n.d(e,"easePolyInOut",function(){return tn.B}),n.d(e,"easeSin",function(){return tn.H}),n.d(e,"easeSinIn",function(){return tn.I}),n.d(e,"easeSinOut",function(){return tn.K}),n.d(e,"easeSinInOut",function(){return tn.J}),n.d(e,"easeExp",function(){return tn.u}),n.d(e,"easeExpIn",function(){return tn.v}),n.d(e,"easeExpOut",function(){return tn.x}),n.d(e,"easeExpInOut",function(){return tn.w}),n.d(e,"easeCircle",function(){return tn.i}),n.d(e,"easeCircleIn",function(){return tn.j}),n.d(e,"easeCircleOut",function(){return tn.l}),n.d(e,"easeCircleInOut",function(){return tn.k}),n.d(e,"easeBounce",function(){return tn.e}),n.d(e,"easeBounceIn",function(){return tn.f}),n.d(e,"easeBounceOut",function(){return tn.h}),n.d(e,"easeBounceInOut",function(){return tn.g}),n.d(e,"easeBack",function(){return tn.a}),n.d(e,"easeBackIn",function(){return tn.b}),n.d(e,"easeBackOut",function(){return tn.d}),n.d(e,"easeBackInOut",function(){return tn.c}),n.d(e,"easeElastic",function(){return tn.q}),n.d(e,"easeElasticIn",function(){return tn.r}),n.d(e,"easeElasticOut",function(){return tn.t}),n.d(e,"easeElasticInOut",function(){return tn.s}),n.d(e,"blob",function(){return nn}),n.d(e,"buffer",function(){return on}),n.d(e,"dsv",function(){return cn}),n.d(e,"csv",function(){return ln}),n.d(e,"tsv",function(){return fn}),n.d(e,"image",function(){return dn}),n.d(e,"json",function(){return pn}),n.d(e,"text",function(){return un}),n.d(e,"xml",function(){return gn}),n.d(e,"html",function(){return vn}),n.d(e,"svg",function(){return mn}),n.d(e,"forceCenter",function(){return bn}),n.d(e,"forceCollide",function(){return On}),n.d(e,"forceLink",function(){return In}),n.d(e,"forceManyBody",function(){return Vn}),n.d(e,"forceRadial",function(){return Wn}),n.d(e,"forceSimulation",function(){return zn}),n.d(e,"forceX",function(){return Yn}),n.d(e,"forceY",function(){return qn}),n.d(e,"formatDefaultLocale",function(){return ur}),n.d(e,"format",function(){return Jn}),n.d(e,"formatPrefix",function(){return tr}),n.d(e,"formatLocale",function(){return ar}),n.d(e,"formatSpecifier",function(){return Kn}),n.d(e,"precisionFixed",function(){return sr}),n.d(e,"precisionPrefix",function(){return cr}),n.d(e,"precisionRound",function(){return lr}),n.d(e,"geoArea",function(){return no}),n.d(e,"geoBounds",function(){return Ko}),n.d(e,"geoCentroid",function(){return ui}),n.d(e,"geoCircle",function(){return mi}),n.d(e,"geoClipAntimeridian",function(){return Pi}),n.d(e,"geoClipCircle",function(){return Ti}),n.d(e,"geoClipExtent",function(){return Bi}),n.d(e,"geoClipRectangle",function(){return Ri}),n.d(e,"geoContains",function(){return na}),n.d(e,"geoDistance",function(){return Gi}),n.d(e,"geoGraticule",function(){return ia}),n.d(e,"geoGraticule10",function(){return aa}),n.d(e,"geoInterpolate",function(){return fa}),n.d(e,"geoLength",function(){return Yi}),n.d(e,"geoPath",function(){return cu}),n.d(e,"geoAlbers",function(){return Au}),n.d(e,"geoAlbersUsa",function(){return Pu}),n.d(e,"geoAzimuthalEqualArea",function(){return Du}),n.d(e,"geoAzimuthalEqualAreaRaw",function(){return Ou}),n.d(e,"geoAzimuthalEquidistant",function(){return Iu}),n.d(e,"geoAzimuthalEquidistantRaw",function(){return Ru}),n.d(e,"geoConicConformal",function(){return zu}),n.d(e,"geoConicConformalRaw",function(){return ju}),n.d(e,"geoConicEqualArea",function(){return Cu}),n.d(e,"geoConicEqualAreaRaw",function(){return Mu}),n.d(e,"geoConicEquidistant",function(){return qu}),n.d(e,"geoConicEquidistantRaw",function(){return Yu}),n.d(e,"geoEqualEarth",function(){return Zu}),n.d(e,"geoEqualEarthRaw",function(){return Qu}),n.d(e,"geoEquirectangular",function(){return Wu}),n.d(e,"geoEquirectangularRaw",function(){return Vu}),n.d(e,"geoGnomonic",function(){return ts}),n.d(e,"geoGnomonicRaw",function(){return Ju}),n.d(e,"geoIdentity",function(){return ns}),n.d(e,"geoProjection",function(){return xu}),n.d(e,"geoProjectionMutator",function(){return ku}),n.d(e,"geoMercator",function(){return Fu}),n.d(e,"geoMercatorRaw",function(){return Lu}),n.d(e,"geoNaturalEarth1",function(){return os}),n.d(e,"geoNaturalEarth1Raw",function(){return rs}),n.d(e,"geoOrthographic",function(){return as}),n.d(e,"geoOrthographicRaw",function(){return is}),n.d(e,"geoStereographic",function(){return ss}),n.d(e,"geoStereographicRaw",function(){return us}),n.d(e,"geoTransverseMercator",function(){return ls}),n.d(e,"geoTransverseMercatorRaw",function(){return cs}),n.d(e,"geoRotation",function(){return yi}),n.d(e,"geoStream",function(){return Xr}),n.d(e,"geoTransform",function(){return lu}),n.d(e,"cluster",function(){return ps}),n.d(e,"hierarchy",function(){return gs}),n.d(e,"pack",function(){return js}),n.d(e,"packSiblings",function(){return Is}),n.d(e,"packEnclose",function(){return Es}),n.d(e,"partition",function(){return Hs}),n.d(e,"stratify",function(){return Zs}),n.d(e,"tree",function(){return ic}),n.d(e,"treemap",function(){return lc}),n.d(e,"treemapBinary",function(){return fc}),n.d(e,"treemapDice",function(){return qs}),n.d(e,"treemapSlice",function(){return ac}),n.d(e,"treemapSliceDice",function(){return dc}),n.d(e,"treemapSquarify",function(){return cc}),n.d(e,"treemapResquarify",function(){return hc}),n.d(e,"interpolate",function(){return ct.a}),n.d(e,"interpolateArray",function(){return ct.b}),n.d(e,"interpolateBasis",function(){return ct.c}),n.d(e,"interpolateBasisClosed",function(){return ct.d}),n.d(e,"interpolateDate",function(){return ct.g}),n.d(e,"interpolateDiscrete",function(){return ct.h}),n.d(e,"interpolateHue",function(){return ct.m}),n.d(e,"interpolateNumber",function(){return ct.o}),n.d(e,"interpolateObject",function(){return ct.p}),n.d(e,"interpolateRound",function(){return ct.t}),n.d(e,"interpolateString",function(){return ct.u}),n.d(e,"interpolateTransformCss",function(){return ct.v}),n.d(e,"interpolateTransformSvg",function(){return ct.w}),n.d(e,"interpolateZoom",function(){return ct.x}),n.d(e,"interpolateRgb",function(){return ct.q}),n.d(e,"interpolateRgbBasis",function(){return ct.r}),n.d(e,"interpolateRgbBasisClosed",function(){return ct.s}),n.d(e,"interpolateHsl",function(){return ct.k}),n.d(e,"interpolateHslLong",function(){return ct.l}),n.d(e,"interpolateLab",function(){return ct.n}),n.d(e,"interpolateHcl",function(){return ct.i}),n.d(e,"interpolateHclLong",function(){return ct.j}),n.d(e,"interpolateCubehelix",function(){return ct.e}),n.d(e,"interpolateCubehelixLong",function(){return ct.f}),n.d(e,"piecewise",function(){return ct.y}),n.d(e,"quantize",function(){return ct.z}),n.d(e,"path",function(){return Zt}),n.d(e,"polygonArea",function(){return pc}),n.d(e,"polygonCentroid",function(){return yc}),n.d(e,"polygonHull",function(){return bc}),n.d(e,"polygonContains",function(){return _c}),n.d(e,"polygonLength",function(){return wc}),n.d(e,"quadtree",function(){return Mn}),n.d(e,"randomUniform",function(){return xc}),n.d(e,"randomNormal",function(){return kc}),n.d(e,"randomLogNormal",function(){return Sc}),n.d(e,"randomBates",function(){return Cc}),n.d(e,"randomIrwinHall",function(){return Mc}),n.d(e,"randomExponential",function(){return Ac}),n.d(e,"scaleBand",function(){return Rc}),n.d(e,"scalePoint",function(){return Ic}),n.d(e,"scaleIdentity",function(){return Gc}),n.d(e,"scaleLinear",function(){return Hc}),n.d(e,"scaleLog",function(){return el}),n.d(e,"scaleOrdinal",function(){return Dc}),n.d(e,"scaleImplicit",function(){return Oc}),n.d(e,"scalePow",function(){return rl}),n.d(e,"scaleSqrt",function(){return ol}),n.d(e,"scaleQuantile",function(){return il}),n.d(e,"scaleQuantize",function(){return al}),n.d(e,"scaleThreshold",function(){return ul}),n.d(e,"scaleTime",function(){return oh}),n.d(e,"scaleUtc",function(){return ih}),n.d(e,"scaleSequential",function(){return ah}),n.d(e,"scaleDiverging",function(){return uh}),n.d(e,"schemeCategory10",function(){return ch}),n.d(e,"schemeAccent",function(){return lh}),n.d(e,"schemeDark2",function(){return fh}),n.d(e,"schemePaired",function(){return dh}),n.d(e,"schemePastel1",function(){return hh}),n.d(e,"schemePastel2",function(){return ph}),n.d(e,"schemeSet1",function(){return yh}),n.d(e,"schemeSet2",function(){return gh}),n.d(e,"schemeSet3",function(){return vh}),n.d(e,"interpolateBrBG",function(){return _h}),n.d(e,"schemeBrBG",function(){return bh}),n.d(e,"interpolatePRGn",function(){return Eh}),n.d(e,"schemePRGn",function(){return wh}),n.d(e,"interpolatePiYG",function(){return kh}),n.d(e,"schemePiYG",function(){return xh}),n.d(e,"interpolatePuOr",function(){return Mh}),n.d(e,"schemePuOr",function(){return Sh}),n.d(e,"interpolateRdBu",function(){return Ah}),n.d(e,"schemeRdBu",function(){return Ch}),n.d(e,"interpolateRdGy",function(){return Th}),n.d(e,"schemeRdGy",function(){return Ph}),n.d(e,"interpolateRdYlBu",function(){return Oh}),n.d(e,"schemeRdYlBu",function(){return Nh}),n.d(e,"interpolateRdYlGn",function(){return Rh}),n.d(e,"schemeRdYlGn",function(){return Dh}),n.d(e,"interpolateSpectral",function(){return Lh}),n.d(e,"schemeSpectral",function(){return Ih}),n.d(e,"interpolateBuGn",function(){return Bh}),n.d(e,"schemeBuGn",function(){return Fh}),n.d(e,"interpolateBuPu",function(){return jh}),n.d(e,"schemeBuPu",function(){return Uh}),n.d(e,"interpolateGnBu",function(){return Vh}),n.d(e,"schemeGnBu",function(){return zh}),n.d(e,"interpolateOrRd",function(){return Yh}),n.d(e,"schemeOrRd",function(){return Wh}),n.d(e,"interpolatePuBuGn",function(){return Hh}),n.d(e,"schemePuBuGn",function(){return qh}),n.d(e,"interpolatePuBu",function(){return Xh}),n.d(e,"schemePuBu",function(){return Gh}),n.d(e,"interpolatePuRd",function(){return $h}),n.d(e,"schemePuRd",function(){return Kh}),n.d(e,"interpolateRdPu",function(){return Zh}),n.d(e,"schemeRdPu",function(){return Qh}),n.d(e,"interpolateYlGnBu",function(){return tp}),n.d(e,"schemeYlGnBu",function(){return Jh}),n.d(e,"interpolateYlGn",function(){return np}),n.d(e,"schemeYlGn",function(){return ep}),n.d(e,"interpolateYlOrBr",function(){return op}),n.d(e,"schemeYlOrBr",function(){return rp}),n.d(e,"interpolateYlOrRd",function(){return ap}),n.d(e,"schemeYlOrRd",function(){return ip}),n.d(e,"interpolateBlues",function(){return sp}),n.d(e,"schemeBlues",function(){return up}),n.d(e,"interpolateGreens",function(){return lp}),n.d(e,"schemeGreens",function(){return cp}),n.d(e,"interpolateGreys",function(){return dp}),n.d(e,"schemeGreys",function(){return fp}),n.d(e,"interpolatePurples",function(){return pp}),n.d(e,"schemePurples",function(){return hp}),n.d(e,"interpolateReds",function(){return gp}),n.d(e,"schemeReds",function(){return yp}),n.d(e,"interpolateOranges",function(){return mp}),n.d(e,"schemeOranges",function(){return vp}),n.d(e,"interpolateCubehelixDefault",function(){return bp}),n.d(e,"interpolateRainbow",function(){return xp}),n.d(e,"interpolateWarm",function(){return _p}),n.d(e,"interpolateCool",function(){return wp}),n.d(e,"interpolateSinebow",function(){return Cp}),n.d(e,"interpolateViridis",function(){return Pp}),n.d(e,"interpolateMagma",function(){return Tp}),n.d(e,"interpolateInferno",function(){return Np}),n.d(e,"interpolatePlasma",function(){return Op}),n.d(e,"create",function(){return lt.b}),n.d(e,"creator",function(){return lt.c}),n.d(e,"local",function(){return lt.f}),n.d(e,"matcher",function(){return lt.g}),n.d(e,"mouse",function(){return lt.h}),n.d(e,"namespace",function(){return lt.i}),n.d(e,"namespaces",function(){return lt.j}),n.d(e,"clientPoint",function(){return lt.a}),n.d(e,"select",function(){return lt.k}),n.d(e,"selectAll",function(){return lt.l}),n.d(e,"selection",function(){return lt.m}),n.d(e,"selector",function(){return lt.n}),n.d(e,"selectorAll",function(){return lt.o}),n.d(e,"style",function(){return lt.p}),n.d(e,"touch",function(){return lt.q}),n.d(e,"touches",function(){return lt.r}),n.d(e,"window",function(){return lt.s}),n.d(e,"event",function(){return lt.e}),n.d(e,"customEvent",function(){return lt.d}),n.d(e,"arc",function(){return Zp}),n.d(e,"area",function(){return oy}),n.d(e,"line",function(){return ry}),n.d(e,"pie",function(){return uy}),n.d(e,"areaRadial",function(){return hy}),n.d(e,"radialArea",function(){return hy}),n.d(e,"lineRadial",function(){return dy}),n.d(e,"radialLine",function(){return dy}),n.d(e,"pointRadial",function(){return py}),n.d(e,"linkHorizontal",function(){return Ey}),n.d(e,"linkVertical",function(){return xy}),n.d(e,"linkRadial",function(){return ky}),n.d(e,"symbol",function(){return Vy}),n.d(e,"symbols",function(){return zy}),n.d(e,"symbolCircle",function(){return Sy}),n.d(e,"symbolCross",function(){return My}),n.d(e,"symbolDiamond",function(){return Py}),n.d(e,"symbolSquare",function(){return Ry}),n.d(e,"symbolStar",function(){return Dy}),n.d(e,"symbolTriangle",function(){return Ly}),n.d(e,"symbolWye",function(){return jy}),n.d(e,"curveBasisClosed",function(){return Xy}),n.d(e,"curveBasisOpen",function(){return $y}),n.d(e,"curveBasis",function(){return Hy}),n.d(e,"curveBundle",function(){return Zy}),n.d(e,"curveCardinalClosed",function(){return rg}),n.d(e,"curveCardinalOpen",function(){return ig}),n.d(e,"curveCardinal",function(){return eg}),n.d(e,"curveCatmullRomClosed",function(){return lg}),n.d(e,"curveCatmullRomOpen",function(){return dg}),n.d(e,"curveCatmullRom",function(){return sg}),n.d(e,"curveLinearClosed",function(){return pg}),n.d(e,"curveLinear",function(){return ty}),n.d(e,"curveMonotoneX",function(){return Eg}),n.d(e,"curveMonotoneY",function(){return xg}),n.d(e,"curveNatural",function(){return Mg}),n.d(e,"curveStep",function(){return Ag}),n.d(e,"curveStepAfter",function(){return Tg}),n.d(e,"curveStepBefore",function(){return Pg}),n.d(e,"stack",function(){return Rg}),n.d(e,"stackOffsetExpand",function(){return Ig}),n.d(e,"stackOffsetDiverging",function(){return Lg}),n.d(e,"stackOffsetNone",function(){return Ng}),n.d(e,"stackOffsetSilhouette",function(){return Fg}),n.d(e,"stackOffsetWiggle",function(){return Bg}),n.d(e,"stackOrderAscending",function(){return Ug}),n.d(e,"stackOrderDescending",function(){return zg}),n.d(e,"stackOrderInsideOut",function(){return Vg}),n.d(e,"stackOrderNone",function(){return Og}),n.d(e,"stackOrderReverse",function(){return Wg}),n.d(e,"timeInterval",function(){return ll}),n.d(e,"timeMillisecond",function(){return dl}),n.d(e,"timeMilliseconds",function(){return hl}),n.d(e,"utcMillisecond",function(){return dl}),n.d(e,"utcMilliseconds",function(){return hl}),n.d(e,"timeSecond",function(){return vl}),n.d(e,"timeSeconds",function(){return ml}),n.d(e,"utcSecond",function(){return vl}),n.d(e,"utcSeconds",function(){return ml}),n.d(e,"timeMinute",function(){return _l}),n.d(e,"timeMinutes",function(){return wl}),n.d(e,"timeHour",function(){return xl}),n.d(e,"timeHours",function(){return kl}),n.d(e,"timeDay",function(){return Ml}),n.d(e,"timeDays",function(){return Cl}),n.d(e,"timeWeek",function(){return Pl}),n.d(e,"timeWeeks",function(){return Ll}),n.d(e,"timeSunday",function(){return Pl}),n.d(e,"timeSundays",function(){return Ll}),n.d(e,"timeMonday",function(){return Tl}),n.d(e,"timeMondays",function(){return Fl}),n.d(e,"timeTuesday",function(){return Nl}),n.d(e,"timeTuesdays",function(){return Bl}),n.d(e,"timeWednesday",function(){return Ol}),n.d(e,"timeWednesdays",function(){return Ul}),n.d(e,"timeThursday",function(){return Dl}),n.d(e,"timeThursdays",function(){return jl}),n.d(e,"timeFriday",function(){return Rl}),n.d(e,"timeFridays",function(){return zl}),n.d(e,"timeSaturday",function(){return Il}),n.d(e,"timeSaturdays",function(){return Vl}),n.d(e,"timeMonth",function(){return Yl}),n.d(e,"timeMonths",function(){return ql}),n.d(e,"timeYear",function(){return Gl}),n.d(e,"timeYears",function(){return Xl}),n.d(e,"utcMinute",function(){return $l}),n.d(e,"utcMinutes",function(){return Ql}),n.d(e,"utcHour",function(){return Jl}),n.d(e,"utcHours",function(){return tf}),n.d(e,"utcDay",function(){return nf}),n.d(e,"utcDays",function(){return rf}),n.d(e,"utcWeek",function(){return af}),n.d(e,"utcWeeks",function(){return hf}),n.d(e,"utcSunday",function(){return af}),n.d(e,"utcSundays",function(){return hf}),n.d(e,"utcMonday",function(){return uf}),n.d(e,"utcMondays",function(){return pf}),n.d(e,"utcTuesday",function(){return sf}),n.d(e,"utcTuesdays",function(){return yf}),n.d(e,"utcWednesday",function(){return cf}),n.d(e,"utcWednesdays",function(){return gf}),n.d(e,"utcThursday",function(){return lf}),n.d(e,"utcThursdays",function(){return vf}),n.d(e,"utcFriday",function(){return ff}),n.d(e,"utcFridays",function(){return mf}),n.d(e,"utcSaturday",function(){return df}),n.d(e,"utcSaturdays",function(){return bf}),n.d(e,"utcMonth",function(){return wf}),n.d(e,"utcMonths",function(){return Ef}),n.d(e,"utcYear",function(){return kf}),n.d(e,"utcYears",function(){return Sf}),n.d(e,"timeFormatDefaultLocale",function(){return qd}),n.d(e,"timeFormat",function(){return Nf}),n.d(e,"timeParse",function(){return Of}),n.d(e,"utcFormat",function(){return Df}),n.d(e,"utcParse",function(){return Rf}),n.d(e,"timeFormatLocale",function(){return Pf}),n.d(e,"isoFormat",function(){return Hd}),n.d(e,"isoParse",function(){return Gd}),n.d(e,"now",function(){return Ln.b}),n.d(e,"timer",function(){return Ln.d}),n.d(e,"timerFlush",function(){return Ln.e}),n.d(e,"timeout",function(){return Ln.c}),n.d(e,"interval",function(){return Ln.a}),n.d(e,"transition",function(){return ft.c}),n.d(e,"active",function(){return ft.a}),n.d(e,"interrupt",function(){return ft.b}),n.d(e,"voronoi",function(){return Cv}),n.d(e,"zoom",function(){return Av.a}),n.d(e,"zoomTransform",function(){return Av.c}),n.d(e,"zoomIdentity",function(){return Av.b})},function(t,e,n){(function(e,r,o){var i=function(){var t="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return function(i){i=void 0!==(i=i||{})?i:{};var a,u={};for(a in i)i.hasOwnProperty(a)&&(u[a]=i[a]);i.arguments=[],i.thisProgram="./this.program",i.quit=function(t,e){throw e},i.preRun=[],i.postRun=[];var s,c,l=!1,f=!1;l="object"==typeof window,f="function"==typeof importScripts,s="object"==typeof e&&!l&&!f,c=!l&&!s&&!f;var d,h,p="";function y(t){return i.locateFile?i.locateFile(t,p):p+t}s?(p=r+"/",i.read=function(t,e){var r;return d||(d=n(32)),h||(h=n(32)),t=h.normalize(t),r=d.readFileSync(t),e?r:r.toString()},i.readBinary=function(t){var e=i.read(t,!0);return e.buffer||(e=new Uint8Array(e)),S(e.buffer),e},e.argv.length>1&&(i.thisProgram=e.argv[1].replace(/\\/g,"/")),i.arguments=e.argv.slice(2),e.on("uncaughtException",function(t){if(!(t instanceof pe))throw t}),e.on("unhandledRejection",function(t,n){e.exit(1)}),i.quit=function(t){e.exit(t)},i.inspect=function(){return"[Emscripten Module object]"}):c?("undefined"!=typeof read&&(i.read=function(t){return read(t)}),i.readBinary=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(S("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs?i.arguments=scriptArgs:void 0!==arguments&&(i.arguments=arguments),"function"==typeof quit&&(i.quit=function(t){quit(t)})):(l||f)&&(l?document.currentScript&&(p=document.currentScript.src):p=self.location.href,t&&(p=t),p=0!==p.indexOf("blob:")?p.split("/").slice(0,-1).join("/")+"/":"",i.read=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},f&&(i.readBinary=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),i.readAsync=function(t,e,n){var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=function(){200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)},i.setWindowTitle=function(t){document.title=t});var g=i.print||("undefined"!=typeof console?console.log.bind(console):"undefined"!=typeof print?print:null),v=i.printErr||("undefined"!=typeof printErr?printErr:"undefined"!=typeof console&&console.warn.bind(console)||g);for(a in u)u.hasOwnProperty(a)&&(i[a]=u[a]);u=void 0;var m=16;function b(t){var e=Q;return Q=Q+t+15&-16,e}function _(t){var e=X[et>>2],n=e+t+15&-16;if((X[et>>2]=n,n>=st)&&!at())return X[et>>2]=e,0;return e}function w(t,e){return e||(e=m),t=Math.ceil(t/e)*e}function E(t){switch(t){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:if("*"===t[t.length-1])return 4;if("i"===t[0]){var e=parseInt(t.substr(1));return S(e%8==0),e/8}return 0}}var x={"f64-rem":function(t,e){return t%e},debugger:function(){}},k=(new Array(0),0);function S(t,e){t||ge("Assertion failed: "+e)}function M(t){var e=i["_"+t];return S(e,"Cannot call unknown function "+t+", make sure it is exported"),e}var C={stackSave:function(){he()},stackRestore:function(){de()},arrayToC:function(t){var e=fe(t.length);return mt(t,e),e},stringToC:function(t){var e=0;if(null!==t&&void 0!==t&&0!==t){var n=1+(t.length<<2);U(t,e=fe(n),n)}return e}},A={string:C.stringToC,array:C.arrayToC};function P(t,e,n,r,o){var i=M(t),a=[],u=0;if(r)for(var s=0;s<r.length;s++){var c=A[n[s]];c?(0===u&&(u=he()),a[s]=c(r[s])):a[s]=r[s]}var l=i.apply(null,a);return l=function(t){return"string"===e?I(t):"boolean"===e?Boolean(t):t}(l),0!==u&&de(u),l}function T(t,e,n,r){switch("*"===(n=n||"i8").charAt(n.length-1)&&(n="i32"),n){case"i1":case"i8":q[t>>0]=e;break;case"i16":G[t>>1]=e;break;case"i32":X[t>>2]=e;break;case"i64":tempI64=[e>>>0,(tempDouble=e,+_t(tempDouble)>=1?tempDouble>0?(0|St(+kt(tempDouble/4294967296),4294967295))>>>0:~~+xt((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],X[t>>2]=tempI64[0],X[t+4>>2]=tempI64[1];break;case"float":K[t>>2]=e;break;case"double":$[t>>3]=e;break;default:ge("invalid type for setValue: "+n)}}var N=0,O=2,D=4;function R(t){return Z?yt?le(t):_(t):b(t)}function I(t,e){if(0===e||!t)return"";for(var n,r=0,o=0;r|=n=H[t+o>>0],(0!=n||e)&&(o++,!e||o!=e););e||(e=o);var i="";if(r<128){for(var a;e>0;)a=String.fromCharCode.apply(String,H.subarray(t,t+Math.min(e,1024))),i=i?i+a:a,t+=1024,e-=1024;return i}return function(t){return F(H,t)}(t)}var L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function F(t,e){for(var n=e;t[n];)++n;if(n-e>16&&t.subarray&&L)return L.decode(t.subarray(e,n));for(var r,o,i,a,u,s="";;){if(!(r=t[e++]))return s;if(128&r)if(o=63&t[e++],192!=(224&r))if(i=63&t[e++],224==(240&r)?r=(15&r)<<12|o<<6|i:(a=63&t[e++],240==(248&r)?r=(7&r)<<18|o<<12|i<<6|a:(u=63&t[e++],r=248==(252&r)?(3&r)<<24|o<<18|i<<12|a<<6|u:(1&r)<<30|o<<24|i<<18|a<<12|u<<6|63&t[e++])),r<65536)s+=String.fromCharCode(r);else{var c=r-65536;s+=String.fromCharCode(55296|c>>10,56320|1023&c)}else s+=String.fromCharCode((31&r)<<6|o);else s+=String.fromCharCode(r)}}function B(t,e,n,r){if(!(r>0))return 0;for(var o=n,i=n+r-1,a=0;a<t.length;++a){var u=t.charCodeAt(a);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&t.charCodeAt(++a);if(u<=127){if(n>=i)break;e[n++]=u}else if(u<=2047){if(n+1>=i)break;e[n++]=192|u>>6,e[n++]=128|63&u}else if(u<=65535){if(n+2>=i)break;e[n++]=224|u>>12,e[n++]=128|u>>6&63,e[n++]=128|63&u}else if(u<=2097151){if(n+3>=i)break;e[n++]=240|u>>18,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}else if(u<=67108863){if(n+4>=i)break;e[n++]=248|u>>24,e[n++]=128|u>>18&63,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}else{if(n+5>=i)break;e[n++]=252|u>>30,e[n++]=128|u>>24&63,e[n++]=128|u>>18&63,e[n++]=128|u>>12&63,e[n++]=128|u>>6&63,e[n++]=128|63&u}}return e[n]=0,n-o}function U(t,e,n){return B(t,H,e,n)}function j(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);r>=55296&&r<=57343&&(r=65536+((1023&r)<<10)|1023&t.charCodeAt(++n)),r<=127?++e:e+=r<=2047?2:r<=65535?3:r<=2097151?4:r<=67108863?5:6}return e}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");function z(t){return t}function V(){var t=new Error;if(!t.stack){try{throw new Error(0)}catch(e){t=e}if(!t.stack)return"(no stack trace available)"}return t.stack.toString()}function W(){var t=V();return i.extraStackTrace&&(t+="\n"+i.extraStackTrace()),function(t){return t.replace(/__Z[\w\d_]+/g,function(t){var e=z(t);return t===e?t:t+" ["+e+"]"})}(t)}var Y,q,H,G,X,K,$,Q,Z,J,tt,et,nt=65536,rt=16777216;function ot(){i.HEAP8=q=new Int8Array(Y),i.HEAP16=G=new Int16Array(Y),i.HEAP32=X=new Int32Array(Y),i.HEAPU8=H=new Uint8Array(Y),i.HEAPU16=new Uint16Array(Y),i.HEAPU32=new Uint32Array(Y),i.HEAPF32=K=new Float32Array(Y),i.HEAPF64=$=new Float64Array(Y)}function it(){ge("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+st+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function at(){it()}Q=et=0,Z=!1;var ut=i.TOTAL_STACK||5242880,st=i.TOTAL_MEMORY||268435456;function ct(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?i.dynCall_v(n):i.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e()}}st<ut&&v("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+st+"! (TOTAL_STACK="+ut+")"),i.buffer?Y=i.buffer:("object"==typeof WebAssembly&&"function"==typeof WebAssembly.Memory?(i.wasmMemory=new WebAssembly.Memory({initial:st/nt,maximum:st/nt}),Y=i.wasmMemory.buffer):Y=new ArrayBuffer(st),i.buffer=Y),ot();var lt=[],ft=[],dt=[],ht=[],pt=[],yt=!1;function gt(t){lt.unshift(t)}function vt(t){pt.unshift(t)}function mt(t,e){q.set(t,e)}function bt(t,e,n){for(var r=0;r<t.length;++r)q[e++>>0]=t.charCodeAt(r);n||(q[e>>0]=0)}var _t=Math.abs,wt=Math.cos,Et=Math.sin,xt=Math.ceil,kt=Math.floor,St=Math.min,Mt=0,Ct=null,At=null;function Pt(t){Mt++,i.monitorRunDependencies&&i.monitorRunDependencies(Mt)}function Tt(t){if(Mt--,i.monitorRunDependencies&&i.monitorRunDependencies(Mt),0==Mt&&(null!==Ct&&(clearInterval(Ct),Ct=null),At)){var e=At;At=null,e()}}i.preloadedImages={},i.preloadedAudios={};var Nt="data:application/octet-stream;base64,";function Ot(t){return String.prototype.startsWith?t.startsWith(Nt):0===t.indexOf(Nt)}!function(){var t="egraph.wast",e="egraph.wasm",n="egraph.temp.asm.js";Ot(t)||(t=y(t)),Ot(e)||(e=y(e)),Ot(n)||(n=y(n));var r={global:null,env:null,asm2wasm:x,parent:i},o=null;function a(t){var e=i.buffer;t.byteLength<e.byteLength&&v("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");var n=new Int8Array(e);new Int8Array(t).set(n),function(t){i.buffer=Y=t}(t),ot()}function u(){try{if(i.wasmBinary)return new Uint8Array(i.wasmBinary);if(i.readBinary)return i.readBinary(e);throw"both async and sync fetching of the wasm failed"}catch(t){ge(t)}}function s(t,n,s){if("object"!=typeof WebAssembly)return v("no native wasm support detected"),!1;if(!(i.wasmMemory instanceof WebAssembly.Memory))return v("no native wasm Memory in use"),!1;function c(t,e){(o=t.exports).memory&&a(o.memory),i.asm=o,i.usingWasm=!0,Tt()}if(n.memory=i.wasmMemory,r.global={NaN:NaN,Infinity:1/0},r["global.Math"]=Math,r.env=n,Pt(),i.instantiateWasm)try{return i.instantiateWasm(r,c)}catch(t){return v("Module.instantiateWasm callback failed with error: "+t),!1}function d(t){c(t.instance,t.module)}function h(t){(i.wasmBinary||!l&&!f||"function"!=typeof fetch?new Promise(function(t,e){t(u())}):fetch(e,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()}).catch(function(){return u()})).then(function(t){return WebAssembly.instantiate(t,r)}).then(t).catch(function(t){v("failed to asynchronously prepare wasm: "+t),ge(t)})}return i.wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||Ot(e)||"function"!=typeof fetch?h(d):WebAssembly.instantiateStreaming(fetch(e,{credentials:"same-origin"}),r).then(d).catch(function(t){v("wasm streaming compile failed: "+t),v("falling back to ArrayBuffer instantiation"),h(d)}),{}}i.asmPreload=i.asm;var c=i.reallocBuffer;i.reallocBuffer=function(t){return"asmjs"===d?c(t):function(t){t=function(t,e){return t%e>0&&(t+=e-t%e),t}(t,i.usingWasm?nt:rt);var e=i.buffer.byteLength;if(i.usingWasm)try{return-1!==i.wasmMemory.grow((t-e)/65536)?i.buffer=i.wasmMemory.buffer:null}catch(t){return null}}(t)};var d="";i.asm=function(t,e,n){if(!(e=function(t){return t}(e)).table){var r=i.wasmTableSize;void 0===r&&(r=1024);var o=i.wasmMaxTableSize;"object"==typeof WebAssembly&&"function"==typeof WebAssembly.Table?e.table=void 0!==o?new WebAssembly.Table({initial:r,maximum:o,element:"anyfunc"}):new WebAssembly.Table({initial:r,element:"anyfunc"}):e.table=new Array(r),i.wasmTable=e.table}var a;return e.memoryBase||(e.memoryBase=i.STATIC_BASE),e.tableBase||(e.tableBase=0),S(a=s(0,e),"no binaryen method succeeded."),a}}(),Q=39568,ft.push({func:function(){se()}},{func:function(){ue()}});function Dt(t){if(!t||!t.callee||!t.callee.name)return[null,"",""];t.callee.toString();var e=t.callee.name,n="(",r=!0;for(var o in t){var i=t[o];r||(n+=", "),r=!1,n+="number"==typeof i||"string"==typeof i?i:"("+typeof i+")"}n+=")";var a=t.callee.caller;return t=a?a.arguments:[],r&&(n=""),[t,e,n]}function Rt(t){var e=V(),n=e.lastIndexOf("_emscripten_log"),r=e.lastIndexOf("_emscripten_get_callstack"),o=e.indexOf("\n",Math.max(n,r))+1;e=e.slice(o),8&t&&"undefined"==typeof emscripten_source_map&&(!function t(e){t.shown||(t.shown={}),t.shown[e]||(t.shown[e]=1,v(e))}('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.'),t^=8,t|=16);var i=null;if(128&t)for(i=Dt(arguments);i[1].indexOf("_emscripten_")>=0;)i=Dt(i[0]);var a=e.split("\n");e="";var u=new RegExp("\\s*(.*?)@(.*?):([0-9]+):([0-9]+)"),s=new RegExp("\\s*(.*?)@(.*):(.*)(:(.*))?"),c=new RegExp("\\s*at (.*?) \\((.*):(.*):(.*)\\)");for(var l in a){var f=a[l],d="",h="",p=0,y=0,g=c.exec(f);if(g&&5==g.length)d=g[1],h=g[2],p=g[3],y=g[4];else{if((g=u.exec(f))||(g=s.exec(f)),!(g&&g.length>=4)){e+=f+"\n";continue}d=g[1],h=g[2],p=g[3],y=0|g[4]}var m=32&t?z(d):d;m||(m=d);var b=!1;if(8&t){var _=emscripten_source_map.originalPositionFor({line:p,column:y});(b=_&&_.source)&&(64&t&&(_.source=_.source.substring(_.source.replace(/\\/g,"/").lastIndexOf("/")+1)),e+="    at "+m+" ("+_.source+":"+_.line+":"+_.column+")\n")}(16&t||!b)&&(64&t&&(h=h.substring(h.replace(/\\/g,"/").lastIndexOf("/")+1)),e+=(b?"     = "+d:"    at "+m)+" ("+h+":"+p+":"+y+")\n"),128&t&&i[0]&&(i[1]==d&&i[2].length>0&&(e=e.replace(/\s+$/,""),e+=" with values: "+i[1]+i[2]+"\n"),i=Dt(i[0]))}return e=e.replace(/\s+$/,"")}i.STATIC_BASE=1024,i.STATIC_BUMP=38544,Q+=16;var It={};function Lt(){return!!Lt.uncaught_exception}var Ft={last:0,caught:[],infos:{},deAdjust:function(t){if(!t||Ft.infos[t])return t;for(var e in Ft.infos){var n=+e;if(Ft.infos[n].adjusted===t)return n}return t},addRef:function(t){t&&Ft.infos[t].refcount++},decRef:function(t){if(t){var e=Ft.infos[t];S(e.refcount>0),e.refcount--,0!==e.refcount||e.rethrown||(e.destructor&&i.dynCall_vi(e.destructor,t),delete Ft.infos[t],___cxa_free_exception(t))}},clearRef:function(t){t&&(Ft.infos[t].refcount=0)}};var Bt={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function Ut(t){return i.___errno_location&&(X[i.___errno_location()>>2]=t),t}var jt={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"},zt={splitPath:function(t){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1)},normalizeArray:function(t,e){for(var n=0,r=t.length-1;r>=0;r--){var o=t[r];"."===o?t.splice(r,1):".."===o?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n;n--)t.unshift("..");return t},normalize:function(t){var e="/"===t.charAt(0),n="/"===t.substr(-1);return(t=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!e).join("/"))||e||(t="."),t&&n&&(t+="/"),(e?"/":"")+t},dirname:function(t){var e=zt.splitPath(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},basename:function(t){if("/"===t)return"/";var e=t.lastIndexOf("/");return-1===e?t:t.substr(e+1)},extname:function(t){return zt.splitPath(t)[3]},join:function(){var t=Array.prototype.slice.call(arguments,0);return zt.normalize(t.join("/"))},join2:function(t,e){return zt.normalize(t+"/"+e)},resolve:function(){for(var t="",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var r=n>=0?arguments[n]:Gt.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");if(!r)return"";t=r+"/"+t,e="/"===r.charAt(0)}return t=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!e).join("/"),(e?"/":"")+t||"."},relative:function(t,e){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=zt.resolve(t).substr(1),e=zt.resolve(e).substr(1);for(var r=n(t.split("/")),o=n(e.split("/")),i=Math.min(r.length,o.length),a=i,u=0;u<i;u++)if(r[u]!==o[u]){a=u;break}var s=[];for(u=a;u<r.length;u++)s.push("..");return(s=s.concat(o.slice(a))).join("/")}},Vt={ttys:[],init:function(){},shutdown:function(){},register:function(t,e){Vt.ttys[t]={input:[],output:[],ops:e},Gt.registerDevice(t,Vt.stream_ops)},stream_ops:{open:function(t){var e=Vt.ttys[t.node.rdev];if(!e)throw new Gt.ErrnoError(Bt.ENODEV);t.tty=e,t.seekable=!1},close:function(t){t.tty.ops.flush(t.tty)},flush:function(t){t.tty.ops.flush(t.tty)},read:function(t,e,n,r,o){if(!t.tty||!t.tty.ops.get_char)throw new Gt.ErrnoError(Bt.ENXIO);for(var i=0,a=0;a<r;a++){var u;try{u=t.tty.ops.get_char(t.tty)}catch(t){throw new Gt.ErrnoError(Bt.EIO)}if(void 0===u&&0===i)throw new Gt.ErrnoError(Bt.EAGAIN);if(null===u||void 0===u)break;i++,e[n+a]=u}return i&&(t.node.timestamp=Date.now()),i},write:function(t,e,n,r,o){if(!t.tty||!t.tty.ops.put_char)throw new Gt.ErrnoError(Bt.ENXIO);for(var i=0;i<r;i++)try{t.tty.ops.put_char(t.tty,e[n+i])}catch(t){throw new Gt.ErrnoError(Bt.EIO)}return r&&(t.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(t){if(!t.input.length){var n=null;if(s){var r=new o(256),i=0,a="win32"!=e.platform,u=e.stdin.fd;if(a){var c=!1;try{u=re.openSync("/dev/stdin","r"),c=!0}catch(t){}}try{i=re.readSync(u,r,0,256,null)}catch(t){if(-1==t.toString().indexOf("EOF"))throw t;i=0}c&&re.closeSync(u),n=i>0?r.slice(0,i).toString("utf-8"):null}else"undefined"!=typeof window&&"function"==typeof window.prompt?null!==(n=window.prompt("Input: "))&&(n+="\n"):"function"==typeof readline&&null!==(n=readline())&&(n+="\n");if(!n)return null;t.input=ie(n,!0)}return t.input.shift()},put_char:function(t,e){null===e||10===e?(g(F(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},flush:function(t){t.output&&t.output.length>0&&(g(F(t.output,0)),t.output=[])}},default_tty1_ops:{put_char:function(t,e){null===e||10===e?(v(F(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},flush:function(t){t.output&&t.output.length>0&&(v(F(t.output,0)),t.output=[])}}},Wt={ops_table:null,mount:function(t){return Wt.createNode(null,"/",16895,0)},createNode:function(t,e,n,r){if(Gt.isBlkdev(n)||Gt.isFIFO(n))throw new Gt.ErrnoError(Bt.EPERM);Wt.ops_table||(Wt.ops_table={dir:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr,lookup:Wt.node_ops.lookup,mknod:Wt.node_ops.mknod,rename:Wt.node_ops.rename,unlink:Wt.node_ops.unlink,rmdir:Wt.node_ops.rmdir,readdir:Wt.node_ops.readdir,symlink:Wt.node_ops.symlink},stream:{llseek:Wt.stream_ops.llseek}},file:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr},stream:{llseek:Wt.stream_ops.llseek,read:Wt.stream_ops.read,write:Wt.stream_ops.write,allocate:Wt.stream_ops.allocate,mmap:Wt.stream_ops.mmap,msync:Wt.stream_ops.msync}},link:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr,readlink:Wt.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Wt.node_ops.getattr,setattr:Wt.node_ops.setattr},stream:Gt.chrdev_stream_ops}});var o=Gt.createNode(t,e,n,r);return Gt.isDir(o.mode)?(o.node_ops=Wt.ops_table.dir.node,o.stream_ops=Wt.ops_table.dir.stream,o.contents={}):Gt.isFile(o.mode)?(o.node_ops=Wt.ops_table.file.node,o.stream_ops=Wt.ops_table.file.stream,o.usedBytes=0,o.contents=null):Gt.isLink(o.mode)?(o.node_ops=Wt.ops_table.link.node,o.stream_ops=Wt.ops_table.link.stream):Gt.isChrdev(o.mode)&&(o.node_ops=Wt.ops_table.chrdev.node,o.stream_ops=Wt.ops_table.chrdev.stream),o.timestamp=Date.now(),t&&(t.contents[e]=o),o},getFileDataAsRegularArray:function(t){if(t.contents&&t.contents.subarray){for(var e=[],n=0;n<t.usedBytes;++n)e.push(t.contents[n]);return e}return t.contents},getFileDataAsTypedArray:function(t){return t.contents?t.contents.subarray?t.contents.subarray(0,t.usedBytes):new Uint8Array(t.contents):new Uint8Array},expandFileStorage:function(t,e){if(t.contents&&t.contents.subarray&&e>t.contents.length&&(t.contents=Wt.getFileDataAsRegularArray(t),t.usedBytes=t.contents.length),!t.contents||t.contents.subarray){var n=t.contents?t.contents.length:0;if(n>=e)return;e=Math.max(e,n*(n<1048576?2:1.125)|0),0!=n&&(e=Math.max(e,256));var r=t.contents;return t.contents=new Uint8Array(e),void(t.usedBytes>0&&t.contents.set(r.subarray(0,t.usedBytes),0))}for(!t.contents&&e>0&&(t.contents=[]);t.contents.length<e;)t.contents.push(0)},resizeFileStorage:function(t,e){if(t.usedBytes!=e){if(0==e)return t.contents=null,void(t.usedBytes=0);if(!t.contents||t.contents.subarray){var n=t.contents;return t.contents=new Uint8Array(new ArrayBuffer(e)),n&&t.contents.set(n.subarray(0,Math.min(e,t.usedBytes))),void(t.usedBytes=e)}if(t.contents||(t.contents=[]),t.contents.length>e)t.contents.length=e;else for(;t.contents.length<e;)t.contents.push(0);t.usedBytes=e}},node_ops:{getattr:function(t){var e={};return e.dev=Gt.isChrdev(t.mode)?t.id:1,e.ino=t.id,e.mode=t.mode,e.nlink=1,e.uid=0,e.gid=0,e.rdev=t.rdev,Gt.isDir(t.mode)?e.size=4096:Gt.isFile(t.mode)?e.size=t.usedBytes:Gt.isLink(t.mode)?e.size=t.link.length:e.size=0,e.atime=new Date(t.timestamp),e.mtime=new Date(t.timestamp),e.ctime=new Date(t.timestamp),e.blksize=4096,e.blocks=Math.ceil(e.size/e.blksize),e},setattr:function(t,e){void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&Wt.resizeFileStorage(t,e.size)},lookup:function(t,e){throw Gt.genericErrors[Bt.ENOENT]},mknod:function(t,e,n,r){return Wt.createNode(t,e,n,r)},rename:function(t,e,n){if(Gt.isDir(t.mode)){var r;try{r=Gt.lookupNode(e,n)}catch(t){}if(r)for(var o in r.contents)throw new Gt.ErrnoError(Bt.ENOTEMPTY)}delete t.parent.contents[t.name],t.name=n,e.contents[n]=t,t.parent=e},unlink:function(t,e){delete t.contents[e]},rmdir:function(t,e){var n=Gt.lookupNode(t,e);for(var r in n.contents)throw new Gt.ErrnoError(Bt.ENOTEMPTY);delete t.contents[e]},readdir:function(t){var e=[".",".."];for(var n in t.contents)t.contents.hasOwnProperty(n)&&e.push(n);return e},symlink:function(t,e,n){var r=Wt.createNode(t,e,41471,0);return r.link=n,r},readlink:function(t){if(!Gt.isLink(t.mode))throw new Gt.ErrnoError(Bt.EINVAL);return t.link}},stream_ops:{read:function(t,e,n,r,o){var i=t.node.contents;if(o>=t.node.usedBytes)return 0;var a=Math.min(t.node.usedBytes-o,r);if(S(a>=0),a>8&&i.subarray)e.set(i.subarray(o,o+a),n);else for(var u=0;u<a;u++)e[n+u]=i[o+u];return a},write:function(t,e,n,r,o,i){if(!r)return 0;var a=t.node;if(a.timestamp=Date.now(),e.subarray&&(!a.contents||a.contents.subarray)){if(i)return a.contents=e.subarray(n,n+r),a.usedBytes=r,r;if(0===a.usedBytes&&0===o)return a.contents=new Uint8Array(e.subarray(n,n+r)),a.usedBytes=r,r;if(o+r<=a.usedBytes)return a.contents.set(e.subarray(n,n+r),o),r}if(Wt.expandFileStorage(a,o+r),a.contents.subarray&&e.subarray)a.contents.set(e.subarray(n,n+r),o);else for(var u=0;u<r;u++)a.contents[o+u]=e[n+u];return a.usedBytes=Math.max(a.usedBytes,o+r),r},llseek:function(t,e,n){var r=e;if(1===n?r+=t.position:2===n&&Gt.isFile(t.node.mode)&&(r+=t.node.usedBytes),r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r},allocate:function(t,e,n){Wt.expandFileStorage(t.node,e+n),t.node.usedBytes=Math.max(t.node.usedBytes,e+n)},mmap:function(t,e,n,r,o,i,a){if(!Gt.isFile(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);var u,s,c=t.node.contents;if(2&a||c.buffer!==e&&c.buffer!==e.buffer){if((o>0||o+r<t.node.usedBytes)&&(c=c.subarray?c.subarray(o,o+r):Array.prototype.slice.call(c,o,o+r)),s=!0,!(u=le(r)))throw new Gt.ErrnoError(Bt.ENOMEM);e.set(c,u)}else s=!1,u=c.byteOffset;return{ptr:u,allocated:s}},msync:function(t,e,n,r,o){if(!Gt.isFile(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);if(2&o)return 0;Wt.stream_ops.write(t,e,0,r,n,!1);return 0}}},Yt={dbs:{},indexedDB:function(){if("undefined"!=typeof indexedDB)return indexedDB;var t=null;return"object"==typeof window&&(t=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB),S(t,"IDBFS used, but indexedDB not supported"),t},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(t){return Wt.mount.apply(null,arguments)},syncfs:function(t,e,n){Yt.getLocalSet(t,function(r,o){if(r)return n(r);Yt.getRemoteSet(t,function(t,r){if(t)return n(t);var i=e?r:o,a=e?o:r;Yt.reconcile(i,a,n)})})},getDB:function(t,e){var n,r=Yt.dbs[t];if(r)return e(null,r);try{n=Yt.indexedDB().open(t,Yt.DB_VERSION)}catch(t){return e(t)}if(!n)return e("Unable to connect to IndexedDB");n.onupgradeneeded=function(t){var e,n=t.target.result,r=t.target.transaction;(e=n.objectStoreNames.contains(Yt.DB_STORE_NAME)?r.objectStore(Yt.DB_STORE_NAME):n.createObjectStore(Yt.DB_STORE_NAME)).indexNames.contains("timestamp")||e.createIndex("timestamp","timestamp",{unique:!1})},n.onsuccess=function(){r=n.result,Yt.dbs[t]=r,e(null,r)},n.onerror=function(t){e(this.error),t.preventDefault()}},getLocalSet:function(t,e){var n={};function r(t){return"."!==t&&".."!==t}function o(t){return function(e){return zt.join2(t,e)}}for(var i=Gt.readdir(t.mountpoint).filter(r).map(o(t.mountpoint));i.length;){var a,u=i.pop();try{a=Gt.stat(u)}catch(t){return e(t)}Gt.isDir(a.mode)&&i.push.apply(i,Gt.readdir(u).filter(r).map(o(u))),n[u]={timestamp:a.mtime}}return e(null,{type:"local",entries:n})},getRemoteSet:function(t,e){var n={};Yt.getDB(t.mountpoint,function(t,r){if(t)return e(t);try{var o=r.transaction([Yt.DB_STORE_NAME],"readonly");o.onerror=function(t){e(this.error),t.preventDefault()},o.objectStore(Yt.DB_STORE_NAME).index("timestamp").openKeyCursor().onsuccess=function(t){var o=t.target.result;if(!o)return e(null,{type:"remote",db:r,entries:n});n[o.primaryKey]={timestamp:o.key},o.continue()}}catch(t){return e(t)}})},loadLocalEntry:function(t,e){var n,r;try{r=Gt.lookupPath(t).node,n=Gt.stat(t)}catch(t){return e(t)}return Gt.isDir(n.mode)?e(null,{timestamp:n.mtime,mode:n.mode}):Gt.isFile(n.mode)?(r.contents=Wt.getFileDataAsTypedArray(r),e(null,{timestamp:n.mtime,mode:n.mode,contents:r.contents})):e(new Error("node type not supported"))},storeLocalEntry:function(t,e,n){try{if(Gt.isDir(e.mode))Gt.mkdir(t,e.mode);else{if(!Gt.isFile(e.mode))return n(new Error("node type not supported"));Gt.writeFile(t,e.contents,{canOwn:!0})}Gt.chmod(t,e.mode),Gt.utime(t,e.timestamp,e.timestamp)}catch(t){return n(t)}n(null)},removeLocalEntry:function(t,e){try{Gt.lookupPath(t);var n=Gt.stat(t);Gt.isDir(n.mode)?Gt.rmdir(t):Gt.isFile(n.mode)&&Gt.unlink(t)}catch(t){return e(t)}e(null)},loadRemoteEntry:function(t,e,n){var r=t.get(e);r.onsuccess=function(t){n(null,t.target.result)},r.onerror=function(t){n(this.error),t.preventDefault()}},storeRemoteEntry:function(t,e,n,r){var o=t.put(n,e);o.onsuccess=function(){r(null)},o.onerror=function(t){r(this.error),t.preventDefault()}},removeRemoteEntry:function(t,e,n){var r=t.delete(e);r.onsuccess=function(){n(null)},r.onerror=function(t){n(this.error),t.preventDefault()}},reconcile:function(t,e,n){var r=0,o=[];Object.keys(t.entries).forEach(function(n){var i=t.entries[n],a=e.entries[n];(!a||i.timestamp>a.timestamp)&&(o.push(n),r++)});var i=[];if(Object.keys(e.entries).forEach(function(n){e.entries[n];t.entries[n]||(i.push(n),r++)}),!r)return n(null);var a=0,u=("remote"===t.type?t.db:e.db).transaction([Yt.DB_STORE_NAME],"readwrite"),s=u.objectStore(Yt.DB_STORE_NAME);function c(t){return t?c.errored?void 0:(c.errored=!0,n(t)):++a>=r?n(null):void 0}u.onerror=function(t){c(this.error),t.preventDefault()},o.sort().forEach(function(t){"local"===e.type?Yt.loadRemoteEntry(s,t,function(e,n){if(e)return c(e);Yt.storeLocalEntry(t,n,c)}):Yt.loadLocalEntry(t,function(e,n){if(e)return c(e);Yt.storeRemoteEntry(s,t,n,c)})}),i.sort().reverse().forEach(function(t){"local"===e.type?Yt.removeLocalEntry(t,c):Yt.removeRemoteEntry(s,t,c)})}},qt={isWindows:!1,staticInit:function(){qt.isWindows=!!e.platform.match(/^win/);var t=e.binding("constants");t.fs&&(t=t.fs),qt.flagsForNodeMap={1024:t.O_APPEND,64:t.O_CREAT,128:t.O_EXCL,0:t.O_RDONLY,2:t.O_RDWR,4096:t.O_SYNC,512:t.O_TRUNC,1:t.O_WRONLY}},bufferFrom:function(t){return o.alloc?o.from(t):new o(t)},mount:function(t){return S(s),qt.createNode(null,"/",qt.getMode(t.opts.root),0)},createNode:function(t,e,n,r){if(!Gt.isDir(n)&&!Gt.isFile(n)&&!Gt.isLink(n))throw new Gt.ErrnoError(Bt.EINVAL);var o=Gt.createNode(t,e,n);return o.node_ops=qt.node_ops,o.stream_ops=qt.stream_ops,o},getMode:function(t){var e;try{e=re.lstatSync(t),qt.isWindows&&(e.mode=e.mode|(292&e.mode)>>2)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return e.mode},realPath:function(t){for(var e=[];t.parent!==t;)e.push(t.name),t=t.parent;return e.push(t.mount.opts.root),e.reverse(),zt.join.apply(null,e)},flagsForNode:function(t){t&=-2097153,t&=-2049,t&=-32769,t&=-524289;var e=0;for(var n in qt.flagsForNodeMap)t&n&&(e|=qt.flagsForNodeMap[n],t^=n);if(t)throw new Gt.ErrnoError(Bt.EINVAL);return e},node_ops:{getattr:function(t){var e,n=qt.realPath(t);try{e=re.lstatSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return qt.isWindows&&!e.blksize&&(e.blksize=4096),qt.isWindows&&!e.blocks&&(e.blocks=(e.size+e.blksize-1)/e.blksize|0),{dev:e.dev,ino:e.ino,mode:e.mode,nlink:e.nlink,uid:e.uid,gid:e.gid,rdev:e.rdev,size:e.size,atime:e.atime,mtime:e.mtime,ctime:e.ctime,blksize:e.blksize,blocks:e.blocks}},setattr:function(t,e){var n=qt.realPath(t);try{if(void 0!==e.mode&&(re.chmodSync(n,e.mode),t.mode=e.mode),void 0!==e.timestamp){var r=new Date(e.timestamp);re.utimesSync(n,r,r)}void 0!==e.size&&re.truncateSync(n,e.size)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},lookup:function(t,e){var n=zt.join2(qt.realPath(t),e),r=qt.getMode(n);return qt.createNode(t,e,r)},mknod:function(t,e,n,r){var o=qt.createNode(t,e,n,r),i=qt.realPath(o);try{Gt.isDir(o.mode)?re.mkdirSync(i,o.mode):re.writeFileSync(i,"",{mode:o.mode})}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}return o},rename:function(t,e,n){var r=qt.realPath(t),o=zt.join2(qt.realPath(e),n);try{re.renameSync(r,o)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},unlink:function(t,e){var n=zt.join2(qt.realPath(t),e);try{re.unlinkSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},rmdir:function(t,e){var n=zt.join2(qt.realPath(t),e);try{re.rmdirSync(n)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},readdir:function(t){var e=qt.realPath(t);try{return re.readdirSync(e)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},symlink:function(t,e,n){var r=zt.join2(qt.realPath(t),e);try{re.symlinkSync(n,r)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},readlink:function(t){var e=qt.realPath(t);try{return e=re.readlinkSync(e),e=oe.relative(oe.resolve(t.mount.opts.root),e)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}}},stream_ops:{open:function(t){var e=qt.realPath(t.node);try{Gt.isFile(t.node.mode)&&(t.nfd=re.openSync(e,qt.flagsForNode(t.flags)))}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},close:function(t){try{Gt.isFile(t.node.mode)&&t.nfd&&re.closeSync(t.nfd)}catch(t){if(!t.code)throw t;throw new Gt.ErrnoError(Bt[t.code])}},read:function(t,e,n,r,o){if(0===r)return 0;try{return re.readSync(t.nfd,qt.bufferFrom(e.buffer),n,r,o)}catch(t){throw new Gt.ErrnoError(Bt[t.code])}},write:function(t,e,n,r,o){try{return re.writeSync(t.nfd,qt.bufferFrom(e.buffer),n,r,o)}catch(t){throw new Gt.ErrnoError(Bt[t.code])}},llseek:function(t,e,n){var r=e;if(1===n)r+=t.position;else if(2===n&&Gt.isFile(t.node.mode))try{r+=re.fstatSync(t.nfd).size}catch(t){throw new Gt.ErrnoError(Bt[t.code])}if(r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r}}},Ht={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function(t){S(f),Ht.reader||(Ht.reader=new FileReaderSync);var e=Ht.createNode(null,"/",Ht.DIR_MODE,0),n={};function r(t){for(var r=t.split("/"),o=e,i=0;i<r.length-1;i++){var a=r.slice(0,i+1).join("/");n[a]||(n[a]=Ht.createNode(o,r[i],Ht.DIR_MODE,0)),o=n[a]}return o}function o(t){var e=t.split("/");return e[e.length-1]}return Array.prototype.forEach.call(t.opts.files||[],function(t){Ht.createNode(r(t.name),o(t.name),Ht.FILE_MODE,0,t,t.lastModifiedDate)}),(t.opts.blobs||[]).forEach(function(t){Ht.createNode(r(t.name),o(t.name),Ht.FILE_MODE,0,t.data)}),(t.opts.packages||[]).forEach(function(t){t.metadata.files.forEach(function(e){var n=e.filename.substr(1);Ht.createNode(r(n),o(n),Ht.FILE_MODE,0,t.blob.slice(e.start,e.end))})}),e},createNode:function(t,e,n,r,o,i){var a=Gt.createNode(t,e,n);return a.mode=n,a.node_ops=Ht.node_ops,a.stream_ops=Ht.stream_ops,a.timestamp=(i||new Date).getTime(),S(Ht.FILE_MODE!==Ht.DIR_MODE),n===Ht.FILE_MODE?(a.size=o.size,a.contents=o):(a.size=4096,a.contents={}),t&&(t.contents[e]=a),a},node_ops:{getattr:function(t){return{dev:1,ino:void 0,mode:t.mode,nlink:1,uid:0,gid:0,rdev:void 0,size:t.size,atime:new Date(t.timestamp),mtime:new Date(t.timestamp),ctime:new Date(t.timestamp),blksize:4096,blocks:Math.ceil(t.size/4096)}},setattr:function(t,e){void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp)},lookup:function(t,e){throw new Gt.ErrnoError(Bt.ENOENT)},mknod:function(t,e,n,r){throw new Gt.ErrnoError(Bt.EPERM)},rename:function(t,e,n){throw new Gt.ErrnoError(Bt.EPERM)},unlink:function(t,e){throw new Gt.ErrnoError(Bt.EPERM)},rmdir:function(t,e){throw new Gt.ErrnoError(Bt.EPERM)},readdir:function(t){var e=[".",".."];for(var n in t.contents)t.contents.hasOwnProperty(n)&&e.push(n);return e},symlink:function(t,e,n){throw new Gt.ErrnoError(Bt.EPERM)},readlink:function(t){throw new Gt.ErrnoError(Bt.EPERM)}},stream_ops:{read:function(t,e,n,r,o){if(o>=t.node.size)return 0;var i=t.node.contents.slice(o,o+r),a=Ht.reader.readAsArrayBuffer(i);return e.set(new Uint8Array(a),n),i.size},write:function(t,e,n,r,o){throw new Gt.ErrnoError(Bt.EIO)},llseek:function(t,e,n){var r=e;if(1===n?r+=t.position:2===n&&Gt.isFile(t.node.mode)&&(r+=t.node.size),r<0)throw new Gt.ErrnoError(Bt.EINVAL);return r}}};Q+=16,Q+=16,Q+=16;var Gt={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(t){if(!(t instanceof Gt.ErrnoError))throw t+" : "+W();return Ut(t.errno)},lookupPath:function(t,e){if(t=zt.resolve(Gt.cwd(),t),e=e||{},!t)return{path:"",node:null};var n={follow_mount:!0,recurse_count:0};for(var r in n)void 0===e[r]&&(e[r]=n[r]);if(e.recurse_count>8)throw new Gt.ErrnoError(Bt.ELOOP);for(var o=zt.normalizeArray(t.split("/").filter(function(t){return!!t}),!1),i=Gt.root,a="/",u=0;u<o.length;u++){var s=u===o.length-1;if(s&&e.parent)break;if(i=Gt.lookupNode(i,o[u]),a=zt.join2(a,o[u]),Gt.isMountpoint(i)&&(!s||s&&e.follow_mount)&&(i=i.mounted.root),!s||e.follow)for(var c=0;Gt.isLink(i.mode);){var l=Gt.readlink(a);if(a=zt.resolve(zt.dirname(a),l),i=Gt.lookupPath(a,{recurse_count:e.recurse_count}).node,c++>40)throw new Gt.ErrnoError(Bt.ELOOP)}}return{path:a,node:i}},getPath:function(t){for(var e;;){if(Gt.isRoot(t)){var n=t.mount.mountpoint;return e?"/"!==n[n.length-1]?n+"/"+e:n+e:n}e=e?t.name+"/"+e:t.name,t=t.parent}},hashName:function(t,e){for(var n=0,r=0;r<e.length;r++)n=(n<<5)-n+e.charCodeAt(r)|0;return(t+n>>>0)%Gt.nameTable.length},hashAddNode:function(t){var e=Gt.hashName(t.parent.id,t.name);t.name_next=Gt.nameTable[e],Gt.nameTable[e]=t},hashRemoveNode:function(t){var e=Gt.hashName(t.parent.id,t.name);if(Gt.nameTable[e]===t)Gt.nameTable[e]=t.name_next;else for(var n=Gt.nameTable[e];n;){if(n.name_next===t){n.name_next=t.name_next;break}n=n.name_next}},lookupNode:function(t,e){var n=Gt.mayLookup(t);if(n)throw new Gt.ErrnoError(n,t);for(var r=Gt.hashName(t.id,e),o=Gt.nameTable[r];o;o=o.name_next){var i=o.name;if(o.parent.id===t.id&&i===e)return o}return Gt.lookup(t,e)},createNode:function(t,e,n,r){if(!Gt.FSNode){Gt.FSNode=function(t,e,n,r){t||(t=this),this.parent=t,this.mount=t.mount,this.mounted=null,this.id=Gt.nextInode++,this.name=e,this.mode=n,this.node_ops={},this.stream_ops={},this.rdev=r},Gt.FSNode.prototype={};Object.defineProperties(Gt.FSNode.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return Gt.isDir(this.mode)}},isDevice:{get:function(){return Gt.isChrdev(this.mode)}}})}var o=new Gt.FSNode(t,e,n,r);return Gt.hashAddNode(o),o},destroyNode:function(t){Gt.hashRemoveNode(t)},isRoot:function(t){return t===t.parent},isMountpoint:function(t){return!!t.mounted},isFile:function(t){return 32768==(61440&t)},isDir:function(t){return 16384==(61440&t)},isLink:function(t){return 40960==(61440&t)},isChrdev:function(t){return 8192==(61440&t)},isBlkdev:function(t){return 24576==(61440&t)},isFIFO:function(t){return 4096==(61440&t)},isSocket:function(t){return 49152==(49152&t)},flagModes:{r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(t){var e=Gt.flagModes[t];if(void 0===e)throw new Error("Unknown file open mode: "+t);return e},flagsToPermissionString:function(t){var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},nodePermissions:function(t,e){return Gt.ignorePermissions?0:(-1===e.indexOf("r")||292&t.mode)&&(-1===e.indexOf("w")||146&t.mode)&&(-1===e.indexOf("x")||73&t.mode)?0:Bt.EACCES},mayLookup:function(t){var e=Gt.nodePermissions(t,"x");return e||(t.node_ops.lookup?0:Bt.EACCES)},mayCreate:function(t,e){try{Gt.lookupNode(t,e);return Bt.EEXIST}catch(t){}return Gt.nodePermissions(t,"wx")},mayDelete:function(t,e,n){var r;try{r=Gt.lookupNode(t,e)}catch(t){return t.errno}var o=Gt.nodePermissions(t,"wx");if(o)return o;if(n){if(!Gt.isDir(r.mode))return Bt.ENOTDIR;if(Gt.isRoot(r)||Gt.getPath(r)===Gt.cwd())return Bt.EBUSY}else if(Gt.isDir(r.mode))return Bt.EISDIR;return 0},mayOpen:function(t,e){return t?Gt.isLink(t.mode)?Bt.ELOOP:Gt.isDir(t.mode)&&("r"!==Gt.flagsToPermissionString(e)||512&e)?Bt.EISDIR:Gt.nodePermissions(t,Gt.flagsToPermissionString(e)):Bt.ENOENT},MAX_OPEN_FDS:4096,nextfd:function(t,e){t=t||0,e=e||Gt.MAX_OPEN_FDS;for(var n=t;n<=e;n++)if(!Gt.streams[n])return n;throw new Gt.ErrnoError(Bt.EMFILE)},getStream:function(t){return Gt.streams[t]},createStream:function(t,e,n){Gt.FSStream||(Gt.FSStream=function(){},Gt.FSStream.prototype={},Object.defineProperties(Gt.FSStream.prototype,{object:{get:function(){return this.node},set:function(t){this.node=t}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}}));var r=new Gt.FSStream;for(var o in t)r[o]=t[o];t=r;var i=Gt.nextfd(e,n);return t.fd=i,Gt.streams[i]=t,t},closeStream:function(t){Gt.streams[t]=null},chrdev_stream_ops:{open:function(t){var e=Gt.getDevice(t.node.rdev);t.stream_ops=e.stream_ops,t.stream_ops.open&&t.stream_ops.open(t)},llseek:function(){throw new Gt.ErrnoError(Bt.ESPIPE)}},major:function(t){return t>>8},minor:function(t){return 255&t},makedev:function(t,e){return t<<8|e},registerDevice:function(t,e){Gt.devices[t]={stream_ops:e}},getDevice:function(t){return Gt.devices[t]},getMounts:function(t){for(var e=[],n=[t];n.length;){var r=n.pop();e.push(r),n.push.apply(n,r.mounts)}return e},syncfs:function(t,e){"function"==typeof t&&(e=t,t=!1),Gt.syncFSRequests++,Gt.syncFSRequests>1&&console.log("warning: "+Gt.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var n=Gt.getMounts(Gt.root.mount),r=0;function o(t){return S(Gt.syncFSRequests>0),Gt.syncFSRequests--,e(t)}function i(t){if(t)return i.errored?void 0:(i.errored=!0,o(t));++r>=n.length&&o(null)}n.forEach(function(e){if(!e.type.syncfs)return i(null);e.type.syncfs(e,t,i)})},mount:function(t,e,n){var r,o="/"===n,i=!n;if(o&&Gt.root)throw new Gt.ErrnoError(Bt.EBUSY);if(!o&&!i){var a=Gt.lookupPath(n,{follow_mount:!1});if(n=a.path,r=a.node,Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);if(!Gt.isDir(r.mode))throw new Gt.ErrnoError(Bt.ENOTDIR)}var u={type:t,opts:e,mountpoint:n,mounts:[]},s=t.mount(u);return s.mount=u,u.root=s,o?Gt.root=s:r&&(r.mounted=u,r.mount&&r.mount.mounts.push(u)),s},unmount:function(t){var e=Gt.lookupPath(t,{follow_mount:!1});if(!Gt.isMountpoint(e.node))throw new Gt.ErrnoError(Bt.EINVAL);var n=e.node,r=n.mounted,o=Gt.getMounts(r);Object.keys(Gt.nameTable).forEach(function(t){for(var e=Gt.nameTable[t];e;){var n=e.name_next;-1!==o.indexOf(e.mount)&&Gt.destroyNode(e),e=n}}),n.mounted=null;var i=n.mount.mounts.indexOf(r);S(-1!==i),n.mount.mounts.splice(i,1)},lookup:function(t,e){return t.node_ops.lookup(t,e)},mknod:function(t,e,n){var r=Gt.lookupPath(t,{parent:!0}).node,o=zt.basename(t);if(!o||"."===o||".."===o)throw new Gt.ErrnoError(Bt.EINVAL);var i=Gt.mayCreate(r,o);if(i)throw new Gt.ErrnoError(i);if(!r.node_ops.mknod)throw new Gt.ErrnoError(Bt.EPERM);return r.node_ops.mknod(r,o,e,n)},create:function(t,e){return e=void 0!==e?e:438,e&=4095,e|=32768,Gt.mknod(t,e,0)},mkdir:function(t,e){return e=void 0!==e?e:511,e&=1023,e|=16384,Gt.mknod(t,e,0)},mkdirTree:function(t,e){for(var n=t.split("/"),r="",o=0;o<n.length;++o)if(n[o]){r+="/"+n[o];try{Gt.mkdir(r,e)}catch(t){if(t.errno!=Bt.EEXIST)throw t}}},mkdev:function(t,e,n){return void 0===n&&(n=e,e=438),e|=8192,Gt.mknod(t,e,n)},symlink:function(t,e){if(!zt.resolve(t))throw new Gt.ErrnoError(Bt.ENOENT);var n=Gt.lookupPath(e,{parent:!0}).node;if(!n)throw new Gt.ErrnoError(Bt.ENOENT);var r=zt.basename(e),o=Gt.mayCreate(n,r);if(o)throw new Gt.ErrnoError(o);if(!n.node_ops.symlink)throw new Gt.ErrnoError(Bt.EPERM);return n.node_ops.symlink(n,r,t)},rename:function(t,e){var n,r,o=zt.dirname(t),i=zt.dirname(e),a=zt.basename(t),u=zt.basename(e);try{n=Gt.lookupPath(t,{parent:!0}).node,r=Gt.lookupPath(e,{parent:!0}).node}catch(t){throw new Gt.ErrnoError(Bt.EBUSY)}if(!n||!r)throw new Gt.ErrnoError(Bt.ENOENT);if(n.mount!==r.mount)throw new Gt.ErrnoError(Bt.EXDEV);var s,c=Gt.lookupNode(n,a),l=zt.relative(t,i);if("."!==l.charAt(0))throw new Gt.ErrnoError(Bt.EINVAL);if("."!==(l=zt.relative(e,o)).charAt(0))throw new Gt.ErrnoError(Bt.ENOTEMPTY);try{s=Gt.lookupNode(r,u)}catch(t){}if(c!==s){var f=Gt.isDir(c.mode),d=Gt.mayDelete(n,a,f);if(d)throw new Gt.ErrnoError(d);if(d=s?Gt.mayDelete(r,u,f):Gt.mayCreate(r,u))throw new Gt.ErrnoError(d);if(!n.node_ops.rename)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(c)||s&&Gt.isMountpoint(s))throw new Gt.ErrnoError(Bt.EBUSY);if(r!==n&&(d=Gt.nodePermissions(n,"w")))throw new Gt.ErrnoError(d);try{Gt.trackingDelegate.willMovePath&&Gt.trackingDelegate.willMovePath(t,e)}catch(n){console.log("FS.trackingDelegate['willMovePath']('"+t+"', '"+e+"') threw an exception: "+n.message)}Gt.hashRemoveNode(c);try{n.node_ops.rename(c,r,u)}catch(t){throw t}finally{Gt.hashAddNode(c)}try{Gt.trackingDelegate.onMovePath&&Gt.trackingDelegate.onMovePath(t,e)}catch(n){console.log("FS.trackingDelegate['onMovePath']('"+t+"', '"+e+"') threw an exception: "+n.message)}}},rmdir:function(t){var e=Gt.lookupPath(t,{parent:!0}).node,n=zt.basename(t),r=Gt.lookupNode(e,n),o=Gt.mayDelete(e,n,!0);if(o)throw new Gt.ErrnoError(o);if(!e.node_ops.rmdir)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);try{Gt.trackingDelegate.willDeletePath&&Gt.trackingDelegate.willDeletePath(t)}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.rmdir(e,n),Gt.destroyNode(r);try{Gt.trackingDelegate.onDeletePath&&Gt.trackingDelegate.onDeletePath(t)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readdir:function(t){var e=Gt.lookupPath(t,{follow:!0}).node;if(!e.node_ops.readdir)throw new Gt.ErrnoError(Bt.ENOTDIR);return e.node_ops.readdir(e)},unlink:function(t){var e=Gt.lookupPath(t,{parent:!0}).node,n=zt.basename(t),r=Gt.lookupNode(e,n),o=Gt.mayDelete(e,n,!1);if(o)throw new Gt.ErrnoError(o);if(!e.node_ops.unlink)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isMountpoint(r))throw new Gt.ErrnoError(Bt.EBUSY);try{Gt.trackingDelegate.willDeletePath&&Gt.trackingDelegate.willDeletePath(t)}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+t+"') threw an exception: "+e.message)}e.node_ops.unlink(e,n),Gt.destroyNode(r);try{Gt.trackingDelegate.onDeletePath&&Gt.trackingDelegate.onDeletePath(t)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+t+"') threw an exception: "+e.message)}},readlink:function(t){var e=Gt.lookupPath(t).node;if(!e)throw new Gt.ErrnoError(Bt.ENOENT);if(!e.node_ops.readlink)throw new Gt.ErrnoError(Bt.EINVAL);return zt.resolve(Gt.getPath(e.parent),e.node_ops.readlink(e))},stat:function(t,e){var n=Gt.lookupPath(t,{follow:!e}).node;if(!n)throw new Gt.ErrnoError(Bt.ENOENT);if(!n.node_ops.getattr)throw new Gt.ErrnoError(Bt.EPERM);return n.node_ops.getattr(n)},lstat:function(t){return Gt.stat(t,!0)},chmod:function(t,e,n){var r;"string"==typeof t?r=Gt.lookupPath(t,{follow:!n}).node:r=t;if(!r.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);r.node_ops.setattr(r,{mode:4095&e|-4096&r.mode,timestamp:Date.now()})},lchmod:function(t,e){Gt.chmod(t,e,!0)},fchmod:function(t,e){var n=Gt.getStream(t);if(!n)throw new Gt.ErrnoError(Bt.EBADF);Gt.chmod(n.node,e)},chown:function(t,e,n,r){var o;"string"==typeof t?o=Gt.lookupPath(t,{follow:!r}).node:o=t;if(!o.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(t,e,n){Gt.chown(t,e,n,!0)},fchown:function(t,e,n){var r=Gt.getStream(t);if(!r)throw new Gt.ErrnoError(Bt.EBADF);Gt.chown(r.node,e,n)},truncate:function(t,e){if(e<0)throw new Gt.ErrnoError(Bt.EINVAL);var n;"string"==typeof t?n=Gt.lookupPath(t,{follow:!0}).node:n=t;if(!n.node_ops.setattr)throw new Gt.ErrnoError(Bt.EPERM);if(Gt.isDir(n.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!Gt.isFile(n.mode))throw new Gt.ErrnoError(Bt.EINVAL);var r=Gt.nodePermissions(n,"w");if(r)throw new Gt.ErrnoError(r);n.node_ops.setattr(n,{size:e,timestamp:Date.now()})},ftruncate:function(t,e){var n=Gt.getStream(t);if(!n)throw new Gt.ErrnoError(Bt.EBADF);if(0==(2097155&n.flags))throw new Gt.ErrnoError(Bt.EINVAL);Gt.truncate(n.node,e)},utime:function(t,e,n){var r=Gt.lookupPath(t,{follow:!0}).node;r.node_ops.setattr(r,{timestamp:Math.max(e,n)})},open:function(t,e,n,r,o){if(""===t)throw new Gt.ErrnoError(Bt.ENOENT);var a;if(e="string"==typeof e?Gt.modeStringToFlags(e):e,n=void 0===n?438:n,n=64&e?4095&n|32768:0,"object"==typeof t)a=t;else{t=zt.normalize(t);try{a=Gt.lookupPath(t,{follow:!(131072&e)}).node}catch(t){}}var u=!1;if(64&e)if(a){if(128&e)throw new Gt.ErrnoError(Bt.EEXIST)}else a=Gt.mknod(t,n,0),u=!0;if(!a)throw new Gt.ErrnoError(Bt.ENOENT);if(Gt.isChrdev(a.mode)&&(e&=-513),65536&e&&!Gt.isDir(a.mode))throw new Gt.ErrnoError(Bt.ENOTDIR);if(!u){var s=Gt.mayOpen(a,e);if(s)throw new Gt.ErrnoError(s)}512&e&&Gt.truncate(a,0),e&=-641;var c=Gt.createStream({node:a,path:Gt.getPath(a),flags:e,seekable:!0,position:0,stream_ops:a.stream_ops,ungotten:[],error:!1},r,o);c.stream_ops.open&&c.stream_ops.open(c),!i.logReadFiles||1&e||(Gt.readFiles||(Gt.readFiles={}),t in Gt.readFiles||(Gt.readFiles[t]=1,s("read file: "+t)));try{if(Gt.trackingDelegate.onOpenFile){var l=0;1!=(2097155&e)&&(l|=Gt.tracking.openFlags.READ),0!=(2097155&e)&&(l|=Gt.tracking.openFlags.WRITE),Gt.trackingDelegate.onOpenFile(t,l)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+t+"', flags) threw an exception: "+e.message)}return c},close:function(t){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);t.getdents&&(t.getdents=null);try{t.stream_ops.close&&t.stream_ops.close(t)}catch(t){throw t}finally{Gt.closeStream(t.fd)}t.fd=null},isClosed:function(t){return null===t.fd},llseek:function(t,e,n){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(!t.seekable||!t.stream_ops.llseek)throw new Gt.ErrnoError(Bt.ESPIPE);return t.position=t.stream_ops.llseek(t,e,n),t.ungotten=[],t.position},read:function(t,e,n,r,o){if(r<0||o<0)throw new Gt.ErrnoError(Bt.EINVAL);if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(1==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!t.stream_ops.read)throw new Gt.ErrnoError(Bt.EINVAL);var i=void 0!==o;if(i){if(!t.seekable)throw new Gt.ErrnoError(Bt.ESPIPE)}else o=t.position;var a=t.stream_ops.read(t,e,n,r,o);return i||(t.position+=a),a},write:function(t,e,n,r,o,i){if(r<0||o<0)throw new Gt.ErrnoError(Bt.EINVAL);if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(0==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.EISDIR);if(!t.stream_ops.write)throw new Gt.ErrnoError(Bt.EINVAL);1024&t.flags&&Gt.llseek(t,0,2);var a=void 0!==o;if(a){if(!t.seekable)throw new Gt.ErrnoError(Bt.ESPIPE)}else o=t.position;var u=t.stream_ops.write(t,e,n,r,o,i);a||(t.position+=u);try{t.path&&Gt.trackingDelegate.onWriteToFile&&Gt.trackingDelegate.onWriteToFile(t.path)}catch(t){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+t.message)}return u},allocate:function(t,e,n){if(Gt.isClosed(t))throw new Gt.ErrnoError(Bt.EBADF);if(e<0||n<=0)throw new Gt.ErrnoError(Bt.EINVAL);if(0==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EBADF);if(!Gt.isFile(t.node.mode)&&!Gt.isDir(t.node.mode))throw new Gt.ErrnoError(Bt.ENODEV);if(!t.stream_ops.allocate)throw new Gt.ErrnoError(Bt.EOPNOTSUPP);t.stream_ops.allocate(t,e,n)},mmap:function(t,e,n,r,o,i,a){if(1==(2097155&t.flags))throw new Gt.ErrnoError(Bt.EACCES);if(!t.stream_ops.mmap)throw new Gt.ErrnoError(Bt.ENODEV);return t.stream_ops.mmap(t,e,n,r,o,i,a)},msync:function(t,e,n,r,o){return t&&t.stream_ops.msync?t.stream_ops.msync(t,e,n,r,o):0},munmap:function(t){return 0},ioctl:function(t,e,n){if(!t.stream_ops.ioctl)throw new Gt.ErrnoError(Bt.ENOTTY);return t.stream_ops.ioctl(t,e,n)},readFile:function(t,e){if((e=e||{}).flags=e.flags||"r",e.encoding=e.encoding||"binary","utf8"!==e.encoding&&"binary"!==e.encoding)throw new Error('Invalid encoding type "'+e.encoding+'"');var n,r=Gt.open(t,e.flags),o=Gt.stat(t).size,i=new Uint8Array(o);return Gt.read(r,i,0,o,0),"utf8"===e.encoding?n=F(i,0):"binary"===e.encoding&&(n=i),Gt.close(r),n},writeFile:function(t,e,n){(n=n||{}).flags=n.flags||"w";var r=Gt.open(t,n.flags,n.mode);if("string"==typeof e){var o=new Uint8Array(j(e)+1),i=B(e,o,0,o.length);Gt.write(r,o,0,i,void 0,n.canOwn)}else{if(!ArrayBuffer.isView(e))throw new Error("Unsupported data type");Gt.write(r,e,0,e.byteLength,void 0,n.canOwn)}Gt.close(r)},cwd:function(){return Gt.currentPath},chdir:function(t){var e=Gt.lookupPath(t,{follow:!0});if(null===e.node)throw new Gt.ErrnoError(Bt.ENOENT);if(!Gt.isDir(e.node.mode))throw new Gt.ErrnoError(Bt.ENOTDIR);var n=Gt.nodePermissions(e.node,"x");if(n)throw new Gt.ErrnoError(n);Gt.currentPath=e.path},createDefaultDirectories:function(){Gt.mkdir("/tmp"),Gt.mkdir("/home"),Gt.mkdir("/home/web_user")},createDefaultDevices:function(){var t;if(Gt.mkdir("/dev"),Gt.registerDevice(Gt.makedev(1,3),{read:function(){return 0},write:function(t,e,n,r,o){return r}}),Gt.mkdev("/dev/null",Gt.makedev(1,3)),Vt.register(Gt.makedev(5,0),Vt.default_tty_ops),Vt.register(Gt.makedev(6,0),Vt.default_tty1_ops),Gt.mkdev("/dev/tty",Gt.makedev(5,0)),Gt.mkdev("/dev/tty1",Gt.makedev(6,0)),"undefined"!=typeof crypto){var e=new Uint8Array(1);t=function(){return crypto.getRandomValues(e),e[0]}}else t=s?function(){return n(32).randomBytes(1)[0]}:function(){return 256*Math.random()|0};Gt.createDevice("/dev","random",t),Gt.createDevice("/dev","urandom",t),Gt.mkdir("/dev/shm"),Gt.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){Gt.mkdir("/proc"),Gt.mkdir("/proc/self"),Gt.mkdir("/proc/self/fd"),Gt.mount({mount:function(){var t=Gt.createNode("/proc/self","fd",16895,73);return t.node_ops={lookup:function(t,e){var n=+e,r=Gt.getStream(n);if(!r)throw new Gt.ErrnoError(Bt.EBADF);var o={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return r.path}}};return o.parent=o,o}},t}},{},"/proc/self/fd")},createStandardStreams:function(){i.stdin?Gt.createDevice("/dev","stdin",i.stdin):Gt.symlink("/dev/tty","/dev/stdin"),i.stdout?Gt.createDevice("/dev","stdout",null,i.stdout):Gt.symlink("/dev/tty","/dev/stdout"),i.stderr?Gt.createDevice("/dev","stderr",null,i.stderr):Gt.symlink("/dev/tty1","/dev/stderr");var t=Gt.open("/dev/stdin","r");S(0===t.fd,"invalid handle for stdin ("+t.fd+")");var e=Gt.open("/dev/stdout","w");S(1===e.fd,"invalid handle for stdout ("+e.fd+")");var n=Gt.open("/dev/stderr","w");S(2===n.fd,"invalid handle for stderr ("+n.fd+")")},ensureErrnoError:function(){Gt.ErrnoError||(Gt.ErrnoError=function(t,e){this.node=e,this.setErrno=function(t){for(var e in this.errno=t,Bt)if(Bt[e]===t){this.code=e;break}},this.setErrno(t),this.message=jt[t],this.stack&&Object.defineProperty(this,"stack",{value:(new Error).stack,writable:!0})},Gt.ErrnoError.prototype=new Error,Gt.ErrnoError.prototype.constructor=Gt.ErrnoError,[Bt.ENOENT].forEach(function(t){Gt.genericErrors[t]=new Gt.ErrnoError(t),Gt.genericErrors[t].stack="<generic error, no stack>"}))},staticInit:function(){Gt.ensureErrnoError(),Gt.nameTable=new Array(4096),Gt.mount(Wt,{},"/"),Gt.createDefaultDirectories(),Gt.createDefaultDevices(),Gt.createSpecialDirectories(),Gt.filesystems={MEMFS:Wt,IDBFS:Yt,NODEFS:qt,WORKERFS:Ht}},init:function(t,e,n){S(!Gt.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),Gt.init.initialized=!0,Gt.ensureErrnoError(),i.stdin=t||i.stdin,i.stdout=e||i.stdout,i.stderr=n||i.stderr,Gt.createStandardStreams()},quit:function(){Gt.init.initialized=!1;var t=i._fflush;t&&t(0);for(var e=0;e<Gt.streams.length;e++){var n=Gt.streams[e];n&&Gt.close(n)}},getMode:function(t,e){var n=0;return t&&(n|=365),e&&(n|=146),n},joinPath:function(t,e){var n=zt.join.apply(null,t);return e&&"/"==n[0]&&(n=n.substr(1)),n},absolutePath:function(t,e){return zt.resolve(e,t)},standardizePath:function(t){return zt.normalize(t)},findObject:function(t,e){var n=Gt.analyzePath(t,e);return n.exists?n.object:(Ut(n.error),null)},analyzePath:function(t,e){try{t=(r=Gt.lookupPath(t,{follow:!e})).path}catch(t){}var n={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var r=Gt.lookupPath(t,{parent:!0});n.parentExists=!0,n.parentPath=r.path,n.parentObject=r.node,n.name=zt.basename(t),r=Gt.lookupPath(t,{follow:!e}),n.exists=!0,n.path=r.path,n.object=r.node,n.name=r.node.name,n.isRoot="/"===r.path}catch(t){n.error=t.errno}return n},createFolder:function(t,e,n,r){var o=zt.join2("string"==typeof t?t:Gt.getPath(t),e),i=Gt.getMode(n,r);return Gt.mkdir(o,i)},createPath:function(t,e,n,r){t="string"==typeof t?t:Gt.getPath(t);for(var o=e.split("/").reverse();o.length;){var i=o.pop();if(i){var a=zt.join2(t,i);try{Gt.mkdir(a)}catch(t){}t=a}}return a},createFile:function(t,e,n,r,o){var i=zt.join2("string"==typeof t?t:Gt.getPath(t),e),a=Gt.getMode(r,o);return Gt.create(i,a)},createDataFile:function(t,e,n,r,o,i){var a=e?zt.join2("string"==typeof t?t:Gt.getPath(t),e):t,u=Gt.getMode(r,o),s=Gt.create(a,u);if(n){if("string"==typeof n){for(var c=new Array(n.length),l=0,f=n.length;l<f;++l)c[l]=n.charCodeAt(l);n=c}Gt.chmod(s,146|u);var d=Gt.open(s,"w");Gt.write(d,n,0,n.length,0,i),Gt.close(d),Gt.chmod(s,u)}return s},createDevice:function(t,e,n,r){var o=zt.join2("string"==typeof t?t:Gt.getPath(t),e),i=Gt.getMode(!!n,!!r);Gt.createDevice.major||(Gt.createDevice.major=64);var a=Gt.makedev(Gt.createDevice.major++,0);return Gt.registerDevice(a,{open:function(t){t.seekable=!1},close:function(t){r&&r.buffer&&r.buffer.length&&r(10)},read:function(t,e,r,o,i){for(var a=0,u=0;u<o;u++){var s;try{s=n()}catch(t){throw new Gt.ErrnoError(Bt.EIO)}if(void 0===s&&0===a)throw new Gt.ErrnoError(Bt.EAGAIN);if(null===s||void 0===s)break;a++,e[r+u]=s}return a&&(t.node.timestamp=Date.now()),a},write:function(t,e,n,o,i){for(var a=0;a<o;a++)try{r(e[n+a])}catch(t){throw new Gt.ErrnoError(Bt.EIO)}return o&&(t.node.timestamp=Date.now()),a}}),Gt.mkdev(o,i,a)},createLink:function(t,e,n,r,o){var i=zt.join2("string"==typeof t?t:Gt.getPath(t),e);return Gt.symlink(n,i)},forceLoadFile:function(t){if(t.isDevice||t.isFolder||t.link||t.contents)return!0;var e=!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!i.read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{t.contents=ie(i.read(t.url),!0),t.usedBytes=t.contents.length}catch(t){e=!1}return e||Ut(Bt.EIO),e},createLazyFile:function(t,e,n,r,o){function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(t){if(!(t>this.length-1||t<0)){var e=t%this.chunkSize,n=t/this.chunkSize|0;return this.getter(n)[e]}},i.prototype.setDataGetter=function(t){this.getter=t},i.prototype.cacheLength=function(){var t=new XMLHttpRequest;if(t.open("HEAD",n,!1),t.send(null),!(t.status>=200&&t.status<300||304===t.status))throw new Error("Couldn't load "+n+". Status: "+t.status);var e,r=Number(t.getResponseHeader("Content-length")),o=(e=t.getResponseHeader("Accept-Ranges"))&&"bytes"===e,i=(e=t.getResponseHeader("Content-Encoding"))&&"gzip"===e,a=1048576;o||(a=r);var u=this;u.setDataGetter(function(t){var e=t*a,o=(t+1)*a-1;if(o=Math.min(o,r-1),void 0===u.chunks[t]&&(u.chunks[t]=function(t,e){if(t>e)throw new Error("invalid range ("+t+", "+e+") or no bytes requested!");if(e>r-1)throw new Error("only "+r+" bytes available! programmer error!");var o=new XMLHttpRequest;if(o.open("GET",n,!1),r!==a&&o.setRequestHeader("Range","bytes="+t+"-"+e),"undefined"!=typeof Uint8Array&&(o.responseType="arraybuffer"),o.overrideMimeType&&o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(null),!(o.status>=200&&o.status<300||304===o.status))throw new Error("Couldn't load "+n+". Status: "+o.status);return void 0!==o.response?new Uint8Array(o.response||[]):ie(o.responseText||"",!0)}(e,o)),void 0===u.chunks[t])throw new Error("doXHR failed!");return u.chunks[t]}),!i&&r||(a=r=1,r=this.getter(0).length,a=r,console.log("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=r,this._chunkSize=a,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!f)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a=new i;Object.defineProperties(a,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:a}}else u={isDevice:!1,url:n};var s=Gt.createFile(t,e,u,r,o);u.contents?s.contents=u.contents:u.url&&(s.contents=null,s.url=u.url),Object.defineProperties(s,{usedBytes:{get:function(){return this.contents.length}}});var c={};return Object.keys(s.stream_ops).forEach(function(t){var e=s.stream_ops[t];c[t]=function(){if(!Gt.forceLoadFile(s))throw new Gt.ErrnoError(Bt.EIO);return e.apply(null,arguments)}}),c.read=function(t,e,n,r,o){if(!Gt.forceLoadFile(s))throw new Gt.ErrnoError(Bt.EIO);var i=t.node.contents;if(o>=i.length)return 0;var a=Math.min(i.length-o,r);if(S(a>=0),i.slice)for(var u=0;u<a;u++)e[n+u]=i[o+u];else for(u=0;u<a;u++)e[n+u]=i.get(o+u);return a},s.stream_ops=c,s},createPreloadedFile:function(t,e,n,r,o,a,u,s,c,l){Browser.init();var f=e?zt.resolve(zt.join2(t,e)):t;function d(n){function d(n){l&&l(),s||Gt.createDataFile(t,e,n,r,o,c),a&&a(),Tt()}var h=!1;i.preloadPlugins.forEach(function(t){h||t.canHandle(f)&&(t.handle(n,f,d,function(){u&&u(),Tt()}),h=!0)}),h||d(n)}Pt(),"string"==typeof n?Browser.asyncLoad(n,function(t){d(t)},u):d(n)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(t,e,n){e=e||function(){},n=n||function(){};var r=Gt.indexedDB();try{var o=r.open(Gt.DB_NAME(),Gt.DB_VERSION)}catch(t){return n(t)}o.onupgradeneeded=function(){console.log("creating db"),o.result.createObjectStore(Gt.DB_STORE_NAME)},o.onsuccess=function(){var r=o.result.transaction([Gt.DB_STORE_NAME],"readwrite"),i=r.objectStore(Gt.DB_STORE_NAME),a=0,u=0,s=t.length;function c(){0==u?e():n()}t.forEach(function(t){var e=i.put(Gt.analyzePath(t).object.contents,t);e.onsuccess=function(){++a+u==s&&c()},e.onerror=function(){a+ ++u==s&&c()}}),r.onerror=n},o.onerror=n},loadFilesFromDB:function(t,e,n){e=e||function(){},n=n||function(){};var r=Gt.indexedDB();try{var o=r.open(Gt.DB_NAME(),Gt.DB_VERSION)}catch(t){return n(t)}o.onupgradeneeded=n,o.onsuccess=function(){var r=o.result;try{var i=r.transaction([Gt.DB_STORE_NAME],"readonly")}catch(t){return void n(t)}var a=i.objectStore(Gt.DB_STORE_NAME),u=0,s=0,c=t.length;function l(){0==s?e():n()}t.forEach(function(t){var e=a.get(t);e.onsuccess=function(){Gt.analyzePath(t).exists&&Gt.unlink(t),Gt.createDataFile(zt.dirname(t),zt.basename(t),e.result,!0,!0,!0),++u+s==c&&l()},e.onerror=function(){u+ ++s==c&&l()}}),i.onerror=n},o.onerror=n}},Xt={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(t,e){if("/"!==e[0]){var n;if(-100===t)n=Gt.cwd();else{var r=Gt.getStream(t);if(!r)throw new Gt.ErrnoError(Bt.EBADF);n=r.path}e=zt.join2(n,e)}return e},doStat:function(t,e,n){try{var r=t(e)}catch(t){if(t&&t.node&&zt.normalize(e)!==zt.normalize(Gt.getPath(t.node)))return-Bt.ENOTDIR;throw t}return X[n>>2]=r.dev,X[n+4>>2]=0,X[n+8>>2]=r.ino,X[n+12>>2]=r.mode,X[n+16>>2]=r.nlink,X[n+20>>2]=r.uid,X[n+24>>2]=r.gid,X[n+28>>2]=r.rdev,X[n+32>>2]=0,X[n+36>>2]=r.size,X[n+40>>2]=4096,X[n+44>>2]=r.blocks,X[n+48>>2]=r.atime.getTime()/1e3|0,X[n+52>>2]=0,X[n+56>>2]=r.mtime.getTime()/1e3|0,X[n+60>>2]=0,X[n+64>>2]=r.ctime.getTime()/1e3|0,X[n+68>>2]=0,X[n+72>>2]=r.ino,0},doMsync:function(t,e,n,r){var o=new Uint8Array(H.subarray(t,t+n));Gt.msync(e,o,0,n,r)},doMkdir:function(t,e){return"/"===(t=zt.normalize(t))[t.length-1]&&(t=t.substr(0,t.length-1)),Gt.mkdir(t,e,0),0},doMknod:function(t,e,n){switch(61440&e){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-Bt.EINVAL}return Gt.mknod(t,e,n),0},doReadlink:function(t,e,n){if(n<=0)return-Bt.EINVAL;var r=Gt.readlink(t),o=Math.min(n,j(r)),i=q[e+o];return U(r,e,n+1),q[e+o]=i,o},doAccess:function(t,e){if(-8&e)return-Bt.EINVAL;var n;n=Gt.lookupPath(t,{follow:!0}).node;var r="";return 4&e&&(r+="r"),2&e&&(r+="w"),1&e&&(r+="x"),r&&Gt.nodePermissions(n,r)?-Bt.EACCES:0},doDup:function(t,e,n){var r=Gt.getStream(n);return r&&Gt.close(r),Gt.open(t,e,0,n,n).fd},doReadv:function(t,e,n,r){for(var o=0,i=0;i<n;i++){var a=X[e+8*i>>2],u=X[e+(8*i+4)>>2],s=Gt.read(t,q,a,u,r);if(s<0)return-1;if(o+=s,s<u)break}return o},doWritev:function(t,e,n,r){for(var o=0,i=0;i<n;i++){var a=X[e+8*i>>2],u=X[e+(8*i+4)>>2],s=Gt.write(t,q,a,u,r);if(s<0)return-1;o+=s}return o},varargs:0,get:function(t){return Xt.varargs+=4,X[Xt.varargs-4>>2]},getStr:function(){return I(Xt.get())},getStreamFromFD:function(){var t=Gt.getStream(Xt.get());if(!t)throw new Gt.ErrnoError(Bt.EBADF);return t},getSocketFromFD:function(){var t=SOCKFS.getSocket(Xt.get());if(!t)throw new Gt.ErrnoError(Bt.EBADF);return t},getSocketAddress:function(t){var e=Xt.get(),n=Xt.get();if(t&&0===e)return null;var r=__read_sockaddr(e,n);if(r.errno)throw new Gt.ErrnoError(r.errno);return r.addr=DNS.lookup_addr(r.addr)||r.addr,r},get64:function(){var t=Xt.get(),e=Xt.get();return S(t>=0?0===e:-1===e),t},getZero:function(){S(0===Xt.get())}};var Kt=wt,$t=Et;function Qt(){var t=Qt;return t.LLVM_SAVEDSTACKS||(t.LLVM_SAVEDSTACKS=[]),t.LLVM_SAVEDSTACKS.push(he()),t.LLVM_SAVEDSTACKS.length-1}function Zt(t){return t%4==0&&(t%100!=0||t%400==0)}function Jt(t,e){for(var n=0,r=0;r<=e;n+=t[r++]);return n}var te=[31,29,31,30,31,30,31,31,30,31,30,31],ee=[31,28,31,30,31,30,31,31,30,31,30,31];function ne(t,e){for(var n=new Date(t.getTime());e>0;){var r=Zt(n.getFullYear()),o=n.getMonth(),i=(r?te:ee)[o];if(!(e>i-n.getDate()))return n.setDate(n.getDate()+e),n;e-=i-n.getDate()+1,n.setDate(1),o<11?n.setMonth(o+1):(n.setMonth(0),n.setFullYear(n.getFullYear()+1))}return n}if(Gt.staticInit(),ft.unshift(function(){i.noFSInit||Gt.init.initialized||Gt.init()}),dt.push(function(){Gt.ignorePermissions=!1}),ht.push(function(){Gt.quit()}),ft.unshift(function(){Vt.init()}),ht.push(function(){Vt.shutdown()}),s){var re=n(32),oe=n(32);qt.staticInit()}function ie(t,e,n){var r=n>0?n:j(t)+1,o=new Array(r),i=B(t,o,0,o.length);return e&&(o.length=i),o}et=b(4),tt=w((J=w(Q))+ut),X[et>>2]=tt,Z=!0,i.wasmTableSize=807,i.wasmMaxTableSize=807,i.asmGlobalArg={},i.asmLibraryArg={abort:ge,enlargeMemory:at,getTotalMemory:function(){return st},abortOnCannotGrowMemory:it,__Unwind_Backtrace:function(t,e){for(var n=Rt().split("\n"),r=0;r<n.length;r++)if(0!==i.dynCall_iii(t,0,e))return},__Unwind_FindEnclosingFunction:function(){return 0},__Unwind_GetIPInfo:function(){ge("Unwind_GetIPInfo")},___buildEnvironment:function t(e){var n,r;t.called?(r=X[e>>2],n=X[r>>2]):(t.called=!0,It.USER=It.LOGNAME="web_user",It.PATH="/",It.PWD="/",It.HOME="/home/web_user",It.LANG="C.UTF-8",It._=i.thisProgram,n=R(1024),r=R(256),X[r>>2]=n,X[e>>2]=r);var o=[],a=0;for(var u in It)if("string"==typeof It[u]){var s=u+"="+It[u];o.push(s),a+=s.length}if(a>1024)throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");for(var c=0;c<o.length;c++)bt(s=o[c],n),X[r+4*c>>2]=n,n+=s.length+1;X[r+4*o.length>>2]=0},___cxa_allocate_exception:function(t){return le(t)},___cxa_throw:function(t,e,n){throw Ft.infos[t]={ptr:t,adjusted:t,type:e,destructor:n,refcount:0,caught:!1,rethrown:!1},Ft.last=t,"uncaught_exception"in Lt?Lt.uncaught_exception++:Lt.uncaught_exception=1,t+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."},___lock:function(){},___map_file:function(t,e){return Ut(Bt.EPERM),-1},___setErrNo:Ut,___syscall140:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=(Xt.get(),Xt.get()),o=Xt.get(),i=Xt.get(),a=r;return Gt.llseek(n,a,i),X[o>>2]=n.position,n.getdents&&0===a&&0===i&&(n.getdents=null),0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall145:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Xt.doReadv(n,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall146:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Xt.doWritev(n,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall221:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD();switch(Xt.get()){case 0:return(r=Xt.get())<0?-Bt.EINVAL:Gt.open(n.path,n.flags,0,r).fd;case 1:case 2:return 0;case 3:return n.flags;case 4:var r=Xt.get();return n.flags|=r,0;case 12:case 12:return r=Xt.get(),G[r+0>>1]=2,0;case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-Bt.EINVAL;case 9:return Ut(Bt.EINVAL),-1;default:return-Bt.EINVAL}}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall3:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Gt.read(n,q,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall4:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get(),o=Xt.get();return Gt.write(n,q,r,o)}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall5:function(t,e){Xt.varargs=e;try{var n=Xt.getStr(),r=Xt.get(),o=Xt.get();return Gt.open(n,r,o).fd}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall54:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD(),r=Xt.get();switch(r){case 21509:case 21505:return n.tty?0:-Bt.ENOTTY;case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:return n.tty?0:-Bt.ENOTTY;case 21519:if(!n.tty)return-Bt.ENOTTY;var o=Xt.get();return X[o>>2]=0,0;case 21520:return n.tty?-Bt.EINVAL:-Bt.ENOTTY;case 21531:return o=Xt.get(),Gt.ioctl(n,r,o);case 21523:case 21524:return n.tty?0:-Bt.ENOTTY;default:ge("bad ioctl syscall "+r)}}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall6:function(t,e){Xt.varargs=e;try{var n=Xt.getStreamFromFD();return Gt.close(n),0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___syscall91:function(t,e){Xt.varargs=e;try{var n=Xt.get(),r=Xt.get(),o=Xt.mappings[n];if(!o)return 0;if(r===o.len){var i=Gt.getStream(o.fd);Xt.doMsync(n,i,r,o.flags),Gt.munmap(i),Xt.mappings[n]=null,o.allocated&&ce(o.malloc)}return 0}catch(t){return void 0!==Gt&&t instanceof Gt.ErrnoError||ge(t),-t.errno}},___unlock:function(){},_abort:function(){i.abort()},_dladdr:function(t,e){var n=function(t,e,n,r){var o,i;"number"==typeof t?(o=!0,i=t):(o=!1,i=t.length);var a,u="string"==typeof e?e:null;if(a=n==D?r:["function"==typeof le?le:b,fe,b,_][void 0===n?O:n](Math.max(i,u?1:e.length)),o){var s;for(r=a,S(0==(3&a)),s=a+(-4&i);r<s;r+=4)X[r>>2]=0;for(s=a+i;r<s;)q[r++>>0]=0;return a}if("i8"===u)return t.subarray||t.slice?H.set(t,a):H.set(new Uint8Array(t),a),a;for(var c,l,f,d=0;d<i;){var h=t[d];0!==(c=u||e[d])?("i64"==c&&(c="i32"),T(a+d,h,c),f!==c&&(l=E(c),f=c),d+=l):d++}return a}(ie(i.thisProgram||"./this.program"),"i8",N);return X[e>>2]=n,X[e+4>>2]=0,X[e+8>>2]=0,X[e+12>>2]=0,1},_emscripten_memcpy_big:function(t,e,n){return H.set(H.subarray(e,e+n),t),t},_getenv:function t(e){return 0===e?0:(e=I(e),It.hasOwnProperty(e)?(t.ret&&ce(t.ret),t.ret=function(t){var e=j(t)+1,n=le(e);return n&&B(t,q,n,e),n}(It[e]),t.ret):0)},_llvm_cos_f32:Kt,_llvm_sin_f32:$t,_llvm_stackrestore:function(t){var e=Qt,n=e.LLVM_SAVEDSTACKS[t];e.LLVM_SAVEDSTACKS.splice(t,1),de(n)},_llvm_stacksave:Qt,_llvm_trap:function(){ge("trap!")},_pthread_cond_destroy:function(){return 0},_pthread_cond_init:function(){return 0},_pthread_cond_wait:function(){return 0},_pthread_condattr_destroy:function(){return 0},_pthread_condattr_init:function(){return 0},_pthread_condattr_setclock:function(){return 0},_pthread_mutex_destroy:function(){},_pthread_mutex_init:function(){},_pthread_mutexattr_destroy:function(){},_pthread_mutexattr_init:function(){},_pthread_mutexattr_settype:function(){},_pthread_rwlock_rdlock:function(){return 0},_pthread_rwlock_unlock:function(){return 0},_strftime_l:function(t,e,n,r){return function(t,e,n,r){var o=X[r+40>>2],i={tm_sec:X[r>>2],tm_min:X[r+4>>2],tm_hour:X[r+8>>2],tm_mday:X[r+12>>2],tm_mon:X[r+16>>2],tm_year:X[r+20>>2],tm_wday:X[r+24>>2],tm_yday:X[r+28>>2],tm_isdst:X[r+32>>2],tm_gmtoff:X[r+36>>2],tm_zone:o?I(o):""},a=I(n),u={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var s in u)a=a.replace(new RegExp(s,"g"),u[s]);var c=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],l=["January","February","March","April","May","June","July","August","September","October","November","December"];function f(t,e,n){for(var r="number"==typeof t?t.toString():t||"";r.length<e;)r=n[0]+r;return r}function d(t,e){return f(t,e,"0")}function h(t,e){function n(t){return t<0?-1:t>0?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function p(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function y(t){var e=ne(new Date(t.tm_year+1900,0,1),t.tm_yday),n=new Date(e.getFullYear(),0,4),r=new Date(e.getFullYear()+1,0,4),o=p(n),i=p(r);return h(o,e)<=0?h(i,e)<=0?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var g={"%a":function(t){return c[t.tm_wday].substring(0,3)},"%A":function(t){return c[t.tm_wday]},"%b":function(t){return l[t.tm_mon].substring(0,3)},"%B":function(t){return l[t.tm_mon]},"%C":function(t){return d((t.tm_year+1900)/100|0,2)},"%d":function(t){return d(t.tm_mday,2)},"%e":function(t){return f(t.tm_mday,2," ")},"%g":function(t){return y(t).toString().substring(2)},"%G":function(t){return y(t)},"%H":function(t){return d(t.tm_hour,2)},"%I":function(t){var e=t.tm_hour;return 0==e?e=12:e>12&&(e-=12),d(e,2)},"%j":function(t){return d(t.tm_mday+Jt(Zt(t.tm_year+1900)?te:ee,t.tm_mon-1),3)},"%m":function(t){return d(t.tm_mon+1,2)},"%M":function(t){return d(t.tm_min,2)},"%n":function(){return"\n"},"%p":function(t){return t.tm_hour>=0&&t.tm_hour<12?"AM":"PM"},"%S":function(t){return d(t.tm_sec,2)},"%t":function(){return"\t"},"%u":function(t){return new Date(t.tm_year+1900,t.tm_mon+1,t.tm_mday,0,0,0,0).getDay()||7},"%U":function(t){var e=new Date(t.tm_year+1900,0,1),n=0===e.getDay()?e:ne(e,7-e.getDay()),r=new Date(t.tm_year+1900,t.tm_mon,t.tm_mday);if(h(n,r)<0){var o=Jt(Zt(r.getFullYear())?te:ee,r.getMonth()-1)-31,i=31-n.getDate()+o+r.getDate();return d(Math.ceil(i/7),2)}return 0===h(n,e)?"01":"00"},"%V":function(t){var e,n=new Date(t.tm_year+1900,0,4),r=new Date(t.tm_year+1901,0,4),o=p(n),i=p(r),a=ne(new Date(t.tm_year+1900,0,1),t.tm_yday);return h(a,o)<0?"53":h(i,a)<=0?"01":(e=o.getFullYear()<t.tm_year+1900?t.tm_yday+32-o.getDate():t.tm_yday+1-o.getDate(),d(Math.ceil(e/7),2))},"%w":function(t){return new Date(t.tm_year+1900,t.tm_mon+1,t.tm_mday,0,0,0,0).getDay()},"%W":function(t){var e=new Date(t.tm_year,0,1),n=1===e.getDay()?e:ne(e,0===e.getDay()?1:7-e.getDay()+1),r=new Date(t.tm_year+1900,t.tm_mon,t.tm_mday);if(h(n,r)<0){var o=Jt(Zt(r.getFullYear())?te:ee,r.getMonth()-1)-31,i=31-n.getDate()+o+r.getDate();return d(Math.ceil(i/7),2)}return 0===h(n,e)?"01":"00"},"%y":function(t){return(t.tm_year+1900).toString().substring(2)},"%Y":function(t){return t.tm_year+1900},"%z":function(t){var e=t.tm_gmtoff,n=e>=0;return e=(e=Math.abs(e)/60)/60*100+e%60,(n?"+":"-")+String("0000"+e).slice(-4)},"%Z":function(t){return t.tm_zone},"%%":function(){return"%"}};for(var s in g)a.indexOf(s)>=0&&(a=a.replace(new RegExp(s,"g"),g[s](i)));var v=ie(a,!1);return v.length>e?0:(mt(v,t),v.length-1)}(t,e,n,r)},DYNAMICTOP_PTR:et,STACKTOP:J};var ae=i.asm(i.asmGlobalArg,i.asmLibraryArg,Y);i.asm=ae;var ue=i.__GLOBAL__sub_I_iostream_cpp=function(){return i.asm.__GLOBAL__sub_I_iostream_cpp.apply(null,arguments)},se=i.___emscripten_environ_constructor=function(){return i.asm.___emscripten_environ_constructor.apply(null,arguments)},ce=(i.___errno_location=function(){return i.asm.___errno_location.apply(null,arguments)},i._connected_components=function(){return i.asm._connected_components.apply(null,arguments)},i._edge_bundling_call=function(){return i.asm._edge_bundling_call.apply(null,arguments)},i._edge_bundling_get_cycles=function(){return i.asm._edge_bundling_get_cycles.apply(null,arguments)},i._edge_bundling_get_i0=function(){return i.asm._edge_bundling_get_i0.apply(null,arguments)},i._edge_bundling_get_i_step=function(){return i.asm._edge_bundling_get_i_step.apply(null,arguments)},i._edge_bundling_get_s0=function(){return i.asm._edge_bundling_get_s0.apply(null,arguments)},i._edge_bundling_get_s_step=function(){return i.asm._edge_bundling_get_s_step.apply(null,arguments)},i._edge_bundling_new=function(){return i.asm._edge_bundling_new.apply(null,arguments)},i._edge_bundling_set_cycles=function(){return i.asm._edge_bundling_set_cycles.apply(null,arguments)},i._edge_bundling_set_i0=function(){return i.asm._edge_bundling_set_i0.apply(null,arguments)},i._edge_bundling_set_i_step=function(){return i.asm._edge_bundling_set_i_step.apply(null,arguments)},i._edge_bundling_set_s0=function(){return i.asm._edge_bundling_set_s0.apply(null,arguments)},i._edge_bundling_set_s_step=function(){return i.asm._edge_bundling_set_s_step.apply(null,arguments)},i._free=function(){return i.asm._free.apply(null,arguments)}),le=(i._graph_add_edge=function(){return i.asm._graph_add_edge.apply(null,arguments)},i._graph_add_node=function(){return i.asm._graph_add_node.apply(null,arguments)},i._graph_edge_count=function(){return i.asm._graph_edge_count.apply(null,arguments)},i._graph_get_x=function(){return i.asm._graph_get_x.apply(null,arguments)},i._graph_get_y=function(){return i.asm._graph_get_y.apply(null,arguments)},i._graph_new=function(){return i.asm._graph_new.apply(null,arguments)},i._graph_node_count=function(){return i.asm._graph_node_count.apply(null,arguments)},i._graph_set_x=function(){return i.asm._graph_set_x.apply(null,arguments)},i._graph_set_y=function(){return i.asm._graph_set_y.apply(null,arguments)},i._line_points=function(){return i.asm._line_points.apply(null,arguments)},i._line_points_at=function(){return i.asm._line_points_at.apply(null,arguments)},i._line_points_length=function(){return i.asm._line_points_length.apply(null,arguments)},i._lines_at=function(){return i.asm._lines_at.apply(null,arguments)},i._malloc=function(){return i.asm._malloc.apply(null,arguments)}),fe=(i._point_x=function(){return i.asm._point_x.apply(null,arguments)},i._point_y=function(){return i.asm._point_y.apply(null,arguments)},i._rust_alloc=function(){return i.asm._rust_alloc.apply(null,arguments)},i._rust_free=function(){return i.asm._rust_free.apply(null,arguments)},i._simulation_add_center_force=function(){return i.asm._simulation_add_center_force.apply(null,arguments)},i._simulation_add_group_center_force=function(){return i.asm._simulation_add_group_center_force.apply(null,arguments)},i._simulation_add_group_link_force=function(){return i.asm._simulation_add_group_link_force.apply(null,arguments)},i._simulation_add_group_many_body_force=function(){return i.asm._simulation_add_group_many_body_force.apply(null,arguments)},i._simulation_add_link_force=function(){return i.asm._simulation_add_link_force.apply(null,arguments)},i._simulation_add_many_body_force=function(){return i.asm._simulation_add_many_body_force.apply(null,arguments)},i._simulation_get_strength=function(){return i.asm._simulation_get_strength.apply(null,arguments)},i._simulation_new=function(){return i.asm._simulation_new.apply(null,arguments)},i._simulation_set_strength=function(){return i.asm._simulation_set_strength.apply(null,arguments)},i._simulation_start=function(){return i.asm._simulation_start.apply(null,arguments)},i._squarified_treemap=function(){return i.asm._squarified_treemap.apply(null,arguments)},i.stackAlloc=function(){return i.asm.stackAlloc.apply(null,arguments)}),de=i.stackRestore=function(){return i.asm.stackRestore.apply(null,arguments)},he=i.stackSave=function(){return i.asm.stackSave.apply(null,arguments)};i.dynCall_iii=function(){return i.asm.dynCall_iii.apply(null,arguments)},i.dynCall_v=function(){return i.asm.dynCall_v.apply(null,arguments)},i.dynCall_vi=function(){return i.asm.dynCall_vi.apply(null,arguments)};function pe(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function ye(t){function e(){i.calledRun||(i.calledRun=!0,k||(yt||(yt=!0,ct(ft)),ct(dt),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)vt(i.postRun.shift());ct(pt)}()))}t=t||i.arguments,Mt>0||(!function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)gt(i.preRun.shift());ct(lt)}(),Mt>0||i.calledRun||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),e()},1)):e()))}function ge(t){throw i.onAbort&&i.onAbort(t),void 0!==t?(g(t),v(t),t=JSON.stringify(t)):t="",k=!0,1,"abort("+t+"). Build with -s ASSERTIONS=1 for more info."}if(i.asm=ae,i.ccall=P,i.cwrap=function(t,e,n,r){var o=(n=n||[]).every(function(t){return"number"===t});return"string"!==e&&o&&!r?M(t):function(){return P(t,e,n,arguments)}},i.then=function(t){if(i.calledRun)t(i);else{var e=i.onRuntimeInitialized;i.onRuntimeInitialized=function(){e&&e(),t(i)}}return i},pe.prototype=new Error,pe.prototype.constructor=pe,At=function t(){i.calledRun||ye(),i.calledRun||(At=t)},i.run=ye,i.abort=ge,i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return i.noExitRuntime=!0,ye(),i}}();t.exports=i}).call(this,n(52),"/",n(205).Buffer)},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(218);var o=function(t){return t&&t.__esModule?t:{default:t}}(n(99)),i=n(121),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(96)),u=n(198);var s=a.scaleOrdinal(a.schemeCategory10),c=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.state={width:300,height:150},t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"componentDidMount",value:function(){var t=this,e=this.refs.wrapper;this.setState({width:e.clientWidth,height:e.clientHeight}),window.addEventListener("resize",function(){document.webkitIsFullScreen?t.setState({width:window.innerWidth,height:window.innerHeight}):t.setState({width:e.clientWidth,height:e.clientHeight})})}},{key:"render",value:function(){var t=this.state,e=t.width,n=t.height;return o.default.createElement("div",{className:"ui container"},o.default.createElement("h1",null,"Cypher Viewer"),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("form",{className:"ui form",onSubmit:this.handleSubmitQueryForm.bind(this)},o.default.createElement("h4",{className:"ui dividing header"},"Query"),o.default.createElement("div",{className:"field"},o.default.createElement("div",{className:"two fields"},o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"User ID"),o.default.createElement("input",{ref:"userId",defaultValue:"neo4j"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Password"),o.default.createElement("input",{ref:"password",type:"password"})))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Query"),o.default.createElement("textarea",{ref:"query",defaultValue:"MATCH p = (v1)-[r:Correlation]->(v2)\nWHERE abs(r.value) > 0.6\n  AND v1.timeOrder < v2.timeOrder\nRETURN collect(nodes(p)), collect(relationships(p))"})),o.default.createElement("button",{className:"ui button",type:"submit"},"load"))),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("div",{ref:"wrapper",style:{height:"600px"}},o.default.createElement("eg-renderer",{ref:"renderer",style:{border:"solid 1px #ccc",display:"block"},width:e,height:n,"transition-duration":"1000","graph-nodes-property":"nodes","graph-links-property":"relationships","group-id-property":"label","node-id-property":"id","node-label-property":"properties.name","link-source-property":"startNode","link-target-property":"endNode","default-node-width":"10","default-node-height":"10","default-node-stroke-width":"0","default-link-stroke-width":"1","no-auto-centering":!0})),o.default.createElement("div",{className:"ui menu"},o.default.createElement("div",{className:"item"},o.default.createElement("button",{className:"ui button",onClick:this.handleClickCenterButton.bind(this)},"Center")),o.default.createElement("div",{className:"item"},o.default.createElement("button",{className:"ui button",onClick:this.handleClickFullscreenButton.bind(this)},"Fullscreen")))),o.default.createElement("div",{className:"ui vertical segment"},o.default.createElement("form",{className:"ui form",onSubmit:this.handleSubmitOptionsForm.bind(this)},o.default.createElement("h4",{className:"ui dividing header"},"Renderer Options"),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Layout"),o.default.createElement("select",{ref:"group",className:"ui selection dropdown",defaultValue:"circle-pack"},o.default.createElement("option",{value:"treemap"},"Treemap"),o.default.createElement("option",{value:"circle-pack"},"Circle Packing"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Node Color"),o.default.createElement("select",{ref:"nodeColor",className:"ui selection dropdown",defaultValue:"type"},o.default.createElement("option",{value:"type"},"Type"),o.default.createElement("option",{value:"timeGroup"},"Time Group"),o.default.createElement("option",{value:"timeGroupDetail"},"Time Group Detail"),o.default.createElement("option",{value:"unit"},"Unit"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Node Group"),o.default.createElement("select",{ref:"nodeGroup",className:"ui selection dropdown",defaultValue:"timeGroup"},o.default.createElement("option",{value:"$none"},"None"),o.default.createElement("option",{value:"type"},"Type"),o.default.createElement("option",{value:"timeGroup"},"Time Group"),o.default.createElement("option",{value:"timeGroupDetail"},"Time Group Detail"),o.default.createElement("option",{value:"unit"},"Unit"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Edge Bundling Cycles"),o.default.createElement("input",{ref:"cycles",type:"number",min:"0",defaultValue:"3"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Edge Concentration Min Count"),o.default.createElement("input",{ref:"minCount",type:"number",min:"1",defaultValue:"6"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Many Body Force"),o.default.createElement("input",{ref:"manyBodyForce",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Link Force"),o.default.createElement("input",{ref:"linkForce",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Intra Group Strength"),o.default.createElement("input",{ref:"intraGroup",type:"number",min:"0",step:"0.01",defaultValue:"0.5"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Inter Group Strength"),o.default.createElement("input",{ref:"interGroup",type:"number",min:"0",step:"0.01",defaultValue:"0.3"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Group Center Force"),o.default.createElement("input",{ref:"centerForce",type:"number",min:"0",step:"0.01",defaultValue:"0.2"})),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Use Edge Concentration"),o.default.createElement("select",{ref:"useEdgeConcentration",className:"ui selection dropdown",defaultValue:"yes"},o.default.createElement("option",{value:"yes"},"Yes"),o.default.createElement("option",{value:"no"},"No"))),o.default.createElement("div",{className:"field"},o.default.createElement("label",null,"Show Single Edge"),o.default.createElement("select",{ref:"showSingleEdge",className:"ui selection dropdown",defaultValue:"no"},o.default.createElement("option",{value:"yes"},"Yes"),o.default.createElement("option",{value:"no"},"No"))),o.default.createElement("button",{className:"ui button",type:"submit"},"update"))))}},{key:"handleClickCenterButton",value:function(){this.refs.renderer.center()}},{key:"handleClickFullscreenButton",value:function(){this.refs.renderer.webkitRequestFullscreen&&this.refs.renderer.webkitRequestFullscreen()}},{key:"handleSubmitQueryForm",value:function(t){var e=this;t.preventDefault(),function(t,e,n,r){var o={"Content-Type":"application/json"};return e&&n&&(o.Authorization="Basic "+window.btoa(e+":"+n)),window.fetch("https://neo4j.likr-lab.com/db/data/transaction/commit",{method:"POST",headers:o,body:JSON.stringify({statements:[{statement:t,resultDataContents:["graph"]}]})}).then(function(t){return t.json()}).then(function(t){var e=t.results[0].data[0].graph,n=a.scaleLinear().domain([0,1]).range([0,3]),o=a.scaleLinear().domain([-1,0,1]).range(["#00f","#fff","#f00"]),i=!0,u=!1,c=void 0;try{for(var l,f=e.nodes[Symbol.iterator]();!(i=(l=f.next()).done);i=!0){var d=l.value;d.fillColor=s(d.properties[r])}}catch(t){u=!0,c=t}finally{try{!i&&f.return&&f.return()}finally{if(u)throw c}}var h=!0,p=!1,y=void 0;try{for(var g,v=e.relationships[Symbol.iterator]();!(h=(g=v.next()).done);h=!0){var m=g.value;m.type="line",m.strokeWidth=n(Math.abs(m.properties.value)),m.strokeColor=o(m.properties.value)}}catch(t){p=!0,y=t}finally{try{!h&&v.return&&v.return()}finally{if(p)throw y}}return e})}(this.refs.query.value,this.refs.userId.value,this.refs.password.value,this.refs.nodeColor.value).then(function(t){e.data=t,e.layout().then(function(){e.refs.renderer.center()})})}},{key:"handleSubmitOptionsForm",value:function(t){t.preventDefault(),this.layout()}},{key:"layout",value:function(){var t=this,e={type:this.refs.group.value,cycles:+this.refs.cycles.value,s0:.1,i0:90,sStep:.5,iStep:.6,groupProperty:this.refs.nodeGroup.value,manyBodyForce:+this.refs.manyBodyForce.value,linkForce:+this.refs.linkForce.value,centerForce:+this.refs.centerForce.value,intraGroup:+this.refs.intraGroup.value,interGroup:+this.refs.interGroup.value,useEdgeConcentration:"yes"===this.refs.useEdgeConcentration.value,showSingleEdge:"yes"===this.refs.showSingleEdge.value,mu:.5,minCount:+this.refs.minCount.value};return(0,u.layout)(this.data,e).then(function(e){var n=a.scaleLinear().domain([0,1]).range([1,3]),r=a.scaleLinear().domain([-1,0,1]).range(["#00f","#888","#f00"]),o=!0,i=!1,u=void 0;try{for(var c,l=e.nodes[Symbol.iterator]();!(o=(c=l.next()).done);o=!0){var f=c.value;f.fillColor=s(f.properties[t.refs.nodeColor.value])}}catch(t){i=!0,u=t}finally{try{!o&&l.return&&l.return()}finally{if(i)throw u}}var d=!0,h=!1,p=void 0;try{for(var y,g=e.relationships[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;v.type="line",v.strokeWidth=n(Math.abs(v.properties.value)),v.strokeColor=r(v.properties.value)}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}t.refs.renderer.load(e)})}},{key:"update",value:function(){var t=!0,e=!1,n=void 0;try{for(var r,o=this.refs.renderer.data.nodes[Symbol.iterator]();!(t=(r=o.next()).done);t=!0){var i=r.value;i.fillColor=s(i.properties[this.refs.nodeColor.value])}}catch(t){e=!0,n=t}finally{try{!t&&o.return&&o.return()}finally{if(e)throw n}}this.refs.renderer.invalidate()}}]),e}();(0,i.render)(o.default.createElement(c,null),document.getElementById("content"))},function(t,e,n){"use strict";t.exports=n(20)},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";var r=n(103),o=n(21),i=n(61),a=n(104),u=r.twoArgumentPooler,s=r.fourArgumentPooler,c=/\/+/g;function l(t){return(""+t).replace(c,"$&/")}function f(t,e){this.func=t,this.context=e,this.count=0}function d(t,e,n){var r=t.func,o=t.context;r.call(o,e,t.count++)}function h(t,e,n,r){this.result=t,this.keyPrefix=e,this.func=n,this.context=r,this.count=0}function p(t,e,n){var r=t.result,a=t.keyPrefix,u=t.func,s=t.context,c=u.call(s,e,t.count++);Array.isArray(c)?y(c,r,n,i.thatReturnsArgument):null!=c&&(o.isValidElement(c)&&(c=o.cloneAndReplaceKey(c,a+(!c.key||e&&e.key===c.key?"":l(c.key)+"/")+n)),r.push(c))}function y(t,e,n,r,o){var i="";null!=n&&(i=l(n)+"/");var u=h.getPooled(e,i,r,o);a(t,p,u),h.release(u)}function g(t,e,n){return null}f.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},r.addPoolingTo(f,u),h.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},r.addPoolingTo(h,s);var v={forEach:function(t,e,n){if(null==t)return t;var r=f.getPooled(e,n);a(t,d,r),f.release(r)},map:function(t,e,n){if(null==t)return t;var r=[];return y(t,r,null,e,n),r},mapIntoWithKeyPrefixInternal:y,count:function(t,e){return a(t,g,null)},toArray:function(t){var e=[];return y(t,e,null,i.thatReturnsArgument),e}};t.exports=v},function(t,e,n){"use strict";var r=n(26),o=(n(27),function(t){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,t),e}return new this(t)}),i=function(t){t instanceof this||r("25"),t.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(t)},a=o,u={addPoolingTo:function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||a,n.poolSize||(n.poolSize=10),n.release=i,n},oneArgumentPooler:o,twoArgumentPooler:function(t,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,t,e),n}return new this(t,e)},threeArgumentPooler:function(t,e,n){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,t,e,n),r}return new this(t,e,n)},fourArgumentPooler:function(t,e,n,r){if(this.instancePool.length){var o=this.instancePool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}};t.exports=u},function(t,e,n){"use strict";var r=n(26),o=(n(13),n(63)),i=n(105),a=(n(27),n(106)),u=(n(33),"."),s=":";function c(t,e){return t&&"object"==typeof t&&null!=t.key?a.escape(t.key):e.toString(36)}t.exports=function(t,e,n){return null==t?0:function t(e,n,l,f){var d,h=typeof e;if("undefined"!==h&&"boolean"!==h||(e=null),null===e||"string"===h||"number"===h||"object"===h&&e.$$typeof===o)return l(f,e,""===n?u+c(e,0):n),1;var p=0,y=""===n?u:n+s;if(Array.isArray(e))for(var g=0;g<e.length;g++)p+=t(d=e[g],y+c(d,g),l,f);else{var v=i(e);if(v){var m,b=v.call(e);if(v!==e.entries)for(var _=0;!(m=b.next()).done;)p+=t(d=m.value,y+c(d,_++),l,f);else for(;!(m=b.next()).done;){var w=m.value;w&&(p+=t(d=w[1],y+a.escape(w[0])+s+c(d,0),l,f))}}else if("object"===h){var E=String(e);r("31","[object Object]"===E?"object with keys {"+Object.keys(e).join(", ")+"}":E,"")}}return p}(t,"",e,n)}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";t.exports=function(t){var e=t&&(r&&t[r]||t[o]);if("function"==typeof e)return e}},function(t,e,n){"use strict";var r={escape:function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})},unescape:function(t){var e={"=0":"=","=2":":"};return(""+("."===t[0]&&"$"===t[1]?t.substring(2):t.substring(1))).replace(/(=0|=2)/g,function(t){return e[t]})}};t.exports=r},function(t,e,n){"use strict";var r=n(21).createFactory,o={a:r("a"),abbr:r("abbr"),address:r("address"),area:r("area"),article:r("article"),aside:r("aside"),audio:r("audio"),b:r("b"),base:r("base"),bdi:r("bdi"),bdo:r("bdo"),big:r("big"),blockquote:r("blockquote"),body:r("body"),br:r("br"),button:r("button"),canvas:r("canvas"),caption:r("caption"),cite:r("cite"),code:r("code"),col:r("col"),colgroup:r("colgroup"),data:r("data"),datalist:r("datalist"),dd:r("dd"),del:r("del"),details:r("details"),dfn:r("dfn"),dialog:r("dialog"),div:r("div"),dl:r("dl"),dt:r("dt"),em:r("em"),embed:r("embed"),fieldset:r("fieldset"),figcaption:r("figcaption"),figure:r("figure"),footer:r("footer"),form:r("form"),h1:r("h1"),h2:r("h2"),h3:r("h3"),h4:r("h4"),h5:r("h5"),h6:r("h6"),head:r("head"),header:r("header"),hgroup:r("hgroup"),hr:r("hr"),html:r("html"),i:r("i"),iframe:r("iframe"),img:r("img"),input:r("input"),ins:r("ins"),kbd:r("kbd"),keygen:r("keygen"),label:r("label"),legend:r("legend"),li:r("li"),link:r("link"),main:r("main"),map:r("map"),mark:r("mark"),menu:r("menu"),menuitem:r("menuitem"),meta:r("meta"),meter:r("meter"),nav:r("nav"),noscript:r("noscript"),object:r("object"),ol:r("ol"),optgroup:r("optgroup"),option:r("option"),output:r("output"),p:r("p"),param:r("param"),picture:r("picture"),pre:r("pre"),progress:r("progress"),q:r("q"),rp:r("rp"),rt:r("rt"),ruby:r("ruby"),s:r("s"),samp:r("samp"),script:r("script"),section:r("section"),select:r("select"),small:r("small"),source:r("source"),span:r("span"),strong:r("strong"),style:r("style"),sub:r("sub"),summary:r("summary"),sup:r("sup"),table:r("table"),tbody:r("tbody"),td:r("td"),textarea:r("textarea"),tfoot:r("tfoot"),th:r("th"),thead:r("thead"),time:r("time"),title:r("title"),tr:r("tr"),track:r("track"),u:r("u"),ul:r("ul"),var:r("var"),video:r("video"),wbr:r("wbr"),circle:r("circle"),clipPath:r("clipPath"),defs:r("defs"),ellipse:r("ellipse"),g:r("g"),image:r("image"),line:r("line"),linearGradient:r("linearGradient"),mask:r("mask"),path:r("path"),pattern:r("pattern"),polygon:r("polygon"),polyline:r("polyline"),radialGradient:r("radialGradient"),rect:r("rect"),stop:r("stop"),svg:r("svg"),text:r("text"),tspan:r("tspan")};t.exports=o},function(t,e,n){"use strict";var r=n(21).isValidElement,o=n(64);t.exports=o(r)},function(t,e,n){"use strict";var r=n(65),o=n(110),i=n(111),a=n(112),u=n(113);t.exports=function(t,e){var n="function"==typeof Symbol&&Symbol.iterator,s="@@iterator";var c="<<anonymous>>",l={array:p("array"),bool:p("boolean"),func:p("function"),number:p("number"),object:p("object"),string:p("string"),symbol:p("symbol"),any:h(r.thatReturnsNull),arrayOf:function(t){return h(function(e,n,r,o,i){if("function"!=typeof t)return new d("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var u=e[n];if(!Array.isArray(u)){var s=g(u);return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected an array.")}for(var c=0;c<u.length;c++){var l=t(u,c,r,o,i+"["+c+"]",a);if(l instanceof Error)return l}return null})},element:function(){return h(function(e,n,r,o,i){var a=e[n];if(!t(a)){var u=g(a);return new d("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(t){return h(function(e,n,r,o,i){if(!(e[n]instanceof t)){var a=t.name||c,u=function(t){if(!t.constructor||!t.constructor.name)return c;return t.constructor.name}(e[n]);return new d("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null})},node:function(){return h(function(t,e,n,r,o){if(!y(t[e]))return new d("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(t){return h(function(e,n,r,o,i){if("function"!=typeof t)return new d("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var u=e[n],s=g(u);if("object"!==s)return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected an object.");for(var c in u)if(u.hasOwnProperty(c)){var l=t(u,c,r,o,i+"."+c,a);if(l instanceof Error)return l}return null})},oneOf:function(t){if(!Array.isArray(t))return r.thatReturnsNull;return h(function(e,n,r,o,i){for(var a=e[n],u=0;u<t.length;u++)if(f(a,t[u]))return null;var s=JSON.stringify(t);return new d("Invalid "+o+" `"+i+"` of value `"+a+"` supplied to `"+r+"`, expected one of "+s+".")})},oneOfType:function(t){if(!Array.isArray(t))return r.thatReturnsNull;for(var e=0;e<t.length;e++){var n=t[e];if("function"!=typeof n)return i(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",m(n),e),r.thatReturnsNull}return h(function(e,n,r,o,i){for(var u=0;u<t.length;u++){var s=t[u];if(null==s(e,n,r,o,i,a))return null}return new d("Invalid "+o+" `"+i+"` supplied to `"+r+"`.")})},shape:function(t){return h(function(e,n,r,o,i){var u=e[n],s=g(u);if("object"!==s)return new d("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");for(var c in t){var l=t[c];if(l){var f=l(u,c,r,o,i+"."+c,a);if(f)return f}}return null})}};function f(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function d(t){this.message=t,this.stack=""}function h(t){function n(n,r,i,u,s,l,f){(u=u||c,l=l||i,f!==a)&&(e&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"));return null==r[i]?n?null===r[i]?new d("The "+s+" `"+l+"` is marked as required in `"+u+"`, but its value is `null`."):new d("The "+s+" `"+l+"` is marked as required in `"+u+"`, but its value is `undefined`."):null:t(r,i,u,s,l)}var r=n.bind(null,!1);return r.isRequired=n.bind(null,!0),r}function p(t){return h(function(e,n,r,o,i,a){var u=e[n];return g(u)!==t?new d("Invalid "+o+" `"+i+"` of type `"+v(u)+"` supplied to `"+r+"`, expected `"+t+"`."):null})}function y(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(y);if(null===e||t(e))return!0;var r=function(t){var e=t&&(n&&t[n]||t[s]);if("function"==typeof e)return e}(e);if(!r)return!1;var o,i=r.call(e);if(r!==e.entries){for(;!(o=i.next()).done;)if(!y(o.value))return!1}else for(;!(o=i.next()).done;){var a=o.value;if(a&&!y(a[1]))return!1}return!0;default:return!1}}function g(t){var e=typeof t;return Array.isArray(t)?"array":t instanceof RegExp?"object":function(t,e){return"symbol"===t||"Symbol"===e["@@toStringTag"]||"function"==typeof Symbol&&e instanceof Symbol}(e,t)?"symbol":e}function v(t){if(void 0===t||null===t)return""+t;var e=g(t);if("object"===e){if(t instanceof Date)return"date";if(t instanceof RegExp)return"regexp"}return e}function m(t){var e=v(t);switch(e){case"array":case"object":return"an "+e;case"boolean":case"date":case"regexp":return"a "+e;default:return e}}return d.prototype=Error.prototype,l.checkPropTypes=u,l.PropTypes=l,l}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(65);t.exports=r},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){}},function(t,e,n){"use strict";t.exports="15.6.1"},function(t,e,n){"use strict";var r=n(59).Component,o=n(21).isValidElement,i=n(60),a=n(116);t.exports=a(r,o,i)},function(t,e,n){"use strict";var r=n(117),o=n(118),i=n(119),a="mixins";t.exports=function(t,e,n){var u=[],s={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},c={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)f(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=r({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=r({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=h(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=r({},t.propTypes,e)},statics:function(t,e){!function(t,e){if(e)for(var n in e){var r=e[n];if(e.hasOwnProperty(n)){var o=n in c;i(!o,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var a=n in t;i(!a,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),t[n]=r}}}(t,e)},autobind:function(){}};function l(t,e){var n=s.hasOwnProperty(e)?s[e]:null;m.hasOwnProperty(e)&&i("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",e),t&&i("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",e)}function f(t,n){if(n){i("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),i(!e(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var r=t.prototype,o=r.__reactAutoBindPairs;for(var u in n.hasOwnProperty(a)&&c.mixins(t,n.mixins),n)if(n.hasOwnProperty(u)&&u!==a){var f=n[u],d=r.hasOwnProperty(u);if(l(d,u),c.hasOwnProperty(u))c[u](t,f);else{var y=s.hasOwnProperty(u);if("function"!=typeof f||y||d||!1===n.autobind)if(d){var g=s[u];i(y&&("DEFINE_MANY_MERGED"===g||"DEFINE_MANY"===g),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",g,u),"DEFINE_MANY_MERGED"===g?r[u]=h(r[u],f):"DEFINE_MANY"===g&&(r[u]=p(r[u],f))}else r[u]=f;else o.push(u,f),r[u]=f}}}}function d(t,e){for(var n in i(t&&e&&"object"==typeof t&&"object"==typeof e,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),e)e.hasOwnProperty(n)&&(i(void 0===t[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),t[n]=e[n]);return t}function h(t,e){return function(){var n=t.apply(this,arguments),r=e.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return d(o,n),d(o,r),o}}function p(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function y(t,e){return e.bind(t)}var g={componentDidMount:function(){this.__isMounted=!0}},v={componentWillUnmount:function(){this.__isMounted=!1}},m={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t,e)},isMounted:function(){return!!this.__isMounted}},b=function(){};return r(b.prototype,t.prototype,m),function(t){var e=function(t){return t}(function(t,r,a){this.__reactAutoBindPairs.length&&function(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];t[r]=y(t,o)}}(this),this.props=t,this.context=r,this.refs=o,this.updater=a||n,this.state=null;var u=this.getInitialState?this.getInitialState():null;i("object"==typeof u&&!Array.isArray(u),"%s.getInitialState(): must return an object or null",e.displayName||"ReactCompositeComponent"),this.state=u});for(var r in e.prototype=new b,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],u.forEach(f.bind(null,e)),f(e,g),f(e,t),f(e,v),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),i(e.prototype.render,"createClass(...): Class specification must implement a `render` method."),s)e.prototype[r]||(e.prototype[r]=null);return e}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,s){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(e.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){"use strict";var r=n(26),o=n(21);n(27);t.exports=function(t){return o.isValidElement(t)||r("143"),t}},function(t,e,n){"use strict";t.exports=n(122)},function(t,e,n){"use strict";var r=n(6),o=n(123),i=n(90),a=n(23),u=n(12),s=n(195),c=n(196),l=n(91),f=n(197);n(5);o.inject();var d={findDOMNode:c,render:i.render,unmountComponentAtNode:i.unmountComponentAtNode,version:s,unstable_batchedUpdates:u.batchedUpdates,unstable_renderSubtreeIntoContainer:f};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:r.getClosestInstanceFromNode,getNodeFromInstance:function(t){return t._renderedComponent&&(t=l(t)),t?r.getNodeFromInstance(t):null}},Mount:i,Reconciler:a}),t.exports=d},function(t,e,n){"use strict";var r=n(124),o=n(125),i=n(129),a=n(132),u=n(133),s=n(134),c=n(135),l=n(141),f=n(6),d=n(166),h=n(167),p=n(168),y=n(169),g=n(170),v=n(172),m=n(173),b=n(179),_=n(180),w=n(181),E=!1;t.exports={inject:function(){E||(E=!0,v.EventEmitter.injectReactEventListener(g),v.EventPluginHub.injectEventPluginOrder(a),v.EventPluginUtils.injectComponentTree(f),v.EventPluginUtils.injectTreeTraversal(h),v.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:w,EnterLeaveEventPlugin:u,ChangeEventPlugin:i,SelectEventPlugin:_,BeforeInputEventPlugin:o}),v.HostComponent.injectGenericComponentClass(l),v.HostComponent.injectTextComponentClass(p),v.DOMProperty.injectDOMPropertyConfig(r),v.DOMProperty.injectDOMPropertyConfig(s),v.DOMProperty.injectDOMPropertyConfig(b),v.EmptyComponent.injectEmptyComponentFactory(function(t){return new d(t)}),v.Updates.injectReconcileTransaction(m),v.Updates.injectBatchingStrategy(y),v.Component.injectEnvironment(c))}}},function(t,e,n){"use strict";t.exports={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}}},function(t,e,n){"use strict";var r=n(28),o=n(8),i=n(126),a=n(127),u=n(128),s=[9,13,27,32],c=229,l=o.canUseDOM&&"CompositionEvent"in window,f=null;o.canUseDOM&&"documentMode"in document&&(f=document.documentMode);var d=o.canUseDOM&&"TextEvent"in window&&!f&&!function(){var t=window.opera;return"object"==typeof t&&"function"==typeof t.version&&parseInt(t.version(),10)<=12}(),h=o.canUseDOM&&(!l||f&&f>8&&f<=11);var p=32,y=String.fromCharCode(p),g={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},v=!1;function m(t,e){switch(t){case"topKeyUp":return-1!==s.indexOf(e.keyCode);case"topKeyDown":return e.keyCode!==c;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function b(t){var e=t.detail;return"object"==typeof e&&"data"in e?e.data:null}var _=null;function w(t,e,n,o){var u,s;if(l?u=function(t){switch(t){case"topCompositionStart":return g.compositionStart;case"topCompositionEnd":return g.compositionEnd;case"topCompositionUpdate":return g.compositionUpdate}}(t):_?m(t,n)&&(u=g.compositionEnd):function(t,e){return"topKeyDown"===t&&e.keyCode===c}(t,n)&&(u=g.compositionStart),!u)return null;h&&(_||u!==g.compositionStart?u===g.compositionEnd&&_&&(s=_.getData()):_=i.getPooled(o));var f=a.getPooled(u,e,n,o);if(s)f.data=s;else{var d=b(n);null!==d&&(f.data=d)}return r.accumulateTwoPhaseDispatches(f),f}function E(t,e,n,o){var a;if(!(a=d?function(t,e){switch(t){case"topCompositionEnd":return b(e);case"topKeyPress":return e.which!==p?null:(v=!0,y);case"topTextInput":var n=e.data;return n===y&&v?null:n;default:return null}}(t,n):function(t,e){if(_){if("topCompositionEnd"===t||!l&&m(t,e)){var n=_.getData();return i.release(_),_=null,n}return null}switch(t){case"topPaste":return null;case"topKeyPress":return e.which&&!function(t){return(t.ctrlKey||t.altKey||t.metaKey)&&!(t.ctrlKey&&t.altKey)}(e)?String.fromCharCode(e.which):null;case"topCompositionEnd":return h?null:e.data;default:return null}}(t,n)))return null;var s=u.getPooled(g.beforeInput,e,n,o);return s.data=a,r.accumulateTwoPhaseDispatches(s),s}var x={eventTypes:g,extractEvents:function(t,e,n,r){return[w(t,e,n,r),E(t,e,n,r)]}};t.exports=x},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(69);function a(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}r(a.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[i()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,n=this._startText,r=n.length,o=this.getText(),i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);var u=e>1?1-e:void 0;return this._fallbackText=o.slice(t,u),this._fallbackText}}),o.addPoolingTo(a),t.exports=a},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{data:null}),t.exports=o},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{data:null}),t.exports=o},function(t,e,n){"use strict";var r=n(29),o=n(28),i=n(8),a=n(6),u=n(12),s=n(15),c=n(72),l=n(44),f=n(45),d=n(73),h={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}};function p(t,e,n){var r=s.getPooled(h.change,t,e,n);return r.type="change",o.accumulateTwoPhaseDispatches(r),r}var y=null,g=null;var v=!1;function m(t){var e=p(g,t,l(t));u.batchedUpdates(b,e)}function b(t){r.enqueueEvents(t),r.processEventQueue(!1)}function _(){y&&(y.detachEvent("onchange",m),y=null,g=null)}function w(t,e){var n=c.updateValueIfChanged(t),r=!0===e.simulated&&N._allowSimulatedPassThrough;if(n||r)return t}function E(t,e){if("topChange"===t)return e}function x(t,e,n){"topFocus"===t?(_(),function(t,e){g=e,(y=t).attachEvent("onchange",m)}(e,n)):"topBlur"===t&&_()}i.canUseDOM&&(v=f("change")&&(!document.documentMode||document.documentMode>8));var k=!1;function S(){y&&(y.detachEvent("onpropertychange",M),y=null,g=null)}function M(t){"value"===t.propertyName&&w(g,t)&&m(t)}function C(t,e,n){"topFocus"===t?(S(),function(t,e){g=e,(y=t).attachEvent("onpropertychange",M)}(e,n)):"topBlur"===t&&S()}function A(t,e,n){if("topSelectionChange"===t||"topKeyUp"===t||"topKeyDown"===t)return w(g,n)}function P(t,e,n){if("topClick"===t)return w(e,n)}function T(t,e,n){if("topInput"===t||"topChange"===t)return w(e,n)}i.canUseDOM&&(k=f("input")&&(!("documentMode"in document)||document.documentMode>9));var N={eventTypes:h,_allowSimulatedPassThrough:!0,_isInputEventSupported:k,extractEvents:function(t,e,n,r){var o,i,u=e?a.getNodeFromInstance(e):window;if(!function(t){var e=t.nodeName&&t.nodeName.toLowerCase();return"select"===e||"input"===e&&"file"===t.type}(u)?d(u)?k?o=T:(o=A,i=C):function(t){var e=t.nodeName;return e&&"input"===e.toLowerCase()&&("checkbox"===t.type||"radio"===t.type)}(u)&&(o=P):v?o=E:i=x,o){var s=o(t,e,n);if(s)return p(s,n,r)}i&&i(t,u,e),"topBlur"===t&&function(t,e){if(null!=t){var n=t._wrapperState||e._wrapperState;if(n&&n.controlled&&"number"===e.type){var r=""+e.value;e.getAttribute("value")!==r&&e.setAttribute("value",r)}}}(e,u)}};t.exports=N},function(t,e,n){"use strict";var r=n(131),o={};o.attachRefs=function(t,e){if(null!==e&&"object"==typeof e){var n=e.ref;null!=n&&function(t,e,n){"function"==typeof t?t(e.getPublicInstance()):r.addComponentAsRefTo(e,t,n)}(n,t,e._owner)}},o.shouldUpdateRefs=function(t,e){var n=null,r=null;null!==t&&"object"==typeof t&&(n=t.ref,r=t._owner);var o=null,i=null;return null!==e&&"object"==typeof e&&(o=e.ref,i=e._owner),n!==o||"string"==typeof o&&i!==r},o.detachRefs=function(t,e){if(null!==e&&"object"==typeof e){var n=e.ref;null!=n&&function(t,e,n){"function"==typeof t?t(null):r.removeComponentAsRefFrom(e,t,n)}(n,t,e._owner)}},t.exports=o},function(t,e,n){"use strict";var r=n(4);n(2);function o(t){return!(!t||"function"!=typeof t.attachRef||"function"!=typeof t.detachRef)}var i={addComponentAsRefTo:function(t,e,n){o(n)||r("119"),n.attachRef(e,t)},removeComponentAsRefFrom:function(t,e,n){o(n)||r("120");var i=n.getPublicInstance();i&&i.refs[e]===t.getPublicInstance()&&n.detachRef(e)}};t.exports=i},function(t,e,n){"use strict";t.exports=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"]},function(t,e,n){"use strict";var r=n(28),o=n(6),i=n(35),a={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},u={eventTypes:a,extractEvents:function(t,e,n,u){if("topMouseOver"===t&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==t&&"topMouseOver"!==t)return null;var s,c,l;if(u.window===u)s=u;else{var f=u.ownerDocument;s=f?f.defaultView||f.parentWindow:window}if("topMouseOut"===t){c=e;var d=n.relatedTarget||n.toElement;l=d?o.getClosestInstanceFromNode(d):null}else c=null,l=e;if(c===l)return null;var h=null==c?s:o.getNodeFromInstance(c),p=null==l?s:o.getNodeFromInstance(l),y=i.getPooled(a.mouseLeave,c,n,u);y.type="mouseleave",y.target=h,y.relatedTarget=p;var g=i.getPooled(a.mouseEnter,l,n,u);return g.type="mouseenter",g.target=p,g.relatedTarget=h,r.accumulateEnterLeaveDispatches(y,g,c,l),[y,g]}};t.exports=u},function(t,e,n){"use strict";var r=n(22),o=r.injection.MUST_USE_PROPERTY,i=r.injection.HAS_BOOLEAN_VALUE,a=r.injection.HAS_NUMERIC_VALUE,u=r.injection.HAS_POSITIVE_NUMERIC_VALUE,s=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,c={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+r.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:i,allowTransparency:0,alt:0,as:0,async:i,autoComplete:0,autoPlay:i,capture:i,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:o|i,cite:0,classID:0,className:0,cols:u,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:i,coords:0,crossOrigin:0,data:0,dateTime:0,default:i,defer:i,dir:0,disabled:i,download:s,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:i,formTarget:0,frameBorder:0,headers:0,height:0,hidden:i,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:i,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:o|i,muted:o|i,name:0,nonce:0,noValidate:i,open:i,optimum:0,pattern:0,placeholder:0,playsInline:i,poster:0,preload:0,profile:0,radioGroup:0,readOnly:i,referrerPolicy:0,rel:0,required:i,reversed:i,role:0,rows:u,rowSpan:a,sandbox:0,scope:0,scoped:i,scrolling:0,seamless:i,selected:o|i,shape:0,size:u,sizes:0,span:u,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:a,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:i,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{},DOMMutationMethods:{value:function(t,e){if(null==e)return t.removeAttribute("value");"number"!==t.type||!1===t.hasAttribute("value")?t.setAttribute("value",""+e):t.validity&&!t.validity.badInput&&t.ownerDocument.activeElement!==t&&t.setAttribute("value",""+e)}}};t.exports=c},function(t,e,n){"use strict";var r=n(47),o={processChildrenUpdates:n(140).dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup};t.exports=o},function(t,e,n){"use strict";var r=n(4),o=n(24),i=n(8),a=n(137),u=n(14),s=(n(2),{dangerouslyReplaceNodeWithMarkup:function(t,e){if(i.canUseDOM||r("56"),e||r("57"),"HTML"===t.nodeName&&r("58"),"string"==typeof e){var n=a(e,u)[0];t.parentNode.replaceChild(n,t)}else o.replaceChildWithTree(t,e)}});t.exports=s},function(t,e,n){"use strict";var r=n(8),o=n(138),i=n(139),a=n(2),u=r.canUseDOM?document.createElement("div"):null,s=/^\s*<(\w+)/;t.exports=function(t,e){var n=u;u||a(!1);var r=function(t){var e=t.match(s);return e&&e[1].toLowerCase()}(t),c=r&&i(r);if(c){n.innerHTML=c[1]+t+c[2];for(var l=c[0];l--;)n=n.lastChild}else n.innerHTML=t;var f=n.getElementsByTagName("script");f.length&&(e||a(!1),o(f).forEach(e));for(var d=Array.from(n.childNodes);n.lastChild;)n.removeChild(n.lastChild);return d}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t){return function(t){return!!t&&("object"==typeof t||"function"==typeof t)&&"length"in t&&!("setInterval"in t)&&"number"!=typeof t.nodeType&&(Array.isArray(t)||"callee"in t||"item"in t)}(t)?Array.isArray(t)?t.slice():function(t){var e=t.length;if((Array.isArray(t)||"object"!=typeof t&&"function"!=typeof t)&&r(!1),"number"!=typeof e&&r(!1),0===e||e-1 in t||r(!1),"function"==typeof t.callee&&r(!1),t.hasOwnProperty)try{return Array.prototype.slice.call(t)}catch(t){}for(var n=Array(e),o=0;o<e;o++)n[o]=t[o];return n}(t):[t]}},function(t,e,n){"use strict";var r=n(8),o=n(2),i=r.canUseDOM?document.createElement("div"):null,a={},u=[1,'<select multiple="true">',"</select>"],s=[1,"<table>","</table>"],c=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],f={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:s,colgroup:s,tbody:s,tfoot:s,thead:s,td:c,th:c};["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"].forEach(function(t){f[t]=l,a[t]=!0}),t.exports=function(t){return i||o(!1),f.hasOwnProperty(t)||(t="*"),a.hasOwnProperty(t)||(i.innerHTML="*"===t?"<link />":"<"+t+"></"+t+">",a[t]=!i.firstChild),a[t]?f[t]:null}},function(t,e,n){"use strict";var r=n(47),o=n(6),i={dangerouslyProcessChildrenUpdates:function(t,e){var n=o.getNodeFromInstance(t);r.processUpdates(n,e)}};t.exports=i},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(142),a=n(143),u=n(24),s=n(48),c=n(22),l=n(78),f=n(29),d=n(41),h=n(38),p=n(66),y=n(6),g=n(153),v=n(155),m=n(79),b=n(156),_=(n(10),n(157)),w=n(164),E=(n(14),n(37)),x=(n(2),n(45),n(53),n(72)),k=(n(57),n(5),p),S=f.deleteListener,M=y.getNodeFromInstance,C=h.listenTo,A=d.registrationNameModules,P={string:!0,number:!0},T="__html",N={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},O=11;function D(t,e){e&&(q[t._tag]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&r("137",t._tag,t._currentElement._owner?" Check the render method of "+t._currentElement._owner.getName()+".":""),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&r("60"),"object"==typeof e.dangerouslySetInnerHTML&&T in e.dangerouslySetInnerHTML||r("61")),null!=e.style&&"object"!=typeof e.style&&r("62",function(t){if(t){var e=t._currentElement._owner||null;if(e){var n=e.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}(t)))}function R(t,e,n,r){if(!(r instanceof w)){0;var o=t._hostContainerInfo,i=o._node&&o._node.nodeType===O?o._node:o._ownerDocument;C(e,i),r.getReactMountReady().enqueue(I,{inst:t,registrationName:e,listener:n})}}function I(){f.putListener(this.inst,this.registrationName,this.listener)}function L(){g.postMountWrapper(this)}function F(){b.postMountWrapper(this)}function B(){v.postMountWrapper(this)}var U={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function j(){x.track(this)}function z(){this._rootNodeID||r("63");var t=M(this);switch(t||r("64"),this._tag){case"iframe":case"object":this._wrapperState.listeners=[h.trapBubbledEvent("topLoad","load",t)];break;case"video":case"audio":for(var e in this._wrapperState.listeners=[],U)U.hasOwnProperty(e)&&this._wrapperState.listeners.push(h.trapBubbledEvent(e,U[e],t));break;case"source":this._wrapperState.listeners=[h.trapBubbledEvent("topError","error",t)];break;case"img":this._wrapperState.listeners=[h.trapBubbledEvent("topError","error",t),h.trapBubbledEvent("topLoad","load",t)];break;case"form":this._wrapperState.listeners=[h.trapBubbledEvent("topReset","reset",t),h.trapBubbledEvent("topSubmit","submit",t)];break;case"input":case"select":case"textarea":this._wrapperState.listeners=[h.trapBubbledEvent("topInvalid","invalid",t)]}}function V(){m.postUpdateWrapper(this)}var W={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Y={listing:!0,pre:!0,textarea:!0},q=o({menuitem:!0},W),H=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,G={},X={}.hasOwnProperty;function K(t,e){return t.indexOf("-")>=0||null!=e.is}var $=1;function Q(t){var e=t.type;!function(t){X.call(G,t)||(H.test(t)||r("65",t),G[t]=!0)}(e),this._currentElement=t,this._tag=e.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=0,this._domID=0,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0}Q.displayName="ReactDOMComponent",Q.Mixin={mountComponent:function(t,e,n,r){this._rootNodeID=$++,this._domID=n._idCounter++,this._hostParent=e,this._hostContainerInfo=n;var o,a,c,f=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(z,this);break;case"input":g.mountWrapper(this,f,e),f=g.getHostProps(this,f),t.getReactMountReady().enqueue(j,this),t.getReactMountReady().enqueue(z,this);break;case"option":v.mountWrapper(this,f,e),f=v.getHostProps(this,f);break;case"select":m.mountWrapper(this,f,e),f=m.getHostProps(this,f),t.getReactMountReady().enqueue(z,this);break;case"textarea":b.mountWrapper(this,f,e),f=b.getHostProps(this,f),t.getReactMountReady().enqueue(j,this),t.getReactMountReady().enqueue(z,this)}if(D(this,f),null!=e?(o=e._namespaceURI,a=e._tag):n._tag&&(o=n._namespaceURI,a=n._tag),(null==o||o===s.svg&&"foreignobject"===a)&&(o=s.html),o===s.html&&("svg"===this._tag?o=s.svg:"math"===this._tag&&(o=s.mathml)),this._namespaceURI=o,t.useCreateElement){var d,h=n._ownerDocument;if(o===s.html)if("script"===this._tag){var p=h.createElement("div"),_=this._currentElement.type;p.innerHTML="<"+_+"></"+_+">",d=p.removeChild(p.firstChild)}else d=f.is?h.createElement(this._currentElement.type,f.is):h.createElement(this._currentElement.type);else d=h.createElementNS(o,this._currentElement.type);y.precacheNode(this,d),this._flags|=k.hasCachedChildNodes,this._hostParent||l.setAttributeForRoot(d),this._updateDOMProperties(null,f,t);var w=u(d);this._createInitialChildren(t,f,r,w),c=w}else{var E=this._createOpenTagMarkupAndPutListeners(t,f),x=this._createContentMarkup(t,f,r);c=!x&&W[this._tag]?E+"/>":E+">"+x+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(L,this),f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"textarea":t.getReactMountReady().enqueue(F,this),f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"select":case"button":f.autoFocus&&t.getReactMountReady().enqueue(i.focusDOMComponent,this);break;case"option":t.getReactMountReady().enqueue(B,this)}return c},_createOpenTagMarkupAndPutListeners:function(t,e){var n="<"+this._currentElement.type;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if(null!=i)if(A.hasOwnProperty(r))i&&R(this,r,i,t);else{"style"===r&&(i&&(i=this._previousStyleCopy=o({},e.style)),i=a.createMarkupForStyles(i,this));var u=null;null!=this._tag&&K(this._tag,e)?N.hasOwnProperty(r)||(u=l.createMarkupForCustomAttribute(r,i)):u=l.createMarkupForProperty(r,i),u&&(n+=" "+u)}}return t.renderToStaticMarkup?n:(this._hostParent||(n+=" "+l.createMarkupForRoot()),n+=" "+l.createMarkupForID(this._domID))},_createContentMarkup:function(t,e,n){var r="",o=e.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&(r=o.__html);else{var i=P[typeof e.children]?e.children:null,a=null!=i?null:e.children;if(null!=i)r=E(i);else if(null!=a){r=this.mountChildren(a,t,n).join("")}}return Y[this._tag]&&"\n"===r.charAt(0)?"\n"+r:r},_createInitialChildren:function(t,e,n,r){var o=e.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&u.queueHTML(r,o.__html);else{var i=P[typeof e.children]?e.children:null,a=null!=i?null:e.children;if(null!=i)""!==i&&u.queueText(r,i);else if(null!=a)for(var s=this.mountChildren(a,t,n),c=0;c<s.length;c++)u.queueChild(r,s[c])}},receiveComponent:function(t,e,n){var r=this._currentElement;this._currentElement=t,this.updateComponent(e,r,t,n)},updateComponent:function(t,e,n,r){var o=e.props,i=this._currentElement.props;switch(this._tag){case"input":o=g.getHostProps(this,o),i=g.getHostProps(this,i);break;case"option":o=v.getHostProps(this,o),i=v.getHostProps(this,i);break;case"select":o=m.getHostProps(this,o),i=m.getHostProps(this,i);break;case"textarea":o=b.getHostProps(this,o),i=b.getHostProps(this,i)}switch(D(this,i),this._updateDOMProperties(o,i,t),this._updateDOMChildren(o,i,t,r),this._tag){case"input":g.updateWrapper(this);break;case"textarea":b.updateWrapper(this);break;case"select":t.getReactMountReady().enqueue(V,this)}},_updateDOMProperties:function(t,e,n){var r,i,u;for(r in t)if(!e.hasOwnProperty(r)&&t.hasOwnProperty(r)&&null!=t[r])if("style"===r){var s=this._previousStyleCopy;for(i in s)s.hasOwnProperty(i)&&((u=u||{})[i]="");this._previousStyleCopy=null}else A.hasOwnProperty(r)?t[r]&&S(this,r):K(this._tag,t)?N.hasOwnProperty(r)||l.deleteValueForAttribute(M(this),r):(c.properties[r]||c.isCustomAttribute(r))&&l.deleteValueForProperty(M(this),r);for(r in e){var f=e[r],d="style"===r?this._previousStyleCopy:null!=t?t[r]:void 0;if(e.hasOwnProperty(r)&&f!==d&&(null!=f||null!=d))if("style"===r)if(f?f=this._previousStyleCopy=o({},f):this._previousStyleCopy=null,d){for(i in d)!d.hasOwnProperty(i)||f&&f.hasOwnProperty(i)||((u=u||{})[i]="");for(i in f)f.hasOwnProperty(i)&&d[i]!==f[i]&&((u=u||{})[i]=f[i])}else u=f;else if(A.hasOwnProperty(r))f?R(this,r,f,n):d&&S(this,r);else if(K(this._tag,e))N.hasOwnProperty(r)||l.setValueForAttribute(M(this),r,f);else if(c.properties[r]||c.isCustomAttribute(r)){var h=M(this);null!=f?l.setValueForProperty(h,r,f):l.deleteValueForProperty(h,r)}}u&&a.setValueForStyles(M(this),u,this)},_updateDOMChildren:function(t,e,n,r){var o=P[typeof t.children]?t.children:null,i=P[typeof e.children]?e.children:null,a=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,u=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=null!=o?null:t.children,c=null!=i?null:e.children,l=null!=o||null!=a,f=null!=i||null!=u;null!=s&&null==c?this.updateChildren(null,n,r):l&&!f&&this.updateTextContent(""),null!=i?o!==i&&this.updateTextContent(""+i):null!=u?a!==u&&this.updateMarkup(""+u):null!=c&&this.updateChildren(c,n,r)},getHostNode:function(){return M(this)},unmountComponent:function(t){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var e=this._wrapperState.listeners;if(e)for(var n=0;n<e.length;n++)e[n].remove();break;case"input":case"textarea":x.stopTracking(this);break;case"html":case"head":case"body":r("66",this._tag)}this.unmountChildren(t),y.uncacheNode(this),f.deleteAllListeners(this),this._rootNodeID=0,this._domID=0,this._wrapperState=null},getPublicInstance:function(){return M(this)}},o(Q.prototype,Q.Mixin,_.Mixin),t.exports=Q},function(t,e,n){"use strict";var r=n(6),o=n(76),i={focusDOMComponent:function(){o(r.getNodeFromInstance(this))}};t.exports=i},function(t,e,n){"use strict";var r=n(77),o=n(8),i=(n(10),n(144),n(146)),a=n(147),u=n(149),s=(n(5),u(function(t){return a(t)})),c=!1,l="cssFloat";if(o.canUseDOM){var f=document.createElement("div").style;try{f.font=""}catch(t){c=!0}void 0===document.documentElement.style.cssFloat&&(l="styleFloat")}var d={createMarkupForStyles:function(t,e){var n="";for(var r in t)if(t.hasOwnProperty(r)){var o=0===r.indexOf("--"),a=t[r];0,null!=a&&(n+=s(r)+":",n+=i(r,a,e,o)+";")}return n||null},setValueForStyles:function(t,e,n){var o=t.style;for(var a in e)if(e.hasOwnProperty(a)){var u=0===a.indexOf("--");0;var s=i(a,e[a],n,u);if("float"!==a&&"cssFloat"!==a||(a=l),u)o.setProperty(a,s);else if(s)o[a]=s;else{var f=c&&r.shorthandPropertyExpansions[a];if(f)for(var d in f)o[d]="";else o[a]=""}}}};t.exports=d},function(t,e,n){"use strict";var r=n(145),o=/^-ms-/;t.exports=function(t){return r(t.replace(o,"ms-"))}},function(t,e,n){"use strict";var r=/-(.)/g;t.exports=function(t){return t.replace(r,function(t,e){return e.toUpperCase()})}},function(t,e,n){"use strict";var r=n(77),o=(n(5),r.isUnitlessNumber);t.exports=function(t,e,n,r){if(null==e||"boolean"==typeof e||""===e)return"";var i=isNaN(e);return r||i||0===e||o.hasOwnProperty(t)&&o[t]?""+e:("string"==typeof e&&(e=e.trim()),e+"px")}},function(t,e,n){"use strict";var r=n(148),o=/^ms-/;t.exports=function(t){return r(t).replace(o,"-ms-")}},function(t,e,n){"use strict";var r=/([A-Z])/g;t.exports=function(t){return t.replace(r,"-$1").toLowerCase()}},function(t,e,n){"use strict";t.exports=function(t){var e={};return function(n){return e.hasOwnProperty(n)||(e[n]=t.call(this,n)),e[n]}}},function(t,e,n){"use strict";var r=n(37);t.exports=function(t){return'"'+r(t)+'"'}},function(t,e,n){"use strict";var r=n(29);var o={handleTopLevel:function(t,e,n,o){!function(t){r.enqueueEvents(t),r.processEventQueue(!1)}(r.extractEvents(t,e,n,o))}};t.exports=o},function(t,e,n){"use strict";var r=n(8);function o(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}var i={animationend:o("Animation","AnimationEnd"),animationiteration:o("Animation","AnimationIteration"),animationstart:o("Animation","AnimationStart"),transitionend:o("Transition","TransitionEnd")},a={},u={};r.canUseDOM&&(u=document.createElement("div").style,"AnimationEvent"in window||(delete i.animationend.animation,delete i.animationiteration.animation,delete i.animationstart.animation),"TransitionEvent"in window||delete i.transitionend.transition),t.exports=function(t){if(a[t])return a[t];if(!i[t])return t;var e=i[t];for(var n in e)if(e.hasOwnProperty(n)&&n in u)return a[t]=e[n];return""}},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(78),a=n(50),u=n(6),s=n(12);n(2),n(5);function c(){this._rootNodeID&&l.updateWrapper(this)}var l={getHostProps:function(t,e){var n=a.getValue(e),r=a.getChecked(e);return o({type:void 0,step:void 0,min:void 0,max:void 0},e,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:t._wrapperState.initialValue,checked:null!=r?r:t._wrapperState.initialChecked,onChange:t._wrapperState.onChange})},mountWrapper:function(t,e){var n=e.defaultValue;t._wrapperState={initialChecked:null!=e.checked?e.checked:e.defaultChecked,initialValue:null!=e.value?e.value:n,listeners:null,onChange:function(t){var e=this._currentElement.props,n=a.executeOnChange(e,t);s.asap(c,this);var o=e.name;if("radio"===e.type&&null!=o){for(var i=u.getNodeFromInstance(this),l=i;l.parentNode;)l=l.parentNode;for(var f=l.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),d=0;d<f.length;d++){var h=f[d];if(h!==i&&h.form===i.form){var p=u.getInstanceFromNode(h);p||r("90"),s.asap(c,p)}}}return n}.bind(t),controlled:function(t){return"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}(e)}},updateWrapper:function(t){var e=t._currentElement.props,n=e.checked;null!=n&&i.setValueForProperty(u.getNodeFromInstance(t),"checked",n||!1);var r=u.getNodeFromInstance(t),o=a.getValue(e);if(null!=o)if(0===o&&""===r.value)r.value="0";else if("number"===e.type){var s=parseFloat(r.value,10)||0;(o!=s||o==s&&r.value!=o)&&(r.value=""+o)}else r.value!==""+o&&(r.value=""+o);else null==e.value&&null!=e.defaultValue&&r.defaultValue!==""+e.defaultValue&&(r.defaultValue=""+e.defaultValue),null==e.checked&&null!=e.defaultChecked&&(r.defaultChecked=!!e.defaultChecked)},postMountWrapper:function(t){var e=t._currentElement.props,n=u.getNodeFromInstance(t);switch(e.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}var r=n.name;""!==r&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==r&&(n.name=r)}};t.exports=l},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var r=n(7),o=n(20),i=n(6),a=n(79),u=(n(5),!1);function s(t){var e="";return o.Children.forEach(t,function(t){null!=t&&("string"==typeof t||"number"==typeof t?e+=t:u||(u=!0))}),e}var c={mountWrapper:function(t,e,n){var r=null;if(null!=n){var o=n;"optgroup"===o._tag&&(o=o._hostParent),null!=o&&"select"===o._tag&&(r=a.getSelectValueContext(o))}var i,u=null;if(null!=r)if(i=null!=e.value?e.value+"":s(e.children),u=!1,Array.isArray(r)){for(var c=0;c<r.length;c++)if(""+r[c]===i){u=!0;break}}else u=""+r===i;t._wrapperState={selected:u}},postMountWrapper:function(t){var e=t._currentElement.props;null!=e.value&&i.getNodeFromInstance(t).setAttribute("value",e.value)},getHostProps:function(t,e){var n=r({selected:void 0,children:void 0},e);null!=t._wrapperState.selected&&(n.selected=t._wrapperState.selected);var o=s(e.children);return o&&(n.children=o),n}};t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(50),a=n(6),u=n(12);n(2),n(5);function s(){this._rootNodeID&&c.updateWrapper(this)}var c={getHostProps:function(t,e){return null!=e.dangerouslySetInnerHTML&&r("91"),o({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue,onChange:t._wrapperState.onChange})},mountWrapper:function(t,e){var n=i.getValue(e),o=n;if(null==n){var a=e.defaultValue,c=e.children;null!=c&&(null!=a&&r("92"),Array.isArray(c)&&(c.length<=1||r("93"),c=c[0]),a=""+c),null==a&&(a=""),o=a}t._wrapperState={initialValue:""+o,listeners:null,onChange:function(t){var e=this._currentElement.props,n=i.executeOnChange(e,t);return u.asap(s,this),n}.bind(t)}},updateWrapper:function(t){var e=t._currentElement.props,n=a.getNodeFromInstance(t),r=i.getValue(e);if(null!=r){var o=""+r;o!==n.value&&(n.value=o),null==e.defaultValue&&(n.defaultValue=o)}null!=e.defaultValue&&(n.defaultValue=e.defaultValue)},postMountWrapper:function(t){var e=a.getNodeFromInstance(t),n=e.textContent;n===t._wrapperState.initialValue&&(e.value=n)}};t.exports=c},function(t,e,n){"use strict";var r=n(4),o=n(51),i=(n(31),n(10),n(13),n(23)),a=n(158),u=(n(14),n(163));n(2);function s(t,e){return e&&(t=t||[]).push(e),t}function c(t,e){o.processChildrenUpdates(t,e)}var l={Mixin:{_reconcilerInstantiateChildren:function(t,e,n){return a.instantiateChildren(t,e,n)},_reconcilerUpdateChildren:function(t,e,n,r,o,i){var s;return s=u(e,0),a.updateChildren(t,s,n,r,o,this,this._hostContainerInfo,i,0),s},mountChildren:function(t,e,n){var r=this._reconcilerInstantiateChildren(t,e,n);this._renderedChildren=r;var o=[],a=0;for(var u in r)if(r.hasOwnProperty(u)){var s=r[u];0;var c=i.mountComponent(s,e,this,this._hostContainerInfo,n,0);s._mountIndex=a++,o.push(c)}return o},updateTextContent:function(t){var e=this._renderedChildren;for(var n in a.unmountChildren(e,!1),e)e.hasOwnProperty(n)&&r("118");c(this,[function(t){return{type:"TEXT_CONTENT",content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}(t)])},updateMarkup:function(t){var e=this._renderedChildren;for(var n in a.unmountChildren(e,!1),e)e.hasOwnProperty(n)&&r("118");c(this,[function(t){return{type:"SET_MARKUP",content:t,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}(t)])},updateChildren:function(t,e,n){this._updateChildren(t,e,n)},_updateChildren:function(t,e,n){var r=this._renderedChildren,o={},a=[],u=this._reconcilerUpdateChildren(r,t,a,o,e,n);if(u||r){var l,f=null,d=0,h=0,p=0,y=null;for(l in u)if(u.hasOwnProperty(l)){var g=r&&r[l],v=u[l];g===v?(f=s(f,this.moveChild(g,y,d,h)),h=Math.max(g._mountIndex,h),g._mountIndex=d):(g&&(h=Math.max(g._mountIndex,h)),f=s(f,this._mountChildAtIndex(v,a[p],y,d,e,n)),p++),d++,y=i.getHostNode(v)}for(l in o)o.hasOwnProperty(l)&&(f=s(f,this._unmountChild(r[l],o[l])));f&&c(this,f),this._renderedChildren=u}},unmountChildren:function(t){var e=this._renderedChildren;a.unmountChildren(e,t),this._renderedChildren=null},moveChild:function(t,e,n,r){if(t._mountIndex<r)return function(t,e,n){return{type:"MOVE_EXISTING",content:null,fromIndex:t._mountIndex,fromNode:i.getHostNode(t),toIndex:n,afterNode:e}}(t,e,n)},createChild:function(t,e,n){return function(t,e,n){return{type:"INSERT_MARKUP",content:t,fromIndex:null,fromNode:null,toIndex:n,afterNode:e}}(n,e,t._mountIndex)},removeChild:function(t,e){return function(t,e){return{type:"REMOVE_NODE",content:null,fromIndex:t._mountIndex,fromNode:e,toIndex:null,afterNode:null}}(t,e)},_mountChildAtIndex:function(t,e,n,r,o,i){return t._mountIndex=r,this.createChild(t,n,e)},_unmountChild:function(t,e){var n=this.removeChild(t,e);return t._mountIndex=null,n}}};t.exports=l},function(t,e,n){"use strict";(function(e){var r=n(23),o=n(80),i=(n(55),n(54)),a=n(85);n(5);function u(t,e,n,r){var i=void 0===t[n];null!=e&&i&&(t[n]=o(e,!0))}void 0!==e&&e.env;var s={instantiateChildren:function(t,e,n,r){if(null==t)return null;var o={};return a(t,u,o),o},updateChildren:function(t,e,n,a,u,s,c,l,f){if(e||t){var d,h;for(d in e)if(e.hasOwnProperty(d)){var p=(h=t&&t[d])&&h._currentElement,y=e[d];if(null!=h&&i(p,y))r.receiveComponent(h,y,u,l),e[d]=h;else{h&&(a[d]=r.getHostNode(h),r.unmountComponent(h,!1));var g=o(y,!0);e[d]=g;var v=r.mountComponent(g,u,s,c,l,f);n.push(v)}}for(d in t)!t.hasOwnProperty(d)||e&&e.hasOwnProperty(d)||(h=t[d],a[d]=r.getHostNode(h),r.unmountComponent(h,!1))}},unmountChildren:function(t,e){for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];r.unmountComponent(o,e)}}};t.exports=s}).call(this,n(52))},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(20),a=n(51),u=n(13),s=n(43),c=n(31),l=(n(10),n(81)),f=n(23),d=n(82),h=(n(2),n(53)),p=n(54),y=(n(5),0),g=1,v=2;function m(t){}function b(t,e){0}m.prototype.render=function(){var t=c.get(this)._currentElement.type,e=t(this.props,this.context,this.updater);return b(t,e),e};var _=1,w={construct:function(t){this._currentElement=t,this._rootNodeID=0,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1},mountComponent:function(t,e,n,o){this._context=o,this._mountOrder=_++,this._hostParent=e,this._hostContainerInfo=n;var a,u=this._currentElement.props,s=this._processContext(o),l=this._currentElement.type,f=t.getUpdateQueue(),h=function(t){return!(!t.prototype||!t.prototype.isReactComponent)}(l),p=this._constructComponent(h,u,s,f);h||null!=p&&null!=p.render?!function(t){return!(!t.prototype||!t.prototype.isPureReactComponent)}(l)?this._compositeType=y:this._compositeType=g:(a=p,b(),null===p||!1===p||i.isValidElement(p)||r("105",l.displayName||l.name||"Component"),p=new m(l),this._compositeType=v),p.props=u,p.context=s,p.refs=d,p.updater=f,this._instance=p,c.set(p,this);var w,E=p.state;return void 0===E&&(p.state=E=null),("object"!=typeof E||Array.isArray(E))&&r("106",this.getName()||"ReactCompositeComponent"),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,w=p.unstable_handleError?this.performInitialMountWithErrorHandling(a,e,n,t,o):this.performInitialMount(a,e,n,t,o),p.componentDidMount&&t.getReactMountReady().enqueue(p.componentDidMount,p),w},_constructComponent:function(t,e,n,r){return this._constructComponentWithoutOwner(t,e,n,r)},_constructComponentWithoutOwner:function(t,e,n,r){var o=this._currentElement.type;return t?new o(e,n,r):o(e,n,r)},performInitialMountWithErrorHandling:function(t,e,n,r,o){var i,a=r.checkpoint();try{i=this.performInitialMount(t,e,n,r,o)}catch(u){r.rollback(a),this._instance.unstable_handleError(u),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),a=r.checkpoint(),this._renderedComponent.unmountComponent(!0),r.rollback(a),i=this.performInitialMount(t,e,n,r,o)}return i},performInitialMount:function(t,e,n,r,o){var i=this._instance;i.componentWillMount&&(i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===t&&(t=this._renderValidatedComponent());var a=l.getType(t);this._renderedNodeType=a;var u=this._instantiateReactComponent(t,a!==l.EMPTY);return this._renderedComponent=u,f.mountComponent(u,r,e,n,this._processChildContext(o),0)},getHostNode:function(){return f.getHostNode(this._renderedComponent)},unmountComponent:function(t){if(this._renderedComponent){var e=this._instance;if(e.componentWillUnmount&&!e._calledComponentWillUnmount)if(e._calledComponentWillUnmount=!0,t){var n=this.getName()+".componentWillUnmount()";s.invokeGuardedCallback(n,e.componentWillUnmount.bind(e))}else e.componentWillUnmount();this._renderedComponent&&(f.unmountComponent(this._renderedComponent,t),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=0,this._topLevelWrapper=null,c.remove(e)}},_maskContext:function(t){var e=this._currentElement.type.contextTypes;if(!e)return d;var n={};for(var r in e)n[r]=t[r];return n},_processContext:function(t){return this._maskContext(t)},_processChildContext:function(t){var e,n=this._currentElement.type,i=this._instance;if(i.getChildContext&&(e=i.getChildContext()),e){for(var a in"object"!=typeof n.childContextTypes&&r("107",this.getName()||"ReactCompositeComponent"),e)a in n.childContextTypes||r("108",this.getName()||"ReactCompositeComponent",a);return o({},t,e)}return t},_checkContextTypes:function(t,e,n){0},receiveComponent:function(t,e,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(e,r,t,o,n)},performUpdateIfNecessary:function(t){null!=this._pendingElement?f.receiveComponent(this,this._pendingElement,t,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(t,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(t,e,n,o,i){var a=this._instance;null==a&&r("136",this.getName()||"ReactCompositeComponent");var u,s=!1;this._context===i?u=a.context:(u=this._processContext(i),s=!0);var c=e.props,l=n.props;e!==n&&(s=!0),s&&a.componentWillReceiveProps&&a.componentWillReceiveProps(l,u);var f=this._processPendingState(l,u),d=!0;this._pendingForceUpdate||(a.shouldComponentUpdate?d=a.shouldComponentUpdate(l,f,u):this._compositeType===g&&(d=!h(c,l)||!h(a.state,f))),this._updateBatchNumber=null,d?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,l,f,u,t,i)):(this._currentElement=n,this._context=i,a.props=l,a.state=f,a.context=u)},_processPendingState:function(t,e){var n=this._instance,r=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(i&&1===r.length)return r[0];for(var a=o({},i?r[0]:n.state),u=i?1:0;u<r.length;u++){var s=r[u];o(a,"function"==typeof s?s.call(n,a,t,e):s)}return a},_performComponentUpdate:function(t,e,n,r,o,i){var a,u,s,c=this._instance,l=Boolean(c.componentDidUpdate);l&&(a=c.props,u=c.state,s=c.context),c.componentWillUpdate&&c.componentWillUpdate(e,n,r),this._currentElement=t,this._context=i,c.props=e,c.state=n,c.context=r,this._updateRenderedComponent(o,i),l&&o.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,u,s),c)},_updateRenderedComponent:function(t,e){var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(p(r,o))f.receiveComponent(n,o,t,this._processChildContext(e));else{var i=f.getHostNode(n);f.unmountComponent(n,!1);var a=l.getType(o);this._renderedNodeType=a;var u=this._instantiateReactComponent(o,a!==l.EMPTY);this._renderedComponent=u;var s=f.mountComponent(u,t,this._hostParent,this._hostContainerInfo,this._processChildContext(e),0);this._replaceNodeWithMarkup(i,s,n)}},_replaceNodeWithMarkup:function(t,e,n){a.replaceNodeWithMarkup(t,e,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){return this._instance.render()},_renderValidatedComponent:function(){var t;if(this._compositeType!==v){u.current=this;try{t=this._renderValidatedComponentWithoutOwnerOrContext()}finally{u.current=null}}else t=this._renderValidatedComponentWithoutOwnerOrContext();return null===t||!1===t||i.isValidElement(t)||r("109",this.getName()||"ReactCompositeComponent"),t},attachRef:function(t,e){var n=this.getPublicInstance();null==n&&r("110");var o=e.getPublicInstance();(n.refs===d?n.refs={}:n.refs)[t]=o},detachRef:function(t){delete this.getPublicInstance().refs[t]},getName:function(){var t=this._currentElement.type,e=this._instance&&this._instance.constructor;return t.displayName||e&&e.displayName||t.name||e&&e.name||null},getPublicInstance:function(){var t=this._instance;return this._compositeType===v?null:t},_instantiateReactComponent:null};t.exports=w},function(t,e,n){"use strict";var r=1;t.exports=function(){return r++}},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;t.exports=r},function(t,e,n){"use strict";var r="function"==typeof Symbol&&Symbol.iterator,o="@@iterator";t.exports=function(t){var e=t&&(r&&t[r]||t[o]);if("function"==typeof e)return e}},function(t,e,n){"use strict";(function(e){n(55);var r=n(85);n(5);function o(t,e,n,r){if(t&&"object"==typeof t){var o=t;0,void 0===o[n]&&null!=e&&(o[n]=e)}}void 0!==e&&e.env,t.exports=function(t,e){if(null==t)return t;var n={};return r(t,o,n),n}}).call(this,n(52))},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(34),a=(n(10),n(165)),u=[];var s={enqueue:function(){}};function c(t){this.reinitializeTransaction(),this.renderToStaticMarkup=t,this.useCreateElement=!1,this.updateQueue=new a(this)}var l={getTransactionWrappers:function(){return u},getReactMountReady:function(){return s},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};r(c.prototype,i,l),o.addPoolingTo(c),t.exports=c},function(t,e,n){"use strict";var r=n(56);n(5);var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.transaction=e}return t.prototype.isMounted=function(t){return!1},t.prototype.enqueueCallback=function(t,e,n){this.transaction.isInTransaction()&&r.enqueueCallback(t,e,n)},t.prototype.enqueueForceUpdate=function(t){this.transaction.isInTransaction()&&r.enqueueForceUpdate(t)},t.prototype.enqueueReplaceState=function(t,e){this.transaction.isInTransaction()&&r.enqueueReplaceState(t,e)},t.prototype.enqueueSetState=function(t,e){this.transaction.isInTransaction()&&r.enqueueSetState(t,e)},t}();t.exports=o},function(t,e,n){"use strict";var r=n(7),o=n(24),i=n(6),a=function(t){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=0};r(a.prototype,{mountComponent:function(t,e,n,r){var a=n._idCounter++;this._domID=a,this._hostParent=e,this._hostContainerInfo=n;var u=" react-empty: "+this._domID+" ";if(t.useCreateElement){var s=n._ownerDocument.createComment(u);return i.precacheNode(this,s),o(s)}return t.renderToStaticMarkup?"":"\x3c!--"+u+"--\x3e"},receiveComponent:function(){},getHostNode:function(){return i.getNodeFromInstance(this)},unmountComponent:function(){i.uncacheNode(this)}}),t.exports=a},function(t,e,n){"use strict";var r=n(4);n(2);function o(t,e){"_hostNode"in t||r("33"),"_hostNode"in e||r("33");for(var n=0,o=t;o;o=o._hostParent)n++;for(var i=0,a=e;a;a=a._hostParent)i++;for(;n-i>0;)t=t._hostParent,n--;for(;i-n>0;)e=e._hostParent,i--;for(var u=n;u--;){if(t===e)return t;t=t._hostParent,e=e._hostParent}return null}t.exports={isAncestor:function(t,e){"_hostNode"in t||r("35"),"_hostNode"in e||r("35");for(;e;){if(e===t)return!0;e=e._hostParent}return!1},getLowestCommonAncestor:o,getParentInstance:function(t){return"_hostNode"in t||r("36"),t._hostParent},traverseTwoPhase:function(t,e,n){for(var r,o=[];t;)o.push(t),t=t._hostParent;for(r=o.length;r-- >0;)e(o[r],"captured",n);for(r=0;r<o.length;r++)e(o[r],"bubbled",n)},traverseEnterLeave:function(t,e,n,r,i){for(var a=t&&e?o(t,e):null,u=[];t&&t!==a;)u.push(t),t=t._hostParent;for(var s,c=[];e&&e!==a;)c.push(e),e=e._hostParent;for(s=0;s<u.length;s++)n(u[s],"bubbled",r);for(s=c.length;s-- >0;)n(c[s],"captured",i)}}},function(t,e,n){"use strict";var r=n(4),o=n(7),i=n(47),a=n(24),u=n(6),s=n(37),c=(n(2),n(57),function(t){this._currentElement=t,this._stringText=""+t,this._hostNode=null,this._hostParent=null,this._domID=0,this._mountIndex=0,this._closingComment=null,this._commentNodes=null});o(c.prototype,{mountComponent:function(t,e,n,r){var o=n._idCounter++,i=" react-text: "+o+" ";if(this._domID=o,this._hostParent=e,t.useCreateElement){var c=n._ownerDocument,l=c.createComment(i),f=c.createComment(" /react-text "),d=a(c.createDocumentFragment());return a.queueChild(d,a(l)),this._stringText&&a.queueChild(d,a(c.createTextNode(this._stringText))),a.queueChild(d,a(f)),u.precacheNode(this,l),this._closingComment=f,d}var h=s(this._stringText);return t.renderToStaticMarkup?h:"\x3c!--"+i+"--\x3e"+h+"\x3c!-- /react-text --\x3e"},receiveComponent:function(t,e){if(t!==this._currentElement){this._currentElement=t;var n=""+t;if(n!==this._stringText){this._stringText=n;var r=this.getHostNode();i.replaceDelimitedText(r[0],r[1],n)}}},getHostNode:function(){var t=this._commentNodes;if(t)return t;if(!this._closingComment)for(var e=u.getNodeFromInstance(this).nextSibling;;){if(null==e&&r("67",this._domID),8===e.nodeType&&" /react-text "===e.nodeValue){this._closingComment=e;break}e=e.nextSibling}return t=[this._hostNode,this._closingComment],this._commentNodes=t,t},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,u.uncacheNode(this)}}),t.exports=c},function(t,e,n){"use strict";var r=n(7),o=n(12),i=n(34),a=n(14),u={initialize:a,close:function(){f.isBatchingUpdates=!1}},s=[{initialize:a,close:o.flushBatchedUpdates.bind(o)},u];function c(){this.reinitializeTransaction()}r(c.prototype,i,{getTransactionWrappers:function(){return s}});var l=new c,f={isBatchingUpdates:!1,batchedUpdates:function(t,e,n,r,o,i){var a=f.isBatchingUpdates;return f.isBatchingUpdates=!0,a?t(e,n,r,o,i):l.perform(t,null,e,n,r,o,i)}};t.exports=f},function(t,e,n){"use strict";var r=n(7),o=n(87),i=n(8),a=n(18),u=n(6),s=n(12),c=n(44),l=n(171);function f(t){for(;t._hostParent;)t=t._hostParent;var e=u.getNodeFromInstance(t).parentNode;return u.getClosestInstanceFromNode(e)}function d(t,e){this.topLevelType=t,this.nativeEvent=e,this.ancestors=[]}function h(t){var e=c(t.nativeEvent),n=u.getClosestInstanceFromNode(e),r=n;do{t.ancestors.push(r),r=r&&f(r)}while(r);for(var o=0;o<t.ancestors.length;o++)n=t.ancestors[o],p._handleTopLevel(t.topLevelType,n,t.nativeEvent,c(t.nativeEvent))}r(d.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),a.addPoolingTo(d,a.twoArgumentPooler);var p={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:i.canUseDOM?window:null,setHandleTopLevel:function(t){p._handleTopLevel=t},setEnabled:function(t){p._enabled=!!t},isEnabled:function(){return p._enabled},trapBubbledEvent:function(t,e,n){return n?o.listen(n,e,p.dispatchEvent.bind(null,t)):null},trapCapturedEvent:function(t,e,n){return n?o.capture(n,e,p.dispatchEvent.bind(null,t)):null},monitorScrollValue:function(t){var e=function(t){t(l(window))}.bind(null,t);o.listen(window,"scroll",e)},dispatchEvent:function(t,e){if(p._enabled){var n=d.getPooled(t,e);try{s.batchedUpdates(h,n)}finally{d.release(n)}}}};t.exports=p},function(t,e,n){"use strict";t.exports=function(t){return t.Window&&t instanceof t.Window?{x:t.pageXOffset||t.document.documentElement.scrollLeft,y:t.pageYOffset||t.document.documentElement.scrollTop}:{x:t.scrollLeft,y:t.scrollTop}}},function(t,e,n){"use strict";var r=n(22),o=n(29),i=n(42),a=n(51),u=n(83),s=n(38),c=n(84),l=n(12),f={Component:a.injection,DOMProperty:r.injection,EmptyComponent:u.injection,EventPluginHub:o.injection,EventPluginUtils:i.injection,EventEmitter:s.injection,HostComponent:c.injection,Updates:l.injection};t.exports=f},function(t,e,n){"use strict";var r=n(7),o=n(70),i=n(18),a=n(38),u=n(88),s=(n(10),n(34)),c=n(56),l=[{initialize:u.getSelectionInformation,close:u.restoreSelection},{initialize:function(){var t=a.isEnabled();return a.setEnabled(!1),t},close:function(t){a.setEnabled(t)}},{initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}}];function f(t){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.useCreateElement=t}var d={getTransactionWrappers:function(){return l},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return c},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(t){this.reactMountReady.rollback(t)},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null}};r(f.prototype,s,d),i.addPoolingTo(f),t.exports=f},function(t,e,n){"use strict";var r=n(8),o=n(175),i=n(69);function a(t,e,n,r){return t===n&&e===r}var u=r.canUseDOM&&"selection"in document&&!("getSelection"in window),s={getOffsets:u?function(t){var e=document.selection.createRange(),n=e.text.length,r=e.duplicate();r.moveToElementText(t),r.setEndPoint("EndToStart",e);var o=r.text.length;return{start:o,end:o+n}}:function(t){var e=window.getSelection&&window.getSelection();if(!e||0===e.rangeCount)return null;var n=e.anchorNode,r=e.anchorOffset,o=e.focusNode,i=e.focusOffset,u=e.getRangeAt(0);try{u.startContainer.nodeType,u.endContainer.nodeType}catch(t){return null}var s=a(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset)?0:u.toString().length,c=u.cloneRange();c.selectNodeContents(t),c.setEnd(u.startContainer,u.startOffset);var l=a(c.startContainer,c.startOffset,c.endContainer,c.endOffset)?0:c.toString().length,f=l+s,d=document.createRange();d.setStart(n,r),d.setEnd(o,i);var h=d.collapsed;return{start:h?f:l,end:h?l:f}},setOffsets:u?function(t,e){var n,r,o=document.selection.createRange().duplicate();void 0===e.end?r=n=e.start:e.start>e.end?(n=e.end,r=e.start):(n=e.start,r=e.end),o.moveToElementText(t),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}:function(t,e){if(window.getSelection){var n=window.getSelection(),r=t[i()].length,a=Math.min(e.start,r),u=void 0===e.end?a:Math.min(e.end,r);if(!n.extend&&a>u){var s=u;u=a,a=s}var c=o(t,a),l=o(t,u);if(c&&l){var f=document.createRange();f.setStart(c.node,c.offset),n.removeAllRanges(),a>u?(n.addRange(f),n.extend(l.node,l.offset)):(f.setEnd(l.node,l.offset),n.addRange(f))}}}};t.exports=s},function(t,e,n){"use strict";function r(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function o(t){for(;t;){if(t.nextSibling)return t.nextSibling;t=t.parentNode}}t.exports=function(t,e){for(var n=r(t),i=0,a=0;n;){if(3===n.nodeType){if(a=i+n.textContent.length,i<=e&&a>=e)return{node:n,offset:e-i};i=a}n=r(o(n))}}},function(t,e,n){"use strict";var r=n(177);t.exports=function t(e,n){return!(!e||!n)&&(e===n||!r(e)&&(r(n)?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}},function(t,e,n){"use strict";var r=n(178);t.exports=function(t){return r(t)&&3==t.nodeType}},function(t,e,n){"use strict";t.exports=function(t){var e=(t?t.ownerDocument||t:document).defaultView||window;return!(!t||!("function"==typeof e.Node?t instanceof e.Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}},function(t,e,n){"use strict";var r="http://www.w3.org/1999/xlink",o="http://www.w3.org/XML/1998/namespace",i={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},a={Properties:{},DOMAttributeNamespaces:{xlinkActuate:r,xlinkArcrole:r,xlinkHref:r,xlinkRole:r,xlinkShow:r,xlinkTitle:r,xlinkType:r,xmlBase:o,xmlLang:o,xmlSpace:o},DOMAttributeNames:{}};Object.keys(i).forEach(function(t){a.Properties[t]=0,i[t]&&(a.DOMAttributeNames[t]=i[t])}),t.exports=a},function(t,e,n){"use strict";var r=n(28),o=n(8),i=n(6),a=n(88),u=n(15),s=n(89),c=n(73),l=n(53),f=o.canUseDOM&&"documentMode"in document&&document.documentMode<=11,d={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},h=null,p=null,y=null,g=!1,v=!1;function m(t,e){if(g||null==h||h!==s())return null;var n=function(t){if("selectionStart"in t&&a.hasSelectionCapabilities(t))return{start:t.selectionStart,end:t.selectionEnd};if(window.getSelection){var e=window.getSelection();return{anchorNode:e.anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}(h);if(!y||!l(y,n)){y=n;var o=u.getPooled(d.select,p,t,e);return o.type="select",o.target=h,r.accumulateTwoPhaseDispatches(o),o}return null}var b={eventTypes:d,extractEvents:function(t,e,n,r){if(!v)return null;var o=e?i.getNodeFromInstance(e):window;switch(t){case"topFocus":(c(o)||"true"===o.contentEditable)&&(h=o,p=e,y=null);break;case"topBlur":h=null,p=null,y=null;break;case"topMouseDown":g=!0;break;case"topContextMenu":case"topMouseUp":return g=!1,m(n,r);case"topSelectionChange":if(f)break;case"topKeyDown":case"topKeyUp":return m(n,r)}return null},didPutListener:function(t,e,n){"onSelect"===e&&(v=!0)}};t.exports=b},function(t,e,n){"use strict";var r=n(4),o=n(87),i=n(28),a=n(6),u=n(182),s=n(183),c=n(15),l=n(184),f=n(185),d=n(35),h=n(187),p=n(188),y=n(189),g=n(30),v=n(190),m=n(14),b=n(58),_=(n(2),{}),w={};["abort","animationEnd","animationIteration","animationStart","blur","canPlay","canPlayThrough","click","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(t){var e=t[0].toUpperCase()+t.slice(1),n="on"+e,r="top"+e,o={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[r]};_[t]=o,w[r]=o});var E={};function x(t){return"."+t._rootNodeID}function k(t){return"button"===t||"input"===t||"select"===t||"textarea"===t}var S={eventTypes:_,extractEvents:function(t,e,n,o){var a,m=w[t];if(!m)return null;switch(t){case"topAbort":case"topCanPlay":case"topCanPlayThrough":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topVolumeChange":case"topWaiting":a=c;break;case"topKeyPress":if(0===b(n))return null;case"topKeyDown":case"topKeyUp":a=f;break;case"topBlur":case"topFocus":a=l;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":a=d;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":a=h;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":a=p;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":a=u;break;case"topTransitionEnd":a=y;break;case"topScroll":a=g;break;case"topWheel":a=v;break;case"topCopy":case"topCut":case"topPaste":a=s}a||r("86",t);var _=a.getPooled(m,e,n,o);return i.accumulateTwoPhaseDispatches(_),_},didPutListener:function(t,e,n){if("onClick"===e&&!k(t._tag)){var r=x(t),i=a.getNodeFromInstance(t);E[r]||(E[r]=o.listen(i,"click",m))}},willDeleteListener:function(t,e){if("onClick"===e&&!k(t._tag)){var n=x(t);E[n].remove(),delete E[n]}}};t.exports=S},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{animationName:null,elapsedTime:null,pseudoElement:null}),t.exports=o},function(t,e,n){"use strict";var r=n(15),o={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};function i(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(i,o),t.exports=i},function(t,e,n){"use strict";var r=n(30);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{relatedTarget:null}),t.exports=o},function(t,e,n){"use strict";var r=n(30),o=n(58),i={key:n(186),location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:n(46),charCode:function(t){return"keypress"===t.type?o(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?o(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}};function a(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(a,i),t.exports=a},function(t,e,n){"use strict";var r=n(58),o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=function(t){if(t.key){var e=o[t.key]||t.key;if("Unidentified"!==e)return e}if("keypress"===t.type){var n=r(t);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===t.type||"keyup"===t.type?i[t.keyCode]||"Unidentified":""}},function(t,e,n){"use strict";var r=n(35);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{dataTransfer:null}),t.exports=o},function(t,e,n){"use strict";var r=n(30),o={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:n(46)};function i(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(i,o),t.exports=i},function(t,e,n){"use strict";var r=n(15);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{propertyName:null,elapsedTime:null,pseudoElement:null}),t.exports=o},function(t,e,n){"use strict";var r=n(35);function o(t,e,n,o){return r.call(this,t,e,n,o)}r.augmentClass(o,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),t.exports=o},function(t,e,n){"use strict";n(57);var r=9;t.exports=function(t,e){return{_topLevelWrapper:t,_idCounter:1,_ownerDocument:e?e.nodeType===r?e:e.ownerDocument:null,_node:e,_tag:e?e.nodeName.toLowerCase():null,_namespaceURI:e?e.namespaceURI:null}}},function(t,e,n){"use strict";t.exports={useCreateElement:!0,useFiber:!1}},function(t,e,n){"use strict";var r=n(194),o=/\/?>/,i=/^<\!\-\-/,a={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(t){var e=r(t);return i.test(t)?t:t.replace(o," "+a.CHECKSUM_ATTR_NAME+'="'+e+'"$&')},canReuseMarkup:function(t,e){var n=e.getAttribute(a.CHECKSUM_ATTR_NAME);return n=n&&parseInt(n,10),r(t)===n}};t.exports=a},function(t,e,n){"use strict";var r=65521;t.exports=function(t){for(var e=1,n=0,o=0,i=t.length,a=-4&i;o<a;){for(var u=Math.min(o+4096,a);o<u;o+=4)n+=(e+=t.charCodeAt(o))+(e+=t.charCodeAt(o+1))+(e+=t.charCodeAt(o+2))+(e+=t.charCodeAt(o+3));e%=r,n%=r}for(;o<i;o++)n+=e+=t.charCodeAt(o);return(e%=r)|(n%=r)<<16}},function(t,e,n){"use strict";t.exports="15.6.1"},function(t,e,n){"use strict";var r=n(4),o=(n(13),n(6)),i=n(31),a=n(91);n(2),n(5);t.exports=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=i.get(t);if(e)return(e=a(e))?o.getNodeFromInstance(e):null;"function"==typeof t.render?r("44"):r("45",Object.keys(t))}},function(t,e,n){"use strict";var r=n(90);t.exports=r.renderSubtreeIntoContainer},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.layout=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(96)),i=n(199),a=n(39),u=n(200),s=n(201),c=n(202),l=n(203),f=y(n(92)),d=y(n(211)),h=y(n(212)),p=y(n(217));function y(t){return t&&t.__esModule?t:{default:t}}function g(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var v=function(t,e,n,r){var o=new i.Algorithms(r),a=t.map(function(t){return t.count}),u=a.reduce(function(t,e){return t+e}),s=a.map(function(t){return t/u*e*n});return o.squarifiedTreemap(e,n,s)},m=function(t,e,n,r,i){switch(t){case"circle-pack":return function(t,e,n){var r={name:"",children:t.map(function(t){return{name:t.name,size:t.count}})},i=o.hierarchy(r).sum(function(t){return t.size}).sort(function(t,e){return e.value-t.value}),a=o.pack().size([e,n])(i).descendants().map(function(t){return{x:t.x-t.r,y:t.y-t.r,width:2*t.r,height:2*t.r}});return a.shift(0),a}(e,n,r);case"treemap":return v(e,n,r,i)}return v(e,n,r,i)},b=new Map([["circle-pack","circle"],["treemap","rect"]]),_=function(t,e,n){var o=new a.Allocator(t),i=function(t,e){var n=new Map,o=!0,i=!1,a=void 0;try{for(var u,s=t[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value;n.has(c.properties[e])||n.set(c.properties[e],0),n.set(c.properties[e],n.get(c.properties[e])+1)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}var l=Array.from(n.entries()).map(function(t){var e=r(t,2);return{name:e[0],count:e[1]}});return l.sort(function(t,e){return e.count-t.count}),l}(e.nodes,n.groupProperty),l=m(n.type,i,2e3,2e3,t),y=o.alloc(16*i.length);l.forEach(function(e,n){t.HEAPF32[y/4+2*n]=e.x+e.width/2,t.HEAPF32[y/4+2*n+1]=e.y+e.height/2});var v=n.useEdgeConcentration?function(t,e,n){var o=new f.default,i=!0,a=!1,u=void 0;try{for(var s,c=t.nodes[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;o.addVertex(l.id,l)}}catch(t){a=!0,u=t}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}var y=!0,v=!1,m=void 0;try{for(var b,_=t.relationships[Symbol.iterator]();!(y=(b=_.next()).done);y=!0){var w=b.value,E=w.startNode,x=w.endNode;o.vertex(E).properties[n.groupProperty]===o.vertex(x).properties[n.groupProperty]&&o.addEdge(E,x,w)}}catch(t){v=!0,m=t}finally{try{!y&&_.return&&_.return()}finally{if(v)throw m}}for(var k=e.map(function(e){var r=e.name;return t.nodes.filter(function(t){return t.properties[n.groupProperty]===r})}),S=(new h.default).method(function(t,e,r){return(0,p.default)(t,e,r,n.mu,n.minCount)}).idGenerator(function(t,e,n){return(e=Array.from(e)).sort(),(n=Array.from(n)).sort(),e.join(",")+":"+n.join(",")}),M=0;M<e.length;++M)for(var C=k[M],A=function(i){var a=k[i],u=new f.default,s=!0,c=!1,l=void 0;try{for(var h,p=C[Symbol.iterator]();!(s=(h=p.next()).done);s=!0){var y=h.value;u.addVertex(y.id,y)}}catch(t){c=!0,l=t}finally{try{!s&&p.return&&p.return()}finally{if(c)throw l}}var v=!0,m=!1,b=void 0;try{for(var _,w=a[Symbol.iterator]();!(v=(_=w.next()).done);v=!0){var E=_.value;u.addVertex(E.id,E)}}catch(t){m=!0,b=t}finally{try{!v&&w.return&&w.return()}finally{if(m)throw b}}var x=!0,A=!1,P=void 0;try{for(var T,N=t.relationships[Symbol.iterator]();!(x=(T=N.next()).done);x=!0){var O=T.value,D=O.startNode,R=O.endNode,I=o.vertex(D).properties[n.groupProperty],L=o.vertex(R).properties[n.groupProperty];I===e[M].name&&L===e[i].name&&u.addEdge(D,R,O),I===e[i].name&&L===e[M].name&&u.addEdge(R,D,O)}}catch(t){A=!0,P=t}finally{try{!x&&N.return&&N.return()}finally{if(A)throw P}}S.dummy(function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value,l=!0,f=!1,d=void 0;try{for(var h,p=e[Symbol.iterator]();!(l=(h=p.next()).done);l=!0){var y=h.value,g=u.edge(c,y);g&&n.push(g)}}catch(t){f=!0,d=t}finally{try{!l&&p.return&&p.return()}finally{if(f)throw d}}}}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return{dummy:!0,average:n.reduce(function(t,e){return t+e.properties.value},0)/n.length,strokeColor:"black",strokeWidth:1,fillOpacity:0}});var F=S.transform((0,d.default)(u)),B=!0,U=!1,j=void 0;try{for(var z,V=F.vertices()[Symbol.iterator]();!(B=(z=V.next()).done);B=!0){var W=z.value,Y=F.vertex(W);Y.dummy&&(o.addVertex(W+"-l",Object.assign({},Y,{id:W+"-l",properties:g({},n.groupProperty,e[M].name)})),o.addVertex(W+"-r",Object.assign({},Y,{id:W+"-r",properties:g({},n.groupProperty,e[i].name)})),o.addEdge(W+"-l",W+"-r",{properties:{value:Y.average}}))}}catch(t){U=!0,j=t}finally{try{!B&&V.return&&V.return()}finally{if(U)throw j}}var q=!0,H=!1,G=void 0;try{for(var X,K=F.edges()[Symbol.iterator]();!(q=(X=K.next()).done);q=!0){var $=X.value,Q=r($,2),Z=Q[0],J=Q[1],tt=F.vertex(Z),et=F.vertex(J);tt.dummy||et.dummy||n.showSingleEdge&&o.addEdge(Z,J),tt.dummy&&!et.dummy&&o.addEdge(Z+"-r",J,{properties:{value:tt.average}}),!tt.dummy&&et.dummy&&o.addEdge(Z,J+"-l",{properties:{value:et.average}})}}catch(t){H=!0,G=t}finally{try{!q&&K.return&&K.return()}finally{if(H)throw G}}},P=M+1;P<e.length;++P)A(P);return{nodes:o.vertices().map(function(t){return o.vertex(t)}),relationships:o.edges().map(function(t){var e=r(t,2),n=e[0],i=e[1];return Object.assign({},o.edge(n,i),{startNode:n,endNode:i})})}}(e,i,n):e,_=function(t,e,n,r){var o=new s.Graph(t),i=0,a=new Map,u=!0,c=!1,l=void 0;try{for(var f,d=e.nodes[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var h=f.value;o.addNode(),a.set(h.id,i++)}}catch(t){c=!0,l=t}finally{try{!u&&d.return&&d.return()}finally{if(c)throw l}}var p=!0,y=!1,g=void 0;try{for(var v,m=e.relationships[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value,_=b.startNode,w=b.endNode;o.addEdge(a.get(_),a.get(w))}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}return o}(t,v);v.nodes.forEach(function(t,e){_.setX(e,t.x||0),_.setY(e,t.y||0)});var w=new Map(i.map(function(t,e){return[t.name,e]})),E=o.alloc(4*_.nodeCount());v.nodes.forEach(function(e,r){t.HEAPU32[E/4+r]=w.get(e.properties[n.groupProperty])});var x=new u.Simulation(t),k=x.addGroupManyBodyForce(y,i.length,E,_.nodeCount()),S=x.addGroupLinkForce(_,E,n.intraGroup,n.interGroup),M=x.addGroupCenterForce(y,i.length,E,_.nodeCount());x.setStrength(k,n.manyBodyForce),x.setStrength(S,n.linkForce),x.setStrength(M,n.centerForce),x.start(_);var C=new c.EdgeBundling(t);C.cycles=n.cycles,C.s0=n.s0,C.i0=n.i0,C.sStep=n.sStep,C.iStep=n.iStep;var A=C.call(_);return l.forEach(function(t,e){t.type=b.get(n.type),t.label=i[e].name||"",t.x+=t.width/2,t.y+=t.height/2}),v.groups=l,v.nodes.forEach(function(t,e){t.x=_.getX(e),t.y=_.getY(e)}),v.relationships.forEach(function(t,e){t.bends=A[e].map(function(t){return[t.x,t.y]})}),v};e.layout=function(t,e){return(0,l.loadModule)().then(function(n){var r=n.Module;return _(r,t,e)})}},function(t,e,n){"use strict";n.r(e),n.d(e,"Algorithms",function(){return o});var r=n(39);class o{constructor(t){this.Module=t,this.module={connectedComponents:t.cwrap("connected_components","number",["number"]),squarifiedTreemap:t.cwrap("squarified_treemap","number",["number","number","number","number"])}}connectedComponents(t){const e=new r.Allocator(this.Module),n=this.module.connectedComponents(t.pointer),o=t.nodeCount(),i=new Array(o);for(let t=0;t<o;++t)i[t]=this.Module.HEAPU32[n/4+t];return e.free(n),i}squarifiedTreemap(t,e,n){const o=new r.Allocator(this.Module),i=o.alloc(8*n.length);n.forEach((t,e)=>{this.Module.HEAPF64[i/8+e]=t});const a=this.module.squarifiedTreemap(t,e,i,n.length),u=n.map((t,e)=>({x:this.Module.HEAPF64[a/8+4*e],y:this.Module.HEAPF64[a/8+4*e+1],width:this.Module.HEAPF64[a/8+4*e+2],height:this.Module.HEAPF64[a/8+4*e+3]}));return o.free(a),u}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Simulation",function(){return r});class r{constructor(t){this.module={simulationNew:t.cwrap("simulation_new","number",[]),simulationAddCenterForce:t.cwrap("simulation_add_center_force","number",["number"]),simulationAddGroupCenterForce:t.cwrap("simulation_add_group_center_force","number",["number","number","number","number","number"]),simulationAddGroupLinkForce:t.cwrap("simulation_add_group_link_force","number",["number","number","number","number","number"]),simulationAddGroupManyBodyForce:t.cwrap("simulation_add_group_many_body_force","number",["number","number","number","number","number"]),simulationAddLinkForce:t.cwrap("simulation_add_link_force","number",["number","number"]),simulationAddManyBodyForce:t.cwrap("simulation_add_many_body_force","number",["number"]),simulationStart:t.cwrap("simulation_start","void",["number","number"]),simulationGetStrength:t.cwrap("simulation_get_strength","number",["number"]),simulationSetStrength:t.cwrap("simulation_set_strength","void",["number","number"])},this.pointer=this.module.simulationNew()}addCenterForce(){return this.module.simulationAddCenterForce(this.pointer)}addGroupCenterForce(t,e,n,r){return this.module.simulationAddGroupCenterForce(this.pointer,t,e,n,r)}addGroupLinkForce(t,e,n=.5,r=.01){return this.module.simulationAddGroupLinkForce(this.pointer,t.pointer,e,n,r)}addGroupManyBodyForce(t,e,n,r){return this.module.simulationAddGroupManyBodyForce(this.pointer,t,e,n,r)}addLinkForce(t){return this.module.simulationAddLinkForce(this.pointer,t.pointer)}addManyBodyForce(){return this.module.simulationAddManyBodyForce(this.pointer)}start(t){const e=Date.now();this.module.simulationStart(this.pointer,t.pointer);const n=Date.now();console.log(n-e)}getStrength(t){return this.module.simulationGetStrength(this.pointer,t)}setStrength(t,e){this.module.simulationSetStrength(this.pointer,t,e)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Graph",function(){return r});class r{constructor(t){this.module={graphNew:t.cwrap("graph_new","number",[]),graphAddNode:t.cwrap("graph_add_node","number",["number"]),graphAddEdge:t.cwrap("graph_add_edge","number",["number","number","number"]),graphNodeCount:t.cwrap("graph_node_count","number",["number"]),graphEdgeCount:t.cwrap("graph_edge_count","number",["number"]),graphGetX:t.cwrap("graph_get_x","number",["number","number"]),graphGetY:t.cwrap("graph_get_y","number",["number","number"]),graphSetX:t.cwrap("graph_set_x","void",["number","number","number"]),graphSetY:t.cwrap("graph_set_y","void",["number","number","number"])},this.pointer=this.module.graphNew()}addNode(){return this.module.graphAddNode(this.pointer)}addEdge(t,e){return this.module.graphAddEdge(this.pointer,t,e)}nodeCount(){return this.module.graphNodeCount(this.pointer)}edgeCount(){return this.module.graphEdgeCount(this.pointer)}getX(t){return this.module.graphGetX(this.pointer,t)}getY(t){return this.module.graphGetY(this.pointer,t)}setX(t,e){return this.module.graphSetX(this.pointer,t,e)}setY(t,e){return this.module.graphSetY(this.pointer,t,e)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"EdgeBundling",function(){return r});class r{constructor(t){this.Module=t,this.module={edgeBundlingNew:t.cwrap("edge_bundling_new","number",[]),edgeBundlingCall:t.cwrap("edge_bundling_call","number",["number"]),edgeBundlingGetCycles:t.cwrap("edge_bundling_get_cycles","number",["number"]),edgeBundlingGetS0:t.cwrap("edge_bundling_get_s0","number",["number"]),edgeBundlingGetI0:t.cwrap("edge_bundling_get_i0","number",["number"]),edgeBundlingGetSStep:t.cwrap("edge_bundling_get_s_step","number",["number"]),edgeBundlingGetIStep:t.cwrap("edge_bundling_get_i_step","number",["number"]),edgeBundlingSetCycles:t.cwrap("edge_bundling_set_cycles","void",["number","number"]),edgeBundlingSetS0:t.cwrap("edge_bundling_set_s0","void",["number","number"]),edgeBundlingSetI0:t.cwrap("edge_bundling_set_i0","void",["number","number"]),edgeBundlingSetSStep:t.cwrap("edge_bundling_set_s_step","void",["number","number"]),edgeBundlingSetIStep:t.cwrap("edge_bundling_set_i_step","void",["number","number"]),linesAt:t.cwrap("lines_at","number",["number","number"]),linePoints:t.cwrap("line_points","number",["number"]),linePointsAt:t.cwrap("line_points_at","number",["number","number"]),linePointsLength:t.cwrap("line_points_length","number",["number"]),pointX:t.cwrap("point_x","number",["number"]),pointY:t.cwrap("point_y","number",["number"])},this.pointer=this.module.edgeBundlingNew()}call(t){const e=this.module.edgeBundlingCall(this.pointer,t.pointer),n=t.edgeCount(),r=new Array(n);for(let t=0;t<n;++t){const n=this.module.linesAt(e,t),o=this.module.linePointsLength(n);r[t]=new Array(o-2);for(let e=1;e<o-1;++e){const o=this.module.linePointsAt(n,e);r[t][e-1]={x:this.module.pointX(o),y:this.module.pointY(o)}}}return r}get cycles(){return this.module.edgeBundlingGetCycles(this.pointer)}set cycles(t){this.module.edgeBundlingSetCycles(this.pointer,t)}get s0(){return this.module.edgeBundlingGetS0(this.pointer)}set s0(t){this.module.edgeBundlingSetS0(this.pointer,t)}get i0(){return this.module.edgeBundlingGetI0(this.pointer)}set i0(t){this.module.edgeBundlingSetI0(this.pointer,t)}get sStep(){return this.module.edgeBundlingGetSStep(this.pointer)}set sStep(t){this.module.edgeBundlingSetSStep(this.pointer,t)}get iStep(){return this.module.edgeBundlingGetIStep(this.pointer)}set iStep(t){this.module.edgeBundlingSetIStep(this.pointer,t)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.loadModule=void 0;var r=(0,n(204).egraph)("egraph.wasm");e.loadModule=function(){return r}},function(t,e,n){"use strict";n.r(e),n.d(e,"egraph",function(){return i});var r=n(97),o=n.n(r);const i=(t="egraph.wasm")=>new Promise((e,n)=>{window.fetch(t).then(t=>t.arrayBuffer()).then(t=>{o()({wasmBinary:t}).then(t=>{e({Module:t})})})})},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(207),o=n(208),i=n(209);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),o=(t=u(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|h(e.length);return 0===(t=u(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?u(t,0):d(t,e);if("Buffer"===e.type&&i(e.data))return d(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=u(t,e<0?0:0|h(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|h(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return j(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){var i,a=1,u=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,u/=2,s/=2,n/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var l=-1;for(i=n;i<u;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===s)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+s>u&&(n=u-s),i=n;i>=0;i--){for(var f=!0,d=0;d<s;d++)if(c(t,i+d)!==c(e,d)){f=!1;break}if(f)return i}return-1}function m(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[n+a]=u}return a}function b(t,e,n,r){return V(j(e,t.length-n),t,n,r)}function _(t,e,n,r){return V(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return _(t,e,n,r)}function E(t,e,n,r){return V(z(e),t,n,r)}function x(t,e,n,r){return V(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function S(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,u,s,c=t[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(l=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(l=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(l=s)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(t){var e=t.length;if(e<=M)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=M));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return c(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,n);case"utf8":case"utf-8":return S(this,e,n);case"ascii":return C(this,e,n);case"latin1":case"binary":return A(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,o>>>=0,this===t)return 0;for(var i=o-r,a=n-e,u=Math.min(i,a),c=this.slice(r,o),l=t.slice(e,n),f=0;f<u;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var M=4096;function C(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function P(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=U(t[i]);return o}function T(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function N(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function D(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function R(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function I(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(t,e,n,r,i){return i||I(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,i){return i||I(t,0,n,8),o.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var o=e-t;n=new s(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},s.prototype.readUInt8=function(t,e){return e||N(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||N(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||N(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},s.prototype.readInt8=function(t,e){return e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||N(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||N(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||N(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||N(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||N(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||N(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):R(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=0,a=1,u=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=n-1,a=1,u=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):R(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return L(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return L(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=s.isBuffer(t)?t:j(new s(t,r).toString()),u=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%u]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(206))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],a=n[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,a)),s=0,l=a>0?r-4:r,f=0;f<l;f+=4)e=o[t.charCodeAt(f)]<<18|o[t.charCodeAt(f+1)]<<12|o[t.charCodeAt(f+2)]<<6|o[t.charCodeAt(f+3)],u[s++]=e>>16&255,u[s++]=e>>8&255,u[s++]=255&e;2===a&&(e=o[t.charCodeAt(f)]<<2|o[t.charCodeAt(f+1)]>>4,u[s++]=255&e);1===a&&(e=o[t.charCodeAt(f)]<<10|o[t.charCodeAt(f+1)]<<4|o[t.charCodeAt(f+2)]>>2,u[s++]=e>>8&255,u[s++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],a=0,u=n-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function f(t,e,n){for(var r,o=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(l(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,c=s>>1,l=-7,f=n?o-1:0,d=n?-1:1,h=t[e+f];for(f+=d,i=h&(1<<-l)-1,h>>=-l,l+=u;l>0;i=256*i+t[e+f],f+=d,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[e+f],f+=d,l-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=c}return(h?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,u,s,c=8*i-o-1,l=(1<<c)-1,f=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+f>=1?d/s:d*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=l?(u=0,a=l):a+f>=1?(u=(e*s-1)*Math.pow(2,o),a+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[n+h]=255&u,h+=p,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[n+h]=255&a,h+=p,a/=256,c-=8);t[n+h-p]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return o(t,[{key:"edges",value:function(){var t=[],e=!0,n=!1,r=void 0;try{for(var o,i=this.vertices()[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var a=o.value,u=!0,s=!1,c=void 0;try{for(var l,f=this.outVertices(a)[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value;t.push([a,d])}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}}}catch(t){n=!0,r=t}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}return t}},{key:"outEdges",value:function(t){return this.outVertices(t).map(function(e){return[t,e]})}},{key:"inEdges",value:function(t){return this.outVertices(t).map(function(e){return[e,t]})}},{key:"toJSON",value:function(){var t=this;return{vertices:this.vertices().map(function(e){return{u:e,d:t.vertex(e)}}),edges:this.edges().map(function(e){var n=r(e,2),o=n[0],i=n[1];return{u:o,v:i,d:t.edge(o,i)}})}}},{key:"toString",value:function(){return JSON.stringify(this.toJSON())}}]),t}();t.exports=i},function(t,e,n){"use strict";var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=n(93);t.exports=function(t){var e=new o,n=!0,i=!1,a=void 0;try{for(var u,s=t.vertices()[Symbol.iterator]();!(n=(u=s.next()).done);n=!0){var c=u.value;e.addVertex(c,t.vertex(c))}}catch(t){i=!0,a=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw a}}var l=!0,f=!1,d=void 0;try{for(var h,p=t.vertices()[Symbol.iterator]();!(l=(h=p.next()).done);l=!0){var y=h.value,g=!0,v=!1,m=void 0;try{for(var b,_=t.children(y)[Symbol.iterator]();!(g=(b=_.next()).done);g=!0){var w=b.value;e.setChild(y,w)}}catch(t){v=!0,m=t}finally{try{!g&&_.return&&_.return()}finally{if(v)throw m}}}}catch(t){f=!0,d=t}finally{try{!l&&p.return&&p.return()}finally{if(f)throw d}}var E=!0,x=!1,k=void 0;try{for(var S,M=t.edges()[Symbol.iterator]();!(E=(S=M.next()).done);E=!0){var C=S.value,A=r(C,2),P=A[0],T=A[1];e.addEdge(P,T,t.edge(P,T))}}catch(t){x=!0,k=t}finally{try{!E&&M.return&&M.return()}finally{if(x)throw k}}return e}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=n(92),i=n(94),a=n(213),u=n(215),s=n(216),c=function(t,e,n,r,i,a){var u=new o,s=!0,c=!1,l=void 0;try{for(var f,d=e[Symbol.iterator]();!(s=(f=d.next()).done);s=!0){var h=f.value;u.addVertex(h,t.vertex(h))}}catch(t){c=!0,l=t}finally{try{!s&&d.return&&d.return()}finally{if(c)throw l}}var p=!0,y=!1,g=void 0;try{for(var v,m=n[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value;u.addVertex(b,t.vertex(b))}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}var _=!0,w=!1,E=void 0;try{for(var x,k=e[Symbol.iterator]();!(_=(x=k.next()).done);_=!0){var S=x.value,M=!0,C=!1,A=void 0;try{for(var P,T=n[Symbol.iterator]();!(M=(P=T.next()).done);M=!0){var N=P.value;t.edge(S,N)&&u.addEdge(S,N,t.edge(S,N))}}catch(t){C=!0,A=t}finally{try{!M&&T.return&&T.return()}finally{if(C)throw A}}}}catch(t){w=!0,E=t}finally{try{!_&&k.return&&k.return()}finally{if(w)throw E}}var O=!0,D=!1,R=void 0;try{for(var I,L=r(u,e,n)[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value,B=a(t,F.source,F.target);if(!t.vertex(B)){t.addVertex(B,i(F.source,F.target));var U=!0,j=!1,z=void 0;try{for(var V,W=F.source[Symbol.iterator]();!(U=(V=W.next()).done);U=!0){var Y=V.value;t.addEdge(Y,B)}}catch(t){j=!0,z=t}finally{try{!U&&W.return&&W.return()}finally{if(j)throw z}}var q=!0,H=!1,G=void 0;try{for(var X,K=F.target[Symbol.iterator]();!(q=(X=K.next()).done);q=!0){var $=X.value;t.addEdge(B,$)}}catch(t){H=!0,G=t}finally{try{!q&&K.return&&K.return()}finally{if(H)throw G}}var Q=!0,Z=!1,J=void 0;try{for(var tt,et=t.inVertices(B)[Symbol.iterator]();!(Q=(tt=et.next()).done);Q=!0){var nt=tt.value,rt=!0,ot=!1,it=void 0;try{for(var at,ut=t.outVertices(B)[Symbol.iterator]();!(rt=(at=ut.next()).done);rt=!0){var st=at.value;t.edge(nt,st)&&t.removeEdge(nt,st)}}catch(t){ot=!0,it=t}finally{try{!rt&&ut.return&&ut.return()}finally{if(ot)throw it}}}}catch(t){Z=!0,J=t}finally{try{!Q&&et.return&&et.return()}finally{if(Z)throw J}}}}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}},l=new WeakMap,f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l.set(this,{layerAssignment:new a.QuadHeuristic,method:s,dummy:function(){return{dummy:!0}},idGenerator:function(){return Symbol("")}})}return r(t,[{key:"transform",value:function(t){for(var e=this.layerAssignment().call(t),n=u(t,e),r=0;r<n.length-1;++r){var o=n[r],i=new Set,a=!0,s=!1,l=void 0;try{for(var f,d=o[Symbol.iterator]();!(a=(f=d.next()).done);a=!0){var h=f.value,p=!0,y=!1,g=void 0;try{for(var v,m=t.outVertices(h)[Symbol.iterator]();!(p=(v=m.next()).done);p=!0){var b=v.value;i.add(b)}}catch(t){y=!0,g=t}finally{try{!p&&m.return&&m.return()}finally{if(y)throw g}}}}catch(t){s=!0,l=t}finally{try{!a&&d.return&&d.return()}finally{if(s)throw l}}c(t,o,Array.from(i.values()),this.method(),this.dummy(),this.idGenerator())}return t}},{key:"layerAssignment",value:function(){return i(this,l,"layerAssignment",arguments)}},{key:"method",value:function(){return i(this,l,"method",arguments)}},{key:"dummy",value:function(){return i(this,l,"dummy",arguments)}},{key:"idGenerator",value:function(){return i(this,l,"idGenerator",arguments)}}]),t}();t.exports=f},function(t,e,n){"use strict";var r=n(95),o=n(214);t.exports={LongestPath:r,QuadHeuristic:o}},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var i=n(94),a=n(95),u=new WeakMap,s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),u.set(this,{repeat:4})}return r(t,[{key:"call",value:function(t){return function(t,e){var n=(new a).call(t),r=1/0,i=-1/0,u=!0,s=!1,c=void 0;try{for(var l,f=t.vertices()[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value;r=Math.min(r,n[d]),i=Math.max(i,n[d])}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}var h=!0,p=!1,y=void 0;try{for(var g,v=t.vertices()[Symbol.iterator]();!(h=(g=v.next()).done);h=!0){var m=g.value;0===t.inDegree(m)?n[m]=0:n[m]-=r}}catch(t){p=!0,y=t}finally{try{!h&&v.return&&v.return()}finally{if(p)throw y}}for(var b=t.vertices().filter(function(e){return t.inDegree(e)>0&&t.outDegree(e)>0}),_={},w=function(t,e){return _[e]-_[t]},E=0;E<e;++E){var x=!0,k=!1,S=void 0;try{for(var M,C=t.vertices()[Symbol.iterator]();!(x=(M=C.next()).done);x=!0){var A=M.value;_[A]=0}}catch(t){k=!0,S=t}finally{try{!x&&C.return&&C.return()}finally{if(k)throw S}}var P=!0,T=!1,N=void 0;try{for(var O,D=t.edges()[Symbol.iterator]();!(P=(O=D.next()).done);P=!0){var R=O.value,I=o(R,2),L=I[0],F=I[1],B=n[F]-n[L];_[L]+=B,_[F]+=B}}catch(t){T=!0,N=t}finally{try{!P&&D.return&&D.return()}finally{if(T)throw N}}b.sort(w);var U=!0,j=!1,z=void 0;try{for(var V,W=b[Symbol.iterator]();!(U=(V=W.next()).done);U=!0){var Y=V.value,q=0,H=0,G=-1/0,X=1/0,K=!0,$=!1,Q=void 0;try{for(var Z,J=t.inVertices(Y)[Symbol.iterator]();!(K=(Z=J.next()).done);K=!0){var tt=n[Z.value];G=Math.max(G,tt),q+=tt,H+=1}}catch(t){$=!0,Q=t}finally{try{!K&&J.return&&J.return()}finally{if($)throw Q}}var et=!0,nt=!1,rt=void 0;try{for(var ot,it=t.outVertices(Y)[Symbol.iterator]();!(et=(ot=it.next()).done);et=!0)tt=n[ot.value],X=Math.min(X,tt),q+=tt,H+=1}catch(t){nt=!0,rt=t}finally{try{!et&&it.return&&it.return()}finally{if(nt)throw rt}}n[Y]=Math.min(X-1,Math.max(G+1,Math.round(q/H)))}}catch(t){j=!0,z=t}finally{try{!U&&W.return&&W.return()}finally{if(j)throw z}}}return n}(t,this.repeat())}},{key:"repeat",value:function(){return i(this,u,"repeat",arguments)}}]),t}();t.exports=s},function(t,e,n){"use strict";t.exports=function(t,e,n){var r=[],o=!0,i=!1,a=void 0;try{for(var u,s=t.vertices()[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value,l=e[c];void 0===r[l]&&(r[l]=[]),r[l].push(c)}}catch(t){i=!0,a=t}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}if(n){for(var f=0;f<r.length;++f)void 0===r[f]&&(r[f]=[]);return r}return r.filter(function(t){return void 0!==t})}},function(t,e,n){"use strict";t.exports=function(t,e,n){if(0===e.length||0===n.length)return[];var r=t.numEdges(),o={},i=function(t,e,n){var r=new Set(e),o={},i=!0,a=!1,u=void 0;try{for(var s,c=n[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;o[l]=new Set;var f=!0,d=!1,h=void 0;try{for(var p,y=t.inVertices(l)[Symbol.iterator]();!(f=(p=y.next()).done);f=!0){var g=p.value;r.has(g)&&o[l].add(g)}}catch(t){d=!0,h=t}finally{try{!f&&y.return&&y.return()}finally{if(d)throw h}}}}catch(t){a=!0,u=t}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}return o}(t,e,n),a=function(t){return o[t]},u=function(t,e){return i[e].size-i[t].size},s=function(t,e){var n=0,r=!0,o=!1,a=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done);r=!0){var c=u.value,l=!0,f=!1,d=void 0;try{for(var h,p=e[Symbol.iterator]();!(l=(h=p.next()).done);l=!0){var y=h.value;i[y].has(c)&&(n+=1)}}catch(t){f=!0,d=t}finally{try{!l&&p.return&&p.return()}finally{if(f)throw d}}}}catch(t){o=!0,a=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n-t.length-e.length};n=Array.from(n);for(var c=[],l=0,f=0;f<r;++f){var d=!0,h=!1,p=void 0;try{for(var y,g=e[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;o[v]=!0}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}if(n.sort(u),i[n[l]].size<=0)break;for(var m=-1,b=void 0,_=void 0,w=[],E=l;E<n.length;++E){var x=n[E],k=!0,S=!1,M=void 0;try{for(var C,A=e[Symbol.iterator]();!(k=(C=A.next()).done);k=!0){var P=C.value;o[P]&&(t.edge(P,x)||(o[P]=!1))}}catch(t){S=!0,M=t}finally{try{!k&&A.return&&A.return()}finally{if(S)throw M}}w.push(x);var T=e.filter(a),N=s(T,w);N>m&&(m=N,b=T,_=Array.from(w))}if(m>-1){var O=!0,D=!1,R=void 0;try{for(var I,L=_[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value,B=!0,U=!1,j=void 0;try{for(var z,V=b[Symbol.iterator]();!(B=(z=V.next()).done);B=!0){var W=z.value;i[F].delete(W)}}catch(t){U=!0,j=t}finally{try{!B&&V.return&&V.return()}finally{if(U)throw j}}}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}c.push({source:Array.from(b),target:Array.from(_)}),l=0}else l+=1;if(l>=n.length)break}return c}},function(t,e,n){"use strict";var r=function(t){return t.sort(),t.map(function(t){return t.toString()}).join(",")};t.exports=function(t,e,n,o,i){var a=new Map,u=!0,s=!1,c=void 0;try{for(var l,f=e[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value,h=t.outVertices(d),p=new Set,y=new Set(h);a.set(r(h),{source:p,target:y})}}catch(t){s=!0,c=t}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}var g=!0,v=!1,m=void 0;try{for(var b,_=a.keys()[Symbol.iterator]();!(g=(b=_.next()).done);g=!0){var w=b.value,E=new Map,x=a.get(w),k=x.source,S=x.target;if(0===k.size){var M=!0,C=!1,A=void 0;try{for(var P,T=S[Symbol.iterator]();!(M=(P=T.next()).done);M=!0){var N=P.value,O=!0,D=!1,R=void 0;try{for(var I,L=t.inVertices(N)[Symbol.iterator]();!(O=(I=L.next()).done);O=!0){var F=I.value;E.has(F)||E.set(F,0),E.set(F,E.get(F)+1)}}catch(t){D=!0,R=t}finally{try{!O&&L.return&&L.return()}finally{if(D)throw R}}}}catch(t){C=!0,A=t}finally{try{!M&&T.return&&T.return()}finally{if(C)throw A}}var B=!0,U=!1,j=void 0;try{for(var z,V=E.keys()[Symbol.iterator]();!(B=(z=V.next()).done);B=!0){var W=z.value;E.get(W)>=o*S.size&&k.add(W)}}catch(t){U=!0,j=t}finally{try{!B&&V.return&&V.return()}finally{if(U)throw j}}}else{var Y=!0,q=!1,H=void 0;try{for(var G,X=k[Symbol.iterator]();!(Y=(G=X.next()).done);Y=!0){var K=G.value,$=!0,Q=!1,Z=void 0;try{for(var J,tt=t.outVertices(K)[Symbol.iterator]();!($=(J=tt.next()).done);$=!0){var et=J.value;E.has(et)||E.set(et,0),E.set(et,E.get(et)+1)}}catch(t){Q=!0,Z=t}finally{try{!$&&tt.return&&tt.return()}finally{if(Q)throw Z}}}}catch(t){q=!0,H=t}finally{try{!Y&&X.return&&X.return()}finally{if(q)throw H}}var nt=!0,rt=!1,ot=void 0;try{for(var it,at=E.keys()[Symbol.iterator]();!(nt=(it=at.next()).done);nt=!0){var ut=it.value;E.get(ut)>=o*k.size&&S.add(ut)}}catch(t){rt=!0,ot=t}finally{try{!nt&&at.return&&at.return()}finally{if(rt)throw ot}}}}}catch(t){v=!0,m=t}finally{try{!g&&_.return&&_.return()}finally{if(v)throw m}}return function(t){var e=Array.from(t);e.sort(function(t,e){return e.source.length+e.target.length-(t.source.length+t.target.length)});for(var n=e.map(function(){return!1}),r=e.length,o=function(t){if(n[t])return"continue";for(var o=e[t],i=new Set(o.source),a=new Set(o.target),u=t+1;u<r;++u){var s=e[u];s.source.every(function(t){return i.has(t)})&&s.target.every(function(t){return a.has(t)})&&(n[u]=!0)}},i=0;i<r;++i)o(i);return e.filter(function(t,e){return!n[e]})}(Array.from(a.values()).filter(function(e){var n=e.source,r=e.target,o=0,a=!0,u=!1,s=void 0;try{for(var c,l=n[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=!0,h=!1,p=void 0;try{for(var y,g=r[Symbol.iterator]();!(d=(y=g.next()).done);d=!0){var v=y.value;t.edge(f,v)&&(o+=1)}}catch(t){h=!0,p=t}finally{try{!d&&g.return&&g.return()}finally{if(h)throw p}}}}catch(t){u=!0,s=t}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return o>=i}).map(function(t){var e=t.source,n=t.target;return{source:Array.from(e),target:Array.from(n)}}))}},function(t,e,n){"use strict";n.r(e);var r=n(25),o=n(1),i=n(0),a=n(19);const u=t=>{if(0===t.size)return{left:0,top:0,layoutWidth:0,layoutHeight:0};t=Array.from(t.values());const e=Math.min(...t.map(({x:t,width:e})=>t-e/2)),n=Math.max(...t.map(({x:t,width:e})=>t+e/2)),r=Math.min(...t.map(({y:t,height:e})=>t-e/2));return{left:e,top:r,layoutWidth:n-e,layoutHeight:Math.max(...t.map(({y:t,height:e})=>t+e/2))-r}},s=(t,e,n,r,o,i,a)=>{if(0===t||0===e)return{x:0,y:0,k:1};const u=o-2*a,s=i-2*a,c=u/t,l=s/e,f=Math.min(c,l);return{x:c<l?0:(u-t*f)/2,y:l<c?0:(s-e*f)/2,k:f}};var c=n(3);const l=(t,e,n)=>(e-t)*n+t,f=(t,e,n)=>d(t,e,n),d=(t,e,n)=>{const r=["u","type","label","labelFontFamily","d"],o=["x","y","width","height","strokeWidth","labelStrokeWidth","labelFontSize","alpha"],i=["fillColor","strokeColor","labelFillColor","labelStrokeColor"],a={};for(const t of r)a[t]=e[t];for(const r of o)a[r]=l(t[r],e[r],n);for(const r of i)a[r]=Object(c.q)(t[r],e[r])(n);return a},h=(t,e,n)=>{const r=["u","v","type","sourceMarkerShape","targetMarkerShape","label","labelFontFamily","d"],o=["strokeWidth","sourceMarkerSize","targetMarkerSize","labelStrokeWidth","labelFontSize","alpha"],i=["strokeColor","labelFillColor","labelStrokeColor"],a={};for(const t of r)a[t]=e[t];for(const r of o)a[r]=l(t[r],e[r],n);for(const r of i)a[r]=Object(c.q)(t[r],e[r])(n);return a.points=t.points.map(([t,r],o)=>[l(t,e.points[o][0],n),l(r,e.points[o][1],n)]),a},p=(t,e)=>{return{update:{groups:e.groupIds.filter(e=>t.groups.has(e)).map(n=>({current:t.groups.get(n),next:e.groups.get(n)})),vertices:e.vertexIds.filter(e=>t.vertices.has(e)).map(n=>({current:t.vertices.get(n),next:e.vertices.get(n)})),edges:e.edgeIds.filter(([n,r])=>{if(!t.edges.has(n)||!t.edges.get(n).has(r))return!1;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type===i.type&&o.points.length===i.points.length}).map(([n,r])=>({current:t.edges.get(n).get(r),next:e.edges.get(n).get(r)}))},enter:{groups:e.groupIds.filter(e=>!t.groups.has(e)).map(t=>e.groups.get(t)),vertices:e.vertexIds.filter(e=>!t.vertices.has(e)).map(t=>e.vertices.get(t)),edges:e.edgeIds.filter(([n,r])=>{if(!t.edges.has(n)||!t.edges.get(n).has(r))return!0;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type!==i.type||o.points.length!==i.points.length}).map(([t,n])=>e.edges.get(t).get(n))},exit:{groups:t.groupIds.filter(t=>!e.groups.has(t)).map(e=>t.groups.get(e)),vertices:t.vertexIds.filter(t=>!e.vertices.has(t)).map(e=>t.vertices.get(e)),edges:t.edgeIds.filter(([n,r])=>{if(!e.edges.has(n)||!e.edges.get(n).has(r))return!0;const o=e.edges.get(n).get(r),i=t.edges.get(n).get(r);return o.type!==i.type||o.points.length!==i.points.length}).map(([e,n])=>t.edges.get(e).get(n))}}},y=(t,e)=>{t.save(),e(),t.restore()},g=(t,e)=>{const{labelFillColor:n,labelStrokeColor:r,labelStrokeWidth:o,labelFontSize:i,labelFontFamily:a}=e;t.fillStyle=n.toString(),t.strokeStyle=r.toString(),t.lineWidth=o,t.font=`${i}px ${a}`},v=(t,e)=>{const{type:n,x:r,y:o,width:i,height:a,label:u}=e;u&&y(t,()=>{switch(g(t,e),n){case"circle":t.textAlign="center",t.textBaseline="top",t.translate(r,o-a/2);break;case"rect":t.textAlign="left",t.textBaseline="top",t.translate(r-i/2+5,o-a/2+5)}e.labelStrokeWidth>0&&t.strokeText(u,0,0),t.fillText(u,0,0)})},m=(t,e)=>{const{type:n,u:r,x:o,y:i,width:a,height:u,strokeWidth:s}=e;y(t,()=>{t.translate(o,i),y(t,()=>{switch(((t,e)=>{const{fillColor:n,strokeColor:r,strokeWidth:o}=e;t.fillStyle=n.toString(),t.strokeStyle=r.toString(),t.lineWidth=o})(t,e),t.beginPath(),n){case"circle":((t,e,n)=>{t.ellipse(0,0,e/2,n/2,0,0,2*Math.PI)})(t,a,u);break;case"rect":((t,e,n)=>{t.moveTo(-e/2,-n/2),t.lineTo(e/2,-n/2),t.lineTo(e/2,n/2),t.lineTo(-e/2,n/2),t.closePath()})(t,a,u);break;default:throw new Error(`Unknown type "${n}"`)}t.closePath(),t.fill(),s>0&&t.stroke()}),t.addHitRegion&&t.addHitRegion({id:JSON.stringify({id:r})})})},b=(t,e)=>{const{x:n,y:r,label:o}=e;o&&y(t,()=>{g(t,e),t.textAlign="center",t.textBaseline="middle",e.labelStrokeWidth>0&&t.strokeText(o,n,r),t.fillText(o,n,r)})},_=(t,e)=>{const{u:n,v:r,points:o}=e;y(t,()=>{const e=o[0][0],i=o[0][1],a=o[o.length-1][0],u=o[o.length-1][1],s=Math.atan2(u-i,a-e)+Math.PI/2;t.strokeStyle="#fff",t.moveTo(e+5*Math.cos(s),i+5*Math.sin(s)),t.lineTo(a+5*Math.cos(s),u+5*Math.sin(s)),t.lineTo(a+5*Math.cos(s+Math.PI),u+5*Math.sin(s+Math.PI)),t.lineTo(e+5*Math.cos(s+Math.PI),i+5*Math.sin(s+Math.PI)),t.closePath(),t.stroke(),t.addHitRegion&&t.addHitRegion({id:JSON.stringify({source:n,target:r})})})},w=(t,e)=>{const{type:n,points:r,sourceMarkerShape:o,sourceMarkerSize:i,targetMarkerShape:a,targetMarkerSize:u}=e;y(t,()=>{switch(y(t,()=>{switch(((t,e)=>{const{strokeColor:n,strokeWidth:r}=e;t.strokeStyle=n.toString(),t.lineWidth=r})(t,e),t.beginPath(),n){case"arc":((t,e)=>{const n=e[1][0]-e[0][0],r=e[1][1]-e[0][1],o=Math.sqrt(n*n+r*r)/2,i=(e[0][0]+e[1][0])/2,a=(e[0][1]+e[1][1])/2,u=Math.atan2(r,n);t.arc(i,a,o,u,u+Math.PI)})(t,r);break;case"quadratic":((t,e)=>{const n=e.length;if(t.moveTo(e[0][0],e[0][1]),2!==n){for(let r=2;r<n-1;++r){const[n,o]=e[r-1],[i,a]=e[r],u=(i-n)/2,s=(a-o)/2;t.quadraticCurveTo(n,o,n+u,o+s)}t.quadraticCurveTo(e[n-2][0],e[n-2][1],e[n-1][0],e[n-1][1])}else t.lineTo(e[1][0],e[1][1])})(t,r);break;case"line":((t,e)=>{t.moveTo(e[0][0],e[0][1]);for(let n=1;n<e.length;++n)t.lineTo(e[n][0],e[n][1])})(t,r);break;default:throw new Error(`Unknown type "${n}"`)}t.stroke()}),o){case"circle":y(t,()=>{const[n,o]=r[0],a=i/2;t.fillStyle=e.strokeColor.toString(),t.translate(n,o),t.beginPath(),t.ellipse(0,0,a,a,0,0,2*Math.PI),t.fill()});break;case"triangle":y(t,()=>{const[n,o]=r[0],[a,u]=r[1],s=Math.atan2(o-u,n-a),c=2*i/3;t.fillStyle=e.strokeColor.toString(),t.beginPath(),t.moveTo(n+Math.cos(s)*c,o+Math.sin(s)*c),t.lineTo(n+Math.cos(s+2*Math.PI/3)*c,o+Math.sin(s+2*Math.PI/3)*c),t.lineTo(n+Math.cos(s+4*Math.PI/3)*c,o+Math.sin(s+4*Math.PI/3)*c),t.closePath(),t.fill()})}switch(a){case"circle":y(t,()=>{const[n,o]=r[r.length-1],i=u/2;t.fillStyle=e.strokeColor.toString(),t.translate(n,o),t.beginPath(),t.ellipse(0,0,i,i,0,0,2*Math.PI),t.fill()});break;case"triangle":y(t,()=>{const[n,o]=r[r.length-1],[i,a]=r[r.length-2],s=Math.atan2(o-a,n-i),c=2*u/3;t.fillStyle=e.strokeColor.toString(),t.beginPath(),t.moveTo(n+Math.cos(s)*c,o+Math.sin(s)*c),t.lineTo(n+Math.cos(s+2*Math.PI/3)*c,o+Math.sin(s+2*Math.PI/3)*c),t.lineTo(n+Math.cos(s+4*Math.PI/3)*c,o+Math.sin(s+4*Math.PI/3)*c),t.closePath(),t.fill()})}})},E=(t,e)=>{const{points:n,label:r}=e;r&&y(t,()=>{const o=(n[0][0]+n[n.length-1][0])/2,i=(n[0][1]+n[n.length-1][1])/2;g(t,e),t.textAlign="center",t.textBaseline="middle",e.labelStrokeWidth>0&&t.strokeText(r,o,i),t.fillText(r,o,i)})},x=(t,e)=>{m(t,e)},k=(t,e,n,r,o,i,a)=>{const u=a/2;if(t===n)return[0,i/2+u];const s=Math.abs((e-r)/(t-n)),c=Math.atan(s);if(c<Math.atan2(i/2,o/2+u))return[o/2+u,Math.tan(c)*(o/2+u)];if(c>Math.atan2(i/2+u,o/2))return[Math.tan(Math.PI/2-c)*(i/2+u),i/2+u];const l=-1,f=t+o/2,d=e+i/2,h=s*f+l*d+(e-s*t),p=Math.sqrt((s**2+1)*u**2-h**2);return[(-s*h-l*p)/(s**2+1)+f-t,(1*h+s*p)/(s**2+1)+d-e]},S=(t,e,n,r,o,i,a)=>{const u=2*a/3;if(t===n)return[0,i/2+u];const s=Math.abs((e-r)/(t-n)),c=Math.atan(s);return c<Math.atan2(i/2,o/2)?[o/2+Math.cos(c)*u,Math.tan(c)*o/2+Math.sin(c)*u]:[Math.tan(Math.PI/2-c)*i/2+Math.sin(Math.PI/2-c)*u,i/2+Math.cos(Math.PI/2-c)*u]},M=(t,e,n,r,o,i,a)=>{const u=a/2;if(t===n)return[0,i/2+u];const s=o/2,c=i/2,l=Math.abs((e-r)/(t-n)),f=Math.atan(l),d=s*c/Math.sqrt(l**2*s**2+c**2),h=l*d;return[d+u*Math.cos(f),h+u*Math.sin(f)]},C=(t,e,n,r,o,i,a)=>{const u=2*a/3;if(t===n)return[0,i/2+u];const s=o/2,c=i/2,l=Math.abs((e-r)/(t-n)),f=Math.atan(l),d=s*c/Math.sqrt(l**2*s**2+c**2),h=l*d;return[d+u*Math.cos(f),h+u*Math.sin(f)]},A=(t,e,n,r,o,i)=>n<o?r<i?[n+t,r+e]:[n+t,r-e]:r<i?[n-t,r+e]:[n-t,r-e],P=(t,e,n)=>"arc"===n?()=>[0,0]:"circle"===t&&"rect"===e?k:"triangle"===t&&"rect"===e?S:"circle"===t&&"circle"===e?M:"triangle"===t&&"circle"===e?C:()=>[0,0],T=(t,e,n)=>{const{points:r,sourceMarkerShape:o,sourceMarkerSize:i,targetMarkerShape:a,targetMarkerSize:u}=t,s=r.length,c=P(o,e.type,t.type),[l,f]=c(e.x,e.y,r[1][0],r[1][1],e.width,e.height,i);r[0]=A(l,f,e.x,e.y,r[1][0],r[1][1]);const d=P(a,n.type,t.type),[h,p]=d(n.x,n.y,r[s-2][0],r[s-2][1],n.width,n.height,u);r[s-1]=A(h,p,n.x,n.y,r[s-2][0],r[s-2][1])},N=(t,e)=>{const n={region:null,x0:0,y0:0};let r=!1;const o=Object(a.a)();return o.on("start",()=>{if(!t.canZoom||t.canDragNode&&i.e.sourceEvent&&i.e.sourceEvent.region){const e=i.e.sourceEvent?JSON.parse(i.e.sourceEvent.region).id:null,{x:r,y:o,k:a}=i.e.transform;n.region=e,n.x0=r/a,n.y0=o/a,e&&((t,e)=>{const n=new window.CustomEvent("nodemovestart",{detail:{id:e}});t.dispatchEvent(n)})(t,e)}}).on("zoom",()=>{const{x:r,y:o,k:a}=i.e.transform;if(t.canDragNode&&n.region){const i=n.region,u=r/a-n.x0,s=o/a-n.y0,{data:c}=e,l=c.vertices.get(i);l.x+=u,l.y+=s;for(const t of l.outEdges){const{points:e}=t;e[0][0]+=u,e[0][1]+=s,T(t,l,c.vertices.get(t.v))}for(const t of l.inEdges){const{points:e}=t;e[e.length-1][0]+=u,e[e.length-1][1]+=s,T(t,c.vertices.get(t.u),l)}n.x0=r/a,n.y0=o/a,((t,{u:e,x:n,y:r})=>{const o=new window.CustomEvent("nodemove",{detail:{id:e,x:n,y:r}});t.dispatchEvent(o)})(t,l)}else!t.canZoom&&i.e.sourceEvent||Object.assign(e.transform,{x:r,y:o,k:a})}).on("end",function(){if(!r&&(!t.canZoom||n.region)){const u=n.region;n.region=null,r=!0,Object(i.k)(this).call(o.transform,a.b.translate(e.transform.x,e.transform.y).scale(e.transform.k)),r=!1,u&&((t,e)=>{const n=new window.CustomEvent("nodemoveend",{detail:{id:e}});t.dispatchEvent(n)})(t,u)}}),o},O=()=>window.devicePixelRatio||1,D=(...t)=>{let e=t[0];const n=t[1],r=n.split(".");for(const o of r){if(!e.hasOwnProperty(o)){if(2===t.length)throw new Error(`Object doesn't have an attribute ${n}`);return t[2]}e=e[o]}return e},R=new WeakMap,I=(t,e)=>{const n=R.get(t);n.canvas.width=e*O(),n.canvas.style.width=`${e}px`},L=(t,e)=>{const n=R.get(t);n.canvas.height=e*O(),n.canvas.style.height=`${e}px`},F=(t,e,n)=>t.hasAttribute(e)?t.getAttribute(e):n,B=(t,e,n,r,o,i,a)=>{if(e<1){t.globalAlpha=1-e;for(const e of n)i(t,e)}t.globalAlpha=Math.min(1,e);for(const e of r)i(t,e);t.globalAlpha=1;for(const{current:n,next:r}of o)i(t,e<1?a(n,r,e):r)};window.customElements.define("eg-renderer",class extends window.HTMLElement{static get observedAttributes(){return["src","width","height","graph-groups-property","graph-nodes-property","graph-links-property","group-id-property","group-x-property","group-y-property","group-width-property","group-height-property","group-type-property","group-visibility-property","group-fill-color-property","group-fill-opacity-property","group-stroke-color-property","group-stroke-opacity-property","group-stroke-width-property","group-label-property","group-label-fill-color-property","group-label-fill-opacity-property","group-label-stroke-color-property","group-label-stroke-opacity-property","group-label-stroke-width-property","group-label-font-size-property","group-label-font-family-property","node-id-property","node-x-property","node-y-property","node-width-property","node-height-property","node-type-property","node-visibility-property","node-fill-color-property","node-fill-opacity-property","node-stroke-color-property","node-stroke-opacity-property","node-stroke-width-property","node-label-property","node-label-fill-color-property","node-label-fill-opacity-property","node-label-stroke-color-property","node-label-stroke-opacity-property","node-label-stroke-width-property","node-label-font-size-property","node-label-font-family-property","link-source-property","link-target-property","link-stroke-color-property","link-stroke-opacity-property","link-stroke-width-property","link-visibility-property","link-source-marker-shape-property","link-source-marker-size-property","link-target-marker-shape-property","link-target-marker-size-property","link-label-property","link-label-fill-color-property","link-label-fill-opacity-property","link-label-stroke-color-property","link-label-stroke-opacity-property","link-label-stroke-width-property","link-label-font-size-property","link-label-font-family-property","default-group-x","default-group-y","default-group-width","default-group-height","default-group-type","default-group-visibility","default-group-fill-color","default-group-fill-opacity","default-group-stroke-color","default-group-stroke-opacity","default-group-stroke-width","default-group-label-fill-color","default-group-label-fill-opacity","default-group-label-stroke-color","default-group-label-stroke-opacity","default-group-label-stroke-width","default-group-label-font-size","default-group-label-font-family","default-node-x","default-node-y","default-node-width","default-node-height","default-node-type","default-node-visibility","default-node-fill-color","default-node-fill-opacity","default-node-stroke-color","default-node-stroke-opacity","default-node-stroke-width","default-node-label","default-node-label-fill-color","default-node-label-fill-opacity","default-node-label-stroke-color","default-node-label-stroke-opacity","default-node-label-stroke-width","default-node-label-font-size","default-node-label-font-family","default-link-stroke-color","default-link-stroke-opacity","default-link-stroke-width","default-link-visibility","default-link-source-marker-shape","default-link-source-marker-size","default-link-target-marker-shape","default-link-target-marker-size","default-link-label","default-link-label-fill-color","default-link-label-fill-opacity","default-link-label-stroke-color","default-link-label-stroke-opacity","default-link-label-stroke-width","default-link-label-font-size","default-link-label-font-family"]}constructor(){super();const t={invalidate:!1,invalidatePositions:!1,originalData:null,canvas:document.createElement("canvas"),data:{groupIds:[],groups:new Map,vertexIds:[],vertices:new Map,edgeIds:[],edges:new Map},transform:{x:0,y:0,k:1},currentRegion:null,layout:{update:{groups:[],vertices:[],edges:[]},enter:{groups:[],vertices:[],edges:[]},exit:{groups:[],vertices:[],edges:[]}},margin:10,layoutTime:0,ease:r.m};t.zoom=N(this,t),R.set(this,t),Object(i.k)(t.canvas).call(t.zoom),t.canvas.addEventListener("mousemove",e=>{if(e.region){const n=JSON.parse(e.region);if(null==t.currentRegion)if(n.id){const{id:t}=n;this.dispatchEvent(new window.CustomEvent("nodemouseenter",{detail:{id:t}}))}else if(n.source&&n.target){const{source:t,target:e}=n;this.dispatchEvent(new window.CustomEvent("linkmouseenter",{detail:{source:t,target:e}}))}t.currentRegion=n}else{if(t.currentRegion){const e=t.currentRegion;if(e.id){const{id:t}=e;this.dispatchEvent(new window.CustomEvent("nodemouseleave",{detail:{id:t}}))}else if(e.source&&e.target){const{source:t,target:n}=e;this.dispatchEvent(new window.CustomEvent("linkmouseleave",{detail:{source:t,target:n}}))}}t.currentRegion=null}this.canDragNode&&e.region?JSON.parse(e.region).id&&(t.canvas.style.cursor="pointer"):this.canZoom?t.canvas.style.cursor="move":t.canvas.style.cursor="default"}),t.canvas.addEventListener("click",t=>{if(t.region){const e=JSON.parse(t.region);if(e.id){const{id:t}=e;this.dispatchEvent(new window.CustomEvent("nodeclick",{detail:{id:t}}))}else if(e.source&&e.target){const{source:t,target:n}=e;this.dispatchEvent(new window.CustomEvent("linkclick",{detail:{source:t,target:n}}))}}})}connectedCallback(){const t=R.get(this);this.appendChild(t.canvas);const e=()=>{t.invalidate&&t.originalData&&this.update(!t.invalidatePositions),t.invalidate=!1,t.invalidatePositions=!1;const n=new Date,r=this.transitionDuration,o=n>t.layoutTime?(n-t.layoutTime)/r:1/r,i=t.ease(o),a=t.canvas.getContext("2d");a.save(),a.clearRect(0,0,t.canvas.width,t.canvas.height),a.scale(O(),O()),a.translate(t.margin,t.margin),a.translate(t.transform.x,t.transform.y),a.scale(t.transform.k,t.transform.k),B(a,i,t.layout.exit.groups,t.layout.enter.groups,t.layout.update.groups,x,f),B(a,i,t.layout.exit.groups,t.layout.enter.groups,t.layout.update.groups,v,f),this.enableLinkEvents&&B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,_,h),B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,w,h),B(a,i,t.layout.exit.edges,t.layout.enter.edges,t.layout.update.edges,E,h),B(a,i,t.layout.exit.vertices,t.layout.enter.vertices,t.layout.update.vertices,m,d),B(a,i,t.layout.exit.vertices,t.layout.enter.vertices,t.layout.update.vertices,b,d),a.restore(),window.requestAnimationFrame(e)};e()}attributeChangedCallback(t,e,n){switch(t){case"src":window.fetch(n).then(t=>t.json()).then(t=>{this.dispatchEvent(new window.CustomEvent("datafetchend",{detail:t})),this.load(t)});break;case"width":I(this,n);break;case"height":L(this,n);break;default:this.invalidate()}}center(){const{canvas:t,data:e,margin:n,zoom:r}=R.get(this),o=[].concat(Array.from(e.vertices.values()),Array.from(e.groups.values())),{layoutWidth:c,layoutHeight:l,left:f,top:d}=u(o),h=t.width/O(),p=t.height/O(),{x:y,y:g,k:v}=s(c,l,f,d,h,p,n);return r.transform(Object(i.k)(t),a.b.translate(y,g).scale(v).translate(-f,-d)),this}load(t){return R.get(this).originalData=t,this.update()}update(t=!1){const e=R.get(this);e.prevData=e.data;const n=e.originalData,r=D(n,this.graphGroupsProperty,[]).filter(t=>D(t,this.groupVisibilityProperty,this.defaultGroupVisibility)).map((n,r)=>{const i=Object(o.a)(D(n,this.groupFillColorProperty,this.defaultGroupFillColor));i.opacity=+D(n,this.groupFillOpacityProperty,this.defaultGroupFillOpacity);const a=Object(o.a)(D(n,this.groupStrokeColorProperty,this.defaultGroupStrokeColor));a.opacity=+D(n,this.groupStrokeOpacityProperty,this.defaultGroupStrokeOpacity);const u=Object(o.a)(D(n,this.groupLabelFillColorProperty,this.defaultGroupLabelFillColor));u.opacity=+D(n,this.groupLabelFillOpacityProperty,this.defaultGroupLabelFillOpacity);const s=Object(o.a)(D(n,this.groupLabelStrokeColorProperty,this.defaultGroupLabelStrokeColor));s.opacity=+D(n,this.groupLabelStrokeOpacityProperty,this.defaultGroupLabelStrokeOpacity);const c=("$index"===this.groupIdProperty?r:D(n,this.groupIdProperty)).toString();return{g:c,x:t&&e.prevData.groups.has(c)?e.prevData.groups.get(c).x:+D(n,this.groupXProperty,this.defaultGroupX),y:t&&e.prevData.groups.has(c)?e.prevData.groups.get(c).y:+D(n,this.groupYProperty,this.defaultGroupY),width:+D(n,this.groupWidthProperty,this.defaultGroupWidth),height:+D(n,this.groupHeightProperty,this.defaultGroupHeight),type:D(n,this.groupTypeProperty,this.defaultGroupType),fillColor:i,strokeColor:a,strokeWidth:+D(n,this.groupStrokeWidthProperty,this.defaultGroupStrokeWidth),label:D(n,this.groupLabelProperty,this.defaultGroupLabel),labelFillColor:u,labelStrokeColor:s,labelStrokeWidth:+D(n,this.groupLabelStrokeWidthProperty,this.defaultGroupLabelStrokeWidth),labelFontSize:+D(n,this.groupLabelFontSizeProperty,this.defaultGroupLabelFontSize),labelFontFamily:D(n,this.groupLabelFontFamilyProperty,this.defaultGroupLabelFontFamily),d:n}}),i=D(n,this.graphNodesProperty).filter(t=>D(t,this.nodeVisibilityProperty,this.defaultNodeVisibility)).map((n,r)=>{const i=Object(o.a)(D(n,this.nodeFillColorProperty,this.defaultNodeFillColor));i.opacity=+D(n,this.nodeFillOpacityProperty,this.defaultNodeFillOpacity);const a=Object(o.a)(D(n,this.nodeStrokeColorProperty,this.defaultNodeStrokeColor));a.opacity=+D(n,this.nodeStrokeOpacityProperty,this.defaultNodeStrokeOpacity);const u=Object(o.a)(D(n,this.nodeLabelFillColorProperty,this.defaultNodeLabelFillColor));u.opacity=+D(n,this.nodeLabelFillOpacityProperty,this.defaultNodeLabelFillOpacity);const s=Object(o.a)(D(n,this.nodeLabelStrokeColorProperty,this.defaultNodeLabelStrokeColor));s.opacity=+D(n,this.nodeLabelStrokeOpacityProperty,this.defaultNodeLabelStrokeOpacity);const c=("$index"===this.nodeIdProperty?r:D(n,this.nodeIdProperty)).toString();return{u:c,x:t&&e.prevData.vertices.has(c)?e.prevData.vertices.get(c).x:+D(n,this.nodeXProperty,this.defaultNodeX),y:t&&e.prevData.vertices.has(c)?e.prevData.vertices.get(c).y:+D(n,this.nodeYProperty,this.defaultNodeY),width:+D(n,this.nodeWidthProperty,this.defaultNodeWidth),height:+D(n,this.nodeHeightProperty,this.defaultNodeHeight),type:D(n,this.nodeTypeProperty,this.defaultNodeType),fillColor:i,strokeColor:a,strokeWidth:+D(n,this.nodeStrokeWidthProperty,this.defaultNodeStrokeWidth),label:D(n,this.nodeLabelProperty,this.defaultNodeLabel),labelFillColor:u,labelStrokeColor:s,labelStrokeWidth:+D(n,this.nodeLabelStrokeWidthProperty,this.defaultNodeLabelStrokeWidth),labelFontSize:+D(n,this.nodeLabelFontSizeProperty,this.defaultNodeLabelFontSize),labelFontFamily:D(n,this.nodeLabelFontFamilyProperty,this.defaultNodeLabelFontFamily),inEdges:[],outEdges:[],d:n}}),a=new Map(i.map(({u:t},e)=>[t,e])),u=D(n,this.graphLinksProperty).filter(t=>D(t,this.linkVisibilityProperty,this.defaultLinkVisibility)).filter(t=>{const e=D(t,this.linkSourceProperty).toString(),n=D(t,this.linkTargetProperty).toString();return a.has(e)&&a.has(n)}).map(n=>{const r=D(n,this.linkSourceProperty).toString(),u=D(n,this.linkTargetProperty).toString(),s=Object(o.a)(D(n,this.linkStrokeColorProperty,this.defaultLinkStrokeColor));s.opacity=+D(n,this.linkStrokeOpacityProperty,this.defaultLinkStrokeOpacity);const c=Object(o.a)(D(n,this.linkLabelFillColorProperty,this.defaultLinkLabelFillColor));c.opacity=+D(n,this.linkLabelFillOpacityProperty,this.defaultLinkLabelFillOpacity);const l=Object(o.a)(D(n,this.linkLabelStrokeColorProperty,this.defaultLinkLabelStrokeColor));l.opacity=+D(n,this.linkLabelStrokeOpacityProperty,this.defaultLinkLabelStrokeOpacity);const f=i[a.get(r)],d=i[a.get(u)],h=[[f.x,f.y]];for(const[t,e]of D(n,this.linkBendsProperty,[]))h.push([t,e]);h.push([d.x,d.y]);const p={u:r,v:u,points:t&&e.prevData.edges.has(r)&&e.prevData.edges.get(r).has(u)?e.prevData.edges.get(r).get(u).points:h,type:D(n,this.linkTypeProperty,this.defaultLinkType),strokeColor:s,strokeWidth:+D(n,this.linkStrokeWidthProperty,this.defaultLinkStrokeWidth),sourceMarkerShape:D(n,this.linkSourceMarkerShapeProperty,this.defaultLinkSourceMarkerShape),sourceMarkerSize:+D(n,this.linkSourceMarkerSizeProperty,this.defaultLinkSourceMarkerSize),targetMarkerShape:D(n,this.linkTargetMarkerShapeProperty,this.defaultLinkTargetMarkerShape),targetMarkerSize:+D(n,this.linkTargetMarkerSizeProperty,this.defaultLinkTargetMarkerSize),label:D(n,this.linkLabelProperty,this.defaultLinkLabel),labelFillColor:c,labelStrokeColor:l,labelStrokeWidth:+D(n,this.linkLabelStrokeWidthProperty,this.defaultLinkLabelStrokeWidth),labelFontSize:+D(n,this.linkLabelFontSizeProperty,this.defaultLinkLabelFontSize),labelFontFamily:D(n,this.linkLabelFontFamilyProperty,this.defaultLinkLabelFontFamily),d:n};return f.outEdges.push(p),d.inEdges.push(p),p});e.data={groupIds:r.map(({g:t})=>t),groups:new Map(r.map(t=>[t.g,t])),vertexIds:i.map(({u:t})=>t),vertices:new Map(i.map(t=>[t.u,t])),edgeIds:u.map(({u:t,v:e})=>[t,e]),edges:new Map(i.map(t=>[t.u,new Map]))};for(const t of u)e.data.edges.get(t.u).set(t.v,t);this.onLayout(e.data,t);for(const[t,n]of e.data.edgeIds){const r=e.data.edges.get(t).get(n),o=e.data.vertices.get(t),i=e.data.vertices.get(n);T(r,o,i)}return e.layout=p(e.prevData,e.data),e.layoutTime=new Date,this.autoCentering&&this.center(),this.dispatchEvent(new window.CustomEvent("updateend",{detail:{preservePositions:t}})),this}onLayout(){}invalidate(){this.autoUpdate&&(R.get(this).invalidate=!0)}invalidatePositions(){this.autoUpdate&&(R.get(this).invalidatePositions=!0)}get autoUpdate(){return!this.hasAttribute("no-auto-update")}set autoUpdate(t){t?this.removeAttribute("no-auto-update"):this.setAttribute("no-auto-update","")}get autoCentering(){return!this.hasAttribute("no-auto-centering")}set autoCentering(t){t?this.removeAttribute("no-auto-centering"):this.setAttribute("no-auto-centering","")}get canZoom(){return!this.hasAttribute("no-zoom")}set canZoom(t){t?this.removeAttribute("no-zoom"):this.setAttribute("no-zoom","")}get canDragNode(){return!this.hasAttribute("no-drag-node")}set canDragNode(t){t?this.removeAttribute("no-drag-node"):this.setAttribute("no-drag-node","")}get enableLinkEvents(){return this.hasAttribute("enable-link-events")}set enableLinkEvents(t){t?this.removeAttribute("no-drag-node"):this.setAttribute("enable-link-events","")}get src(){return F(this,"src",null)}set src(t){this.setAttribute("src",t)}get width(){return F(this,"width",300)}set width(t){this.setAttribute("width",t)}get height(){return F(this,"height",150)}set height(t){this.setAttribute("height",t)}get transitionDuration(){return F(this,"transition-duration",0)}set transitionDuration(t){this.setAttribute("transition-duration",t)}get graphGroupsProperty(){return F(this,"graph-groups-property","groups")}set graphGroupsProperty(t){this.setAttribute("graph-groups-property",t)}get graphNodesProperty(){return F(this,"graph-nodes-property","nodes")}set graphNodesProperty(t){this.setAttribute("graph-nodes-property",t)}get graphLinksProperty(){return F(this,"graph-links-property","links")}set graphLinksProperty(t){this.setAttribute("graph-links-property",t)}get groupIdProperty(){return F(this,"group-id-property","$index")}set groupIdProperty(t){this.setAttribute("group-id-property",t)}get groupXProperty(){return F(this,"group-x-property","x")}set groupXProperty(t){this.setAttribute("group-x-property",t)}get groupYProperty(){return F(this,"group-y-property","y")}set groupYProperty(t){this.setAttribute("group-y-property",t)}get groupWidthProperty(){return F(this,"group-width-property","width")}set groupWidthProperty(t){this.setAttribute("group-width-property",t)}get groupHeightProperty(){return F(this,"group-height-property","height")}set groupHeightProperty(t){this.setAttribute("group-height-property",t)}get groupFillColorProperty(){return F(this,"group-fill-color-property","fillColor")}set groupFillColorProperty(t){this.setAttribute("group-fill-color-property",t)}get groupFillOpacityProperty(){return F(this,"group-fill-opacity-property","fillOpacity")}set groupFillOpacityProperty(t){this.setAttribute("group-fill-opacity-property",t)}get groupStrokeColorProperty(){return F(this,"group-stroke-color-property","strokeColor")}set groupStrokeColorProperty(t){this.setAttribute("group-stroke-color-property",t)}get groupStrokeOpacityProperty(){return F(this,"group-stroke-opacity-property","strokeOpacity")}set groupStrokeOpacityProperty(t){this.setAttribute("group-stroke-opacity-property",t)}get groupStrokeWidthProperty(){return F(this,"group-stroke-width-property","strokeWidth")}set groupStrokeWidthProperty(t){this.setAttribute("group-stroke-width-property",t)}get groupTypeProperty(){return F(this,"group-type-property","type")}set groupTypeProperty(t){this.setAttribute("group-type-property",t)}get groupVisibilityProperty(){return F(this,"group-visibility-property","visibility")}set groupVisibilityProperty(t){this.setAttribute("group-visibility-property",t)}get groupLabelProperty(){return F(this,"group-label-property","label")}set groupLabelProperty(t){this.setAttribute("group-label-property",t)}get groupLabelFillColorProperty(){return F(this,"group-label-fill-color-property","labelFillColor")}set groupLabelFillColorProperty(t){this.setAttribute("group-label-fill-color-property",t)}get groupLabelFillOpacityProperty(){return F(this,"group-label-fill-opacity-property","labelFillOpacity")}set groupLabelFillOpacityProperty(t){this.setAttribute("group-label-fill-opacity-property",t)}get groupLabelStrokeColorProperty(){return F(this,"group-label-stroke-color-property","labelStrokeColor")}set groupLabelStrokeColorProperty(t){this.setAttribute("group-label-stroke-color-property",t)}get groupLabelStrokeOpacityProperty(){return F(this,"group-label-stroke-opacity-property","labelStrokeOpacity")}set groupLabelStrokeOpacityProperty(t){this.setAttribute("group-label-stroke-opacity-property",t)}get groupLabelStrokeWidthProperty(){return F(this,"group-label-stroke-width-property","labelStrokeWidth")}set groupLabelStrokeWidthProperty(t){this.setAttribute("group-label-stroke-width-property",t)}get groupLabelFontSizeProperty(){return F(this,"group-label-font-size-property","labelFontSize")}set groupLabelFontSizeProperty(t){this.setAttribute("group-label-font-size-property",t)}get groupLabelFontFamilyProperty(){return F(this,"group-label-font-family-property","labelFontFamily")}set groupLabelFontFamilyProperty(t){this.setAttribute("group-label-font-family-property",t)}get nodeIdProperty(){return F(this,"node-id-property","$index")}set nodeIdProperty(t){this.setAttribute("node-id-property",t)}get nodeXProperty(){return F(this,"node-x-property","x")}set nodeXProperty(t){this.setAttribute("node-x-property",t)}get nodeYProperty(){return F(this,"node-y-property","y")}set nodeYProperty(t){this.setAttribute("node-y-property",t)}get nodeWidthProperty(){return F(this,"node-width-property","width")}set nodeWidthProperty(t){this.setAttribute("node-width-property",t)}get nodeHeightProperty(){return F(this,"node-height-property","height")}set nodeHeightProperty(t){this.setAttribute("node-height-property",t)}get nodeFillColorProperty(){return F(this,"node-fill-color-property","fillColor")}set nodeFillColorProperty(t){this.setAttribute("node-fill-color-property",t)}get nodeFillOpacityProperty(){return F(this,"node-fill-opacity-property","fillOpacity")}set nodeFillOpacityProperty(t){this.setAttribute("node-fill-opacity-property",t)}get nodeStrokeColorProperty(){return F(this,"node-stroke-color-property","strokeColor")}set nodeStrokeColorProperty(t){this.setAttribute("node-stroke-color-property",t)}get nodeStrokeOpacityProperty(){return F(this,"node-stroke-opacity-property","strokeOpacity")}set nodeStrokeOpacityProperty(t){this.setAttribute("node-stroke-opacity-property",t)}get nodeStrokeWidthProperty(){return F(this,"node-stroke-width-property","strokeWidth")}set nodeStrokeWidthProperty(t){this.setAttribute("node-stroke-width-property",t)}get nodeTypeProperty(){return F(this,"node-type-property","type")}set nodeTypeProperty(t){this.setAttribute("node-type-property",t)}get nodeVisibilityProperty(){return F(this,"node-visibility-property","visibility")}set nodeVisibilityProperty(t){this.setAttribute("node-visibility-property",t)}get nodeLabelProperty(){return F(this,"node-label-property","label")}set nodeLabelProperty(t){this.setAttribute("node-label-property",t)}get nodeLabelFillColorProperty(){return F(this,"node-label-fill-color-property","labelFillColor")}set nodeLabelFillColorProperty(t){this.setAttribute("node-label-fill-color-property",t)}get nodeLabelFillOpacityProperty(){return F(this,"node-label-fill-opacity-property","labelFillOpacity")}set nodeLabelFillOpacityProperty(t){this.setAttribute("node-label-fill-opacity-property",t)}get nodeLabelStrokeColorProperty(){return F(this,"node-label-stroke-color-property","labelStrokeColor")}set nodeLabelStrokeColorProperty(t){this.setAttribute("node-label-stroke-color-property",t)}get nodeLabelStrokeOpacityProperty(){return F(this,"node-label-stroke-opacity-property","labelStrokeOpacity")}set nodeLabelStrokeOpacityProperty(t){this.setAttribute("node-label-stroke-opacity-property",t)}get nodeLabelStrokeWidthProperty(){return F(this,"node-label-stroke-width-property","labelStrokeWidth")}set nodeLabelStrokeWidthProperty(t){this.setAttribute("node-label-stroke-width-property",t)}get nodeLabelFontSizeProperty(){return F(this,"node-label-font-size-property","labelFontSize")}set nodeLabelFontSizeProperty(t){this.setAttribute("node-label-font-size-property",t)}get nodeLabelFontFamilyProperty(){return F(this,"node-label-font-family-property","labelFontFamily")}set nodeLabelFontFamilyProperty(t){this.setAttribute("node-label-font-family-property",t)}get linkSourceProperty(){return F(this,"link-source-property","source")}set linkSourceProperty(t){this.setAttribute("link-source-property",t)}get linkTargetProperty(){return F(this,"link-target-property","target")}set linkTargetProperty(t){this.setAttribute("link-target-property",t)}get linkBendsProperty(){return F(this,"link-bends-property","bends")}set linkBendsProperty(t){this.setAttribute("link-bends-property",t)}get linkStrokeColorProperty(){return F(this,"link-stroke-color-property","strokeColor")}set linkStrokeColorProperty(t){this.setAttribute("link-stroke-color-property",t)}get linkStrokeOpacityProperty(){return F(this,"link-stroke-opacity-property","strokeOpacity")}set linkStrokeOpacityProperty(t){this.setAttribute("link-stroke-opacity-property",t)}get linkStrokeWidthProperty(){return F(this,"link-stroke-width-property","strokeWidth")}set linkStrokeWidthProperty(t){this.setAttribute("link-stroke-width-property",t)}get linkTypeProperty(){return F(this,"link-type-property","type")}set linkTypeProperty(t){this.setAttribute("link-type-property",t)}get linkVisibilityProperty(){return F(this,"link-visibility-property","visibility")}set linkVisibilityProperty(t){this.setAttribute("link-visibility-property",t)}get linkSourceMarkerShapeProperty(){return F(this,"link-source-marker-shape-property","sourceMarkerShape")}set linkSourceMarkerShapeProperty(t){this.setAttribute("link-source-marker-shape-property",t)}get linkSourceMarkerSizeProperty(){return F(this,"link-source-marker-size-property","sourceMarkerSize")}set linkSourceMarkerSizeProperty(t){this.setAttribute("link-source-marker-size-property",t)}get linkTargetMarkerShapeProperty(){return F(this,"link-target-marker-shape-property","targetMarkerShape")}set linkTargetMarkerShapeProperty(t){this.setAttribute("link-target-marker-shape-property",t)}get linkTargetMarkerSizeProperty(){return F(this,"link-target-marker-size-property","targetMarkerSize")}set linkTargetMarkerSizeProperty(t){this.setAttribute("link-target-marker-size-property",t)}get linkLabelProperty(){return F(this,"link-label-property","label")}set linkLabelProperty(t){this.setAttribute("link-label-property",t)}get linkLabelFillColorProperty(){return F(this,"link-label-fill-color-property","labelFillColor")}set linkLabelFillColorProperty(t){this.setAttribute("link-label-fill-color-property",t)}get linkLabelFillOpacityProperty(){return F(this,"link-label-fill-opacity-property","labelFillOpacity")}set linkLabelFillOpacityProperty(t){this.setAttribute("link-label-fill-opacity-property",t)}get linkLabelStrokeColorProperty(){return F(this,"link-label-stroke-color-property","labelStrokeColor")}set linkLabelStrokeColorProperty(t){this.setAttribute("link-label-stroke-color-property",t)}get linkLabelStrokeOpacityProperty(){return F(this,"link-label-stroke-opacity-property","labelStrokeOpacity")}set linkLabelStrokeOpacityProperty(t){this.setAttribute("link-label-stroke-opacity-property",t)}get linkLabelStrokeWidthProperty(){return F(this,"link-label-stroke-width-property","labelStrokeWidth")}set linkLabelStrokeWidthProperty(t){this.setAttribute("link-label-stroke-width-property",t)}get linkLabelFontSizeProperty(){return F(this,"link-label-font-size-property","labelFontSize")}set linkLabelFontSizeProperty(t){this.setAttribute("link-label-font-size-property",t)}get linkLabelFontFamilyProperty(){return F(this,"link-label-font-family-property","labelFontFamily")}set linkLabelFontFamilyProperty(t){this.setAttribute("link-label-font-family-property",t)}get defaultGroupX(){return F(this,"default-group-x",0)}set defaultGroupX(t){this.setAttribute("default-group-x",t)}get defaultGroupY(){return F(this,"default-group-y",0)}set defaultGroupY(t){this.setAttribute("default-group-y",t)}get defaultGroupWidth(){return F(this,"default-group-width",10)}set defaultGroupWidth(t){this.setAttribute("default-group-width",t)}get defaultGroupHeight(){return F(this,"default-group-height",10)}set defaultGroupHeight(t){this.setAttribute("default-group-height",t)}get defaultGroupFillColor(){return F(this,"default-group-fill-color","#fff")}set defaultGroupFillColor(t){this.setAttribute("default-group-fill-color",t)}get defaultGroupFillOpacity(){return F(this,"default-group-fill-opacity",1)}set defaultGroupFillOpacity(t){this.setAttribute("default-group-fill-opacity",t)}get defaultGroupStrokeColor(){return F(this,"default-group-stroke-color","#000")}set defaultGroupStrokeColor(t){this.setAttribute("default-group-stroke-color",t)}get defaultGroupStrokeOpacity(){return F(this,"default-group-stroke-opacity",1)}set defaultGroupStrokeOpacity(t){this.setAttribute("default-group-stroke-opacity",t)}get defaultGroupStrokeWidth(){return F(this,"default-group-stroke-width",1)}set defaultGroupStrokeWidth(t){this.setAttribute("default-group-stroke-width",t)}get defaultGroupType(){return F(this,"default-group-type","rect")}set defaultGroupType(t){this.setAttribute("default-group-type",t)}get defaultGroupVisibility(){return F(this,"default-group-visibility",!0)}set defaultGroupVisibility(t){this.setAttribute("default-group-visibility",t)}get defaultGroupLabel(){return F(this,"default-group-label","")}set defaultGroupLabel(t){this.setAttribute("default-group-label",t)}get defaultGroupLabelFillColor(){return F(this,"default-group-label-fill-color","#000")}set defaultGroupLabelFillColor(t){this.setAttribute("default-group-label-fill-color",t)}get defaultGroupLabelFillOpacity(){return F(this,"default-group-label-fill-opacity",1)}set defaultGroupLabelFillOpacity(t){this.setAttribute("default-group-label-fill-opacity",t)}get defaultGroupLabelStrokeColor(){return F(this,"default-group-label-stroke-color","#fff")}set defaultGroupLabelStrokeColor(t){this.setAttribute("default-group-label-stroke-color",t)}get defaultGroupLabelStrokeOpacity(){return F(this,"default-group-label-stroke-opacity",1)}set defaultGroupLabelStrokeOpacity(t){this.setAttribute("default-group-label-stroke-opacity",t)}get defaultGroupLabelStrokeWidth(){return F(this,"default-group-label-stroke-width",0)}set defaultGroupLabelStrokeWidth(t){this.setAttribute("default-group-label-stroke-width",t)}get defaultGroupLabelFontSize(){return F(this,"default-group-label-font-size",10)}set defaultGroupLabelFontSize(t){this.setAttribute("default-group-label-font-size",t)}get defaultGroupLabelFontFamily(){return F(this,"default-group-label-font-family","serif")}set defaultGroupLabelFontFamily(t){this.setAttribute("default-group-label-font-family",t)}get defaultNodeX(){return F(this,"default-node-x",0)}set defaultNodeX(t){this.setAttribute("default-node-x",t)}get defaultNodeY(){return F(this,"default-node-y",0)}set defaultNodeY(t){this.setAttribute("default-node-y",t)}get defaultNodeWidth(){return F(this,"default-node-width",10)}set defaultNodeWidth(t){this.setAttribute("default-node-width",t)}get defaultNodeHeight(){return F(this,"default-node-height",10)}set defaultNodeHeight(t){this.setAttribute("default-node-height",t)}get defaultNodeFillColor(){return F(this,"default-node-fill-color","#fff")}set defaultNodeFillColor(t){this.setAttribute("default-node-fill-color",t)}get defaultNodeFillOpacity(){return F(this,"default-node-fill-opacity",1)}set defaultNodeFillOpacity(t){this.setAttribute("default-node-fill-opacity",t)}get defaultNodeStrokeColor(){return F(this,"default-node-stroke-color","#000")}set defaultNodeStrokeColor(t){this.setAttribute("default-node-stroke-color",t)}get defaultNodeStrokeOpacity(){return F(this,"default-node-stroke-opacity",1)}set defaultNodeStrokeOpacity(t){this.setAttribute("default-node-stroke-opacity",t)}get defaultNodeStrokeWidth(){return F(this,"default-node-stroke-width",1)}set defaultNodeStrokeWidth(t){this.setAttribute("default-node-stroke-width",t)}get defaultNodeType(){return F(this,"default-node-type","circle")}set defaultNodeType(t){this.setAttribute("default-node-type",t)}get defaultNodeVisibility(){return F(this,"default-node-visibility",!0)}set defaultNodeVisibility(t){this.setAttribute("default-node-visibility",t)}get defaultNodeLabel(){return F(this,"default-node-label","")}set defaultNodeLabel(t){this.setAttribute("default-node-label",t)}get defaultNodeLabelFillColor(){return F(this,"default-node-label-fill-color","#000")}set defaultNodeLabelFillColor(t){this.setAttribute("default-node-label-fill-color",t)}get defaultNodeLabelFillOpacity(){return F(this,"default-node-label-fill-opacity",1)}set defaultNodeLabelFillOpacity(t){this.setAttribute("default-node-label-fill-opacity",t)}get defaultNodeLabelStrokeColor(){return F(this,"default-node-label-stroke-color","#fff")}set defaultNodeLabelStrokeColor(t){this.setAttribute("default-node-label-stroke-color",t)}get defaultNodeLabelStrokeOpacity(){return F(this,"default-node-label-stroke-opacity",1)}set defaultNodeLabelStrokeOpacity(t){this.setAttribute("default-node-label-stroke-opacity",t)}get defaultNodeLabelStrokeWidth(){return F(this,"default-node-label-stroke-width",0)}set defaultNodeLabelStrokeWidth(t){this.setAttribute("default-node-label-stroke-width",t)}get defaultNodeLabelFontSize(){return F(this,"default-node-label-font-size",10)}set defaultNodeLabelFontSize(t){this.setAttribute("default-node-label-font-size",t)}get defaultNodeLabelFontFamily(){return F(this,"default-node-label-font-family","serif")}set defaultNodeLabelFontFamily(t){this.setAttribute("default-node-label-font-family",t)}get defaultLinkStrokeColor(){return F(this,"default-link-stroke-color","#000")}set defaultLinkStrokeColor(t){this.setAttribute("default-link-stroke-color",t)}get defaultLinkStrokeOpacity(){return F(this,"default-link-stroke-opacity",1)}set defaultLinkStrokeOpacity(t){this.setAttribute("default-link-stroke-opacity",t)}get defaultLinkStrokeWidth(){return F(this,"default-link-stroke-width",1)}set defaultLinkStrokeWidth(t){this.setAttribute("default-link-stroke-width",t)}get defaultLinkType(){return F(this,"default-link-type","line")}set defaultLinkType(t){this.setAttribute("default-link-type",t)}get defaultLinkVisibility(){return F(this,"default-link-visibility",!0)}set defaultLinkVisibility(t){this.setAttribute("default-link-visibility",t)}get defaultLinkSourceMarkerShape(){return F(this,"default-link-source-marker-shape","none")}set defaultLinkSourceMarkerShape(t){this.setAttribute("default-link-source-marker-shape",t)}get defaultLinkSourceMarkerSize(){return F(this,"default-link-source-marker-size",5)}set defaultLinkSourceMarkerSize(t){this.setAttribute("default-link-source-marker-size",t)}get defaultLinkTargetMarkerShape(){return F(this,"default-link-target-marker-shape","none")}set defaultLinkTargetMarkerShape(t){this.setAttribute("default-link-target-marker-shape",t)}get defaultLinkTargetMarkerSize(){return F(this,"default-link-target-marker-size",5)}set defaultLinkTargetMarkerSize(t){this.setAttribute("default-link-target-marker-size",t)}get defaultLinkLabel(){return F(this,"default-link-label","")}set defaultLinkLabel(t){this.setAttribute("default-link-label",t)}get defaultLinkLabelFillColor(){return F(this,"default-link-label-fill-color","#000")}set defaultLinkLabelFillColor(t){this.setAttribute("default-link-label-fill-color",t)}get defaultLinkLabelFillOpacity(){return F(this,"default-link-label-fill-opacity",1)}set defaultLinkLabelFillOpacity(t){this.setAttribute("default-link-label-fill-opacity",t)}get defaultLinkLabelStrokeColor(){return F(this,"default-link-label-stroke-color","#fff")}set defaultLinkLabelStrokeColor(t){this.setAttribute("default-link-label-stroke-color",t)}get defaultLinkLabelStrokeOpacity(){return F(this,"default-link-label-stroke-opacity",1)}set defaultLinkLabelStrokeOpacity(t){this.setAttribute("default-link-label-stroke-opacity",t)}get defaultLinkLabelStrokeWidth(){return F(this,"default-link-label-stroke-width",0)}set defaultLinkLabelStrokeWidth(t){this.setAttribute("default-link-label-stroke-width",t)}get defaultLinkLabelFontSize(){return F(this,"default-link-label-font-size",10)}set defaultLinkLabelFontSize(t){this.setAttribute("default-link-label-font-size",t)}get defaultLinkLabelFontFamily(){return F(this,"default-link-label-font-family","serif")}set defaultLinkLabelFontFamily(t){this.setAttribute("default-link-label-font-family",t)}get data(){return R.get(this).originalData}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,